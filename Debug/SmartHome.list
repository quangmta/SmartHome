
SmartHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800b470  0800b470  0001b470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b974  0800b974  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b974  0800b974  0001b974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b97c  0800b97c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000042bc  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044a0  200044a0  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015bcd  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032f5  00000000  00000000  00035e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001358  00000000  00000000  00039120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f04  00000000  00000000  0003a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000273a7  00000000  00000000  0003b37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016dde  00000000  00000000  00062723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eee4d  00000000  00000000  00079501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006574  00000000  00000000  00168350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0016e8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b458 	.word	0x0800b458

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800b458 	.word	0x0800b458

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <PID_Calc>:
float last_error_pres=0;
float integrated_error_pres=0;
//extern UART_HandleTypeDef huart6;

int16_t PID_Calc(PidParameter PID,float current,float setPoint)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af00      	add	r7, sp, #0
 8001016:	eef0 6a40 	vmov.f32	s13, s0
 800101a:	eeb0 7a60 	vmov.f32	s14, s1
 800101e:	eef0 7a41 	vmov.f32	s15, s2
 8001022:	edc7 1a02 	vstr	s3, [r7, #8]
 8001026:	ed87 2a01 	vstr	s4, [r7, #4]
 800102a:	edc7 6a03 	vstr	s13, [r7, #12]
 800102e:	ed87 7a04 	vstr	s14, [r7, #16]
 8001032:	edc7 7a05 	vstr	s15, [r7, #20]
	int16_t pidOut=0;
 8001036:	2300      	movs	r3, #0
 8001038:	86fb      	strh	r3, [r7, #54]	; 0x36
	float pTerm = 0, iTerm = 0,dTerm = 0, dt = 10;
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
 800104c:	4b44      	ldr	r3, [pc, #272]	; (8001160 <PID_Calc+0x150>)
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t now = HAL_GetTick();
 8001050:	f001 f98c 	bl	800236c <HAL_GetTick>
 8001054:	6238      	str	r0, [r7, #32]
	if (now>timerPID_pres) dt = (float) (HAL_GetTick() - timerPID_pres);
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <PID_Calc+0x154>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a3a      	ldr	r2, [r7, #32]
 800105c:	429a      	cmp	r2, r3
 800105e:	d90b      	bls.n	8001078 <PID_Calc+0x68>
 8001060:	f001 f984 	bl	800236c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <PID_Calc+0x154>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001074:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	timerPID_pres= HAL_GetTick();
 8001078:	f001 f978 	bl	800236c <HAL_GetTick>
 800107c:	4603      	mov	r3, r0
 800107e:	4a39      	ldr	r2, [pc, #228]	; (8001164 <PID_Calc+0x154>)
 8001080:	6013      	str	r3, [r2, #0]
	float error = setPoint - current;
 8001082:	ed97 7a01 	vldr	s14, [r7, #4]
 8001086:	edd7 7a02 	vldr	s15, [r7, #8]
 800108a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108e:	edc7 7a07 	vstr	s15, [r7, #28]

	pTerm =   PID.Kp  * error;
 8001092:	edd7 7a03 	vldr	s15, [r7, #12]
 8001096:	ed97 7a07 	vldr	s14, [r7, #28]
 800109a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	integrated_error_pres += error * dt;
 80010a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <PID_Calc+0x158>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <PID_Calc+0x158>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	iTerm =   PID.Ki * integrated_error_pres/1000.0;
 80010be:	ed97 7a04 	vldr	s14, [r7, #16]
 80010c2:	4b29      	ldr	r3, [pc, #164]	; (8001168 <PID_Calc+0x158>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010cc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800116c <PID_Calc+0x15c>
 80010d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//	if(iTerm>PWM_MAX/2) iTerm=PWM_MAX/2;
//	else if(iTerm<-PWM_MAX/2) iTerm=-PWM_MAX/2;

	if ( dt != 0) {
 80010d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d014      	beq.n	8001110 <PID_Calc+0x100>
		dTerm =  1000*PID.Kd * (error-last_error_pres)/dt;
 80010e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ea:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800116c <PID_Calc+0x15c>
 80010ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <PID_Calc+0x160>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80010fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001100:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001104:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	}

	pidOut = (int16_t)(pTerm + iTerm + dTerm);
 8001110:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001114:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800111c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001128:	ee17 3a90 	vmov	r3, s15
 800112c:	86fb      	strh	r3, [r7, #54]	; 0x36

	last_error_pres = error;
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <PID_Calc+0x160>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	6013      	str	r3, [r2, #0]

	if (pidOut>PWM_MAX) pidOut=PWM_MAX;
 8001134:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800113c:	db03      	blt.n	8001146 <PID_Calc+0x136>
 800113e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001142:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001144:	e005      	b.n	8001152 <PID_Calc+0x142>
	else if(pidOut<PWM_MIN) pidOut=PWM_MIN;
 8001146:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800114a:	2b00      	cmp	r3, #0
 800114c:	da01      	bge.n	8001152 <PID_Calc+0x142>
 800114e:	2300      	movs	r3, #0
 8001150:	86fb      	strh	r3, [r7, #54]	; 0x36
	return pidOut;
 8001152:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 8001156:	4618      	mov	r0, r3
 8001158:	3738      	adds	r7, #56	; 0x38
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	41200000 	.word	0x41200000
 8001164:	20000200 	.word	0x20000200
 8001168:	20000208 	.word	0x20000208
 800116c:	447a0000 	.word	0x447a0000
 8001170:	20000204 	.word	0x20000204

08001174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <vApplicationGetIdleTaskMemory+0x30>)
 800118a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000020c 	.word	0x2000020c
 80011a4:	200002ac 	.word	0x200002ac

080011a8 <HAL_GPIO_EXTI_Callback>:
//		count++;
//	}
////	flag_adc = 1;
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Thermostat_Pin) {
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b8:	d10b      	bne.n	80011d2 <HAL_GPIO_EXTI_Callback+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4814      	ldr	r0, [pc, #80]	; (8001214 <HAL_GPIO_EXTI_Callback+0x6c>)
 80011c2:	f002 f857 	bl	8003274 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <HAL_GPIO_EXTI_Callback+0x70>)
 80011ce:	f002 f851 	bl	8003274 <HAL_GPIO_WritePin>
	}
	if (GPIO_Pin == Relay_Pin) {
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011d8:	d10a      	bne.n	80011f0 <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <HAL_GPIO_EXTI_Callback+0x6c>)
 80011e2:	f002 f847 	bl	8003274 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2108      	movs	r1, #8
 80011ea:	480a      	ldr	r0, [pc, #40]	; (8001214 <HAL_GPIO_EXTI_Callback+0x6c>)
 80011ec:	f002 f842 	bl	8003274 <HAL_GPIO_WritePin>
	}
	if (GPIO_Pin == FC_Failure_Pin) {
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2b10      	cmp	r3, #16
 80011f4:	d10a      	bne.n	800120c <HAL_GPIO_EXTI_Callback+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_GPIO_EXTI_Callback+0x6c>)
 80011fe:	f002 f839 	bl	8003274 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2102      	movs	r1, #2
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001208:	f002 f834 	bl	8003274 <HAL_GPIO_WritePin>
	}
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
	if (huart->Instance == huart6.Instance) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HAL_UART_RxCpltCallback+0x9c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d13f      	bne.n	80012b0 <HAL_UART_RxCpltCallback+0x94>
//		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
		if (!rx_index) {
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_UART_RxCpltCallback+0xa0>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10d      	bne.n	8001254 <HAL_UART_RxCpltCallback+0x38>
			for (int i = 0; i < 20; i++) {
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e007      	b.n	800124e <HAL_UART_RxCpltCallback+0x32>
				rx_buffer[i] = '\0';
 800123e:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <HAL_UART_RxCpltCallback+0xa4>)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b13      	cmp	r3, #19
 8001252:	ddf4      	ble.n	800123e <HAL_UART_RxCpltCallback+0x22>
			}
		}
		if (rx_data != '\n' && rx_data != '\r' && rx_data != '/') {
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_UART_RxCpltCallback+0xa8>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b0a      	cmp	r3, #10
 800125a:	d013      	beq.n	8001284 <HAL_UART_RxCpltCallback+0x68>
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_UART_RxCpltCallback+0xa8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b0d      	cmp	r3, #13
 8001262:	d00f      	beq.n	8001284 <HAL_UART_RxCpltCallback+0x68>
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_UART_RxCpltCallback+0xa8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b2f      	cmp	r3, #47	; 0x2f
 800126a:	d00b      	beq.n	8001284 <HAL_UART_RxCpltCallback+0x68>
			rx_buffer[rx_index++] = rx_data;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_UART_RxCpltCallback+0xa0>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	b2d1      	uxtb	r1, r2
 8001274:	4a11      	ldr	r2, [pc, #68]	; (80012bc <HAL_UART_RxCpltCallback+0xa0>)
 8001276:	7011      	strb	r1, [r2, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_UART_RxCpltCallback+0xa8>)
 800127c:	7819      	ldrb	r1, [r3, #0]
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_UART_RxCpltCallback+0xa4>)
 8001280:	5499      	strb	r1, [r3, r2]
 8001282:	e010      	b.n	80012a6 <HAL_UART_RxCpltCallback+0x8a>
		} else {
//			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
			HAL_UART_Transmit(&huart6, (uint8_t*)rx_buffer, strlen(rx_buffer), HAL_MAX_DELAY);
 8001284:	480e      	ldr	r0, [pc, #56]	; (80012c0 <HAL_UART_RxCpltCallback+0xa4>)
 8001286:	f7ff f803 	bl	8000290 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	490b      	ldr	r1, [pc, #44]	; (80012c0 <HAL_UART_RxCpltCallback+0xa4>)
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <HAL_UART_RxCpltCallback+0x9c>)
 8001296:	f003 fbec 	bl	8004a72 <HAL_UART_Transmit>
			flag_value = 1;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_UART_RxCpltCallback+0xac>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_UART_RxCpltCallback+0xa0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	4906      	ldr	r1, [pc, #24]	; (80012c4 <HAL_UART_RxCpltCallback+0xa8>)
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <HAL_UART_RxCpltCallback+0x9c>)
 80012ac:	f003 fc73 	bl	8004b96 <HAL_UART_Receive_IT>
	}
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000053c 	.word	0x2000053c
 80012bc:	200005f6 	.word	0x200005f6
 80012c0:	200005d8 	.word	0x200005d8
 80012c4:	200005f7 	.word	0x200005f7
 80012c8:	20000590 	.word	0x20000590

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b09c      	sub	sp, #112	; 0x70
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d2:	f000 ffe5 	bl	80022a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d6:	f000 f879 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012da:	f000 fa0f 	bl	80016fc <MX_GPIO_Init>
  MX_ADC1_Init();
 80012de:	f000 f8e5 	bl	80014ac <MX_ADC1_Init>
  MX_TIM1_Init();
 80012e2:	f000 f935 	bl	8001550 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80012e6:	f000 f9df 	bl	80016a8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//	HAL_ADC_Start_DMA(&hadc1, &adc_buffer, 1);
	HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 80012ea:	2201      	movs	r2, #1
 80012ec:	492c      	ldr	r1, [pc, #176]	; (80013a0 <main+0xd4>)
 80012ee:	482d      	ldr	r0, [pc, #180]	; (80013a4 <main+0xd8>)
 80012f0:	f003 fc51 	bl	8004b96 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012f4:	2108      	movs	r1, #8
 80012f6:	482c      	ldr	r0, [pc, #176]	; (80013a8 <main+0xdc>)
 80012f8:	f002 fd3e 	bl	8003d78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80012fc:	210c      	movs	r1, #12
 80012fe:	482a      	ldr	r0, [pc, #168]	; (80013a8 <main+0xdc>)
 8001300:	f002 fd3a 	bl	8003d78 <HAL_TIM_PWM_Start>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskReceiveData */
  osThreadDef(TaskReceiveData, StartTaskReceiveData, osPriorityNormal, 0, 128);
 8001304:	4b29      	ldr	r3, [pc, #164]	; (80013ac <main+0xe0>)
 8001306:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800130a:	461d      	mov	r5, r3
 800130c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskReceiveDataHandle = osThreadCreate(osThread(TaskReceiveData), NULL);
 8001318:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f004 fbf1 	bl	8005b06 <osThreadCreate>
 8001324:	4603      	mov	r3, r0
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <main+0xe4>)
 8001328:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskHeater */
  osThreadDef(TaskHeater, StartTaskHeater, osPriorityNormal, 0, 128);
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <main+0xe8>)
 800132c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001330:	461d      	mov	r5, r3
 8001332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskHeaterHandle = osThreadCreate(osThread(TaskHeater), NULL);
 800133e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fbde 	bl	8005b06 <osThreadCreate>
 800134a:	4603      	mov	r3, r0
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <main+0xec>)
 800134e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskFan */
  osThreadDef(TaskFan, StartTaskFan, osPriorityNormal, 0, 128);
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <main+0xf0>)
 8001352:	f107 041c 	add.w	r4, r7, #28
 8001356:	461d      	mov	r5, r3
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskFanHandle = osThreadCreate(osThread(TaskFan), NULL);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fbcb 	bl	8005b06 <osThreadCreate>
 8001370:	4603      	mov	r3, r0
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <main+0xf4>)
 8001374:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSendData */
  osThreadDef(TaskSendData, StartTaskSendData, osPriorityNormal, 0, 128);
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <main+0xf8>)
 8001378:	463c      	mov	r4, r7
 800137a:	461d      	mov	r5, r3
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSendDataHandle = osThreadCreate(osThread(TaskSendData), NULL);
 8001388:	463b      	mov	r3, r7
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f004 fbba 	bl	8005b06 <osThreadCreate>
 8001392:	4603      	mov	r3, r0
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <main+0xfc>)
 8001396:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001398:	f004 fbae 	bl	8005af8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800139c:	e7fe      	b.n	800139c <main+0xd0>
 800139e:	bf00      	nop
 80013a0:	200005f7 	.word	0x200005f7
 80013a4:	2000053c 	.word	0x2000053c
 80013a8:	200004f4 	.word	0x200004f4
 80013ac:	0800b480 	.word	0x0800b480
 80013b0:	20000580 	.word	0x20000580
 80013b4:	0800b4a8 	.word	0x0800b4a8
 80013b8:	20000584 	.word	0x20000584
 80013bc:	0800b4cc 	.word	0x0800b4cc
 80013c0:	20000588 	.word	0x20000588
 80013c4:	0800b4f8 	.word	0x0800b4f8
 80013c8:	2000058c 	.word	0x2000058c

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b094      	sub	sp, #80	; 0x50
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2230      	movs	r2, #48	; 0x30
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f007 fa49 	bl	8008872 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <SystemClock_Config+0xd8>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <SystemClock_Config+0xd8>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <SystemClock_Config+0xd8>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <SystemClock_Config+0xdc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a24      	ldr	r2, [pc, #144]	; (80014a8 <SystemClock_Config+0xdc>)
 8001416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <SystemClock_Config+0xdc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001428:	2301      	movs	r3, #1
 800142a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800142c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001436:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800143c:	230f      	movs	r3, #15
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001440:	23d8      	movs	r3, #216	; 0xd8
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001448:	2304      	movs	r3, #4
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4618      	mov	r0, r3
 8001452:	f001 ff91 	bl	8003378 <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800145c:	f000 fcc0 	bl	8001de0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001460:	f001 ff3a 	bl	80032d8 <HAL_PWREx_EnableOverDrive>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800146a:	f000 fcb9 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146e:	230f      	movs	r3, #15
 8001470:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001472:	2302      	movs	r3, #2
 8001474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800147a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800147e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	2105      	movs	r1, #5
 800148c:	4618      	mov	r0, r3
 800148e:	f002 f9eb 	bl	8003868 <HAL_RCC_ClockConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001498:	f000 fca2 	bl	8001de0 <Error_Handler>
  }
}
 800149c:	bf00      	nop
 800149e:	3750      	adds	r7, #80	; 0x50
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <MX_ADC1_Init+0x98>)
 80014c0:	4a21      	ldr	r2, [pc, #132]	; (8001548 <MX_ADC1_Init+0x9c>)
 80014c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_ADC1_Init+0x98>)
 80014c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_ADC1_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_ADC1_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_ADC1_Init+0x98>)
 80014da:	2201      	movs	r2, #1
 80014dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_ADC1_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_ADC1_Init+0x98>)
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <MX_ADC1_Init+0xa0>)
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_ADC1_Init+0x98>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_ADC1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_ADC1_Init+0x98>)
 8001508:	2201      	movs	r2, #1
 800150a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_ADC1_Init+0x98>)
 800150e:	f000 ff39 	bl	8002384 <HAL_ADC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001518:	f000 fc62 	bl	8001de0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800151c:	2305      	movs	r3, #5
 800151e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001524:	2307      	movs	r3, #7
 8001526:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_ADC1_Init+0x98>)
 800152e:	f001 f90b 	bl	8002748 <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001538:	f000 fc52 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200004ac 	.word	0x200004ac
 8001548:	40012000 	.word	0x40012000
 800154c:	0f000001 	.word	0x0f000001

08001550 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b096      	sub	sp, #88	; 0x58
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2220      	movs	r2, #32
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f007 f972 	bl	8008872 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <MX_TIM1_Init+0x150>)
 8001590:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <MX_TIM1_Init+0x154>)
 8001592:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 8001594:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <MX_TIM1_Init+0x150>)
 8001596:	2208      	movs	r2, #8
 8001598:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <MX_TIM1_Init+0x150>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80015a0:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <MX_TIM1_Init+0x150>)
 80015a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <MX_TIM1_Init+0x150>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ae:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <MX_TIM1_Init+0x150>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <MX_TIM1_Init+0x150>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ba:	4839      	ldr	r0, [pc, #228]	; (80016a0 <MX_TIM1_Init+0x150>)
 80015bc:	f002 fb34 	bl	8003c28 <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015c6:	f000 fc0b 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015d4:	4619      	mov	r1, r3
 80015d6:	4832      	ldr	r0, [pc, #200]	; (80016a0 <MX_TIM1_Init+0x150>)
 80015d8:	f002 fd58 	bl	800408c <HAL_TIM_ConfigClockSource>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015e2:	f000 fbfd 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015e6:	482e      	ldr	r0, [pc, #184]	; (80016a0 <MX_TIM1_Init+0x150>)
 80015e8:	f002 fb6d 	bl	8003cc6 <HAL_TIM_PWM_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015f2:	f000 fbf5 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001602:	4619      	mov	r1, r3
 8001604:	4826      	ldr	r0, [pc, #152]	; (80016a0 <MX_TIM1_Init+0x150>)
 8001606:	f003 f919 	bl	800483c <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001610:	f000 fbe6 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001614:	2360      	movs	r3, #96	; 0x60
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	2208      	movs	r2, #8
 8001636:	4619      	mov	r1, r3
 8001638:	4819      	ldr	r0, [pc, #100]	; (80016a0 <MX_TIM1_Init+0x150>)
 800163a:	f002 fc65 	bl	8003f08 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001644:	f000 fbcc 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164c:	220c      	movs	r2, #12
 800164e:	4619      	mov	r1, r3
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_TIM1_Init+0x150>)
 8001652:	f002 fc59 	bl	8003f08 <HAL_TIM_PWM_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800165c:	f000 fbc0 	bl	8001de0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001678:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <MX_TIM1_Init+0x150>)
 8001684:	f003 f956 	bl	8004934 <HAL_TIMEx_ConfigBreakDeadTime>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800168e:	f000 fba7 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MX_TIM1_Init+0x150>)
 8001694:	f000 fc3c 	bl	8001f10 <HAL_TIM_MspPostInit>

}
 8001698:	bf00      	nop
 800169a:	3758      	adds	r7, #88	; 0x58
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200004f4 	.word	0x200004f4
 80016a4:	40010000 	.word	0x40010000

080016a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_USART6_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_USART6_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <MX_USART6_UART_Init+0x4c>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_USART6_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_USART6_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_USART6_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_USART6_UART_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_USART6_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_USART6_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_USART6_UART_Init+0x4c>)
 80016e0:	f003 f97a 	bl	80049d8 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f000 fb79 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000053c 	.word	0x2000053c
 80016f8:	40011400 	.word	0x40011400

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <MX_GPIO_Init+0x154>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a4d      	ldr	r2, [pc, #308]	; (8001850 <MX_GPIO_Init+0x154>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <MX_GPIO_Init+0x154>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <MX_GPIO_Init+0x154>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a46      	ldr	r2, [pc, #280]	; (8001850 <MX_GPIO_Init+0x154>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <MX_GPIO_Init+0x154>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b40      	ldr	r3, [pc, #256]	; (8001850 <MX_GPIO_Init+0x154>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a3f      	ldr	r2, [pc, #252]	; (8001850 <MX_GPIO_Init+0x154>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <MX_GPIO_Init+0x154>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b39      	ldr	r3, [pc, #228]	; (8001850 <MX_GPIO_Init+0x154>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a38      	ldr	r2, [pc, #224]	; (8001850 <MX_GPIO_Init+0x154>)
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b36      	ldr	r3, [pc, #216]	; (8001850 <MX_GPIO_Init+0x154>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <MX_GPIO_Init+0x154>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a31      	ldr	r2, [pc, #196]	; (8001850 <MX_GPIO_Init+0x154>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <MX_GPIO_Init+0x154>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a4:	482b      	ldr	r0, [pc, #172]	; (8001854 <MX_GPIO_Init+0x158>)
 80017a6:	f001 fd65 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FC_Ctrl_Pin
 80017aa:	2200      	movs	r2, #0
 80017ac:	f24e 010a 	movw	r1, #57354	; 0xe00a
 80017b0:	4829      	ldr	r0, [pc, #164]	; (8001858 <MX_GPIO_Init+0x15c>)
 80017b2:	f001 fd5f 	bl	8003274 <HAL_GPIO_WritePin>
                          |Fan_Ctrl_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Thermostat_Pin Relay_Pin */
  GPIO_InitStruct.Pin = Thermostat_Pin|Relay_Pin;
 80017b6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4821      	ldr	r0, [pc, #132]	; (8001854 <MX_GPIO_Init+0x158>)
 80017ce:	f001 fb8d 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Ctrl_Pin */
  GPIO_InitStruct.Pin = Heater_Ctrl_Pin;
 80017d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Heater_Ctrl_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	481a      	ldr	r0, [pc, #104]	; (8001854 <MX_GPIO_Init+0x158>)
 80017ec:	f001 fb7e 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 FC_Ctrl_Pin
                           Fan_Ctrl_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FC_Ctrl_Pin
 80017f0:	f24e 030a 	movw	r3, #57354	; 0xe00a
 80017f4:	617b      	str	r3, [r7, #20]
                          |Fan_Ctrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4813      	ldr	r0, [pc, #76]	; (8001858 <MX_GPIO_Init+0x15c>)
 800180a:	f001 fb6f 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : FC_Failure_Pin */
  GPIO_InitStruct.Pin = FC_Failure_Pin;
 800180e:	2310      	movs	r3, #16
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001812:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001818:	2302      	movs	r3, #2
 800181a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FC_Failure_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_GPIO_Init+0x15c>)
 8001824:	f001 fb62 	bl	8002eec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2105      	movs	r1, #5
 800182c:	200a      	movs	r0, #10
 800182e:	f001 fa94 	bl	8002d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001832:	200a      	movs	r0, #10
 8001834:	f001 faad 	bl	8002d92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2105      	movs	r1, #5
 800183c:	2017      	movs	r0, #23
 800183e:	f001 fa8c 	bl	8002d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001842:	2017      	movs	r0, #23
 8001844:	f001 faa5 	bl	8002d92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40021000 	.word	0x40021000
 8001858:	40020c00 	.word	0x40020c00
 800185c:	00000000 	.word	0x00000000

08001860 <readTemp>:

/* USER CODE BEGIN 4 */
float readTemp(uint32_t timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8001868:	481d      	ldr	r0, [pc, #116]	; (80018e0 <readTemp+0x80>)
 800186a:	f000 fdcf 	bl	800240c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, timeout);
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	481b      	ldr	r0, [pc, #108]	; (80018e0 <readTemp+0x80>)
 8001872:	f000 fed0 	bl	8002616 <HAL_ADC_PollForConversion>
	float Temp = (float)HAL_ADC_GetValue(&hadc1)/4095*3.3*coeff_temp;
 8001876:	481a      	ldr	r0, [pc, #104]	; (80018e0 <readTemp+0x80>)
 8001878:	f000 ff58 	bl	800272c <HAL_ADC_GetValue>
 800187c:	ee07 0a90 	vmov	s15, r0
 8001880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001884:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018e4 <readTemp+0x84>
 8001888:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800188c:	ee16 0a90 	vmov	r0, s13
 8001890:	f7fe fe6a 	bl	8000568 <__aeabi_f2d>
 8001894:	a310      	add	r3, pc, #64	; (adr r3, 80018d8 <readTemp+0x78>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe febd 	bl	8000618 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <readTemp+0x88>)
 80018ac:	f7fe feb4 	bl	8000618 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f9a6 	bl	8000c08 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <readTemp+0x80>)
 80018c2:	f000 fe75 	bl	80025b0 <HAL_ADC_Stop>
	return Temp;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	ee07 3a90 	vmov	s15, r3
}
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	66666666 	.word	0x66666666
 80018dc:	400a6666 	.word	0x400a6666
 80018e0:	200004ac 	.word	0x200004ac
 80018e4:	457ff000 	.word	0x457ff000
 80018e8:	403e0000 	.word	0x403e0000

080018ec <StartTaskReceiveData>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskReceiveData */
void StartTaskReceiveData(void const * argument)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (flag_value) {
 80018f4:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <StartTaskReceiveData+0x20c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80f8 	beq.w	8001aee <StartTaskReceiveData+0x202>
			char num[30];
			uint8_t num_index = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			while (rx_buffer[num_index] != '\0') {
 8001904:	e00f      	b.n	8001926 <StartTaskReceiveData+0x3a>
				num[num_index] = rx_buffer[num_index + 1];
 8001906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001910:	497a      	ldr	r1, [pc, #488]	; (8001afc <StartTaskReceiveData+0x210>)
 8001912:	5c8a      	ldrb	r2, [r1, r2]
 8001914:	3328      	adds	r3, #40	; 0x28
 8001916:	443b      	add	r3, r7
 8001918:	f803 2c20 	strb.w	r2, [r3, #-32]
				num_index++;
 800191c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001920:	3301      	adds	r3, #1
 8001922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			while (rx_buffer[num_index] != '\0') {
 8001926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800192a:	4a74      	ldr	r2, [pc, #464]	; (8001afc <StartTaskReceiveData+0x210>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e9      	bne.n	8001906 <StartTaskReceiveData+0x1a>
			}
			switch (rx_buffer[0]) {
 8001932:	4b72      	ldr	r3, [pc, #456]	; (8001afc <StartTaskReceiveData+0x210>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	3b63      	subs	r3, #99	; 0x63
 8001938:	2b13      	cmp	r3, #19
 800193a:	f200 80d5 	bhi.w	8001ae8 <StartTaskReceiveData+0x1fc>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <StartTaskReceiveData+0x58>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001a25 	.word	0x08001a25
 8001948:	08001ac5 	.word	0x08001ac5
 800194c:	08001ae9 	.word	0x08001ae9
 8001950:	08001a57 	.word	0x08001a57
 8001954:	08001ae9 	.word	0x08001ae9
 8001958:	080019f1 	.word	0x080019f1
 800195c:	08001aa7 	.word	0x08001aa7
 8001960:	08001ae9 	.word	0x08001ae9
 8001964:	08001ae9 	.word	0x08001ae9
 8001968:	08001ae9 	.word	0x08001ae9
 800196c:	08001ae9 	.word	0x08001ae9
 8001970:	08001ae9 	.word	0x08001ae9
 8001974:	08001ae9 	.word	0x08001ae9
 8001978:	08001a89 	.word	0x08001a89
 800197c:	08001ae9 	.word	0x08001ae9
 8001980:	08001ae3 	.word	0x08001ae3
 8001984:	08001ae9 	.word	0x08001ae9
 8001988:	08001995 	.word	0x08001995
 800198c:	08001ae9 	.word	0x08001ae9
 8001990:	080019cd 	.word	0x080019cd
			case 't': {
				temp_set = atof(num);
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4618      	mov	r0, r3
 800199a:	f005 fb2f 	bl	8006ffc <atof>
 800199e:	ec53 2b10 	vmov	r2, r3, d0
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f7ff f92f 	bl	8000c08 <__aeabi_d2f>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <StartTaskReceiveData+0x214>)
 80019ae:	6013      	str	r3, [r2, #0]
				last_error_pres = 0;
 80019b0:	4b54      	ldr	r3, [pc, #336]	; (8001b04 <StartTaskReceiveData+0x218>)
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
				integrated_error_pres = 0;
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <StartTaskReceiveData+0x21c>)
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
				timerPID_pres = HAL_GetTick();
 80019c0:	f000 fcd4 	bl	800236c <HAL_GetTick>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4a51      	ldr	r2, [pc, #324]	; (8001b0c <StartTaskReceiveData+0x220>)
 80019c8:	6013      	str	r3, [r2, #0]
				break;
 80019ca:	e08d      	b.n	8001ae8 <StartTaskReceiveData+0x1fc>
			}
			case 'v': {
				flag_speed = 1;
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <StartTaskReceiveData+0x224>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
				speed_set = atof(num);
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	4618      	mov	r0, r3
 80019d8:	f005 fb10 	bl	8006ffc <atof>
 80019dc:	ec53 2b10 	vmov	r2, r3, d0
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f910 	bl	8000c08 <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a4a      	ldr	r2, [pc, #296]	; (8001b14 <StartTaskReceiveData+0x228>)
 80019ec:	6013      	str	r3, [r2, #0]
				break;
 80019ee:	e07b      	b.n	8001ae8 <StartTaskReceiveData+0x1fc>
			}
			case 'h': //heater control
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, atoi(num)); //green
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	4618      	mov	r0, r3
 80019f6:	f005 fb04 	bl	8007002 <atoi>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a04:	4844      	ldr	r0, [pc, #272]	; (8001b18 <StartTaskReceiveData+0x22c>)
 8001a06:	f001 fc35 	bl	8003274 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin,
						atoi(num));
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f005 faf7 	bl	8007002 <atoi>
 8001a14:	4603      	mov	r3, r0
				HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin,
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a1e:	483f      	ldr	r0, [pc, #252]	; (8001b1c <StartTaskReceiveData+0x230>)
 8001a20:	f001 fc28 	bl	8003274 <HAL_GPIO_WritePin>
			}
			case 'c': //frequency converter control
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, atoi(num)); //yellow
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f005 faea 	bl	8007002 <atoi>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a38:	4837      	ldr	r0, [pc, #220]	; (8001b18 <StartTaskReceiveData+0x22c>)
 8001a3a:	f001 fc1b 	bl	8003274 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin, atoi(num));
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	4618      	mov	r0, r3
 8001a44:	f005 fadd 	bl	8007002 <atoi>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2102      	movs	r1, #2
 8001a50:	4831      	ldr	r0, [pc, #196]	; (8001b18 <StartTaskReceiveData+0x22c>)
 8001a52:	f001 fc0f 	bl	8003274 <HAL_GPIO_WritePin>
			}
			case 'f': //fan control
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, atoi(num)); //red
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f005 fad1 	bl	8007002 <atoi>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6a:	482b      	ldr	r0, [pc, #172]	; (8001b18 <StartTaskReceiveData+0x22c>)
 8001a6c:	f001 fc02 	bl	8003274 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin, atoi(num));
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	4618      	mov	r0, r3
 8001a76:	f005 fac4 	bl	8007002 <atoi>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2108      	movs	r1, #8
 8001a82:	4825      	ldr	r0, [pc, #148]	; (8001b18 <StartTaskReceiveData+0x22c>)
 8001a84:	f001 fbf6 	bl	8003274 <HAL_GPIO_WritePin>
			}
			case 'p': {
				PID_TEMP.Kp = atof(num);
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f005 fab5 	bl	8006ffc <atof>
 8001a92:	ec53 2b10 	vmov	r2, r3, d0
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff f8b5 	bl	8000c08 <__aeabi_d2f>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <StartTaskReceiveData+0x234>)
 8001aa2:	6013      	str	r3, [r2, #0]
				break;
 8001aa4:	e020      	b.n	8001ae8 <StartTaskReceiveData+0x1fc>
			}
			case 'i': //
			{
				PID_TEMP.Ki = atof(num);
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 faa6 	bl	8006ffc <atof>
 8001ab0:	ec53 2b10 	vmov	r2, r3, d0
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f8a6 	bl	8000c08 <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <StartTaskReceiveData+0x234>)
 8001ac0:	6053      	str	r3, [r2, #4]
				break;
 8001ac2:	e011      	b.n	8001ae8 <StartTaskReceiveData+0x1fc>
			}
			case 'd': //
			{
				PID_TEMP.Kd = atof(num);
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f005 fa97 	bl	8006ffc <atof>
 8001ace:	ec53 2b10 	vmov	r2, r3, d0
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f897 	bl	8000c08 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <StartTaskReceiveData+0x234>)
 8001ade:	6093      	str	r3, [r2, #8]
				break;
 8001ae0:	e002      	b.n	8001ae8 <StartTaskReceiveData+0x1fc>
			}
			case 'r': {
				request = 1;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <StartTaskReceiveData+0x238>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
			}
			}
			flag_value = 0;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <StartTaskReceiveData+0x20c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
		}

		osDelay(500);
 8001aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af2:	f004 f854 	bl	8005b9e <osDelay>
		if (flag_value) {
 8001af6:	e6fd      	b.n	80018f4 <StartTaskReceiveData+0x8>
 8001af8:	20000590 	.word	0x20000590
 8001afc:	200005d8 	.word	0x200005d8
 8001b00:	20000598 	.word	0x20000598
 8001b04:	20000204 	.word	0x20000204
 8001b08:	20000208 	.word	0x20000208
 8001b0c:	20000200 	.word	0x20000200
 8001b10:	20000591 	.word	0x20000591
 8001b14:	2000059c 	.word	0x2000059c
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000592 	.word	0x20000592

08001b28 <StartTaskHeater>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskHeater */
void StartTaskHeater(void const * argument)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskHeater */
	/* Infinite loop */
	for (;;) {
		if (HAL_GPIO_ReadPin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin)
 8001b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b34:	483d      	ldr	r0, [pc, #244]	; (8001c2c <StartTaskHeater+0x104>)
 8001b36:	f001 fb85 	bl	8003244 <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d06f      	beq.n	8001c20 <StartTaskHeater+0xf8>
				&& HAL_GPIO_ReadPin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin))
 8001b40:	2108      	movs	r1, #8
 8001b42:	483b      	ldr	r0, [pc, #236]	; (8001c30 <StartTaskHeater+0x108>)
 8001b44:	f001 fb7e 	bl	8003244 <HAL_GPIO_ReadPin>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d068      	beq.n	8001c20 <StartTaskHeater+0xf8>
		{
			if (!HAL_GPIO_ReadPin(Thermostat_GPIO_Port, Thermostat_Pin))
 8001b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b52:	4836      	ldr	r0, [pc, #216]	; (8001c2c <StartTaskHeater+0x104>)
 8001b54:	f001 fb76 	bl	8003244 <HAL_GPIO_ReadPin>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d15d      	bne.n	8001c1a <StartTaskHeater+0xf2>
			{
				float sum = 0;
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
				for(uint8_t i=0;i<10;i++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	72fb      	strb	r3, [r7, #11]
 8001b68:	e00e      	b.n	8001b88 <StartTaskHeater+0x60>
				{
					sum += readTemp(1000);
 8001b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b6e:	f7ff fe77 	bl	8001860 <readTemp>
 8001b72:	eeb0 7a40 	vmov.f32	s14, s0
 8001b76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b7e:	edc7 7a03 	vstr	s15, [r7, #12]
				for(uint8_t i=0;i<10;i++)
 8001b82:	7afb      	ldrb	r3, [r7, #11]
 8001b84:	3301      	adds	r3, #1
 8001b86:	72fb      	strb	r3, [r7, #11]
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	2b09      	cmp	r3, #9
 8001b8c:	d9ed      	bls.n	8001b6a <StartTaskHeater+0x42>
				}
				temp = sum/10;
 8001b8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b92:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <StartTaskHeater+0x10c>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
				if (abs(temp - temp_set) > 2) {
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <StartTaskHeater+0x10c>)
 8001ba2:	ed93 7a00 	vldr	s14, [r3]
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <StartTaskHeater+0x110>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb4:	ee17 3a90 	vmov	r3, s15
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bfb8      	it	lt
 8001bbc:	425b      	neglt	r3, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	dd26      	ble.n	8001c10 <StartTaskHeater+0xe8>
					pwm_temp = PID_Calc(PID_TEMP, temp, temp_set);
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <StartTaskHeater+0x10c>)
 8001bc4:	ed93 6a00 	vldr	s12, [r3]
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <StartTaskHeater+0x110>)
 8001bca:	edd3 5a00 	vldr	s11, [r3]
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <StartTaskHeater+0x114>)
 8001bd0:	edd3 6a00 	vldr	s13, [r3]
 8001bd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bdc:	eeb0 2a65 	vmov.f32	s4, s11
 8001be0:	eef0 1a46 	vmov.f32	s3, s12
 8001be4:	eeb0 0a66 	vmov.f32	s0, s13
 8001be8:	eef0 0a47 	vmov.f32	s1, s14
 8001bec:	eeb0 1a67 	vmov.f32	s2, s15
 8001bf0:	f7ff fa0e 	bl	8001010 <PID_Calc>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <StartTaskHeater+0x118>)
 8001bfa:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_temp);
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <StartTaskHeater+0x118>)
 8001bfe:	881a      	ldrh	r2, [r3, #0]
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <StartTaskHeater+0x11c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c
					osDelay(1000);
 8001c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0a:	f003 ffc8 	bl	8005b9e <osDelay>
 8001c0e:	e007      	b.n	8001c20 <StartTaskHeater+0xf8>
				} else
				{
					osDelay(60000);
 8001c10:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001c14:	f003 ffc3 	bl	8005b9e <osDelay>
 8001c18:	e002      	b.n	8001c20 <StartTaskHeater+0xf8>
				}

			} else
			{
				osDelay(300000);
 8001c1a:	480b      	ldr	r0, [pc, #44]	; (8001c48 <StartTaskHeater+0x120>)
 8001c1c:	f003 ffbf 	bl	8005b9e <osDelay>
			}
		}
		osDelay(1000);
 8001c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c24:	f003 ffbb 	bl	8005b9e <osDelay>
		if (HAL_GPIO_ReadPin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin)
 8001c28:	e782      	b.n	8001b30 <StartTaskHeater+0x8>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	20000594 	.word	0x20000594
 8001c38:	20000598 	.word	0x20000598
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	200005a0 	.word	0x200005a0
 8001c44:	200004f4 	.word	0x200004f4
 8001c48:	000493e0 	.word	0x000493e0
 8001c4c:	00000000 	.word	0x00000000

08001c50 <StartTaskFan>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskFan */
void StartTaskFan(void const * argument)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskFan */
	/* Infinite loop */
	for (;;) {
		if (HAL_GPIO_ReadPin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin)) {
 8001c58:	2108      	movs	r1, #8
 8001c5a:	481f      	ldr	r0, [pc, #124]	; (8001cd8 <StartTaskFan+0x88>)
 8001c5c:	f001 faf2 	bl	8003244 <HAL_GPIO_ReadPin>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d02e      	beq.n	8001cc4 <StartTaskFan+0x74>
			if (!HAL_GPIO_ReadPin(Relay_GPIO_Port, Relay_Pin)
 8001c66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c6a:	481c      	ldr	r0, [pc, #112]	; (8001cdc <StartTaskFan+0x8c>)
 8001c6c:	f001 faea 	bl	8003244 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d126      	bne.n	8001cc4 <StartTaskFan+0x74>
					&& !HAL_GPIO_ReadPin(FC_Failure_GPIO_Port,
 8001c76:	2110      	movs	r1, #16
 8001c78:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <StartTaskFan+0x88>)
 8001c7a:	f001 fae3 	bl	8003244 <HAL_GPIO_ReadPin>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11f      	bne.n	8001cc4 <StartTaskFan+0x74>
							FC_Failure_Pin)) {
				if (flag_speed) {
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <StartTaskFan+0x90>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01b      	beq.n	8001cc4 <StartTaskFan+0x74>
					pwm_speed = (uint32_t) (speed_set * coeff_speed);
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <StartTaskFan+0x94>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc69 	bl	8000568 <__aeabi_f2d>
 8001c96:	a30e      	add	r3, pc, #56	; (adr r3, 8001cd0 <StartTaskFan+0x80>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fcbc 	bl	8000618 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ff8e 	bl	8000bc8 <__aeabi_d2uiz>
 8001cac:	4603      	mov	r3, r0
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <StartTaskFan+0x98>)
 8001cb2:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_speed);
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <StartTaskFan+0x98>)
 8001cb6:	881a      	ldrh	r2, [r3, #0]
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <StartTaskFan+0x9c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
					flag_speed = 0;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <StartTaskFan+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		osDelay(5000);
 8001cc4:	f241 3088 	movw	r0, #5000	; 0x1388
 8001cc8:	f003 ff69 	bl	8005b9e <osDelay>
		if (HAL_GPIO_ReadPin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin)) {
 8001ccc:	e7c4      	b.n	8001c58 <StartTaskFan+0x8>
 8001cce:	bf00      	nop
 8001cd0:	9999999a 	.word	0x9999999a
 8001cd4:	3fc99999 	.word	0x3fc99999
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	20000591 	.word	0x20000591
 8001ce4:	2000059c 	.word	0x2000059c
 8001ce8:	200005a2 	.word	0x200005a2
 8001cec:	200004f4 	.word	0x200004f4

08001cf0 <StartTaskSendData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskSendData */
void StartTaskSendData(void const * argument)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af06      	add	r7, sp, #24
 8001cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSendData */
	/* Infinite loop */
	for (;;) {
		if (request) {
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <StartTaskSendData+0xd0>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d05a      	beq.n	8001db6 <StartTaskSendData+0xc6>
			uint8_t state_heater = HAL_GPIO_ReadPin(Thermostat_GPIO_Port,
 8001d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d04:	482f      	ldr	r0, [pc, #188]	; (8001dc4 <StartTaskSendData+0xd4>)
 8001d06:	f001 fa9d 	bl	8003244 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	72bb      	strb	r3, [r7, #10]
			Thermostat_Pin);
			uint8_t state_fan = HAL_GPIO_ReadPin(Relay_GPIO_Port, Relay_Pin);
 8001d0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d12:	482c      	ldr	r0, [pc, #176]	; (8001dc4 <StartTaskSendData+0xd4>)
 8001d14:	f001 fa96 	bl	8003244 <HAL_GPIO_ReadPin>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	727b      	strb	r3, [r7, #9]
			uint8_t state_fc = HAL_GPIO_ReadPin(FC_Failure_GPIO_Port,
 8001d1c:	2110      	movs	r1, #16
 8001d1e:	482a      	ldr	r0, [pc, #168]	; (8001dc8 <StartTaskSendData+0xd8>)
 8001d20:	f001 fa90 	bl	8003244 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
 8001d26:	723b      	strb	r3, [r7, #8]
			FC_Failure_Pin);

			float sum = 0;
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
			for(uint8_t i=0;i<10;i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	72fb      	strb	r3, [r7, #11]
 8001d32:	e00e      	b.n	8001d52 <StartTaskSendData+0x62>
			{
				sum += readTemp(1000);
 8001d34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d38:	f7ff fd92 	bl	8001860 <readTemp>
 8001d3c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d48:	edc7 7a03 	vstr	s15, [r7, #12]
			for(uint8_t i=0;i<10;i++)
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	72fb      	strb	r3, [r7, #11]
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	d9ed      	bls.n	8001d34 <StartTaskSendData+0x44>
			}
			temp = sum/10;
 8001d58:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d5c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <StartTaskSendData+0xdc>)
 8001d66:	edc3 7a00 	vstr	s15, [r3]

//			temp = readTemp(1000);

			snprintf(Txdata, sizeof(Txdata), "%.1f %d %d %d %d\n", temp, pwm_temp, state_heater,
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <StartTaskSendData+0xdc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbfa 	bl	8000568 <__aeabi_f2d>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4915      	ldr	r1, [pc, #84]	; (8001dd0 <StartTaskSendData+0xe0>)
 8001d7a:	8809      	ldrh	r1, [r1, #0]
 8001d7c:	460d      	mov	r5, r1
 8001d7e:	7ab9      	ldrb	r1, [r7, #10]
 8001d80:	7a78      	ldrb	r0, [r7, #9]
 8001d82:	7a3c      	ldrb	r4, [r7, #8]
 8001d84:	9405      	str	r4, [sp, #20]
 8001d86:	9004      	str	r0, [sp, #16]
 8001d88:	9103      	str	r1, [sp, #12]
 8001d8a:	9502      	str	r5, [sp, #8]
 8001d8c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d90:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <StartTaskSendData+0xe4>)
 8001d92:	2132      	movs	r1, #50	; 0x32
 8001d94:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <StartTaskSendData+0xe8>)
 8001d96:	f006 fcf5 	bl	8008784 <sniprintf>
					state_fan, state_fc);
			HAL_UART_Transmit(&huart6, (uint8_t*) Txdata, strlen(Txdata),
 8001d9a:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <StartTaskSendData+0xe8>)
 8001d9c:	f7fe fa78 	bl	8000290 <strlen>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295
 8001da8:	490b      	ldr	r1, [pc, #44]	; (8001dd8 <StartTaskSendData+0xe8>)
 8001daa:	480c      	ldr	r0, [pc, #48]	; (8001ddc <StartTaskSendData+0xec>)
 8001dac:	f002 fe61 	bl	8004a72 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			request = 0;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <StartTaskSendData+0xd0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1000);
 8001db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dba:	f003 fef0 	bl	8005b9e <osDelay>
		if (request) {
 8001dbe:	e79b      	b.n	8001cf8 <StartTaskSendData+0x8>
 8001dc0:	20000592 	.word	0x20000592
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	20000594 	.word	0x20000594
 8001dd0:	200005a0 	.word	0x200005a0
 8001dd4:	0800b514 	.word	0x0800b514
 8001dd8:	200005a4 	.word	0x200005a4
 8001ddc:	2000053c 	.word	0x2000053c

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001de8:	e7fe      	b.n	8001de8 <Error_Handler+0x8>
	...

08001dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_MspInit+0x54>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_MspInit+0x54>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_MspInit+0x54>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_MspInit+0x54>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_MspInit+0x54>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_MspInit+0x54>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	210f      	movs	r1, #15
 8001e2e:	f06f 0001 	mvn.w	r0, #1
 8001e32:	f000 ff92 	bl	8002d5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800

08001e44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <HAL_ADC_MspInit+0x7c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d127      	bne.n	8001eb6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_ADC_MspInit+0x80>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <HAL_ADC_MspInit+0x80>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_ADC_MspInit+0x80>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_ADC_MspInit+0x80>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <HAL_ADC_MspInit+0x80>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_ADC_MspInit+0x80>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_Temp_Pin;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Temp_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <HAL_ADC_MspInit+0x84>)
 8001eb2:	f001 f81b 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40012000 	.word	0x40012000
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000

08001ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <HAL_TIM_Base_MspInit+0x3c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10d      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_TIM_Base_MspInit+0x40>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_TIM_Base_MspInit+0x40>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_TIM_Base_MspInit+0x40>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <HAL_TIM_MspPostInit+0x68>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d11e      	bne.n	8001f70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_TIM_MspPostInit+0x6c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_TIM_MspPostInit+0x6c>)
 8001f3c:	f043 0310 	orr.w	r3, r3, #16
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_TIM_MspPostInit+0x6c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_Heater_Pin|PWM_Fan_Pin;
 8001f4e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <HAL_TIM_MspPostInit+0x70>)
 8001f6c:	f000 ffbe 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_UART_MspInit+0x94>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d133      	bne.n	800200e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_UART_MspInit+0x98>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HAL_UART_MspInit+0x98>)
 8001fb0:	f043 0320 	orr.w	r3, r3, #32
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_UART_MspInit+0x98>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_UART_MspInit+0x98>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_UART_MspInit+0x98>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_UART_MspInit+0x98>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fde:	23c0      	movs	r3, #192	; 0xc0
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fee:	2308      	movs	r3, #8
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4809      	ldr	r0, [pc, #36]	; (8002020 <HAL_UART_MspInit+0x9c>)
 8001ffa:	f000 ff77 	bl	8002eec <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2105      	movs	r1, #5
 8002002:	2047      	movs	r0, #71	; 0x47
 8002004:	f000 fea9 	bl	8002d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002008:	2047      	movs	r0, #71	; 0x47
 800200a:	f000 fec2 	bl	8002d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40011400 	.word	0x40011400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020800 	.word	0x40020800

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <NMI_Handler+0x4>

0800202a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <MemManage_Handler+0x4>

08002036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <UsageFault_Handler+0x4>

08002042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002054:	f000 f976 	bl	8002344 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002058:	f004 fb50 	bl	80066fc <xTaskGetSchedulerState>
 800205c:	4603      	mov	r3, r0
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002062:	f004 fd91 	bl	8006b88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}

0800206a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FC_Failure_Pin);
 800206e:	2010      	movs	r0, #16
 8002070:	f001 f91a 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Thermostat_Pin);
 800207c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002080:	f001 f912 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}

08002088 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <USART6_IRQHandler+0x10>)
 800208e:	f002 fdb3 	bl	8004bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000053c 	.word	0x2000053c

0800209c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return 1;
 80020a0:	2301      	movs	r3, #1
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_kill>:

int _kill(int pid, int sig)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020b6:	f006 fc97 	bl	80089e8 <__errno>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2216      	movs	r2, #22
 80020be:	601a      	str	r2, [r3, #0]
  return -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_exit>:

void _exit (int status)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ffe7 	bl	80020ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80020de:	e7fe      	b.n	80020de <_exit+0x12>

080020e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e00a      	b.n	8002108 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020f2:	f3af 8000 	nop.w
 80020f6:	4601      	mov	r1, r0
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	60ba      	str	r2, [r7, #8]
 80020fe:	b2ca      	uxtb	r2, r1
 8002100:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	dbf0      	blt.n	80020f2 <_read+0x12>
  }

  return len;
 8002110:	687b      	ldr	r3, [r7, #4]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e009      	b.n	8002140 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	60ba      	str	r2, [r7, #8]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3301      	adds	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	429a      	cmp	r2, r3
 8002146:	dbf1      	blt.n	800212c <_write+0x12>
  }
  return len;
 8002148:	687b      	ldr	r3, [r7, #4]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <_close>:

int _close(int file)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800217a:	605a      	str	r2, [r3, #4]
  return 0;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <_isatty>:

int _isatty(int file)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <_sbrk+0x5c>)
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <_sbrk+0x60>)
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <_sbrk+0x64>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <_sbrk+0x68>)
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d207      	bcs.n	80021fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ec:	f006 fbfc 	bl	80089e8 <__errno>
 80021f0:	4603      	mov	r3, r0
 80021f2:	220c      	movs	r2, #12
 80021f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	e009      	b.n	8002210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <_sbrk+0x64>)
 800220c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20030000 	.word	0x20030000
 800221c:	00000400 	.word	0x00000400
 8002220:	200005f8 	.word	0x200005f8
 8002224:	200044a0 	.word	0x200044a0

08002228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <SystemInit+0x20>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <SystemInit+0x20>)
 8002234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800224c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002252:	490e      	ldr	r1, [pc, #56]	; (800228c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002268:	4c0b      	ldr	r4, [pc, #44]	; (8002298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002276:	f7ff ffd7 	bl	8002228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227a:	f006 fbbb 	bl	80089f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227e:	f7ff f825 	bl	80012cc <main>
  bx  lr    
 8002282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002284:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800228c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002290:	0800b984 	.word	0x0800b984
  ldr r2, =_sbss
 8002294:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002298:	200044a0 	.word	0x200044a0

0800229c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC_IRQHandler>
	...

080022a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <HAL_Init+0x40>)
 80022aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <HAL_Init+0x40>)
 80022b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_Init+0x40>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_Init+0x40>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f000 fd3b 	bl	8002d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ce:	200f      	movs	r0, #15
 80022d0:	f000 f808 	bl	80022e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d4:	f7ff fd8a 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023c00 	.word	0x40023c00

080022e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x54>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x58>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fd53 	bl	8002dae <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00e      	b.n	8002330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d80a      	bhi.n	800232e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002318:	2200      	movs	r2, #0
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f000 fd1b 	bl	8002d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <HAL_InitTick+0x5c>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	2000000c 	.word	0x2000000c
 800233c:	20000014 	.word	0x20000014
 8002340:	20000010 	.word	0x20000010

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000014 	.word	0x20000014
 8002368:	200005fc 	.word	0x200005fc

0800236c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	200005fc 	.word	0x200005fc

08002384 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e033      	b.n	8002402 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fd4e 	bl	8001e44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ca:	f023 0302 	bic.w	r3, r3, #2
 80023ce:	f043 0202 	orr.w	r2, r3, #2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fae8 	bl	80029ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f023 0303 	bic.w	r3, r3, #3
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
 80023f2:	e001      	b.n	80023f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002400:	7bfb      	ldrb	r3, [r7, #15]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_ADC_Start+0x1a>
 8002422:	2302      	movs	r3, #2
 8002424:	e0b2      	b.n	800258c <HAL_ADC_Start+0x180>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d018      	beq.n	800246e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800244c:	4b52      	ldr	r3, [pc, #328]	; (8002598 <HAL_ADC_Start+0x18c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a52      	ldr	r2, [pc, #328]	; (800259c <HAL_ADC_Start+0x190>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0c9a      	lsrs	r2, r3, #18
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002460:	e002      	b.n	8002468 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d17a      	bne.n	8002572 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ba:	d106      	bne.n	80024ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f023 0206 	bic.w	r2, r3, #6
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_ADC_Start+0x194>)
 80024da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d12a      	bne.n	8002548 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2b      	ldr	r2, [pc, #172]	; (80025a4 <HAL_ADC_Start+0x198>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d015      	beq.n	8002528 <HAL_ADC_Start+0x11c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a29      	ldr	r2, [pc, #164]	; (80025a8 <HAL_ADC_Start+0x19c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d105      	bne.n	8002512 <HAL_ADC_Start+0x106>
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_ADC_Start+0x194>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <HAL_ADC_Start+0x1a0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d136      	bne.n	800258a <HAL_ADC_Start+0x17e>
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_ADC_Start+0x194>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d130      	bne.n	800258a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d129      	bne.n	800258a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	e020      	b.n	800258a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <HAL_ADC_Start+0x198>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d11b      	bne.n	800258a <HAL_ADC_Start+0x17e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d114      	bne.n	800258a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e00b      	b.n	800258a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	2000000c 	.word	0x2000000c
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	40012300 	.word	0x40012300
 80025a4:	40012000 	.word	0x40012000
 80025a8:	40012100 	.word	0x40012100
 80025ac:	40012200 	.word	0x40012200

080025b0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Stop+0x16>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e021      	b.n	800260a <HAL_ADC_Stop+0x5a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002632:	d113      	bne.n	800265c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800263e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002642:	d10b      	bne.n	800265c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e063      	b.n	8002724 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800265c:	f7ff fe86 	bl	800236c <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002662:	e021      	b.n	80026a8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d01d      	beq.n	80026a8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_ADC_PollForConversion+0x6c>
 8002672:	f7ff fe7b 	bl	800236c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d212      	bcs.n	80026a8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d00b      	beq.n	80026a8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e03d      	b.n	8002724 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d1d6      	bne.n	8002664 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0212 	mvn.w	r2, #18
 80026be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d123      	bne.n	8002722 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11f      	bne.n	8002722 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d111      	bne.n	8002722 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d105      	bne.n	8002722 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1c>
 8002760:	2302      	movs	r3, #2
 8002762:	e113      	b.n	800298c <HAL_ADC_ConfigChannel+0x244>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b09      	cmp	r3, #9
 8002772:	d925      	bls.n	80027c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68d9      	ldr	r1, [r3, #12]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	3b1e      	subs	r3, #30
 800278a:	2207      	movs	r2, #7
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43da      	mvns	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	400a      	ands	r2, r1
 8002798:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	4603      	mov	r3, r0
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4403      	add	r3, r0
 80027b2:	3b1e      	subs	r3, #30
 80027b4:	409a      	lsls	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	e022      	b.n	8002806 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	2207      	movs	r2, #7
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	400a      	ands	r2, r1
 80027e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6919      	ldr	r1, [r3, #16]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4618      	mov	r0, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4403      	add	r3, r0
 80027fc:	409a      	lsls	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b06      	cmp	r3, #6
 800280c:	d824      	bhi.n	8002858 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	3b05      	subs	r3, #5
 8002820:	221f      	movs	r2, #31
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4618      	mov	r0, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b05      	subs	r3, #5
 800284a:	fa00 f203 	lsl.w	r2, r0, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	635a      	str	r2, [r3, #52]	; 0x34
 8002856:	e04c      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b0c      	cmp	r3, #12
 800285e:	d824      	bhi.n	80028aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	3b23      	subs	r3, #35	; 0x23
 8002872:	221f      	movs	r2, #31
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43da      	mvns	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	400a      	ands	r2, r1
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3b23      	subs	r3, #35	; 0x23
 800289c:	fa00 f203 	lsl.w	r2, r0, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
 80028a8:	e023      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b41      	subs	r3, #65	; 0x41
 80028bc:	221f      	movs	r2, #31
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	400a      	ands	r2, r1
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	3b41      	subs	r3, #65	; 0x41
 80028e6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f2:	4b29      	ldr	r3, [pc, #164]	; (8002998 <HAL_ADC_ConfigChannel+0x250>)
 80028f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a28      	ldr	r2, [pc, #160]	; (800299c <HAL_ADC_ConfigChannel+0x254>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10f      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1d8>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b12      	cmp	r3, #18
 8002906:	d10b      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_ADC_ConfigChannel+0x254>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d12b      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x23a>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_ADC_ConfigChannel+0x258>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <HAL_ADC_ConfigChannel+0x1f4>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b11      	cmp	r3, #17
 800293a:	d122      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_ADC_ConfigChannel+0x258>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d111      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_ADC_ConfigChannel+0x25c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <HAL_ADC_ConfigChannel+0x260>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	0c9a      	lsrs	r2, r3, #18
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002974:	e002      	b.n	800297c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	3b01      	subs	r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f9      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40012300 	.word	0x40012300
 800299c:	40012000 	.word	0x40012000
 80029a0:	10000012 	.word	0x10000012
 80029a4:	2000000c 	.word	0x2000000c
 80029a8:	431bde83 	.word	0x431bde83

080029ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b4:	4b79      	ldr	r3, [pc, #484]	; (8002b9c <ADC_Init+0x1f0>)
 80029b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	021a      	lsls	r2, r3, #8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6899      	ldr	r1, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <ADC_Init+0x1f4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	e00f      	b.n	8002aaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0202 	bic.w	r2, r2, #2
 8002ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7e1b      	ldrb	r3, [r3, #24]
 8002ac4:	005a      	lsls	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ae6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002af6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	3b01      	subs	r3, #1
 8002b04:	035a      	lsls	r2, r3, #13
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	e007      	b.n	8002b20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	051a      	lsls	r2, r3, #20
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b62:	025a      	lsls	r2, r3, #9
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	029a      	lsls	r2, r3, #10
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40012300 	.word	0x40012300
 8002ba0:	0f000001 	.word	0x0f000001

08002ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd6:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60d3      	str	r3, [r2, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	f003 0307 	and.w	r3, r3, #7
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db0b      	blt.n	8002c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4907      	ldr	r1, [pc, #28]	; (8002c40 <__NVIC_EnableIRQ+0x38>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	db0a      	blt.n	8002c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	490c      	ldr	r1, [pc, #48]	; (8002c90 <__NVIC_SetPriority+0x4c>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	0112      	lsls	r2, r2, #4
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	440b      	add	r3, r1
 8002c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c6c:	e00a      	b.n	8002c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4908      	ldr	r1, [pc, #32]	; (8002c94 <__NVIC_SetPriority+0x50>)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	440b      	add	r3, r1
 8002c82:	761a      	strb	r2, [r3, #24]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f1c3 0307 	rsb	r3, r3, #7
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	bf28      	it	cs
 8002cb6:	2304      	movcs	r3, #4
 8002cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2b06      	cmp	r3, #6
 8002cc0:	d902      	bls.n	8002cc8 <NVIC_EncodePriority+0x30>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3b03      	subs	r3, #3
 8002cc6:	e000      	b.n	8002cca <NVIC_EncodePriority+0x32>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	401a      	ands	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	43d9      	mvns	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	4313      	orrs	r3, r2
         );
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	; 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d10:	d301      	bcc.n	8002d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00f      	b.n	8002d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <SysTick_Config+0x40>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1e:	210f      	movs	r1, #15
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f7ff ff8e 	bl	8002c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <SysTick_Config+0x40>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2e:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <SysTick_Config+0x40>)
 8002d30:	2207      	movs	r2, #7
 8002d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	e000e010 	.word	0xe000e010

08002d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff29 	bl	8002ba4 <__NVIC_SetPriorityGrouping>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6c:	f7ff ff3e 	bl	8002bec <__NVIC_GetPriorityGrouping>
 8002d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	6978      	ldr	r0, [r7, #20]
 8002d78:	f7ff ff8e 	bl	8002c98 <NVIC_EncodePriority>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff5d 	bl	8002c44 <__NVIC_SetPriority>
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff31 	bl	8002c08 <__NVIC_EnableIRQ>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ffa2 	bl	8002d00 <SysTick_Config>
 8002dbc:	4603      	mov	r3, r0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff faca 	bl	800236c <HAL_GetTick>
 8002dd8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d008      	beq.n	8002df8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e052      	b.n	8002e9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0216 	bic.w	r2, r2, #22
 8002e06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <HAL_DMA_Abort+0x62>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0208 	bic.w	r2, r2, #8
 8002e36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e48:	e013      	b.n	8002e72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4a:	f7ff fa8f 	bl	800236c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d90c      	bls.n	8002e72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2203      	movs	r2, #3
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e015      	b.n	8002e9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e4      	bne.n	8002e4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	223f      	movs	r2, #63	; 0x3f
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e00c      	b.n	8002ede <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e177      	b.n	80031f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f08:	2201      	movs	r2, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	f040 8166 	bne.w	80031f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d005      	beq.n	8002f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d130      	bne.n	8002fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2203      	movs	r2, #3
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f74:	2201      	movs	r2, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 0201 	and.w	r2, r3, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d017      	beq.n	8002fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d123      	bne.n	8003030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0203 	and.w	r2, r3, #3
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80c0 	beq.w	80031f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b66      	ldr	r3, [pc, #408]	; (8003210 <HAL_GPIO_Init+0x324>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	4a65      	ldr	r2, [pc, #404]	; (8003210 <HAL_GPIO_Init+0x324>)
 800307c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003080:	6453      	str	r3, [r2, #68]	; 0x44
 8003082:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HAL_GPIO_Init+0x324>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308e:	4a61      	ldr	r2, [pc, #388]	; (8003214 <HAL_GPIO_Init+0x328>)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	3302      	adds	r3, #2
 8003096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	220f      	movs	r2, #15
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_GPIO_Init+0x32c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d037      	beq.n	800312a <HAL_GPIO_Init+0x23e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a57      	ldr	r2, [pc, #348]	; (800321c <HAL_GPIO_Init+0x330>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d031      	beq.n	8003126 <HAL_GPIO_Init+0x23a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a56      	ldr	r2, [pc, #344]	; (8003220 <HAL_GPIO_Init+0x334>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02b      	beq.n	8003122 <HAL_GPIO_Init+0x236>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a55      	ldr	r2, [pc, #340]	; (8003224 <HAL_GPIO_Init+0x338>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d025      	beq.n	800311e <HAL_GPIO_Init+0x232>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a54      	ldr	r2, [pc, #336]	; (8003228 <HAL_GPIO_Init+0x33c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01f      	beq.n	800311a <HAL_GPIO_Init+0x22e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a53      	ldr	r2, [pc, #332]	; (800322c <HAL_GPIO_Init+0x340>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_Init+0x22a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_GPIO_Init+0x344>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0x226>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a51      	ldr	r2, [pc, #324]	; (8003234 <HAL_GPIO_Init+0x348>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_Init+0x222>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a50      	ldr	r2, [pc, #320]	; (8003238 <HAL_GPIO_Init+0x34c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x21e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4f      	ldr	r2, [pc, #316]	; (800323c <HAL_GPIO_Init+0x350>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_Init+0x21a>
 8003102:	2309      	movs	r3, #9
 8003104:	e012      	b.n	800312c <HAL_GPIO_Init+0x240>
 8003106:	230a      	movs	r3, #10
 8003108:	e010      	b.n	800312c <HAL_GPIO_Init+0x240>
 800310a:	2308      	movs	r3, #8
 800310c:	e00e      	b.n	800312c <HAL_GPIO_Init+0x240>
 800310e:	2307      	movs	r3, #7
 8003110:	e00c      	b.n	800312c <HAL_GPIO_Init+0x240>
 8003112:	2306      	movs	r3, #6
 8003114:	e00a      	b.n	800312c <HAL_GPIO_Init+0x240>
 8003116:	2305      	movs	r3, #5
 8003118:	e008      	b.n	800312c <HAL_GPIO_Init+0x240>
 800311a:	2304      	movs	r3, #4
 800311c:	e006      	b.n	800312c <HAL_GPIO_Init+0x240>
 800311e:	2303      	movs	r3, #3
 8003120:	e004      	b.n	800312c <HAL_GPIO_Init+0x240>
 8003122:	2302      	movs	r3, #2
 8003124:	e002      	b.n	800312c <HAL_GPIO_Init+0x240>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_GPIO_Init+0x240>
 800312a:	2300      	movs	r3, #0
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	f002 0203 	and.w	r2, r2, #3
 8003132:	0092      	lsls	r2, r2, #2
 8003134:	4093      	lsls	r3, r2
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800313c:	4935      	ldr	r1, [pc, #212]	; (8003214 <HAL_GPIO_Init+0x328>)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	3302      	adds	r3, #2
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_GPIO_Init+0x354>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800316e:	4a34      	ldr	r2, [pc, #208]	; (8003240 <HAL_GPIO_Init+0x354>)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003174:	4b32      	ldr	r3, [pc, #200]	; (8003240 <HAL_GPIO_Init+0x354>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003198:	4a29      	ldr	r2, [pc, #164]	; (8003240 <HAL_GPIO_Init+0x354>)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800319e:	4b28      	ldr	r3, [pc, #160]	; (8003240 <HAL_GPIO_Init+0x354>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c2:	4a1f      	ldr	r2, [pc, #124]	; (8003240 <HAL_GPIO_Init+0x354>)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_GPIO_Init+0x354>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <HAL_GPIO_Init+0x354>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3301      	adds	r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	f67f ae84 	bls.w	8002f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800
 8003214:	40013800 	.word	0x40013800
 8003218:	40020000 	.word	0x40020000
 800321c:	40020400 	.word	0x40020400
 8003220:	40020800 	.word	0x40020800
 8003224:	40020c00 	.word	0x40020c00
 8003228:	40021000 	.word	0x40021000
 800322c:	40021400 	.word	0x40021400
 8003230:	40021800 	.word	0x40021800
 8003234:	40021c00 	.word	0x40021c00
 8003238:	40022000 	.word	0x40022000
 800323c:	40022400 	.word	0x40022400
 8003240:	40013c00 	.word	0x40013c00

08003244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
 8003260:	e001      	b.n	8003266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
 8003280:	4613      	mov	r3, r2
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003290:	e003      	b.n	800329a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	041a      	lsls	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	619a      	str	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032be:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd ff6e 	bl	80011a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40013c00 	.word	0x40013c00

080032d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_PWREx_EnableOverDrive+0x90>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_PWREx_EnableOverDrive+0x90>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_PWREx_EnableOverDrive+0x90>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_PWREx_EnableOverDrive+0x94>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003304:	f7ff f832 	bl	800236c <HAL_GetTick>
 8003308:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800330a:	e009      	b.n	8003320 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800330c:	f7ff f82e 	bl	800236c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331a:	d901      	bls.n	8003320 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e01f      	b.n	8003360 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003320:	4b13      	ldr	r3, [pc, #76]	; (8003370 <HAL_PWREx_EnableOverDrive+0x98>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d1ee      	bne.n	800330c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003334:	f7ff f81a 	bl	800236c <HAL_GetTick>
 8003338:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800333a:	e009      	b.n	8003350 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800333c:	f7ff f816 	bl	800236c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334a:	d901      	bls.n	8003350 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e007      	b.n	8003360 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_PWREx_EnableOverDrive+0x98>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335c:	d1ee      	bne.n	800333c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	420e0040 	.word	0x420e0040
 8003370:	40007000 	.word	0x40007000
 8003374:	420e0044 	.word	0x420e0044

08003378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e267      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d075      	beq.n	8003482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003396:	4b88      	ldr	r3, [pc, #544]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d00c      	beq.n	80033bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a2:	4b85      	ldr	r3, [pc, #532]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d112      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ae:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	4b7e      	ldr	r3, [pc, #504]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05b      	beq.n	8003480 <HAL_RCC_OscConfig+0x108>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d157      	bne.n	8003480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e242      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d106      	bne.n	80033ec <HAL_RCC_OscConfig+0x74>
 80033de:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a75      	ldr	r2, [pc, #468]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x98>
 80033f6:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6f      	ldr	r2, [pc, #444]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6c      	ldr	r2, [pc, #432]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 8003410:	4b69      	ldr	r3, [pc, #420]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a68      	ldr	r2, [pc, #416]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b66      	ldr	r3, [pc, #408]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a65      	ldr	r2, [pc, #404]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe ff9c 	bl	800236c <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe ff98 	bl	800236c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e207      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xc0>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe ff88 	bl	800236c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003460:	f7fe ff84 	bl	800236c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1f3      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0xe8>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348e:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a6:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1c7      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4937      	ldr	r1, [pc, #220]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_RCC_OscConfig+0x244>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fe ff3d 	bl	800236c <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fe ff39 	bl	800236c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e1a8      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4925      	ldr	r1, [pc, #148]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_OscConfig+0x244>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe ff1c 	bl	800236c <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003538:	f7fe ff18 	bl	800236c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e187      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d036      	beq.n	80035d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <HAL_RCC_OscConfig+0x248>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fe fefc 	bl	800236c <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003578:	f7fe fef8 	bl	800236c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e167      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x200>
 8003596:	e01b      	b.n	80035d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_OscConfig+0x248>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7fe fee5 	bl	800236c <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a4:	e00e      	b.n	80035c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a6:	f7fe fee1 	bl	800236c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d907      	bls.n	80035c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e150      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	42470000 	.word	0x42470000
 80035c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	4b88      	ldr	r3, [pc, #544]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ea      	bne.n	80035a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8097 	beq.w	800370c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b81      	ldr	r3, [pc, #516]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a7c      	ldr	r2, [pc, #496]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b7a      	ldr	r3, [pc, #488]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b77      	ldr	r3, [pc, #476]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b74      	ldr	r3, [pc, #464]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a73      	ldr	r2, [pc, #460]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fe fea1 	bl	800236c <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fe fe9d 	bl	800236c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e10c      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b6a      	ldr	r3, [pc, #424]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x2ea>
 8003654:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	; 0x70
 8003660:	e01c      	b.n	800369c <HAL_RCC_OscConfig+0x324>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b05      	cmp	r3, #5
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x30c>
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a5e      	ldr	r2, [pc, #376]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003670:	f043 0304 	orr.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	4b5c      	ldr	r3, [pc, #368]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a5b      	ldr	r2, [pc, #364]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0x324>
 8003684:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a57      	ldr	r2, [pc, #348]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	4b55      	ldr	r3, [pc, #340]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a54      	ldr	r2, [pc, #336]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 0304 	bic.w	r3, r3, #4
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fe fe62 	bl	800236c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fe fe5e 	bl	800236c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0cb      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0ee      	beq.n	80036ac <HAL_RCC_OscConfig+0x334>
 80036ce:	e014      	b.n	80036fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fe4c 	bl	800236c <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fe fe48 	bl	800236c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e0b5      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ee:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ee      	bne.n	80036d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a1 	beq.w	8003858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003716:	4b34      	ldr	r3, [pc, #208]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b08      	cmp	r3, #8
 8003720:	d05c      	beq.n	80037dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d141      	bne.n	80037ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <HAL_RCC_OscConfig+0x478>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fe1c 	bl	800236c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe fe18 	bl	800236c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e087      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	019b      	lsls	r3, r3, #6
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	3b01      	subs	r3, #1
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	491b      	ldr	r1, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <HAL_RCC_OscConfig+0x478>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe fdf1 	bl	800236c <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fe fded 	bl	800236c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e05c      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x416>
 80037ac:	e054      	b.n	8003858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_RCC_OscConfig+0x478>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fe fdda 	bl	800236c <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe fdd6 	bl	800236c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e045      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x444>
 80037da:	e03d      	b.n	8003858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e038      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40007000 	.word	0x40007000
 80037f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x4ec>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d028      	beq.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d121      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d11a      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800382a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382c:	4293      	cmp	r3, r2
 800382e:	d111      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	3b01      	subs	r3, #1
 800383e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0cc      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d90c      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d044      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d119      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d003      	beq.n	8003926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	2b03      	cmp	r3, #3
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e067      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4934      	ldr	r1, [pc, #208]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7fe fd08 	bl	800236c <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fe fd04 	bl	800236c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e04f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d20c      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fc68 	bl	80022e4 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	0800b530 	.word	0x0800b530
 8003a2c:	2000000c 	.word	0x2000000c
 8003a30:	20000010 	.word	0x20000010

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a38:	b090      	sub	sp, #64	; 0x40
 8003a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a40:	2300      	movs	r3, #0
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a44:	2300      	movs	r3, #0
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4c:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d00d      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	f200 80a1 	bhi.w	8003ba0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a66:	e09b      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a6c:	e09b      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a72:	e098      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a74:	4b4f      	ldr	r3, [pc, #316]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7e:	4b4d      	ldr	r3, [pc, #308]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d028      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	2200      	movs	r2, #0
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	627a      	str	r2, [r7, #36]	; 0x24
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa0:	fb03 f201 	mul.w	r2, r3, r1
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	fb00 f303 	mul.w	r3, r0, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	4a43      	ldr	r2, [pc, #268]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8003aae:	fba0 1202 	umull	r1, r2, r0, r2
 8003ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aba:	4413      	add	r3, r2
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	61fa      	str	r2, [r7, #28]
 8003ac6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ace:	f7fd f8eb 	bl	8000ca8 <__aeabi_uldivmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ada:	e053      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003adc:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	099b      	lsrs	r3, r3, #6
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	617a      	str	r2, [r7, #20]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aee:	f04f 0b00 	mov.w	fp, #0
 8003af2:	4652      	mov	r2, sl
 8003af4:	465b      	mov	r3, fp
 8003af6:	f04f 0000 	mov.w	r0, #0
 8003afa:	f04f 0100 	mov.w	r1, #0
 8003afe:	0159      	lsls	r1, r3, #5
 8003b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b04:	0150      	lsls	r0, r2, #5
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b0e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b26:	ebb2 0408 	subs.w	r4, r2, r8
 8003b2a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	00eb      	lsls	r3, r5, #3
 8003b38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3c:	00e2      	lsls	r2, r4, #3
 8003b3e:	4614      	mov	r4, r2
 8003b40:	461d      	mov	r5, r3
 8003b42:	eb14 030a 	adds.w	r3, r4, sl
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	eb45 030b 	adc.w	r3, r5, fp
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	028b      	lsls	r3, r1, #10
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b64:	4621      	mov	r1, r4
 8003b66:	028a      	lsls	r2, r1, #10
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b78:	f7fd f896 	bl	8000ca8 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3740      	adds	r7, #64	; 0x40
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	017d7840 	.word	0x017d7840

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	2000000c 	.word	0x2000000c

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bdc:	f7ff fff0 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	0800b540 	.word	0x0800b540

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c04:	f7ff ffdc 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0b5b      	lsrs	r3, r3, #13
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4903      	ldr	r1, [pc, #12]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	0800b540 	.word	0x0800b540

08003c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e041      	b.n	8003cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe f93c 	bl	8001ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 fad8 	bl	800421c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e041      	b.n	8003d5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f839 	bl	8003d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f000 fa89 	bl	800421c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_TIM_PWM_Start+0x24>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e022      	b.n	8003de2 <HAL_TIM_PWM_Start+0x6a>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d109      	bne.n	8003db6 <HAL_TIM_PWM_Start+0x3e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e015      	b.n	8003de2 <HAL_TIM_PWM_Start+0x6a>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d109      	bne.n	8003dd0 <HAL_TIM_PWM_Start+0x58>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e008      	b.n	8003de2 <HAL_TIM_PWM_Start+0x6a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e07c      	b.n	8003ee4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x82>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	e013      	b.n	8003e22 <HAL_TIM_PWM_Start+0xaa>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start+0x92>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e08:	e00b      	b.n	8003e22 <HAL_TIM_PWM_Start+0xaa>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start+0xa2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e18:	e003      	b.n	8003e22 <HAL_TIM_PWM_Start+0xaa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	6839      	ldr	r1, [r7, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fce0 	bl	80047f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2d      	ldr	r2, [pc, #180]	; (8003eec <HAL_TIM_PWM_Start+0x174>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_TIM_PWM_Start+0xcc>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <HAL_TIM_PWM_Start+0x178>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_TIM_PWM_Start+0xd0>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_TIM_PWM_Start+0xd2>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a22      	ldr	r2, [pc, #136]	; (8003eec <HAL_TIM_PWM_Start+0x174>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d022      	beq.n	8003eae <HAL_TIM_PWM_Start+0x136>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d01d      	beq.n	8003eae <HAL_TIM_PWM_Start+0x136>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <HAL_TIM_PWM_Start+0x17c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d018      	beq.n	8003eae <HAL_TIM_PWM_Start+0x136>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <HAL_TIM_PWM_Start+0x180>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_TIM_PWM_Start+0x136>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <HAL_TIM_PWM_Start+0x184>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <HAL_TIM_PWM_Start+0x136>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_TIM_PWM_Start+0x178>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_TIM_PWM_Start+0x136>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <HAL_TIM_PWM_Start+0x188>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_TIM_PWM_Start+0x136>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <HAL_TIM_PWM_Start+0x18c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d111      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b06      	cmp	r3, #6
 8003ebe:	d010      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	e007      	b.n	8003ee2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40010400 	.word	0x40010400
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40000c00 	.word	0x40000c00
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40001800 	.word	0x40001800

08003f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e0ae      	b.n	8004084 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b0c      	cmp	r3, #12
 8003f32:	f200 809f 	bhi.w	8004074 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f71 	.word	0x08003f71
 8003f40:	08004075 	.word	0x08004075
 8003f44:	08004075 	.word	0x08004075
 8003f48:	08004075 	.word	0x08004075
 8003f4c:	08003fb1 	.word	0x08003fb1
 8003f50:	08004075 	.word	0x08004075
 8003f54:	08004075 	.word	0x08004075
 8003f58:	08004075 	.word	0x08004075
 8003f5c:	08003ff3 	.word	0x08003ff3
 8003f60:	08004075 	.word	0x08004075
 8003f64:	08004075 	.word	0x08004075
 8003f68:	08004075 	.word	0x08004075
 8003f6c:	08004033 	.word	0x08004033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f9f0 	bl	800435c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0208 	orr.w	r2, r2, #8
 8003f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0204 	bic.w	r2, r2, #4
 8003f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6999      	ldr	r1, [r3, #24]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	619a      	str	r2, [r3, #24]
      break;
 8003fae:	e064      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fa40 	bl	800443c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6999      	ldr	r1, [r3, #24]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	021a      	lsls	r2, r3, #8
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	619a      	str	r2, [r3, #24]
      break;
 8003ff0:	e043      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fa95 	bl	8004528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0208 	orr.w	r2, r2, #8
 800400c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0204 	bic.w	r2, r2, #4
 800401c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69d9      	ldr	r1, [r3, #28]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	61da      	str	r2, [r3, #28]
      break;
 8004030:	e023      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fae9 	bl	8004610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800404c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69d9      	ldr	r1, [r3, #28]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	021a      	lsls	r2, r3, #8
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	61da      	str	r2, [r3, #28]
      break;
 8004072:	e002      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
      break;
 8004078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004082:	7dfb      	ldrb	r3, [r7, #23]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIM_ConfigClockSource+0x1c>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e0b4      	b.n	8004212 <HAL_TIM_ConfigClockSource+0x186>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e0:	d03e      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0xd4>
 80040e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e6:	f200 8087 	bhi.w	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 80040ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ee:	f000 8086 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x172>
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f6:	d87f      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b70      	cmp	r3, #112	; 0x70
 80040fa:	d01a      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0xa6>
 80040fc:	2b70      	cmp	r3, #112	; 0x70
 80040fe:	d87b      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b60      	cmp	r3, #96	; 0x60
 8004102:	d050      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004104:	2b60      	cmp	r3, #96	; 0x60
 8004106:	d877      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b50      	cmp	r3, #80	; 0x50
 800410a:	d03c      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0xfa>
 800410c:	2b50      	cmp	r3, #80	; 0x50
 800410e:	d873      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d058      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d86f      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b30      	cmp	r3, #48	; 0x30
 800411a:	d064      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 800411c:	2b30      	cmp	r3, #48	; 0x30
 800411e:	d86b      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d060      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004124:	2b20      	cmp	r3, #32
 8004126:	d867      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05c      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	2b10      	cmp	r3, #16
 800412e:	d05a      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004130:	e062      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f000 fb35 	bl	80047b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	609a      	str	r2, [r3, #8]
      break;
 800415e:	e04f      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6899      	ldr	r1, [r3, #8]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f000 fb1e 	bl	80047b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004182:	609a      	str	r2, [r3, #8]
      break;
 8004184:	e03c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	461a      	mov	r2, r3
 8004194:	f000 fa92 	bl	80046bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2150      	movs	r1, #80	; 0x50
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 faeb 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80041a4:	e02c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f000 fab1 	bl	800471a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2160      	movs	r1, #96	; 0x60
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fadb 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80041c4:	e01c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f000 fa72 	bl	80046bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2140      	movs	r1, #64	; 0x40
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 facb 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80041e4:	e00c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f000 fac2 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 80041f6:	e003      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      break;
 80041fc:	e000      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a40      	ldr	r2, [pc, #256]	; (8004330 <TIM_Base_SetConfig+0x114>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d013      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d00f      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3d      	ldr	r2, [pc, #244]	; (8004334 <TIM_Base_SetConfig+0x118>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a3c      	ldr	r2, [pc, #240]	; (8004338 <TIM_Base_SetConfig+0x11c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a3b      	ldr	r2, [pc, #236]	; (800433c <TIM_Base_SetConfig+0x120>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a3a      	ldr	r2, [pc, #232]	; (8004340 <TIM_Base_SetConfig+0x124>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d108      	bne.n	800426e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2f      	ldr	r2, [pc, #188]	; (8004330 <TIM_Base_SetConfig+0x114>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d02b      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d027      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2c      	ldr	r2, [pc, #176]	; (8004334 <TIM_Base_SetConfig+0x118>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d023      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2b      	ldr	r2, [pc, #172]	; (8004338 <TIM_Base_SetConfig+0x11c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01f      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2a      	ldr	r2, [pc, #168]	; (800433c <TIM_Base_SetConfig+0x120>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01b      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a29      	ldr	r2, [pc, #164]	; (8004340 <TIM_Base_SetConfig+0x124>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d017      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a28      	ldr	r2, [pc, #160]	; (8004344 <TIM_Base_SetConfig+0x128>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a27      	ldr	r2, [pc, #156]	; (8004348 <TIM_Base_SetConfig+0x12c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00f      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a26      	ldr	r2, [pc, #152]	; (800434c <TIM_Base_SetConfig+0x130>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00b      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a25      	ldr	r2, [pc, #148]	; (8004350 <TIM_Base_SetConfig+0x134>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a24      	ldr	r2, [pc, #144]	; (8004354 <TIM_Base_SetConfig+0x138>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <TIM_Base_SetConfig+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a23      	ldr	r2, [pc, #140]	; (8004358 <TIM_Base_SetConfig+0x13c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <TIM_Base_SetConfig+0x114>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <TIM_Base_SetConfig+0x124>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	615a      	str	r2, [r3, #20]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40010400 	.word	0x40010400
 8004344:	40014000 	.word	0x40014000
 8004348:	40014400 	.word	0x40014400
 800434c:	40014800 	.word	0x40014800
 8004350:	40001800 	.word	0x40001800
 8004354:	40001c00 	.word	0x40001c00
 8004358:	40002000 	.word	0x40002000

0800435c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f023 0201 	bic.w	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 0302 	bic.w	r3, r3, #2
 80043a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a20      	ldr	r2, [pc, #128]	; (8004434 <TIM_OC1_SetConfig+0xd8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_OC1_SetConfig+0x64>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a1f      	ldr	r2, [pc, #124]	; (8004438 <TIM_OC1_SetConfig+0xdc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d10c      	bne.n	80043da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f023 0308 	bic.w	r3, r3, #8
 80043c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f023 0304 	bic.w	r3, r3, #4
 80043d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <TIM_OC1_SetConfig+0xd8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d003      	beq.n	80043ea <TIM_OC1_SetConfig+0x8e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <TIM_OC1_SetConfig+0xdc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d111      	bne.n	800440e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	621a      	str	r2, [r3, #32]
}
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40010000 	.word	0x40010000
 8004438:	40010400 	.word	0x40010400

0800443c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0210 	bic.w	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0320 	bic.w	r3, r3, #32
 8004486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a22      	ldr	r2, [pc, #136]	; (8004520 <TIM_OC2_SetConfig+0xe4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_OC2_SetConfig+0x68>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a21      	ldr	r2, [pc, #132]	; (8004524 <TIM_OC2_SetConfig+0xe8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10d      	bne.n	80044c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a17      	ldr	r2, [pc, #92]	; (8004520 <TIM_OC2_SetConfig+0xe4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_OC2_SetConfig+0x94>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <TIM_OC2_SetConfig+0xe8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d113      	bne.n	80044f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40010000 	.word	0x40010000
 8004524:	40010400 	.word	0x40010400

08004528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a21      	ldr	r2, [pc, #132]	; (8004608 <TIM_OC3_SetConfig+0xe0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_OC3_SetConfig+0x66>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a20      	ldr	r2, [pc, #128]	; (800460c <TIM_OC3_SetConfig+0xe4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10d      	bne.n	80045aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a16      	ldr	r2, [pc, #88]	; (8004608 <TIM_OC3_SetConfig+0xe0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_OC3_SetConfig+0x92>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a15      	ldr	r2, [pc, #84]	; (800460c <TIM_OC3_SetConfig+0xe4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d113      	bne.n	80045e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40010000 	.word	0x40010000
 800460c:	40010400 	.word	0x40010400

08004610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800465a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	031b      	lsls	r3, r3, #12
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a12      	ldr	r2, [pc, #72]	; (80046b4 <TIM_OC4_SetConfig+0xa4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_OC4_SetConfig+0x68>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a11      	ldr	r2, [pc, #68]	; (80046b8 <TIM_OC4_SetConfig+0xa8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d109      	bne.n	800468c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	019b      	lsls	r3, r3, #6
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40010400 	.word	0x40010400

080046bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 030a 	bic.w	r3, r3, #10
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0210 	bic.w	r2, r3, #16
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	f043 0307 	orr.w	r3, r3, #7
 800479c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2201      	movs	r2, #1
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1a      	ldr	r2, [r3, #32]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	fa01 f303 	lsl.w	r3, r1, r3
 8004828:	431a      	orrs	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004850:	2302      	movs	r3, #2
 8004852:	e05a      	b.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a21      	ldr	r2, [pc, #132]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d022      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a0:	d01d      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1d      	ldr	r2, [pc, #116]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d018      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a18      	ldr	r2, [pc, #96]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a17      	ldr	r2, [pc, #92]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a15      	ldr	r2, [pc, #84]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10c      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
 8004928:	40010400 	.word	0x40010400
 800492c:	40014000 	.word	0x40014000
 8004930:	40001800 	.word	0x40001800

08004934 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800494c:	2302      	movs	r3, #2
 800494e:	e03d      	b.n	80049cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e03f      	b.n	8004a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fd fac0 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2224      	movs	r2, #36	; 0x24
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fddf 	bl	80055e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b08a      	sub	sp, #40	; 0x28
 8004a76:	af02      	add	r7, sp, #8
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	603b      	str	r3, [r7, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d17c      	bne.n	8004b8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_UART_Transmit+0x2c>
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e075      	b.n	8004b8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Transmit+0x3e>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e06e      	b.n	8004b8e <HAL_UART_Transmit+0x11c>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2221      	movs	r2, #33	; 0x21
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac6:	f7fd fc51 	bl	800236c <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	88fa      	ldrh	r2, [r7, #6]
 8004ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae0:	d108      	bne.n	8004af4 <HAL_UART_Transmit+0x82>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	e003      	b.n	8004afc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b04:	e02a      	b.n	8004b5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2180      	movs	r1, #128	; 0x80
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fb1f 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e036      	b.n	8004b8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3302      	adds	r3, #2
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e007      	b.n	8004b4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1cf      	bne.n	8004b06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2140      	movs	r1, #64	; 0x40
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 faef 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e006      	b.n	8004b8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d11d      	bne.n	8004bec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_UART_Receive_IT+0x26>
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e016      	b.n	8004bee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Receive_IT+0x38>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e00f      	b.n	8004bee <HAL_UART_Receive_IT+0x58>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fb24 	bl	8005230 <UART_Start_Receive_IT>
 8004be8:	4603      	mov	r3, r0
 8004bea:	e000      	b.n	8004bee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b0ba      	sub	sp, #232	; 0xe8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d009      	beq.n	8004c5e <HAL_UART_IRQHandler+0x66>
 8004c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fc07 	bl	800546a <UART_Receive_IT>
      return;
 8004c5c:	e256      	b.n	800510c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80de 	beq.w	8004e24 <HAL_UART_IRQHandler+0x22c>
 8004c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80d1 	beq.w	8004e24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_UART_IRQHandler+0xae>
 8004c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f043 0201 	orr.w	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <HAL_UART_IRQHandler+0xd2>
 8004cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f043 0202 	orr.w	r2, r3, #2
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <HAL_UART_IRQHandler+0xf6>
 8004cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0204 	orr.w	r2, r3, #4
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d011      	beq.n	8004d1e <HAL_UART_IRQHandler+0x126>
 8004cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d105      	bne.n	8004d12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f043 0208 	orr.w	r2, r3, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 81ed 	beq.w	8005102 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_UART_IRQHandler+0x14e>
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fb92 	bl	800546a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <HAL_UART_IRQHandler+0x17a>
 8004d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d04f      	beq.n	8004e12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa9a 	bl	80052ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d141      	bne.n	8004e0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3314      	adds	r3, #20
 8004dae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004db2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1d9      	bne.n	8004d86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d013      	beq.n	8004e02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	4a7d      	ldr	r2, [pc, #500]	; (8004fd4 <HAL_UART_IRQHandler+0x3dc>)
 8004de0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe f85d 	bl	8002ea6 <HAL_DMA_Abort_IT>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d016      	beq.n	8004e20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	e00e      	b.n	8004e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f990 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	e00a      	b.n	8004e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f98c 	bl	8005128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	e006      	b.n	8004e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f988 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e1e:	e170      	b.n	8005102 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e20:	bf00      	nop
    return;
 8004e22:	e16e      	b.n	8005102 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	f040 814a 	bne.w	80050c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8143 	beq.w	80050c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 813c 	beq.w	80050c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	f040 80b4 	bne.w	8004fd8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8140 	beq.w	8005106 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	f080 8139 	bcs.w	8005106 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea6:	f000 8088 	beq.w	8004fba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ed6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1d9      	bne.n	8004eaa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e1      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3314      	adds	r3, #20
 8004f38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3314      	adds	r3, #20
 8004f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e3      	bne.n	8004f32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f8a:	f023 0310 	bic.w	r3, r3, #16
 8004f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e3      	bne.n	8004f78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fd ff06 	bl	8002dc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8b6 	bl	800513c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fd0:	e099      	b.n	8005106 <HAL_UART_IRQHandler+0x50e>
 8004fd2:	bf00      	nop
 8004fd4:	08005373 	.word	0x08005373
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 808b 	beq.w	800510a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8086 	beq.w	800510a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005022:	647a      	str	r2, [r7, #68]	; 0x44
 8005024:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e3      	bne.n	8004ffe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3314      	adds	r3, #20
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	623b      	str	r3, [r7, #32]
   return(result);
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800505a:	633a      	str	r2, [r7, #48]	; 0x30
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e3      	bne.n	8005036 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	60fb      	str	r3, [r7, #12]
   return(result);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0310 	bic.w	r3, r3, #16
 8005092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050a0:	61fa      	str	r2, [r7, #28]
 80050a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	69b9      	ldr	r1, [r7, #24]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	617b      	str	r3, [r7, #20]
   return(result);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e3      	bne.n	800507c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f83e 	bl	800513c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050c0:	e023      	b.n	800510a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <HAL_UART_IRQHandler+0x4ea>
 80050ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f95d 	bl	800539a <UART_Transmit_IT>
    return;
 80050e0:	e014      	b.n	800510c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00e      	beq.n	800510c <HAL_UART_IRQHandler+0x514>
 80050ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f99d 	bl	800543a <UART_EndTransmit_IT>
    return;
 8005100:	e004      	b.n	800510c <HAL_UART_IRQHandler+0x514>
    return;
 8005102:	bf00      	nop
 8005104:	e002      	b.n	800510c <HAL_UART_IRQHandler+0x514>
      return;
 8005106:	bf00      	nop
 8005108:	e000      	b.n	800510c <HAL_UART_IRQHandler+0x514>
      return;
 800510a:	bf00      	nop
  }
}
 800510c:	37e8      	adds	r7, #232	; 0xe8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop

08005114 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b090      	sub	sp, #64	; 0x40
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	e050      	b.n	8005208 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d04c      	beq.n	8005208 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800516e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0x30>
 8005174:	f7fd f8fa 	bl	800236c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005180:	429a      	cmp	r2, r3
 8005182:	d241      	bcs.n	8005208 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051a4:	637a      	str	r2, [r7, #52]	; 0x34
 80051a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e5      	bne.n	8005184 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	613b      	str	r3, [r7, #16]
   return(result);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3314      	adds	r3, #20
 80051d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d8:	623a      	str	r2, [r7, #32]
 80051da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	6a3a      	ldr	r2, [r7, #32]
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e00f      	b.n	8005228 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4013      	ands	r3, r2
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	429a      	cmp	r2, r3
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	429a      	cmp	r2, r3
 8005224:	d09f      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3740      	adds	r7, #64	; 0x40
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2222      	movs	r2, #34	; 0x22
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0220 	orr.w	r2, r2, #32
 800529c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b095      	sub	sp, #84	; 0x54
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052d4:	643a      	str	r2, [r7, #64]	; 0x40
 80052d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3314      	adds	r3, #20
 80052ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3314      	adds	r3, #20
 8005306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005308:	62fa      	str	r2, [r7, #44]	; 0x2c
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800530e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e5      	bne.n	80052e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	2b01      	cmp	r3, #1
 8005322:	d119      	bne.n	8005358 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	330c      	adds	r3, #12
 800532a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	60bb      	str	r3, [r7, #8]
   return(result);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f023 0310 	bic.w	r3, r3, #16
 800533a:	647b      	str	r3, [r7, #68]	; 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005344:	61ba      	str	r2, [r7, #24]
 8005346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6979      	ldr	r1, [r7, #20]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	613b      	str	r3, [r7, #16]
   return(result);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e5      	bne.n	8005324 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005366:	bf00      	nop
 8005368:	3754      	adds	r7, #84	; 0x54
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fecb 	bl	8005128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b21      	cmp	r3, #33	; 0x21
 80053ac:	d13e      	bne.n	800542c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	d114      	bne.n	80053e2 <UART_Transmit_IT+0x48>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d110      	bne.n	80053e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	1c9a      	adds	r2, r3, #2
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	621a      	str	r2, [r3, #32]
 80053e0:	e008      	b.n	80053f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6211      	str	r1, [r2, #32]
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4619      	mov	r1, r3
 8005402:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10f      	bne.n	8005428 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005416:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005426:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e000      	b.n	800542e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005450:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff fe5a 	bl	8005114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b08c      	sub	sp, #48	; 0x30
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b22      	cmp	r3, #34	; 0x22
 800547c:	f040 80ab 	bne.w	80055d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005488:	d117      	bne.n	80054ba <UART_Receive_IT+0x50>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d113      	bne.n	80054ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	1c9a      	adds	r2, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28
 80054b8:	e026      	b.n	8005508 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	d007      	beq.n	80054de <UART_Receive_IT+0x74>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <UART_Receive_IT+0x82>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	e008      	b.n	80054fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29b      	uxth	r3, r3
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4619      	mov	r1, r3
 8005516:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005518:	2b00      	cmp	r3, #0
 800551a:	d15a      	bne.n	80055d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0220 	bic.w	r2, r2, #32
 800552a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800553a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	2b01      	cmp	r3, #1
 800555a:	d135      	bne.n	80055c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	613b      	str	r3, [r7, #16]
   return(result);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f023 0310 	bic.w	r3, r3, #16
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	623a      	str	r2, [r7, #32]
 8005584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d10a      	bne.n	80055ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fdbb 	bl	800513c <HAL_UARTEx_RxEventCallback>
 80055c6:	e002      	b.n	80055ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fb fe27 	bl	800121c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	e002      	b.n	80055d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
  }
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3730      	adds	r7, #48	; 0x30
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e4:	b0c0      	sub	sp, #256	; 0x100
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	68d9      	ldr	r1, [r3, #12]
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	ea40 0301 	orr.w	r3, r0, r1
 8005608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	431a      	orrs	r2, r3
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	431a      	orrs	r2, r3
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005638:	f021 010c 	bic.w	r1, r1, #12
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005646:	430b      	orrs	r3, r1
 8005648:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565a:	6999      	ldr	r1, [r3, #24]
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	ea40 0301 	orr.w	r3, r0, r1
 8005666:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b8f      	ldr	r3, [pc, #572]	; (80058ac <UART_SetConfig+0x2cc>)
 8005670:	429a      	cmp	r2, r3
 8005672:	d005      	beq.n	8005680 <UART_SetConfig+0xa0>
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b8d      	ldr	r3, [pc, #564]	; (80058b0 <UART_SetConfig+0x2d0>)
 800567c:	429a      	cmp	r2, r3
 800567e:	d104      	bne.n	800568a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005680:	f7fe fabe 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 8005684:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005688:	e003      	b.n	8005692 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800568a:	f7fe faa5 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 800568e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569c:	f040 810c 	bne.w	80058b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a4:	2200      	movs	r2, #0
 80056a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056b2:	4622      	mov	r2, r4
 80056b4:	462b      	mov	r3, r5
 80056b6:	1891      	adds	r1, r2, r2
 80056b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80056ba:	415b      	adcs	r3, r3
 80056bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056c2:	4621      	mov	r1, r4
 80056c4:	eb12 0801 	adds.w	r8, r2, r1
 80056c8:	4629      	mov	r1, r5
 80056ca:	eb43 0901 	adc.w	r9, r3, r1
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056e2:	4690      	mov	r8, r2
 80056e4:	4699      	mov	r9, r3
 80056e6:	4623      	mov	r3, r4
 80056e8:	eb18 0303 	adds.w	r3, r8, r3
 80056ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056f0:	462b      	mov	r3, r5
 80056f2:	eb49 0303 	adc.w	r3, r9, r3
 80056f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005706:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800570a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800570e:	460b      	mov	r3, r1
 8005710:	18db      	adds	r3, r3, r3
 8005712:	653b      	str	r3, [r7, #80]	; 0x50
 8005714:	4613      	mov	r3, r2
 8005716:	eb42 0303 	adc.w	r3, r2, r3
 800571a:	657b      	str	r3, [r7, #84]	; 0x54
 800571c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005720:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005724:	f7fb fac0 	bl	8000ca8 <__aeabi_uldivmod>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4b61      	ldr	r3, [pc, #388]	; (80058b4 <UART_SetConfig+0x2d4>)
 800572e:	fba3 2302 	umull	r2, r3, r3, r2
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	011c      	lsls	r4, r3, #4
 8005736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800573a:	2200      	movs	r2, #0
 800573c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005740:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005744:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005748:	4642      	mov	r2, r8
 800574a:	464b      	mov	r3, r9
 800574c:	1891      	adds	r1, r2, r2
 800574e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005750:	415b      	adcs	r3, r3
 8005752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005754:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005758:	4641      	mov	r1, r8
 800575a:	eb12 0a01 	adds.w	sl, r2, r1
 800575e:	4649      	mov	r1, r9
 8005760:	eb43 0b01 	adc.w	fp, r3, r1
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005770:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005778:	4692      	mov	sl, r2
 800577a:	469b      	mov	fp, r3
 800577c:	4643      	mov	r3, r8
 800577e:	eb1a 0303 	adds.w	r3, sl, r3
 8005782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005786:	464b      	mov	r3, r9
 8005788:	eb4b 0303 	adc.w	r3, fp, r3
 800578c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800579c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057a4:	460b      	mov	r3, r1
 80057a6:	18db      	adds	r3, r3, r3
 80057a8:	643b      	str	r3, [r7, #64]	; 0x40
 80057aa:	4613      	mov	r3, r2
 80057ac:	eb42 0303 	adc.w	r3, r2, r3
 80057b0:	647b      	str	r3, [r7, #68]	; 0x44
 80057b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057ba:	f7fb fa75 	bl	8000ca8 <__aeabi_uldivmod>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	4b3b      	ldr	r3, [pc, #236]	; (80058b4 <UART_SetConfig+0x2d4>)
 80057c6:	fba3 2301 	umull	r2, r3, r3, r1
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2264      	movs	r2, #100	; 0x64
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	1acb      	subs	r3, r1, r3
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057da:	4b36      	ldr	r3, [pc, #216]	; (80058b4 <UART_SetConfig+0x2d4>)
 80057dc:	fba3 2302 	umull	r2, r3, r3, r2
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057e8:	441c      	add	r4, r3
 80057ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057fc:	4642      	mov	r2, r8
 80057fe:	464b      	mov	r3, r9
 8005800:	1891      	adds	r1, r2, r2
 8005802:	63b9      	str	r1, [r7, #56]	; 0x38
 8005804:	415b      	adcs	r3, r3
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800580c:	4641      	mov	r1, r8
 800580e:	1851      	adds	r1, r2, r1
 8005810:	6339      	str	r1, [r7, #48]	; 0x30
 8005812:	4649      	mov	r1, r9
 8005814:	414b      	adcs	r3, r1
 8005816:	637b      	str	r3, [r7, #52]	; 0x34
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005824:	4659      	mov	r1, fp
 8005826:	00cb      	lsls	r3, r1, #3
 8005828:	4651      	mov	r1, sl
 800582a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582e:	4651      	mov	r1, sl
 8005830:	00ca      	lsls	r2, r1, #3
 8005832:	4610      	mov	r0, r2
 8005834:	4619      	mov	r1, r3
 8005836:	4603      	mov	r3, r0
 8005838:	4642      	mov	r2, r8
 800583a:	189b      	adds	r3, r3, r2
 800583c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005840:	464b      	mov	r3, r9
 8005842:	460a      	mov	r2, r1
 8005844:	eb42 0303 	adc.w	r3, r2, r3
 8005848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005858:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800585c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005860:	460b      	mov	r3, r1
 8005862:	18db      	adds	r3, r3, r3
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
 8005866:	4613      	mov	r3, r2
 8005868:	eb42 0303 	adc.w	r3, r2, r3
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005872:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005876:	f7fb fa17 	bl	8000ca8 <__aeabi_uldivmod>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <UART_SetConfig+0x2d4>)
 8005880:	fba3 1302 	umull	r1, r3, r3, r2
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	2164      	movs	r1, #100	; 0x64
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	3332      	adds	r3, #50	; 0x32
 8005892:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <UART_SetConfig+0x2d4>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	f003 0207 	and.w	r2, r3, #7
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4422      	add	r2, r4
 80058a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058a8:	e106      	b.n	8005ab8 <UART_SetConfig+0x4d8>
 80058aa:	bf00      	nop
 80058ac:	40011000 	.word	0x40011000
 80058b0:	40011400 	.word	0x40011400
 80058b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058bc:	2200      	movs	r2, #0
 80058be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ca:	4642      	mov	r2, r8
 80058cc:	464b      	mov	r3, r9
 80058ce:	1891      	adds	r1, r2, r2
 80058d0:	6239      	str	r1, [r7, #32]
 80058d2:	415b      	adcs	r3, r3
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
 80058d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058da:	4641      	mov	r1, r8
 80058dc:	1854      	adds	r4, r2, r1
 80058de:	4649      	mov	r1, r9
 80058e0:	eb43 0501 	adc.w	r5, r3, r1
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	00eb      	lsls	r3, r5, #3
 80058ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058f2:	00e2      	lsls	r2, r4, #3
 80058f4:	4614      	mov	r4, r2
 80058f6:	461d      	mov	r5, r3
 80058f8:	4643      	mov	r3, r8
 80058fa:	18e3      	adds	r3, r4, r3
 80058fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005900:	464b      	mov	r3, r9
 8005902:	eb45 0303 	adc.w	r3, r5, r3
 8005906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800590a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005916:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005926:	4629      	mov	r1, r5
 8005928:	008b      	lsls	r3, r1, #2
 800592a:	4621      	mov	r1, r4
 800592c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005930:	4621      	mov	r1, r4
 8005932:	008a      	lsls	r2, r1, #2
 8005934:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005938:	f7fb f9b6 	bl	8000ca8 <__aeabi_uldivmod>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4b60      	ldr	r3, [pc, #384]	; (8005ac4 <UART_SetConfig+0x4e4>)
 8005942:	fba3 2302 	umull	r2, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	011c      	lsls	r4, r3, #4
 800594a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005954:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005958:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800595c:	4642      	mov	r2, r8
 800595e:	464b      	mov	r3, r9
 8005960:	1891      	adds	r1, r2, r2
 8005962:	61b9      	str	r1, [r7, #24]
 8005964:	415b      	adcs	r3, r3
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800596c:	4641      	mov	r1, r8
 800596e:	1851      	adds	r1, r2, r1
 8005970:	6139      	str	r1, [r7, #16]
 8005972:	4649      	mov	r1, r9
 8005974:	414b      	adcs	r3, r1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005984:	4659      	mov	r1, fp
 8005986:	00cb      	lsls	r3, r1, #3
 8005988:	4651      	mov	r1, sl
 800598a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598e:	4651      	mov	r1, sl
 8005990:	00ca      	lsls	r2, r1, #3
 8005992:	4610      	mov	r0, r2
 8005994:	4619      	mov	r1, r3
 8005996:	4603      	mov	r3, r0
 8005998:	4642      	mov	r2, r8
 800599a:	189b      	adds	r3, r3, r2
 800599c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059a0:	464b      	mov	r3, r9
 80059a2:	460a      	mov	r2, r1
 80059a4:	eb42 0303 	adc.w	r3, r2, r3
 80059a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059c4:	4649      	mov	r1, r9
 80059c6:	008b      	lsls	r3, r1, #2
 80059c8:	4641      	mov	r1, r8
 80059ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ce:	4641      	mov	r1, r8
 80059d0:	008a      	lsls	r2, r1, #2
 80059d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059d6:	f7fb f967 	bl	8000ca8 <__aeabi_uldivmod>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4611      	mov	r1, r2
 80059e0:	4b38      	ldr	r3, [pc, #224]	; (8005ac4 <UART_SetConfig+0x4e4>)
 80059e2:	fba3 2301 	umull	r2, r3, r3, r1
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	2264      	movs	r2, #100	; 0x64
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
 80059ee:	1acb      	subs	r3, r1, r3
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	3332      	adds	r3, #50	; 0x32
 80059f4:	4a33      	ldr	r2, [pc, #204]	; (8005ac4 <UART_SetConfig+0x4e4>)
 80059f6:	fba2 2303 	umull	r2, r3, r2, r3
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a00:	441c      	add	r4, r3
 8005a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a06:	2200      	movs	r2, #0
 8005a08:	673b      	str	r3, [r7, #112]	; 0x70
 8005a0a:	677a      	str	r2, [r7, #116]	; 0x74
 8005a0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	1891      	adds	r1, r2, r2
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a20:	4641      	mov	r1, r8
 8005a22:	1851      	adds	r1, r2, r1
 8005a24:	6039      	str	r1, [r7, #0]
 8005a26:	4649      	mov	r1, r9
 8005a28:	414b      	adcs	r3, r1
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a38:	4659      	mov	r1, fp
 8005a3a:	00cb      	lsls	r3, r1, #3
 8005a3c:	4651      	mov	r1, sl
 8005a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a42:	4651      	mov	r1, sl
 8005a44:	00ca      	lsls	r2, r1, #3
 8005a46:	4610      	mov	r0, r2
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	189b      	adds	r3, r3, r2
 8005a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a52:	464b      	mov	r3, r9
 8005a54:	460a      	mov	r2, r1
 8005a56:	eb42 0303 	adc.w	r3, r2, r3
 8005a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	663b      	str	r3, [r7, #96]	; 0x60
 8005a66:	667a      	str	r2, [r7, #100]	; 0x64
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a74:	4649      	mov	r1, r9
 8005a76:	008b      	lsls	r3, r1, #2
 8005a78:	4641      	mov	r1, r8
 8005a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a7e:	4641      	mov	r1, r8
 8005a80:	008a      	lsls	r2, r1, #2
 8005a82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a86:	f7fb f90f 	bl	8000ca8 <__aeabi_uldivmod>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <UART_SetConfig+0x4e4>)
 8005a90:	fba3 1302 	umull	r1, r3, r3, r2
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	2164      	movs	r1, #100	; 0x64
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	3332      	adds	r3, #50	; 0x32
 8005aa2:	4a08      	ldr	r2, [pc, #32]	; (8005ac4 <UART_SetConfig+0x4e4>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	f003 020f 	and.w	r2, r3, #15
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4422      	add	r2, r4
 8005ab6:	609a      	str	r2, [r3, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac4:	51eb851f 	.word	0x51eb851f

08005ac8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ada:	2b84      	cmp	r3, #132	; 0x84
 8005adc:	d005      	beq.n	8005aea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ade:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3303      	adds	r3, #3
 8005ae8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005afc:	f000 faf6 	bl	80060ec <vTaskStartScheduler>
  
  return osOK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b08:	b089      	sub	sp, #36	; 0x24
 8005b0a:	af04      	add	r7, sp, #16
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d020      	beq.n	8005b5a <osThreadCreate+0x54>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01c      	beq.n	8005b5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685c      	ldr	r4, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691e      	ldr	r6, [r3, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff ffc8 	bl	8005ac8 <makeFreeRtosPriority>
 8005b38:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b42:	9202      	str	r2, [sp, #8]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	9100      	str	r1, [sp, #0]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4632      	mov	r2, r6
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 f8ed 	bl	8005d2e <xTaskCreateStatic>
 8005b54:	4603      	mov	r3, r0
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e01c      	b.n	8005b94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685c      	ldr	r4, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b66:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff ffaa 	bl	8005ac8 <makeFreeRtosPriority>
 8005b74:	4602      	mov	r2, r0
 8005b76:	f107 030c 	add.w	r3, r7, #12
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	9200      	str	r2, [sp, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	4632      	mov	r2, r6
 8005b82:	4629      	mov	r1, r5
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 f92f 	bl	8005de8 <xTaskCreate>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e000      	b.n	8005b96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b94:	68fb      	ldr	r3, [r7, #12]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <osDelay+0x16>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	e000      	b.n	8005bb6 <osDelay+0x18>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fa64 	bl	8006084 <vTaskDelay>
  
  return osOK;
 8005bbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f103 0208 	add.w	r2, r3, #8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f103 0208 	add.w	r2, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f103 0208 	add.w	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	601a      	str	r2, [r3, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d103      	bne.n	8005c88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e00c      	b.n	8005ca2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e002      	b.n	8005c96 <vListInsert+0x2e>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d2f6      	bcs.n	8005c90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6892      	ldr	r2, [r2, #8]
 8005cf0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6852      	ldr	r2, [r2, #4]
 8005cfa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d103      	bne.n	8005d0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b08e      	sub	sp, #56	; 0x38
 8005d32:	af04      	add	r7, sp, #16
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d54:	bf00      	nop
 8005d56:	e7fe      	b.n	8005d56 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <xTaskCreateStatic+0x46>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	61fb      	str	r3, [r7, #28]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d74:	23a0      	movs	r3, #160	; 0xa0
 8005d76:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2ba0      	cmp	r3, #160	; 0xa0
 8005d7c:	d00a      	beq.n	8005d94 <xTaskCreateStatic+0x66>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	61bb      	str	r3, [r7, #24]
}
 8005d90:	bf00      	nop
 8005d92:	e7fe      	b.n	8005d92 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01e      	beq.n	8005dda <xTaskCreateStatic+0xac>
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01b      	beq.n	8005dda <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005db4:	2300      	movs	r3, #0
 8005db6:	9303      	str	r3, [sp, #12]
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	9302      	str	r3, [sp, #8]
 8005dbc:	f107 0314 	add.w	r3, r7, #20
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f851 	bl	8005e74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dd4:	f000 f8ec 	bl	8005fb0 <prvAddNewTaskToReadyList>
 8005dd8:	e001      	b.n	8005dde <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dde:	697b      	ldr	r3, [r7, #20]
	}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3728      	adds	r7, #40	; 0x28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08c      	sub	sp, #48	; 0x30
 8005dec:	af04      	add	r7, sp, #16
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005df8:	88fb      	ldrh	r3, [r7, #6]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 ff13 	bl	8006c28 <pvPortMalloc>
 8005e02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00e      	beq.n	8005e28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e0a:	20a0      	movs	r0, #160	; 0xa0
 8005e0c:	f000 ff0c 	bl	8006c28 <pvPortMalloc>
 8005e10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e1e:	e005      	b.n	8005e2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e20:	6978      	ldr	r0, [r7, #20]
 8005e22:	f000 ffcd 	bl	8006dc0 <vPortFree>
 8005e26:	e001      	b.n	8005e2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d017      	beq.n	8005e62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e3a:	88fa      	ldrh	r2, [r7, #6]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9303      	str	r3, [sp, #12]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	9302      	str	r3, [sp, #8]
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f80f 	bl	8005e74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e56:	69f8      	ldr	r0, [r7, #28]
 8005e58:	f000 f8aa 	bl	8005fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	e002      	b.n	8005e68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
 8005e66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e68:	69bb      	ldr	r3, [r7, #24]
	}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <prvInitialiseNewTask+0x48>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	617b      	str	r3, [r7, #20]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01f      	beq.n	8005f02 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e012      	b.n	8005eee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	7819      	ldrb	r1, [r3, #0]
 8005ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	3334      	adds	r3, #52	; 0x34
 8005ed8:	460a      	mov	r2, r1
 8005eda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d006      	beq.n	8005ef6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	3301      	adds	r3, #1
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2b0f      	cmp	r3, #15
 8005ef2:	d9e9      	bls.n	8005ec8 <prvInitialiseNewTask+0x54>
 8005ef4:	e000      	b.n	8005ef8 <prvInitialiseNewTask+0x84>
			{
				break;
 8005ef6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f00:	e003      	b.n	8005f0a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	2b06      	cmp	r3, #6
 8005f0e:	d901      	bls.n	8005f14 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f10:	2306      	movs	r3, #6
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	2200      	movs	r2, #0
 8005f24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fe6b 	bl	8005c06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	3318      	adds	r3, #24
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff fe66 	bl	8005c06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	f1c3 0207 	rsb	r2, r3, #7
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	334c      	adds	r3, #76	; 0x4c
 8005f64:	224c      	movs	r2, #76	; 0x4c
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f002 fc82 	bl	8008872 <memset>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	4a0c      	ldr	r2, [pc, #48]	; (8005fa4 <prvInitialiseNewTask+0x130>)
 8005f72:	651a      	str	r2, [r3, #80]	; 0x50
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	4a0c      	ldr	r2, [pc, #48]	; (8005fa8 <prvInitialiseNewTask+0x134>)
 8005f78:	655a      	str	r2, [r3, #84]	; 0x54
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	4a0b      	ldr	r2, [pc, #44]	; (8005fac <prvInitialiseNewTask+0x138>)
 8005f7e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	69b8      	ldr	r0, [r7, #24]
 8005f86:	f000 fc3d 	bl	8006804 <pxPortInitialiseStack>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f9c:	bf00      	nop
 8005f9e:	3720      	adds	r7, #32
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20004354 	.word	0x20004354
 8005fa8:	200043bc 	.word	0x200043bc
 8005fac:	20004424 	.word	0x20004424

08005fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fb8:	f000 fd54 	bl	8006a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fbc:	4b2a      	ldr	r3, [pc, #168]	; (8006068 <prvAddNewTaskToReadyList+0xb8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	4a29      	ldr	r2, [pc, #164]	; (8006068 <prvAddNewTaskToReadyList+0xb8>)
 8005fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fc6:	4b29      	ldr	r3, [pc, #164]	; (800606c <prvAddNewTaskToReadyList+0xbc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fce:	4a27      	ldr	r2, [pc, #156]	; (800606c <prvAddNewTaskToReadyList+0xbc>)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fd4:	4b24      	ldr	r3, [pc, #144]	; (8006068 <prvAddNewTaskToReadyList+0xb8>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d110      	bne.n	8005ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fdc:	f000 facc 	bl	8006578 <prvInitialiseTaskLists>
 8005fe0:	e00d      	b.n	8005ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fe2:	4b23      	ldr	r3, [pc, #140]	; (8006070 <prvAddNewTaskToReadyList+0xc0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fea:	4b20      	ldr	r3, [pc, #128]	; (800606c <prvAddNewTaskToReadyList+0xbc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d802      	bhi.n	8005ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ff8:	4a1c      	ldr	r2, [pc, #112]	; (800606c <prvAddNewTaskToReadyList+0xbc>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ffe:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <prvAddNewTaskToReadyList+0xc4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <prvAddNewTaskToReadyList+0xc4>)
 8006006:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	2201      	movs	r2, #1
 800600e:	409a      	lsls	r2, r3
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <prvAddNewTaskToReadyList+0xc8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4313      	orrs	r3, r2
 8006016:	4a18      	ldr	r2, [pc, #96]	; (8006078 <prvAddNewTaskToReadyList+0xc8>)
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4a15      	ldr	r2, [pc, #84]	; (800607c <prvAddNewTaskToReadyList+0xcc>)
 8006028:	441a      	add	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3304      	adds	r3, #4
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f7ff fdf5 	bl	8005c20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006036:	f000 fd45 	bl	8006ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800603a:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <prvAddNewTaskToReadyList+0xc0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00e      	beq.n	8006060 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006042:	4b0a      	ldr	r3, [pc, #40]	; (800606c <prvAddNewTaskToReadyList+0xbc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	429a      	cmp	r2, r3
 800604e:	d207      	bcs.n	8006060 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <prvAddNewTaskToReadyList+0xd0>)
 8006052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	20000700 	.word	0x20000700
 800606c:	20000600 	.word	0x20000600
 8006070:	2000070c 	.word	0x2000070c
 8006074:	2000071c 	.word	0x2000071c
 8006078:	20000708 	.word	0x20000708
 800607c:	20000604 	.word	0x20000604
 8006080:	e000ed04 	.word	0xe000ed04

08006084 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d017      	beq.n	80060c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006096:	4b13      	ldr	r3, [pc, #76]	; (80060e4 <vTaskDelay+0x60>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <vTaskDelay+0x30>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	60bb      	str	r3, [r7, #8]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060b4:	f000 f884 	bl	80061c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060b8:	2100      	movs	r1, #0
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fb3c 	bl	8006738 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060c0:	f000 f88c 	bl	80061dc <xTaskResumeAll>
 80060c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d107      	bne.n	80060dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <vTaskDelay+0x64>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000728 	.word	0x20000728
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060fa:	463a      	mov	r2, r7
 80060fc:	1d39      	adds	r1, r7, #4
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	4618      	mov	r0, r3
 8006104:	f7fb f836 	bl	8001174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	9202      	str	r2, [sp, #8]
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	2300      	movs	r3, #0
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	2300      	movs	r3, #0
 8006118:	460a      	mov	r2, r1
 800611a:	4921      	ldr	r1, [pc, #132]	; (80061a0 <vTaskStartScheduler+0xb4>)
 800611c:	4821      	ldr	r0, [pc, #132]	; (80061a4 <vTaskStartScheduler+0xb8>)
 800611e:	f7ff fe06 	bl	8005d2e <xTaskCreateStatic>
 8006122:	4603      	mov	r3, r0
 8006124:	4a20      	ldr	r2, [pc, #128]	; (80061a8 <vTaskStartScheduler+0xbc>)
 8006126:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006128:	4b1f      	ldr	r3, [pc, #124]	; (80061a8 <vTaskStartScheduler+0xbc>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006130:	2301      	movs	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e001      	b.n	800613a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d11b      	bne.n	8006178 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	613b      	str	r3, [r7, #16]
}
 8006152:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006154:	4b15      	ldr	r3, [pc, #84]	; (80061ac <vTaskStartScheduler+0xc0>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	334c      	adds	r3, #76	; 0x4c
 800615a:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <vTaskStartScheduler+0xc4>)
 800615c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <vTaskStartScheduler+0xc8>)
 8006160:	f04f 32ff 	mov.w	r2, #4294967295
 8006164:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <vTaskStartScheduler+0xcc>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800616c:	4b13      	ldr	r3, [pc, #76]	; (80061bc <vTaskStartScheduler+0xd0>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006172:	f000 fbd5 	bl	8006920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006176:	e00e      	b.n	8006196 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d10a      	bne.n	8006196 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	60fb      	str	r3, [r7, #12]
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <vTaskStartScheduler+0xa8>
}
 8006196:	bf00      	nop
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	0800b528 	.word	0x0800b528
 80061a4:	08006549 	.word	0x08006549
 80061a8:	20000724 	.word	0x20000724
 80061ac:	20000600 	.word	0x20000600
 80061b0:	200001e0 	.word	0x200001e0
 80061b4:	20000720 	.word	0x20000720
 80061b8:	2000070c 	.word	0x2000070c
 80061bc:	20000704 	.word	0x20000704

080061c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <vTaskSuspendAll+0x18>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	4a03      	ldr	r2, [pc, #12]	; (80061d8 <vTaskSuspendAll+0x18>)
 80061cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061ce:	bf00      	nop
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	20000728 	.word	0x20000728

080061dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <xTaskResumeAll+0x114>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <xTaskResumeAll+0x2c>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	603b      	str	r3, [r7, #0]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006208:	f000 fc2c 	bl	8006a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800620c:	4b38      	ldr	r3, [pc, #224]	; (80062f0 <xTaskResumeAll+0x114>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3b01      	subs	r3, #1
 8006212:	4a37      	ldr	r2, [pc, #220]	; (80062f0 <xTaskResumeAll+0x114>)
 8006214:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006216:	4b36      	ldr	r3, [pc, #216]	; (80062f0 <xTaskResumeAll+0x114>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d161      	bne.n	80062e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800621e:	4b35      	ldr	r3, [pc, #212]	; (80062f4 <xTaskResumeAll+0x118>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d05d      	beq.n	80062e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006226:	e02e      	b.n	8006286 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006228:	4b33      	ldr	r3, [pc, #204]	; (80062f8 <xTaskResumeAll+0x11c>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3318      	adds	r3, #24
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fd50 	bl	8005cda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3304      	adds	r3, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fd4b 	bl	8005cda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	2201      	movs	r2, #1
 800624a:	409a      	lsls	r2, r3
 800624c:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <xTaskResumeAll+0x120>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4313      	orrs	r3, r2
 8006252:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <xTaskResumeAll+0x120>)
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4a27      	ldr	r2, [pc, #156]	; (8006300 <xTaskResumeAll+0x124>)
 8006264:	441a      	add	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7ff fcd7 	bl	8005c20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006276:	4b23      	ldr	r3, [pc, #140]	; (8006304 <xTaskResumeAll+0x128>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	429a      	cmp	r2, r3
 800627e:	d302      	bcc.n	8006286 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006280:	4b21      	ldr	r3, [pc, #132]	; (8006308 <xTaskResumeAll+0x12c>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006286:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <xTaskResumeAll+0x11c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1cc      	bne.n	8006228 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006294:	f000 fa12 	bl	80066bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006298:	4b1c      	ldr	r3, [pc, #112]	; (800630c <xTaskResumeAll+0x130>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d010      	beq.n	80062c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062a4:	f000 f836 	bl	8006314 <xTaskIncrementTick>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80062ae:	4b16      	ldr	r3, [pc, #88]	; (8006308 <xTaskResumeAll+0x12c>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f1      	bne.n	80062a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <xTaskResumeAll+0x130>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <xTaskResumeAll+0x12c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062ce:	2301      	movs	r3, #1
 80062d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062d2:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <xTaskResumeAll+0x134>)
 80062d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e2:	f000 fbef 	bl	8006ac4 <vPortExitCritical>

	return xAlreadyYielded;
 80062e6:	68bb      	ldr	r3, [r7, #8]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20000728 	.word	0x20000728
 80062f4:	20000700 	.word	0x20000700
 80062f8:	200006c0 	.word	0x200006c0
 80062fc:	20000708 	.word	0x20000708
 8006300:	20000604 	.word	0x20000604
 8006304:	20000600 	.word	0x20000600
 8006308:	20000714 	.word	0x20000714
 800630c:	20000710 	.word	0x20000710
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800631a:	2300      	movs	r3, #0
 800631c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800631e:	4b4e      	ldr	r3, [pc, #312]	; (8006458 <xTaskIncrementTick+0x144>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 808e 	bne.w	8006444 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006328:	4b4c      	ldr	r3, [pc, #304]	; (800645c <xTaskIncrementTick+0x148>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006330:	4a4a      	ldr	r2, [pc, #296]	; (800645c <xTaskIncrementTick+0x148>)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d120      	bne.n	800637e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800633c:	4b48      	ldr	r3, [pc, #288]	; (8006460 <xTaskIncrementTick+0x14c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <xTaskIncrementTick+0x48>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	603b      	str	r3, [r7, #0]
}
 8006358:	bf00      	nop
 800635a:	e7fe      	b.n	800635a <xTaskIncrementTick+0x46>
 800635c:	4b40      	ldr	r3, [pc, #256]	; (8006460 <xTaskIncrementTick+0x14c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	4b40      	ldr	r3, [pc, #256]	; (8006464 <xTaskIncrementTick+0x150>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a3e      	ldr	r2, [pc, #248]	; (8006460 <xTaskIncrementTick+0x14c>)
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	4a3e      	ldr	r2, [pc, #248]	; (8006464 <xTaskIncrementTick+0x150>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	4b3d      	ldr	r3, [pc, #244]	; (8006468 <xTaskIncrementTick+0x154>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3301      	adds	r3, #1
 8006376:	4a3c      	ldr	r2, [pc, #240]	; (8006468 <xTaskIncrementTick+0x154>)
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	f000 f99f 	bl	80066bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800637e:	4b3b      	ldr	r3, [pc, #236]	; (800646c <xTaskIncrementTick+0x158>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	429a      	cmp	r2, r3
 8006386:	d348      	bcc.n	800641a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006388:	4b35      	ldr	r3, [pc, #212]	; (8006460 <xTaskIncrementTick+0x14c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006392:	4b36      	ldr	r3, [pc, #216]	; (800646c <xTaskIncrementTick+0x158>)
 8006394:	f04f 32ff 	mov.w	r2, #4294967295
 8006398:	601a      	str	r2, [r3, #0]
					break;
 800639a:	e03e      	b.n	800641a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800639c:	4b30      	ldr	r3, [pc, #192]	; (8006460 <xTaskIncrementTick+0x14c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d203      	bcs.n	80063bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063b4:	4a2d      	ldr	r2, [pc, #180]	; (800646c <xTaskIncrementTick+0x158>)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063ba:	e02e      	b.n	800641a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff fc8a 	bl	8005cda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff fc81 	bl	8005cda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	2201      	movs	r2, #1
 80063de:	409a      	lsls	r2, r3
 80063e0:	4b23      	ldr	r3, [pc, #140]	; (8006470 <xTaskIncrementTick+0x15c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	4a22      	ldr	r2, [pc, #136]	; (8006470 <xTaskIncrementTick+0x15c>)
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <xTaskIncrementTick+0x160>)
 80063f8:	441a      	add	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7ff fc0d 	bl	8005c20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640a:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <xTaskIncrementTick+0x164>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	429a      	cmp	r2, r3
 8006412:	d3b9      	bcc.n	8006388 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006414:	2301      	movs	r3, #1
 8006416:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006418:	e7b6      	b.n	8006388 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800641a:	4b17      	ldr	r3, [pc, #92]	; (8006478 <xTaskIncrementTick+0x164>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	4914      	ldr	r1, [pc, #80]	; (8006474 <xTaskIncrementTick+0x160>)
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d901      	bls.n	8006436 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006432:	2301      	movs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006436:	4b11      	ldr	r3, [pc, #68]	; (800647c <xTaskIncrementTick+0x168>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800643e:	2301      	movs	r3, #1
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e004      	b.n	800644e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006444:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <xTaskIncrementTick+0x16c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	4a0d      	ldr	r2, [pc, #52]	; (8006480 <xTaskIncrementTick+0x16c>)
 800644c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800644e:	697b      	ldr	r3, [r7, #20]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20000728 	.word	0x20000728
 800645c:	20000704 	.word	0x20000704
 8006460:	200006b8 	.word	0x200006b8
 8006464:	200006bc 	.word	0x200006bc
 8006468:	20000718 	.word	0x20000718
 800646c:	20000720 	.word	0x20000720
 8006470:	20000708 	.word	0x20000708
 8006474:	20000604 	.word	0x20000604
 8006478:	20000600 	.word	0x20000600
 800647c:	20000714 	.word	0x20000714
 8006480:	20000710 	.word	0x20000710

08006484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800648a:	4b29      	ldr	r3, [pc, #164]	; (8006530 <vTaskSwitchContext+0xac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006492:	4b28      	ldr	r3, [pc, #160]	; (8006534 <vTaskSwitchContext+0xb0>)
 8006494:	2201      	movs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006498:	e044      	b.n	8006524 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800649a:	4b26      	ldr	r3, [pc, #152]	; (8006534 <vTaskSwitchContext+0xb0>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a0:	4b25      	ldr	r3, [pc, #148]	; (8006538 <vTaskSwitchContext+0xb4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	fab3 f383 	clz	r3, r3
 80064ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	f1c3 031f 	rsb	r3, r3, #31
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	4921      	ldr	r1, [pc, #132]	; (800653c <vTaskSwitchContext+0xb8>)
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	607b      	str	r3, [r7, #4]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vTaskSwitchContext+0x5a>
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4a14      	ldr	r2, [pc, #80]	; (800653c <vTaskSwitchContext+0xb8>)
 80064ec:	4413      	add	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	605a      	str	r2, [r3, #4]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3308      	adds	r3, #8
 8006502:	429a      	cmp	r2, r3
 8006504:	d104      	bne.n	8006510 <vTaskSwitchContext+0x8c>
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	4a0a      	ldr	r2, [pc, #40]	; (8006540 <vTaskSwitchContext+0xbc>)
 8006518:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800651a:	4b09      	ldr	r3, [pc, #36]	; (8006540 <vTaskSwitchContext+0xbc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	334c      	adds	r3, #76	; 0x4c
 8006520:	4a08      	ldr	r2, [pc, #32]	; (8006544 <vTaskSwitchContext+0xc0>)
 8006522:	6013      	str	r3, [r2, #0]
}
 8006524:	bf00      	nop
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	20000728 	.word	0x20000728
 8006534:	20000714 	.word	0x20000714
 8006538:	20000708 	.word	0x20000708
 800653c:	20000604 	.word	0x20000604
 8006540:	20000600 	.word	0x20000600
 8006544:	200001e0 	.word	0x200001e0

08006548 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006550:	f000 f852 	bl	80065f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006554:	4b06      	ldr	r3, [pc, #24]	; (8006570 <prvIdleTask+0x28>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d9f9      	bls.n	8006550 <prvIdleTask+0x8>
			{
				taskYIELD();
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <prvIdleTask+0x2c>)
 800655e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800656c:	e7f0      	b.n	8006550 <prvIdleTask+0x8>
 800656e:	bf00      	nop
 8006570:	20000604 	.word	0x20000604
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800657e:	2300      	movs	r3, #0
 8006580:	607b      	str	r3, [r7, #4]
 8006582:	e00c      	b.n	800659e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4a12      	ldr	r2, [pc, #72]	; (80065d8 <prvInitialiseTaskLists+0x60>)
 8006590:	4413      	add	r3, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff fb17 	bl	8005bc6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3301      	adds	r3, #1
 800659c:	607b      	str	r3, [r7, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b06      	cmp	r3, #6
 80065a2:	d9ef      	bls.n	8006584 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065a4:	480d      	ldr	r0, [pc, #52]	; (80065dc <prvInitialiseTaskLists+0x64>)
 80065a6:	f7ff fb0e 	bl	8005bc6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065aa:	480d      	ldr	r0, [pc, #52]	; (80065e0 <prvInitialiseTaskLists+0x68>)
 80065ac:	f7ff fb0b 	bl	8005bc6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065b0:	480c      	ldr	r0, [pc, #48]	; (80065e4 <prvInitialiseTaskLists+0x6c>)
 80065b2:	f7ff fb08 	bl	8005bc6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065b6:	480c      	ldr	r0, [pc, #48]	; (80065e8 <prvInitialiseTaskLists+0x70>)
 80065b8:	f7ff fb05 	bl	8005bc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065bc:	480b      	ldr	r0, [pc, #44]	; (80065ec <prvInitialiseTaskLists+0x74>)
 80065be:	f7ff fb02 	bl	8005bc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065c2:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <prvInitialiseTaskLists+0x78>)
 80065c4:	4a05      	ldr	r2, [pc, #20]	; (80065dc <prvInitialiseTaskLists+0x64>)
 80065c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065c8:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <prvInitialiseTaskLists+0x7c>)
 80065ca:	4a05      	ldr	r2, [pc, #20]	; (80065e0 <prvInitialiseTaskLists+0x68>)
 80065cc:	601a      	str	r2, [r3, #0]
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000604 	.word	0x20000604
 80065dc:	20000690 	.word	0x20000690
 80065e0:	200006a4 	.word	0x200006a4
 80065e4:	200006c0 	.word	0x200006c0
 80065e8:	200006d4 	.word	0x200006d4
 80065ec:	200006ec 	.word	0x200006ec
 80065f0:	200006b8 	.word	0x200006b8
 80065f4:	200006bc 	.word	0x200006bc

080065f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065fe:	e019      	b.n	8006634 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006600:	f000 fa30 	bl	8006a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006604:	4b10      	ldr	r3, [pc, #64]	; (8006648 <prvCheckTasksWaitingTermination+0x50>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fb62 	bl	8005cda <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006616:	4b0d      	ldr	r3, [pc, #52]	; (800664c <prvCheckTasksWaitingTermination+0x54>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3b01      	subs	r3, #1
 800661c:	4a0b      	ldr	r2, [pc, #44]	; (800664c <prvCheckTasksWaitingTermination+0x54>)
 800661e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <prvCheckTasksWaitingTermination+0x58>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3b01      	subs	r3, #1
 8006626:	4a0a      	ldr	r2, [pc, #40]	; (8006650 <prvCheckTasksWaitingTermination+0x58>)
 8006628:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800662a:	f000 fa4b 	bl	8006ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f810 	bl	8006654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006634:	4b06      	ldr	r3, [pc, #24]	; (8006650 <prvCheckTasksWaitingTermination+0x58>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e1      	bne.n	8006600 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	200006d4 	.word	0x200006d4
 800664c:	20000700 	.word	0x20000700
 8006650:	200006e8 	.word	0x200006e8

08006654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	334c      	adds	r3, #76	; 0x4c
 8006660:	4618      	mov	r0, r3
 8006662:	f002 f935 	bl	80088d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800666c:	2b00      	cmp	r3, #0
 800666e:	d108      	bne.n	8006682 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fba3 	bl	8006dc0 <vPortFree>
				vPortFree( pxTCB );
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fba0 	bl	8006dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006680:	e018      	b.n	80066b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006688:	2b01      	cmp	r3, #1
 800668a:	d103      	bne.n	8006694 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fb97 	bl	8006dc0 <vPortFree>
	}
 8006692:	e00f      	b.n	80066b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800669a:	2b02      	cmp	r3, #2
 800669c:	d00a      	beq.n	80066b4 <prvDeleteTCB+0x60>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	60fb      	str	r3, [r7, #12]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <prvDeleteTCB+0x5e>
	}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066c2:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <prvResetNextTaskUnblockTime+0x38>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <prvResetNextTaskUnblockTime+0x3c>)
 80066ce:	f04f 32ff 	mov.w	r2, #4294967295
 80066d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066d4:	e008      	b.n	80066e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <prvResetNextTaskUnblockTime+0x38>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	4a04      	ldr	r2, [pc, #16]	; (80066f8 <prvResetNextTaskUnblockTime+0x3c>)
 80066e6:	6013      	str	r3, [r2, #0]
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	200006b8 	.word	0x200006b8
 80066f8:	20000720 	.word	0x20000720

080066fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006702:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <xTaskGetSchedulerState+0x34>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800670a:	2301      	movs	r3, #1
 800670c:	607b      	str	r3, [r7, #4]
 800670e:	e008      	b.n	8006722 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006710:	4b08      	ldr	r3, [pc, #32]	; (8006734 <xTaskGetSchedulerState+0x38>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006718:	2302      	movs	r3, #2
 800671a:	607b      	str	r3, [r7, #4]
 800671c:	e001      	b.n	8006722 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800671e:	2300      	movs	r3, #0
 8006720:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006722:	687b      	ldr	r3, [r7, #4]
	}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	2000070c 	.word	0x2000070c
 8006734:	20000728 	.word	0x20000728

08006738 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006742:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006748:	4b28      	ldr	r3, [pc, #160]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3304      	adds	r3, #4
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff fac3 	bl	8005cda <uxListRemove>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	2201      	movs	r2, #1
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	43da      	mvns	r2, r3
 8006768:	4b21      	ldr	r3, [pc, #132]	; (80067f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4013      	ands	r3, r2
 800676e:	4a20      	ldr	r2, [pc, #128]	; (80067f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006770:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d10a      	bne.n	8006790 <prvAddCurrentTaskToDelayedList+0x58>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d007      	beq.n	8006790 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006780:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	481a      	ldr	r0, [pc, #104]	; (80067f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800678a:	f7ff fa49 	bl	8005c20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800678e:	e026      	b.n	80067de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006798:	4b14      	ldr	r3, [pc, #80]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d209      	bcs.n	80067bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a8:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7ff fa57 	bl	8005c68 <vListInsert>
}
 80067ba:	e010      	b.n	80067de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067bc:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7ff fa4d 	bl	8005c68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d202      	bcs.n	80067de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80067d8:	4a09      	ldr	r2, [pc, #36]	; (8006800 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6013      	str	r3, [r2, #0]
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000704 	.word	0x20000704
 80067ec:	20000600 	.word	0x20000600
 80067f0:	20000708 	.word	0x20000708
 80067f4:	200006ec 	.word	0x200006ec
 80067f8:	200006bc 	.word	0x200006bc
 80067fc:	200006b8 	.word	0x200006b8
 8006800:	20000720 	.word	0x20000720

08006804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3b04      	subs	r3, #4
 8006814:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800681c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b04      	subs	r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f023 0201 	bic.w	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3b04      	subs	r3, #4
 8006832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006834:	4a0c      	ldr	r2, [pc, #48]	; (8006868 <pxPortInitialiseStack+0x64>)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b14      	subs	r3, #20
 800683e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b04      	subs	r3, #4
 800684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f06f 0202 	mvn.w	r2, #2
 8006852:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3b20      	subs	r3, #32
 8006858:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800685a:	68fb      	ldr	r3, [r7, #12]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	0800686d 	.word	0x0800686d

0800686c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006876:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <prvTaskExitError+0x54>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d00a      	beq.n	8006896 <prvTaskExitError+0x2a>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <prvTaskExitError+0x28>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60bb      	str	r3, [r7, #8]
}
 80068a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068aa:	bf00      	nop
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0fc      	beq.n	80068ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	20000018 	.word	0x20000018
	...

080068d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <pxCurrentTCBConst2>)
 80068d2:	6819      	ldr	r1, [r3, #0]
 80068d4:	6808      	ldr	r0, [r1, #0]
 80068d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	f380 8809 	msr	PSP, r0
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f380 8811 	msr	BASEPRI, r0
 80068ea:	4770      	bx	lr
 80068ec:	f3af 8000 	nop.w

080068f0 <pxCurrentTCBConst2>:
 80068f0:	20000600 	.word	0x20000600
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop

080068f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068f8:	4808      	ldr	r0, [pc, #32]	; (800691c <prvPortStartFirstTask+0x24>)
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	6800      	ldr	r0, [r0, #0]
 80068fe:	f380 8808 	msr	MSP, r0
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f380 8814 	msr	CONTROL, r0
 800690a:	b662      	cpsie	i
 800690c:	b661      	cpsie	f
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	df00      	svc	0
 8006918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800691a:	bf00      	nop
 800691c:	e000ed08 	.word	0xe000ed08

08006920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006926:	4b46      	ldr	r3, [pc, #280]	; (8006a40 <xPortStartScheduler+0x120>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a46      	ldr	r2, [pc, #280]	; (8006a44 <xPortStartScheduler+0x124>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d10a      	bne.n	8006946 <xPortStartScheduler+0x26>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	613b      	str	r3, [r7, #16]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006946:	4b3e      	ldr	r3, [pc, #248]	; (8006a40 <xPortStartScheduler+0x120>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a3f      	ldr	r2, [pc, #252]	; (8006a48 <xPortStartScheduler+0x128>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d10a      	bne.n	8006966 <xPortStartScheduler+0x46>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60fb      	str	r3, [r7, #12]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006966:	4b39      	ldr	r3, [pc, #228]	; (8006a4c <xPortStartScheduler+0x12c>)
 8006968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	22ff      	movs	r2, #255	; 0xff
 8006976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006988:	b2da      	uxtb	r2, r3
 800698a:	4b31      	ldr	r3, [pc, #196]	; (8006a50 <xPortStartScheduler+0x130>)
 800698c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800698e:	4b31      	ldr	r3, [pc, #196]	; (8006a54 <xPortStartScheduler+0x134>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006994:	e009      	b.n	80069aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006996:	4b2f      	ldr	r3, [pc, #188]	; (8006a54 <xPortStartScheduler+0x134>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3b01      	subs	r3, #1
 800699c:	4a2d      	ldr	r2, [pc, #180]	; (8006a54 <xPortStartScheduler+0x134>)
 800699e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d0ef      	beq.n	8006996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069b6:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <xPortStartScheduler+0x134>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f1c3 0307 	rsb	r3, r3, #7
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d00a      	beq.n	80069d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	60bb      	str	r3, [r7, #8]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069d8:	4b1e      	ldr	r3, [pc, #120]	; (8006a54 <xPortStartScheduler+0x134>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <xPortStartScheduler+0x134>)
 80069e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069e2:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <xPortStartScheduler+0x134>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ea:	4a1a      	ldr	r2, [pc, #104]	; (8006a54 <xPortStartScheduler+0x134>)
 80069ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069f6:	4b18      	ldr	r3, [pc, #96]	; (8006a58 <xPortStartScheduler+0x138>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a17      	ldr	r2, [pc, #92]	; (8006a58 <xPortStartScheduler+0x138>)
 80069fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <xPortStartScheduler+0x138>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a14      	ldr	r2, [pc, #80]	; (8006a58 <xPortStartScheduler+0x138>)
 8006a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a0e:	f000 f8dd 	bl	8006bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a12:	4b12      	ldr	r3, [pc, #72]	; (8006a5c <xPortStartScheduler+0x13c>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a18:	f000 f8fc 	bl	8006c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a1c:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <xPortStartScheduler+0x140>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a0f      	ldr	r2, [pc, #60]	; (8006a60 <xPortStartScheduler+0x140>)
 8006a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a28:	f7ff ff66 	bl	80068f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a2c:	f7ff fd2a 	bl	8006484 <vTaskSwitchContext>
	prvTaskExitError();
 8006a30:	f7ff ff1c 	bl	800686c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	e000ed00 	.word	0xe000ed00
 8006a44:	410fc271 	.word	0x410fc271
 8006a48:	410fc270 	.word	0x410fc270
 8006a4c:	e000e400 	.word	0xe000e400
 8006a50:	2000072c 	.word	0x2000072c
 8006a54:	20000730 	.word	0x20000730
 8006a58:	e000ed20 	.word	0xe000ed20
 8006a5c:	20000018 	.word	0x20000018
 8006a60:	e000ef34 	.word	0xe000ef34

08006a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	607b      	str	r3, [r7, #4]
}
 8006a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <vPortEnterCritical+0x58>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a0d      	ldr	r2, [pc, #52]	; (8006abc <vPortEnterCritical+0x58>)
 8006a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <vPortEnterCritical+0x58>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10f      	bne.n	8006ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <vPortEnterCritical+0x5c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	603b      	str	r3, [r7, #0]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <vPortEnterCritical+0x4a>
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000018 	.word	0x20000018
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aca:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <vPortExitCritical+0x50>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <vPortExitCritical+0x24>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	607b      	str	r3, [r7, #4]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <vPortExitCritical+0x50>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <vPortExitCritical+0x50>)
 8006af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <vPortExitCritical+0x50>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d105      	bne.n	8006b06 <vPortExitCritical+0x42>
 8006afa:	2300      	movs	r3, #0
 8006afc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000018 	.word	0x20000018
	...

08006b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b20:	f3ef 8009 	mrs	r0, PSP
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <pxCurrentTCBConst>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	f01e 0f10 	tst.w	lr, #16
 8006b30:	bf08      	it	eq
 8006b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3a:	6010      	str	r0, [r2, #0]
 8006b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b44:	f380 8811 	msr	BASEPRI, r0
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f7ff fc98 	bl	8006484 <vTaskSwitchContext>
 8006b54:	f04f 0000 	mov.w	r0, #0
 8006b58:	f380 8811 	msr	BASEPRI, r0
 8006b5c:	bc09      	pop	{r0, r3}
 8006b5e:	6819      	ldr	r1, [r3, #0]
 8006b60:	6808      	ldr	r0, [r1, #0]
 8006b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b66:	f01e 0f10 	tst.w	lr, #16
 8006b6a:	bf08      	it	eq
 8006b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b70:	f380 8809 	msr	PSP, r0
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	f3af 8000 	nop.w

08006b80 <pxCurrentTCBConst>:
 8006b80:	20000600 	.word	0x20000600
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	607b      	str	r3, [r7, #4]
}
 8006ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ba2:	f7ff fbb7 	bl	8006314 <xTaskIncrementTick>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bac:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <xPortSysTickHandler+0x40>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f383 8811 	msr	BASEPRI, r3
}
 8006bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <vPortSetupTimerInterrupt+0x34>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <vPortSetupTimerInterrupt+0x38>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bdc:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <vPortSetupTimerInterrupt+0x3c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <vPortSetupTimerInterrupt+0x40>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	099b      	lsrs	r3, r3, #6
 8006be8:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <vPortSetupTimerInterrupt+0x44>)
 8006bea:	3b01      	subs	r3, #1
 8006bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bee:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <vPortSetupTimerInterrupt+0x34>)
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	601a      	str	r2, [r3, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	e000e010 	.word	0xe000e010
 8006c04:	e000e018 	.word	0xe000e018
 8006c08:	2000000c 	.word	0x2000000c
 8006c0c:	10624dd3 	.word	0x10624dd3
 8006c10:	e000e014 	.word	0xe000e014

08006c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c24 <vPortEnableVFP+0x10>
 8006c18:	6801      	ldr	r1, [r0, #0]
 8006c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c1e:	6001      	str	r1, [r0, #0]
 8006c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c22:	bf00      	nop
 8006c24:	e000ed88 	.word	0xe000ed88

08006c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c34:	f7ff fac4 	bl	80061c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c38:	4b5b      	ldr	r3, [pc, #364]	; (8006da8 <pvPortMalloc+0x180>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c40:	f000 f920 	bl	8006e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c44:	4b59      	ldr	r3, [pc, #356]	; (8006dac <pvPortMalloc+0x184>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f040 8093 	bne.w	8006d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01d      	beq.n	8006c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c58:	2208      	movs	r2, #8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d014      	beq.n	8006c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f023 0307 	bic.w	r3, r3, #7
 8006c70:	3308      	adds	r3, #8
 8006c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <pvPortMalloc+0x6c>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	617b      	str	r3, [r7, #20]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d06e      	beq.n	8006d78 <pvPortMalloc+0x150>
 8006c9a:	4b45      	ldr	r3, [pc, #276]	; (8006db0 <pvPortMalloc+0x188>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d869      	bhi.n	8006d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ca4:	4b43      	ldr	r3, [pc, #268]	; (8006db4 <pvPortMalloc+0x18c>)
 8006ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ca8:	4b42      	ldr	r3, [pc, #264]	; (8006db4 <pvPortMalloc+0x18c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cae:	e004      	b.n	8006cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d903      	bls.n	8006ccc <pvPortMalloc+0xa4>
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f1      	bne.n	8006cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ccc:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <pvPortMalloc+0x180>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d050      	beq.n	8006d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2208      	movs	r2, #8
 8006cdc:	4413      	add	r3, r2
 8006cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	1ad2      	subs	r2, r2, r3
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d91f      	bls.n	8006d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <pvPortMalloc+0xf8>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	613b      	str	r3, [r7, #16]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	1ad2      	subs	r2, r2, r3
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d32:	69b8      	ldr	r0, [r7, #24]
 8006d34:	f000 f908 	bl	8006f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d38:	4b1d      	ldr	r3, [pc, #116]	; (8006db0 <pvPortMalloc+0x188>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <pvPortMalloc+0x188>)
 8006d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d46:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <pvPortMalloc+0x188>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b1b      	ldr	r3, [pc, #108]	; (8006db8 <pvPortMalloc+0x190>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d203      	bcs.n	8006d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d52:	4b17      	ldr	r3, [pc, #92]	; (8006db0 <pvPortMalloc+0x188>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <pvPortMalloc+0x190>)
 8006d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <pvPortMalloc+0x184>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <pvPortMalloc+0x194>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	4a11      	ldr	r2, [pc, #68]	; (8006dbc <pvPortMalloc+0x194>)
 8006d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d78:	f7ff fa30 	bl	80061dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <pvPortMalloc+0x174>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	60fb      	str	r3, [r7, #12]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <pvPortMalloc+0x172>
	return pvReturn;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3728      	adds	r7, #40	; 0x28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	2000433c 	.word	0x2000433c
 8006dac:	20004350 	.word	0x20004350
 8006db0:	20004340 	.word	0x20004340
 8006db4:	20004334 	.word	0x20004334
 8006db8:	20004344 	.word	0x20004344
 8006dbc:	20004348 	.word	0x20004348

08006dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d04d      	beq.n	8006e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	425b      	negs	r3, r3
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4413      	add	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <vPortFree+0xb8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <vPortFree+0x44>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	60fb      	str	r3, [r7, #12]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <vPortFree+0x62>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	60bb      	str	r3, [r7, #8]
}
 8006e1e:	bf00      	nop
 8006e20:	e7fe      	b.n	8006e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <vPortFree+0xb8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01e      	beq.n	8006e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11a      	bne.n	8006e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	4b0e      	ldr	r3, [pc, #56]	; (8006e78 <vPortFree+0xb8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	43db      	mvns	r3, r3
 8006e42:	401a      	ands	r2, r3
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e48:	f7ff f9ba 	bl	80061c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <vPortFree+0xbc>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4413      	add	r3, r2
 8006e56:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <vPortFree+0xbc>)
 8006e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e5a:	6938      	ldr	r0, [r7, #16]
 8006e5c:	f000 f874 	bl	8006f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <vPortFree+0xc0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	4a06      	ldr	r2, [pc, #24]	; (8006e80 <vPortFree+0xc0>)
 8006e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e6a:	f7ff f9b7 	bl	80061dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e6e:	bf00      	nop
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20004350 	.word	0x20004350
 8006e7c:	20004340 	.word	0x20004340
 8006e80:	2000434c 	.word	0x2000434c

08006e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e90:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <prvHeapInit+0xac>)
 8006e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00c      	beq.n	8006eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3307      	adds	r3, #7
 8006ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0307 	bic.w	r3, r3, #7
 8006eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <prvHeapInit+0xac>)
 8006eb4:	4413      	add	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ebc:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <prvHeapInit+0xb0>)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ec2:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <prvHeapInit+0xb0>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	4413      	add	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0307 	bic.w	r3, r3, #7
 8006ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a15      	ldr	r2, [pc, #84]	; (8006f38 <prvHeapInit+0xb4>)
 8006ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <prvHeapInit+0xb4>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eee:	4b12      	ldr	r3, [pc, #72]	; (8006f38 <prvHeapInit+0xb4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	1ad2      	subs	r2, r2, r3
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f04:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <prvHeapInit+0xb4>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4a0a      	ldr	r2, [pc, #40]	; (8006f3c <prvHeapInit+0xb8>)
 8006f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <prvHeapInit+0xbc>)
 8006f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <prvHeapInit+0xc0>)
 8006f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f22:	601a      	str	r2, [r3, #0]
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20000734 	.word	0x20000734
 8006f34:	20004334 	.word	0x20004334
 8006f38:	2000433c 	.word	0x2000433c
 8006f3c:	20004344 	.word	0x20004344
 8006f40:	20004340 	.word	0x20004340
 8006f44:	20004350 	.word	0x20004350

08006f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f50:	4b28      	ldr	r3, [pc, #160]	; (8006ff4 <prvInsertBlockIntoFreeList+0xac>)
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	e002      	b.n	8006f5c <prvInsertBlockIntoFreeList+0x14>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d8f7      	bhi.n	8006f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	4413      	add	r3, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d108      	bne.n	8006f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	441a      	add	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	441a      	add	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d118      	bne.n	8006fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d00d      	beq.n	8006fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	441a      	add	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	e008      	b.n	8006fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fc6:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e003      	b.n	8006fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d002      	beq.n	8006fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fe6:	bf00      	nop
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20004334 	.word	0x20004334
 8006ff8:	2000433c 	.word	0x2000433c

08006ffc <atof>:
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	f000 be13 	b.w	8007c28 <strtod>

08007002 <atoi>:
 8007002:	220a      	movs	r2, #10
 8007004:	2100      	movs	r1, #0
 8007006:	f000 be9d 	b.w	8007d44 <strtol>

0800700a <sulp>:
 800700a:	b570      	push	{r4, r5, r6, lr}
 800700c:	4604      	mov	r4, r0
 800700e:	460d      	mov	r5, r1
 8007010:	ec45 4b10 	vmov	d0, r4, r5
 8007014:	4616      	mov	r6, r2
 8007016:	f003 fb7b 	bl	800a710 <__ulp>
 800701a:	ec51 0b10 	vmov	r0, r1, d0
 800701e:	b17e      	cbz	r6, 8007040 <sulp+0x36>
 8007020:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007024:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007028:	2b00      	cmp	r3, #0
 800702a:	dd09      	ble.n	8007040 <sulp+0x36>
 800702c:	051b      	lsls	r3, r3, #20
 800702e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007032:	2400      	movs	r4, #0
 8007034:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007038:	4622      	mov	r2, r4
 800703a:	462b      	mov	r3, r5
 800703c:	f7f9 faec 	bl	8000618 <__aeabi_dmul>
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	0000      	movs	r0, r0
 8007044:	0000      	movs	r0, r0
	...

08007048 <_strtod_l>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	ed2d 8b02 	vpush	{d8}
 8007050:	b09b      	sub	sp, #108	; 0x6c
 8007052:	4604      	mov	r4, r0
 8007054:	9213      	str	r2, [sp, #76]	; 0x4c
 8007056:	2200      	movs	r2, #0
 8007058:	9216      	str	r2, [sp, #88]	; 0x58
 800705a:	460d      	mov	r5, r1
 800705c:	f04f 0800 	mov.w	r8, #0
 8007060:	f04f 0900 	mov.w	r9, #0
 8007064:	460a      	mov	r2, r1
 8007066:	9215      	str	r2, [sp, #84]	; 0x54
 8007068:	7811      	ldrb	r1, [r2, #0]
 800706a:	292b      	cmp	r1, #43	; 0x2b
 800706c:	d04c      	beq.n	8007108 <_strtod_l+0xc0>
 800706e:	d83a      	bhi.n	80070e6 <_strtod_l+0x9e>
 8007070:	290d      	cmp	r1, #13
 8007072:	d834      	bhi.n	80070de <_strtod_l+0x96>
 8007074:	2908      	cmp	r1, #8
 8007076:	d834      	bhi.n	80070e2 <_strtod_l+0x9a>
 8007078:	2900      	cmp	r1, #0
 800707a:	d03d      	beq.n	80070f8 <_strtod_l+0xb0>
 800707c:	2200      	movs	r2, #0
 800707e:	920a      	str	r2, [sp, #40]	; 0x28
 8007080:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007082:	7832      	ldrb	r2, [r6, #0]
 8007084:	2a30      	cmp	r2, #48	; 0x30
 8007086:	f040 80b4 	bne.w	80071f2 <_strtod_l+0x1aa>
 800708a:	7872      	ldrb	r2, [r6, #1]
 800708c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007090:	2a58      	cmp	r2, #88	; 0x58
 8007092:	d170      	bne.n	8007176 <_strtod_l+0x12e>
 8007094:	9302      	str	r3, [sp, #8]
 8007096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	ab16      	add	r3, sp, #88	; 0x58
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4a8e      	ldr	r2, [pc, #568]	; (80072d8 <_strtod_l+0x290>)
 80070a0:	ab17      	add	r3, sp, #92	; 0x5c
 80070a2:	a915      	add	r1, sp, #84	; 0x54
 80070a4:	4620      	mov	r0, r4
 80070a6:	f002 fc11 	bl	80098cc <__gethex>
 80070aa:	f010 070f 	ands.w	r7, r0, #15
 80070ae:	4605      	mov	r5, r0
 80070b0:	d005      	beq.n	80070be <_strtod_l+0x76>
 80070b2:	2f06      	cmp	r7, #6
 80070b4:	d12a      	bne.n	800710c <_strtod_l+0xc4>
 80070b6:	3601      	adds	r6, #1
 80070b8:	2300      	movs	r3, #0
 80070ba:	9615      	str	r6, [sp, #84]	; 0x54
 80070bc:	930a      	str	r3, [sp, #40]	; 0x28
 80070be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f040 857f 	bne.w	8007bc4 <_strtod_l+0xb7c>
 80070c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c8:	b1db      	cbz	r3, 8007102 <_strtod_l+0xba>
 80070ca:	4642      	mov	r2, r8
 80070cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80070d0:	ec43 2b10 	vmov	d0, r2, r3
 80070d4:	b01b      	add	sp, #108	; 0x6c
 80070d6:	ecbd 8b02 	vpop	{d8}
 80070da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	2920      	cmp	r1, #32
 80070e0:	d1cc      	bne.n	800707c <_strtod_l+0x34>
 80070e2:	3201      	adds	r2, #1
 80070e4:	e7bf      	b.n	8007066 <_strtod_l+0x1e>
 80070e6:	292d      	cmp	r1, #45	; 0x2d
 80070e8:	d1c8      	bne.n	800707c <_strtod_l+0x34>
 80070ea:	2101      	movs	r1, #1
 80070ec:	910a      	str	r1, [sp, #40]	; 0x28
 80070ee:	1c51      	adds	r1, r2, #1
 80070f0:	9115      	str	r1, [sp, #84]	; 0x54
 80070f2:	7852      	ldrb	r2, [r2, #1]
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	d1c3      	bne.n	8007080 <_strtod_l+0x38>
 80070f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070fa:	9515      	str	r5, [sp, #84]	; 0x54
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 855f 	bne.w	8007bc0 <_strtod_l+0xb78>
 8007102:	4642      	mov	r2, r8
 8007104:	464b      	mov	r3, r9
 8007106:	e7e3      	b.n	80070d0 <_strtod_l+0x88>
 8007108:	2100      	movs	r1, #0
 800710a:	e7ef      	b.n	80070ec <_strtod_l+0xa4>
 800710c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800710e:	b13a      	cbz	r2, 8007120 <_strtod_l+0xd8>
 8007110:	2135      	movs	r1, #53	; 0x35
 8007112:	a818      	add	r0, sp, #96	; 0x60
 8007114:	f003 fbf9 	bl	800a90a <__copybits>
 8007118:	9916      	ldr	r1, [sp, #88]	; 0x58
 800711a:	4620      	mov	r0, r4
 800711c:	f002 ffcc 	bl	800a0b8 <_Bfree>
 8007120:	3f01      	subs	r7, #1
 8007122:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007124:	2f04      	cmp	r7, #4
 8007126:	d806      	bhi.n	8007136 <_strtod_l+0xee>
 8007128:	e8df f007 	tbb	[pc, r7]
 800712c:	201d0314 	.word	0x201d0314
 8007130:	14          	.byte	0x14
 8007131:	00          	.byte	0x00
 8007132:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007136:	05e9      	lsls	r1, r5, #23
 8007138:	bf48      	it	mi
 800713a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800713e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007142:	0d1b      	lsrs	r3, r3, #20
 8007144:	051b      	lsls	r3, r3, #20
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1b9      	bne.n	80070be <_strtod_l+0x76>
 800714a:	f001 fc4d 	bl	80089e8 <__errno>
 800714e:	2322      	movs	r3, #34	; 0x22
 8007150:	6003      	str	r3, [r0, #0]
 8007152:	e7b4      	b.n	80070be <_strtod_l+0x76>
 8007154:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007158:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800715c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007160:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007164:	e7e7      	b.n	8007136 <_strtod_l+0xee>
 8007166:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80072e0 <_strtod_l+0x298>
 800716a:	e7e4      	b.n	8007136 <_strtod_l+0xee>
 800716c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007170:	f04f 38ff 	mov.w	r8, #4294967295
 8007174:	e7df      	b.n	8007136 <_strtod_l+0xee>
 8007176:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	9215      	str	r2, [sp, #84]	; 0x54
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b30      	cmp	r3, #48	; 0x30
 8007180:	d0f9      	beq.n	8007176 <_strtod_l+0x12e>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d09b      	beq.n	80070be <_strtod_l+0x76>
 8007186:	2301      	movs	r3, #1
 8007188:	f04f 0a00 	mov.w	sl, #0
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007190:	930b      	str	r3, [sp, #44]	; 0x2c
 8007192:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007196:	46d3      	mov	fp, sl
 8007198:	220a      	movs	r2, #10
 800719a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800719c:	7806      	ldrb	r6, [r0, #0]
 800719e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80071a2:	b2d9      	uxtb	r1, r3
 80071a4:	2909      	cmp	r1, #9
 80071a6:	d926      	bls.n	80071f6 <_strtod_l+0x1ae>
 80071a8:	494c      	ldr	r1, [pc, #304]	; (80072dc <_strtod_l+0x294>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	f001 fb69 	bl	8008882 <strncmp>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d030      	beq.n	8007216 <_strtod_l+0x1ce>
 80071b4:	2000      	movs	r0, #0
 80071b6:	4632      	mov	r2, r6
 80071b8:	9005      	str	r0, [sp, #20]
 80071ba:	465e      	mov	r6, fp
 80071bc:	4603      	mov	r3, r0
 80071be:	2a65      	cmp	r2, #101	; 0x65
 80071c0:	d001      	beq.n	80071c6 <_strtod_l+0x17e>
 80071c2:	2a45      	cmp	r2, #69	; 0x45
 80071c4:	d113      	bne.n	80071ee <_strtod_l+0x1a6>
 80071c6:	b91e      	cbnz	r6, 80071d0 <_strtod_l+0x188>
 80071c8:	9a04      	ldr	r2, [sp, #16]
 80071ca:	4302      	orrs	r2, r0
 80071cc:	d094      	beq.n	80070f8 <_strtod_l+0xb0>
 80071ce:	2600      	movs	r6, #0
 80071d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80071d2:	1c6a      	adds	r2, r5, #1
 80071d4:	9215      	str	r2, [sp, #84]	; 0x54
 80071d6:	786a      	ldrb	r2, [r5, #1]
 80071d8:	2a2b      	cmp	r2, #43	; 0x2b
 80071da:	d074      	beq.n	80072c6 <_strtod_l+0x27e>
 80071dc:	2a2d      	cmp	r2, #45	; 0x2d
 80071de:	d078      	beq.n	80072d2 <_strtod_l+0x28a>
 80071e0:	f04f 0c00 	mov.w	ip, #0
 80071e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80071e8:	2909      	cmp	r1, #9
 80071ea:	d97f      	bls.n	80072ec <_strtod_l+0x2a4>
 80071ec:	9515      	str	r5, [sp, #84]	; 0x54
 80071ee:	2700      	movs	r7, #0
 80071f0:	e09e      	b.n	8007330 <_strtod_l+0x2e8>
 80071f2:	2300      	movs	r3, #0
 80071f4:	e7c8      	b.n	8007188 <_strtod_l+0x140>
 80071f6:	f1bb 0f08 	cmp.w	fp, #8
 80071fa:	bfd8      	it	le
 80071fc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80071fe:	f100 0001 	add.w	r0, r0, #1
 8007202:	bfda      	itte	le
 8007204:	fb02 3301 	mlale	r3, r2, r1, r3
 8007208:	9309      	strle	r3, [sp, #36]	; 0x24
 800720a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800720e:	f10b 0b01 	add.w	fp, fp, #1
 8007212:	9015      	str	r0, [sp, #84]	; 0x54
 8007214:	e7c1      	b.n	800719a <_strtod_l+0x152>
 8007216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	9215      	str	r2, [sp, #84]	; 0x54
 800721c:	785a      	ldrb	r2, [r3, #1]
 800721e:	f1bb 0f00 	cmp.w	fp, #0
 8007222:	d037      	beq.n	8007294 <_strtod_l+0x24c>
 8007224:	9005      	str	r0, [sp, #20]
 8007226:	465e      	mov	r6, fp
 8007228:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800722c:	2b09      	cmp	r3, #9
 800722e:	d912      	bls.n	8007256 <_strtod_l+0x20e>
 8007230:	2301      	movs	r3, #1
 8007232:	e7c4      	b.n	80071be <_strtod_l+0x176>
 8007234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	9215      	str	r2, [sp, #84]	; 0x54
 800723a:	785a      	ldrb	r2, [r3, #1]
 800723c:	3001      	adds	r0, #1
 800723e:	2a30      	cmp	r2, #48	; 0x30
 8007240:	d0f8      	beq.n	8007234 <_strtod_l+0x1ec>
 8007242:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007246:	2b08      	cmp	r3, #8
 8007248:	f200 84c1 	bhi.w	8007bce <_strtod_l+0xb86>
 800724c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800724e:	9005      	str	r0, [sp, #20]
 8007250:	2000      	movs	r0, #0
 8007252:	930b      	str	r3, [sp, #44]	; 0x2c
 8007254:	4606      	mov	r6, r0
 8007256:	3a30      	subs	r2, #48	; 0x30
 8007258:	f100 0301 	add.w	r3, r0, #1
 800725c:	d014      	beq.n	8007288 <_strtod_l+0x240>
 800725e:	9905      	ldr	r1, [sp, #20]
 8007260:	4419      	add	r1, r3
 8007262:	9105      	str	r1, [sp, #20]
 8007264:	4633      	mov	r3, r6
 8007266:	eb00 0c06 	add.w	ip, r0, r6
 800726a:	210a      	movs	r1, #10
 800726c:	4563      	cmp	r3, ip
 800726e:	d113      	bne.n	8007298 <_strtod_l+0x250>
 8007270:	1833      	adds	r3, r6, r0
 8007272:	2b08      	cmp	r3, #8
 8007274:	f106 0601 	add.w	r6, r6, #1
 8007278:	4406      	add	r6, r0
 800727a:	dc1a      	bgt.n	80072b2 <_strtod_l+0x26a>
 800727c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800727e:	230a      	movs	r3, #10
 8007280:	fb03 2301 	mla	r3, r3, r1, r2
 8007284:	9309      	str	r3, [sp, #36]	; 0x24
 8007286:	2300      	movs	r3, #0
 8007288:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800728a:	1c51      	adds	r1, r2, #1
 800728c:	9115      	str	r1, [sp, #84]	; 0x54
 800728e:	7852      	ldrb	r2, [r2, #1]
 8007290:	4618      	mov	r0, r3
 8007292:	e7c9      	b.n	8007228 <_strtod_l+0x1e0>
 8007294:	4658      	mov	r0, fp
 8007296:	e7d2      	b.n	800723e <_strtod_l+0x1f6>
 8007298:	2b08      	cmp	r3, #8
 800729a:	f103 0301 	add.w	r3, r3, #1
 800729e:	dc03      	bgt.n	80072a8 <_strtod_l+0x260>
 80072a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072a2:	434f      	muls	r7, r1
 80072a4:	9709      	str	r7, [sp, #36]	; 0x24
 80072a6:	e7e1      	b.n	800726c <_strtod_l+0x224>
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	bfd8      	it	le
 80072ac:	fb01 fa0a 	mulle.w	sl, r1, sl
 80072b0:	e7dc      	b.n	800726c <_strtod_l+0x224>
 80072b2:	2e10      	cmp	r6, #16
 80072b4:	bfdc      	itt	le
 80072b6:	230a      	movle	r3, #10
 80072b8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80072bc:	e7e3      	b.n	8007286 <_strtod_l+0x23e>
 80072be:	2300      	movs	r3, #0
 80072c0:	9305      	str	r3, [sp, #20]
 80072c2:	2301      	movs	r3, #1
 80072c4:	e780      	b.n	80071c8 <_strtod_l+0x180>
 80072c6:	f04f 0c00 	mov.w	ip, #0
 80072ca:	1caa      	adds	r2, r5, #2
 80072cc:	9215      	str	r2, [sp, #84]	; 0x54
 80072ce:	78aa      	ldrb	r2, [r5, #2]
 80072d0:	e788      	b.n	80071e4 <_strtod_l+0x19c>
 80072d2:	f04f 0c01 	mov.w	ip, #1
 80072d6:	e7f8      	b.n	80072ca <_strtod_l+0x282>
 80072d8:	0800b54c 	.word	0x0800b54c
 80072dc:	0800b548 	.word	0x0800b548
 80072e0:	7ff00000 	.word	0x7ff00000
 80072e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072e6:	1c51      	adds	r1, r2, #1
 80072e8:	9115      	str	r1, [sp, #84]	; 0x54
 80072ea:	7852      	ldrb	r2, [r2, #1]
 80072ec:	2a30      	cmp	r2, #48	; 0x30
 80072ee:	d0f9      	beq.n	80072e4 <_strtod_l+0x29c>
 80072f0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80072f4:	2908      	cmp	r1, #8
 80072f6:	f63f af7a 	bhi.w	80071ee <_strtod_l+0x1a6>
 80072fa:	3a30      	subs	r2, #48	; 0x30
 80072fc:	9208      	str	r2, [sp, #32]
 80072fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007300:	920c      	str	r2, [sp, #48]	; 0x30
 8007302:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007304:	1c57      	adds	r7, r2, #1
 8007306:	9715      	str	r7, [sp, #84]	; 0x54
 8007308:	7852      	ldrb	r2, [r2, #1]
 800730a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800730e:	f1be 0f09 	cmp.w	lr, #9
 8007312:	d938      	bls.n	8007386 <_strtod_l+0x33e>
 8007314:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007316:	1a7f      	subs	r7, r7, r1
 8007318:	2f08      	cmp	r7, #8
 800731a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800731e:	dc03      	bgt.n	8007328 <_strtod_l+0x2e0>
 8007320:	9908      	ldr	r1, [sp, #32]
 8007322:	428f      	cmp	r7, r1
 8007324:	bfa8      	it	ge
 8007326:	460f      	movge	r7, r1
 8007328:	f1bc 0f00 	cmp.w	ip, #0
 800732c:	d000      	beq.n	8007330 <_strtod_l+0x2e8>
 800732e:	427f      	negs	r7, r7
 8007330:	2e00      	cmp	r6, #0
 8007332:	d14f      	bne.n	80073d4 <_strtod_l+0x38c>
 8007334:	9904      	ldr	r1, [sp, #16]
 8007336:	4301      	orrs	r1, r0
 8007338:	f47f aec1 	bne.w	80070be <_strtod_l+0x76>
 800733c:	2b00      	cmp	r3, #0
 800733e:	f47f aedb 	bne.w	80070f8 <_strtod_l+0xb0>
 8007342:	2a69      	cmp	r2, #105	; 0x69
 8007344:	d029      	beq.n	800739a <_strtod_l+0x352>
 8007346:	dc26      	bgt.n	8007396 <_strtod_l+0x34e>
 8007348:	2a49      	cmp	r2, #73	; 0x49
 800734a:	d026      	beq.n	800739a <_strtod_l+0x352>
 800734c:	2a4e      	cmp	r2, #78	; 0x4e
 800734e:	f47f aed3 	bne.w	80070f8 <_strtod_l+0xb0>
 8007352:	499b      	ldr	r1, [pc, #620]	; (80075c0 <_strtod_l+0x578>)
 8007354:	a815      	add	r0, sp, #84	; 0x54
 8007356:	f002 fcf9 	bl	8009d4c <__match>
 800735a:	2800      	cmp	r0, #0
 800735c:	f43f aecc 	beq.w	80070f8 <_strtod_l+0xb0>
 8007360:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b28      	cmp	r3, #40	; 0x28
 8007366:	d12f      	bne.n	80073c8 <_strtod_l+0x380>
 8007368:	4996      	ldr	r1, [pc, #600]	; (80075c4 <_strtod_l+0x57c>)
 800736a:	aa18      	add	r2, sp, #96	; 0x60
 800736c:	a815      	add	r0, sp, #84	; 0x54
 800736e:	f002 fd01 	bl	8009d74 <__hexnan>
 8007372:	2805      	cmp	r0, #5
 8007374:	d128      	bne.n	80073c8 <_strtod_l+0x380>
 8007376:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007378:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800737c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007380:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007384:	e69b      	b.n	80070be <_strtod_l+0x76>
 8007386:	9f08      	ldr	r7, [sp, #32]
 8007388:	210a      	movs	r1, #10
 800738a:	fb01 2107 	mla	r1, r1, r7, r2
 800738e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007392:	9208      	str	r2, [sp, #32]
 8007394:	e7b5      	b.n	8007302 <_strtod_l+0x2ba>
 8007396:	2a6e      	cmp	r2, #110	; 0x6e
 8007398:	e7d9      	b.n	800734e <_strtod_l+0x306>
 800739a:	498b      	ldr	r1, [pc, #556]	; (80075c8 <_strtod_l+0x580>)
 800739c:	a815      	add	r0, sp, #84	; 0x54
 800739e:	f002 fcd5 	bl	8009d4c <__match>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f43f aea8 	beq.w	80070f8 <_strtod_l+0xb0>
 80073a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073aa:	4988      	ldr	r1, [pc, #544]	; (80075cc <_strtod_l+0x584>)
 80073ac:	3b01      	subs	r3, #1
 80073ae:	a815      	add	r0, sp, #84	; 0x54
 80073b0:	9315      	str	r3, [sp, #84]	; 0x54
 80073b2:	f002 fccb 	bl	8009d4c <__match>
 80073b6:	b910      	cbnz	r0, 80073be <_strtod_l+0x376>
 80073b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ba:	3301      	adds	r3, #1
 80073bc:	9315      	str	r3, [sp, #84]	; 0x54
 80073be:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80075dc <_strtod_l+0x594>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	e67a      	b.n	80070be <_strtod_l+0x76>
 80073c8:	4881      	ldr	r0, [pc, #516]	; (80075d0 <_strtod_l+0x588>)
 80073ca:	f001 fb49 	bl	8008a60 <nan>
 80073ce:	ec59 8b10 	vmov	r8, r9, d0
 80073d2:	e674      	b.n	80070be <_strtod_l+0x76>
 80073d4:	9b05      	ldr	r3, [sp, #20]
 80073d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073d8:	1afb      	subs	r3, r7, r3
 80073da:	f1bb 0f00 	cmp.w	fp, #0
 80073de:	bf08      	it	eq
 80073e0:	46b3      	moveq	fp, r6
 80073e2:	2e10      	cmp	r6, #16
 80073e4:	9308      	str	r3, [sp, #32]
 80073e6:	4635      	mov	r5, r6
 80073e8:	bfa8      	it	ge
 80073ea:	2510      	movge	r5, #16
 80073ec:	f7f9 f89a 	bl	8000524 <__aeabi_ui2d>
 80073f0:	2e09      	cmp	r6, #9
 80073f2:	4680      	mov	r8, r0
 80073f4:	4689      	mov	r9, r1
 80073f6:	dd13      	ble.n	8007420 <_strtod_l+0x3d8>
 80073f8:	4b76      	ldr	r3, [pc, #472]	; (80075d4 <_strtod_l+0x58c>)
 80073fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80073fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007402:	f7f9 f909 	bl	8000618 <__aeabi_dmul>
 8007406:	4680      	mov	r8, r0
 8007408:	4650      	mov	r0, sl
 800740a:	4689      	mov	r9, r1
 800740c:	f7f9 f88a 	bl	8000524 <__aeabi_ui2d>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4640      	mov	r0, r8
 8007416:	4649      	mov	r1, r9
 8007418:	f7f8 ff48 	bl	80002ac <__adddf3>
 800741c:	4680      	mov	r8, r0
 800741e:	4689      	mov	r9, r1
 8007420:	2e0f      	cmp	r6, #15
 8007422:	dc38      	bgt.n	8007496 <_strtod_l+0x44e>
 8007424:	9b08      	ldr	r3, [sp, #32]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f43f ae49 	beq.w	80070be <_strtod_l+0x76>
 800742c:	dd24      	ble.n	8007478 <_strtod_l+0x430>
 800742e:	2b16      	cmp	r3, #22
 8007430:	dc0b      	bgt.n	800744a <_strtod_l+0x402>
 8007432:	4968      	ldr	r1, [pc, #416]	; (80075d4 <_strtod_l+0x58c>)
 8007434:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007438:	e9d1 0100 	ldrd	r0, r1, [r1]
 800743c:	4642      	mov	r2, r8
 800743e:	464b      	mov	r3, r9
 8007440:	f7f9 f8ea 	bl	8000618 <__aeabi_dmul>
 8007444:	4680      	mov	r8, r0
 8007446:	4689      	mov	r9, r1
 8007448:	e639      	b.n	80070be <_strtod_l+0x76>
 800744a:	9a08      	ldr	r2, [sp, #32]
 800744c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007450:	4293      	cmp	r3, r2
 8007452:	db20      	blt.n	8007496 <_strtod_l+0x44e>
 8007454:	4c5f      	ldr	r4, [pc, #380]	; (80075d4 <_strtod_l+0x58c>)
 8007456:	f1c6 060f 	rsb	r6, r6, #15
 800745a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800745e:	4642      	mov	r2, r8
 8007460:	464b      	mov	r3, r9
 8007462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007466:	f7f9 f8d7 	bl	8000618 <__aeabi_dmul>
 800746a:	9b08      	ldr	r3, [sp, #32]
 800746c:	1b9e      	subs	r6, r3, r6
 800746e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007472:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007476:	e7e3      	b.n	8007440 <_strtod_l+0x3f8>
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	3316      	adds	r3, #22
 800747c:	db0b      	blt.n	8007496 <_strtod_l+0x44e>
 800747e:	9b05      	ldr	r3, [sp, #20]
 8007480:	1bdf      	subs	r7, r3, r7
 8007482:	4b54      	ldr	r3, [pc, #336]	; (80075d4 <_strtod_l+0x58c>)
 8007484:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 f9ec 	bl	800086c <__aeabi_ddiv>
 8007494:	e7d6      	b.n	8007444 <_strtod_l+0x3fc>
 8007496:	9b08      	ldr	r3, [sp, #32]
 8007498:	1b75      	subs	r5, r6, r5
 800749a:	441d      	add	r5, r3
 800749c:	2d00      	cmp	r5, #0
 800749e:	dd70      	ble.n	8007582 <_strtod_l+0x53a>
 80074a0:	f015 030f 	ands.w	r3, r5, #15
 80074a4:	d00a      	beq.n	80074bc <_strtod_l+0x474>
 80074a6:	494b      	ldr	r1, [pc, #300]	; (80075d4 <_strtod_l+0x58c>)
 80074a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074ac:	4642      	mov	r2, r8
 80074ae:	464b      	mov	r3, r9
 80074b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b4:	f7f9 f8b0 	bl	8000618 <__aeabi_dmul>
 80074b8:	4680      	mov	r8, r0
 80074ba:	4689      	mov	r9, r1
 80074bc:	f035 050f 	bics.w	r5, r5, #15
 80074c0:	d04d      	beq.n	800755e <_strtod_l+0x516>
 80074c2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80074c6:	dd22      	ble.n	800750e <_strtod_l+0x4c6>
 80074c8:	2500      	movs	r5, #0
 80074ca:	46ab      	mov	fp, r5
 80074cc:	9509      	str	r5, [sp, #36]	; 0x24
 80074ce:	9505      	str	r5, [sp, #20]
 80074d0:	2322      	movs	r3, #34	; 0x22
 80074d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80075dc <_strtod_l+0x594>
 80074d6:	6023      	str	r3, [r4, #0]
 80074d8:	f04f 0800 	mov.w	r8, #0
 80074dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f43f aded 	beq.w	80070be <_strtod_l+0x76>
 80074e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80074e6:	4620      	mov	r0, r4
 80074e8:	f002 fde6 	bl	800a0b8 <_Bfree>
 80074ec:	9905      	ldr	r1, [sp, #20]
 80074ee:	4620      	mov	r0, r4
 80074f0:	f002 fde2 	bl	800a0b8 <_Bfree>
 80074f4:	4659      	mov	r1, fp
 80074f6:	4620      	mov	r0, r4
 80074f8:	f002 fdde 	bl	800a0b8 <_Bfree>
 80074fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074fe:	4620      	mov	r0, r4
 8007500:	f002 fdda 	bl	800a0b8 <_Bfree>
 8007504:	4629      	mov	r1, r5
 8007506:	4620      	mov	r0, r4
 8007508:	f002 fdd6 	bl	800a0b8 <_Bfree>
 800750c:	e5d7      	b.n	80070be <_strtod_l+0x76>
 800750e:	4b32      	ldr	r3, [pc, #200]	; (80075d8 <_strtod_l+0x590>)
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	2300      	movs	r3, #0
 8007514:	112d      	asrs	r5, r5, #4
 8007516:	4640      	mov	r0, r8
 8007518:	4649      	mov	r1, r9
 800751a:	469a      	mov	sl, r3
 800751c:	2d01      	cmp	r5, #1
 800751e:	dc21      	bgt.n	8007564 <_strtod_l+0x51c>
 8007520:	b10b      	cbz	r3, 8007526 <_strtod_l+0x4de>
 8007522:	4680      	mov	r8, r0
 8007524:	4689      	mov	r9, r1
 8007526:	492c      	ldr	r1, [pc, #176]	; (80075d8 <_strtod_l+0x590>)
 8007528:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800752c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007530:	4642      	mov	r2, r8
 8007532:	464b      	mov	r3, r9
 8007534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007538:	f7f9 f86e 	bl	8000618 <__aeabi_dmul>
 800753c:	4b27      	ldr	r3, [pc, #156]	; (80075dc <_strtod_l+0x594>)
 800753e:	460a      	mov	r2, r1
 8007540:	400b      	ands	r3, r1
 8007542:	4927      	ldr	r1, [pc, #156]	; (80075e0 <_strtod_l+0x598>)
 8007544:	428b      	cmp	r3, r1
 8007546:	4680      	mov	r8, r0
 8007548:	d8be      	bhi.n	80074c8 <_strtod_l+0x480>
 800754a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800754e:	428b      	cmp	r3, r1
 8007550:	bf86      	itte	hi
 8007552:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80075e4 <_strtod_l+0x59c>
 8007556:	f04f 38ff 	movhi.w	r8, #4294967295
 800755a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800755e:	2300      	movs	r3, #0
 8007560:	9304      	str	r3, [sp, #16]
 8007562:	e07b      	b.n	800765c <_strtod_l+0x614>
 8007564:	07ea      	lsls	r2, r5, #31
 8007566:	d505      	bpl.n	8007574 <_strtod_l+0x52c>
 8007568:	9b04      	ldr	r3, [sp, #16]
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f7f9 f853 	bl	8000618 <__aeabi_dmul>
 8007572:	2301      	movs	r3, #1
 8007574:	9a04      	ldr	r2, [sp, #16]
 8007576:	3208      	adds	r2, #8
 8007578:	f10a 0a01 	add.w	sl, sl, #1
 800757c:	106d      	asrs	r5, r5, #1
 800757e:	9204      	str	r2, [sp, #16]
 8007580:	e7cc      	b.n	800751c <_strtod_l+0x4d4>
 8007582:	d0ec      	beq.n	800755e <_strtod_l+0x516>
 8007584:	426d      	negs	r5, r5
 8007586:	f015 020f 	ands.w	r2, r5, #15
 800758a:	d00a      	beq.n	80075a2 <_strtod_l+0x55a>
 800758c:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <_strtod_l+0x58c>)
 800758e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	f7f9 f967 	bl	800086c <__aeabi_ddiv>
 800759e:	4680      	mov	r8, r0
 80075a0:	4689      	mov	r9, r1
 80075a2:	112d      	asrs	r5, r5, #4
 80075a4:	d0db      	beq.n	800755e <_strtod_l+0x516>
 80075a6:	2d1f      	cmp	r5, #31
 80075a8:	dd1e      	ble.n	80075e8 <_strtod_l+0x5a0>
 80075aa:	2500      	movs	r5, #0
 80075ac:	46ab      	mov	fp, r5
 80075ae:	9509      	str	r5, [sp, #36]	; 0x24
 80075b0:	9505      	str	r5, [sp, #20]
 80075b2:	2322      	movs	r3, #34	; 0x22
 80075b4:	f04f 0800 	mov.w	r8, #0
 80075b8:	f04f 0900 	mov.w	r9, #0
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	e78d      	b.n	80074dc <_strtod_l+0x494>
 80075c0:	0800b6ae 	.word	0x0800b6ae
 80075c4:	0800b560 	.word	0x0800b560
 80075c8:	0800b6a6 	.word	0x0800b6a6
 80075cc:	0800b6e0 	.word	0x0800b6e0
 80075d0:	0800b970 	.word	0x0800b970
 80075d4:	0800b850 	.word	0x0800b850
 80075d8:	0800b828 	.word	0x0800b828
 80075dc:	7ff00000 	.word	0x7ff00000
 80075e0:	7ca00000 	.word	0x7ca00000
 80075e4:	7fefffff 	.word	0x7fefffff
 80075e8:	f015 0310 	ands.w	r3, r5, #16
 80075ec:	bf18      	it	ne
 80075ee:	236a      	movne	r3, #106	; 0x6a
 80075f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007994 <_strtod_l+0x94c>
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	2300      	movs	r3, #0
 80075fc:	07ea      	lsls	r2, r5, #31
 80075fe:	d504      	bpl.n	800760a <_strtod_l+0x5c2>
 8007600:	e9da 2300 	ldrd	r2, r3, [sl]
 8007604:	f7f9 f808 	bl	8000618 <__aeabi_dmul>
 8007608:	2301      	movs	r3, #1
 800760a:	106d      	asrs	r5, r5, #1
 800760c:	f10a 0a08 	add.w	sl, sl, #8
 8007610:	d1f4      	bne.n	80075fc <_strtod_l+0x5b4>
 8007612:	b10b      	cbz	r3, 8007618 <_strtod_l+0x5d0>
 8007614:	4680      	mov	r8, r0
 8007616:	4689      	mov	r9, r1
 8007618:	9b04      	ldr	r3, [sp, #16]
 800761a:	b1bb      	cbz	r3, 800764c <_strtod_l+0x604>
 800761c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007620:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007624:	2b00      	cmp	r3, #0
 8007626:	4649      	mov	r1, r9
 8007628:	dd10      	ble.n	800764c <_strtod_l+0x604>
 800762a:	2b1f      	cmp	r3, #31
 800762c:	f340 811e 	ble.w	800786c <_strtod_l+0x824>
 8007630:	2b34      	cmp	r3, #52	; 0x34
 8007632:	bfde      	ittt	le
 8007634:	f04f 33ff 	movle.w	r3, #4294967295
 8007638:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800763c:	4093      	lslle	r3, r2
 800763e:	f04f 0800 	mov.w	r8, #0
 8007642:	bfcc      	ite	gt
 8007644:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007648:	ea03 0901 	andle.w	r9, r3, r1
 800764c:	2200      	movs	r2, #0
 800764e:	2300      	movs	r3, #0
 8007650:	4640      	mov	r0, r8
 8007652:	4649      	mov	r1, r9
 8007654:	f7f9 fa48 	bl	8000ae8 <__aeabi_dcmpeq>
 8007658:	2800      	cmp	r0, #0
 800765a:	d1a6      	bne.n	80075aa <_strtod_l+0x562>
 800765c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007662:	4633      	mov	r3, r6
 8007664:	465a      	mov	r2, fp
 8007666:	4620      	mov	r0, r4
 8007668:	f002 fd8e 	bl	800a188 <__s2b>
 800766c:	9009      	str	r0, [sp, #36]	; 0x24
 800766e:	2800      	cmp	r0, #0
 8007670:	f43f af2a 	beq.w	80074c8 <_strtod_l+0x480>
 8007674:	9a08      	ldr	r2, [sp, #32]
 8007676:	9b05      	ldr	r3, [sp, #20]
 8007678:	2a00      	cmp	r2, #0
 800767a:	eba3 0307 	sub.w	r3, r3, r7
 800767e:	bfa8      	it	ge
 8007680:	2300      	movge	r3, #0
 8007682:	930c      	str	r3, [sp, #48]	; 0x30
 8007684:	2500      	movs	r5, #0
 8007686:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800768a:	9312      	str	r3, [sp, #72]	; 0x48
 800768c:	46ab      	mov	fp, r5
 800768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007690:	4620      	mov	r0, r4
 8007692:	6859      	ldr	r1, [r3, #4]
 8007694:	f002 fcd0 	bl	800a038 <_Balloc>
 8007698:	9005      	str	r0, [sp, #20]
 800769a:	2800      	cmp	r0, #0
 800769c:	f43f af18 	beq.w	80074d0 <_strtod_l+0x488>
 80076a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	3202      	adds	r2, #2
 80076a6:	f103 010c 	add.w	r1, r3, #12
 80076aa:	0092      	lsls	r2, r2, #2
 80076ac:	300c      	adds	r0, #12
 80076ae:	f001 f9c7 	bl	8008a40 <memcpy>
 80076b2:	ec49 8b10 	vmov	d0, r8, r9
 80076b6:	aa18      	add	r2, sp, #96	; 0x60
 80076b8:	a917      	add	r1, sp, #92	; 0x5c
 80076ba:	4620      	mov	r0, r4
 80076bc:	f003 f898 	bl	800a7f0 <__d2b>
 80076c0:	ec49 8b18 	vmov	d8, r8, r9
 80076c4:	9016      	str	r0, [sp, #88]	; 0x58
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f43f af02 	beq.w	80074d0 <_strtod_l+0x488>
 80076cc:	2101      	movs	r1, #1
 80076ce:	4620      	mov	r0, r4
 80076d0:	f002 fdf2 	bl	800a2b8 <__i2b>
 80076d4:	4683      	mov	fp, r0
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f43f aefa 	beq.w	80074d0 <_strtod_l+0x488>
 80076dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80076de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80076e0:	2e00      	cmp	r6, #0
 80076e2:	bfab      	itete	ge
 80076e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80076e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80076e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80076ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80076ee:	bfac      	ite	ge
 80076f0:	eb06 0a03 	addge.w	sl, r6, r3
 80076f4:	1b9f      	sublt	r7, r3, r6
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	1af6      	subs	r6, r6, r3
 80076fa:	4416      	add	r6, r2
 80076fc:	4ba0      	ldr	r3, [pc, #640]	; (8007980 <_strtod_l+0x938>)
 80076fe:	3e01      	subs	r6, #1
 8007700:	429e      	cmp	r6, r3
 8007702:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007706:	f280 80c4 	bge.w	8007892 <_strtod_l+0x84a>
 800770a:	1b9b      	subs	r3, r3, r6
 800770c:	2b1f      	cmp	r3, #31
 800770e:	eba2 0203 	sub.w	r2, r2, r3
 8007712:	f04f 0101 	mov.w	r1, #1
 8007716:	f300 80b0 	bgt.w	800787a <_strtod_l+0x832>
 800771a:	fa01 f303 	lsl.w	r3, r1, r3
 800771e:	930e      	str	r3, [sp, #56]	; 0x38
 8007720:	2300      	movs	r3, #0
 8007722:	930d      	str	r3, [sp, #52]	; 0x34
 8007724:	eb0a 0602 	add.w	r6, sl, r2
 8007728:	9b04      	ldr	r3, [sp, #16]
 800772a:	45b2      	cmp	sl, r6
 800772c:	4417      	add	r7, r2
 800772e:	441f      	add	r7, r3
 8007730:	4653      	mov	r3, sl
 8007732:	bfa8      	it	ge
 8007734:	4633      	movge	r3, r6
 8007736:	42bb      	cmp	r3, r7
 8007738:	bfa8      	it	ge
 800773a:	463b      	movge	r3, r7
 800773c:	2b00      	cmp	r3, #0
 800773e:	bfc2      	ittt	gt
 8007740:	1af6      	subgt	r6, r6, r3
 8007742:	1aff      	subgt	r7, r7, r3
 8007744:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800774a:	2b00      	cmp	r3, #0
 800774c:	dd17      	ble.n	800777e <_strtod_l+0x736>
 800774e:	4659      	mov	r1, fp
 8007750:	461a      	mov	r2, r3
 8007752:	4620      	mov	r0, r4
 8007754:	f002 fe70 	bl	800a438 <__pow5mult>
 8007758:	4683      	mov	fp, r0
 800775a:	2800      	cmp	r0, #0
 800775c:	f43f aeb8 	beq.w	80074d0 <_strtod_l+0x488>
 8007760:	4601      	mov	r1, r0
 8007762:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007764:	4620      	mov	r0, r4
 8007766:	f002 fdbd 	bl	800a2e4 <__multiply>
 800776a:	900b      	str	r0, [sp, #44]	; 0x2c
 800776c:	2800      	cmp	r0, #0
 800776e:	f43f aeaf 	beq.w	80074d0 <_strtod_l+0x488>
 8007772:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007774:	4620      	mov	r0, r4
 8007776:	f002 fc9f 	bl	800a0b8 <_Bfree>
 800777a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800777c:	9316      	str	r3, [sp, #88]	; 0x58
 800777e:	2e00      	cmp	r6, #0
 8007780:	f300 808c 	bgt.w	800789c <_strtod_l+0x854>
 8007784:	9b08      	ldr	r3, [sp, #32]
 8007786:	2b00      	cmp	r3, #0
 8007788:	dd08      	ble.n	800779c <_strtod_l+0x754>
 800778a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800778c:	9905      	ldr	r1, [sp, #20]
 800778e:	4620      	mov	r0, r4
 8007790:	f002 fe52 	bl	800a438 <__pow5mult>
 8007794:	9005      	str	r0, [sp, #20]
 8007796:	2800      	cmp	r0, #0
 8007798:	f43f ae9a 	beq.w	80074d0 <_strtod_l+0x488>
 800779c:	2f00      	cmp	r7, #0
 800779e:	dd08      	ble.n	80077b2 <_strtod_l+0x76a>
 80077a0:	9905      	ldr	r1, [sp, #20]
 80077a2:	463a      	mov	r2, r7
 80077a4:	4620      	mov	r0, r4
 80077a6:	f002 fea1 	bl	800a4ec <__lshift>
 80077aa:	9005      	str	r0, [sp, #20]
 80077ac:	2800      	cmp	r0, #0
 80077ae:	f43f ae8f 	beq.w	80074d0 <_strtod_l+0x488>
 80077b2:	f1ba 0f00 	cmp.w	sl, #0
 80077b6:	dd08      	ble.n	80077ca <_strtod_l+0x782>
 80077b8:	4659      	mov	r1, fp
 80077ba:	4652      	mov	r2, sl
 80077bc:	4620      	mov	r0, r4
 80077be:	f002 fe95 	bl	800a4ec <__lshift>
 80077c2:	4683      	mov	fp, r0
 80077c4:	2800      	cmp	r0, #0
 80077c6:	f43f ae83 	beq.w	80074d0 <_strtod_l+0x488>
 80077ca:	9a05      	ldr	r2, [sp, #20]
 80077cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077ce:	4620      	mov	r0, r4
 80077d0:	f002 ff14 	bl	800a5fc <__mdiff>
 80077d4:	4605      	mov	r5, r0
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f43f ae7a 	beq.w	80074d0 <_strtod_l+0x488>
 80077dc:	68c3      	ldr	r3, [r0, #12]
 80077de:	930b      	str	r3, [sp, #44]	; 0x2c
 80077e0:	2300      	movs	r3, #0
 80077e2:	60c3      	str	r3, [r0, #12]
 80077e4:	4659      	mov	r1, fp
 80077e6:	f002 feed 	bl	800a5c4 <__mcmp>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	da60      	bge.n	80078b0 <_strtod_l+0x868>
 80077ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077f0:	ea53 0308 	orrs.w	r3, r3, r8
 80077f4:	f040 8084 	bne.w	8007900 <_strtod_l+0x8b8>
 80077f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d17f      	bne.n	8007900 <_strtod_l+0x8b8>
 8007800:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007804:	0d1b      	lsrs	r3, r3, #20
 8007806:	051b      	lsls	r3, r3, #20
 8007808:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800780c:	d978      	bls.n	8007900 <_strtod_l+0x8b8>
 800780e:	696b      	ldr	r3, [r5, #20]
 8007810:	b913      	cbnz	r3, 8007818 <_strtod_l+0x7d0>
 8007812:	692b      	ldr	r3, [r5, #16]
 8007814:	2b01      	cmp	r3, #1
 8007816:	dd73      	ble.n	8007900 <_strtod_l+0x8b8>
 8007818:	4629      	mov	r1, r5
 800781a:	2201      	movs	r2, #1
 800781c:	4620      	mov	r0, r4
 800781e:	f002 fe65 	bl	800a4ec <__lshift>
 8007822:	4659      	mov	r1, fp
 8007824:	4605      	mov	r5, r0
 8007826:	f002 fecd 	bl	800a5c4 <__mcmp>
 800782a:	2800      	cmp	r0, #0
 800782c:	dd68      	ble.n	8007900 <_strtod_l+0x8b8>
 800782e:	9904      	ldr	r1, [sp, #16]
 8007830:	4a54      	ldr	r2, [pc, #336]	; (8007984 <_strtod_l+0x93c>)
 8007832:	464b      	mov	r3, r9
 8007834:	2900      	cmp	r1, #0
 8007836:	f000 8084 	beq.w	8007942 <_strtod_l+0x8fa>
 800783a:	ea02 0109 	and.w	r1, r2, r9
 800783e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007842:	dc7e      	bgt.n	8007942 <_strtod_l+0x8fa>
 8007844:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007848:	f77f aeb3 	ble.w	80075b2 <_strtod_l+0x56a>
 800784c:	4b4e      	ldr	r3, [pc, #312]	; (8007988 <_strtod_l+0x940>)
 800784e:	4640      	mov	r0, r8
 8007850:	4649      	mov	r1, r9
 8007852:	2200      	movs	r2, #0
 8007854:	f7f8 fee0 	bl	8000618 <__aeabi_dmul>
 8007858:	4b4a      	ldr	r3, [pc, #296]	; (8007984 <_strtod_l+0x93c>)
 800785a:	400b      	ands	r3, r1
 800785c:	4680      	mov	r8, r0
 800785e:	4689      	mov	r9, r1
 8007860:	2b00      	cmp	r3, #0
 8007862:	f47f ae3f 	bne.w	80074e4 <_strtod_l+0x49c>
 8007866:	2322      	movs	r3, #34	; 0x22
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	e63b      	b.n	80074e4 <_strtod_l+0x49c>
 800786c:	f04f 32ff 	mov.w	r2, #4294967295
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	ea03 0808 	and.w	r8, r3, r8
 8007878:	e6e8      	b.n	800764c <_strtod_l+0x604>
 800787a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800787e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007882:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007886:	36e2      	adds	r6, #226	; 0xe2
 8007888:	fa01 f306 	lsl.w	r3, r1, r6
 800788c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007890:	e748      	b.n	8007724 <_strtod_l+0x6dc>
 8007892:	2100      	movs	r1, #0
 8007894:	2301      	movs	r3, #1
 8007896:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800789a:	e743      	b.n	8007724 <_strtod_l+0x6dc>
 800789c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800789e:	4632      	mov	r2, r6
 80078a0:	4620      	mov	r0, r4
 80078a2:	f002 fe23 	bl	800a4ec <__lshift>
 80078a6:	9016      	str	r0, [sp, #88]	; 0x58
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f47f af6b 	bne.w	8007784 <_strtod_l+0x73c>
 80078ae:	e60f      	b.n	80074d0 <_strtod_l+0x488>
 80078b0:	46ca      	mov	sl, r9
 80078b2:	d171      	bne.n	8007998 <_strtod_l+0x950>
 80078b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078ba:	b352      	cbz	r2, 8007912 <_strtod_l+0x8ca>
 80078bc:	4a33      	ldr	r2, [pc, #204]	; (800798c <_strtod_l+0x944>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d12a      	bne.n	8007918 <_strtod_l+0x8d0>
 80078c2:	9b04      	ldr	r3, [sp, #16]
 80078c4:	4641      	mov	r1, r8
 80078c6:	b1fb      	cbz	r3, 8007908 <_strtod_l+0x8c0>
 80078c8:	4b2e      	ldr	r3, [pc, #184]	; (8007984 <_strtod_l+0x93c>)
 80078ca:	ea09 0303 	and.w	r3, r9, r3
 80078ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078d2:	f04f 32ff 	mov.w	r2, #4294967295
 80078d6:	d81a      	bhi.n	800790e <_strtod_l+0x8c6>
 80078d8:	0d1b      	lsrs	r3, r3, #20
 80078da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078de:	fa02 f303 	lsl.w	r3, r2, r3
 80078e2:	4299      	cmp	r1, r3
 80078e4:	d118      	bne.n	8007918 <_strtod_l+0x8d0>
 80078e6:	4b2a      	ldr	r3, [pc, #168]	; (8007990 <_strtod_l+0x948>)
 80078e8:	459a      	cmp	sl, r3
 80078ea:	d102      	bne.n	80078f2 <_strtod_l+0x8aa>
 80078ec:	3101      	adds	r1, #1
 80078ee:	f43f adef 	beq.w	80074d0 <_strtod_l+0x488>
 80078f2:	4b24      	ldr	r3, [pc, #144]	; (8007984 <_strtod_l+0x93c>)
 80078f4:	ea0a 0303 	and.w	r3, sl, r3
 80078f8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80078fc:	f04f 0800 	mov.w	r8, #0
 8007900:	9b04      	ldr	r3, [sp, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1a2      	bne.n	800784c <_strtod_l+0x804>
 8007906:	e5ed      	b.n	80074e4 <_strtod_l+0x49c>
 8007908:	f04f 33ff 	mov.w	r3, #4294967295
 800790c:	e7e9      	b.n	80078e2 <_strtod_l+0x89a>
 800790e:	4613      	mov	r3, r2
 8007910:	e7e7      	b.n	80078e2 <_strtod_l+0x89a>
 8007912:	ea53 0308 	orrs.w	r3, r3, r8
 8007916:	d08a      	beq.n	800782e <_strtod_l+0x7e6>
 8007918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800791a:	b1e3      	cbz	r3, 8007956 <_strtod_l+0x90e>
 800791c:	ea13 0f0a 	tst.w	r3, sl
 8007920:	d0ee      	beq.n	8007900 <_strtod_l+0x8b8>
 8007922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007924:	9a04      	ldr	r2, [sp, #16]
 8007926:	4640      	mov	r0, r8
 8007928:	4649      	mov	r1, r9
 800792a:	b1c3      	cbz	r3, 800795e <_strtod_l+0x916>
 800792c:	f7ff fb6d 	bl	800700a <sulp>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	ec51 0b18 	vmov	r0, r1, d8
 8007938:	f7f8 fcb8 	bl	80002ac <__adddf3>
 800793c:	4680      	mov	r8, r0
 800793e:	4689      	mov	r9, r1
 8007940:	e7de      	b.n	8007900 <_strtod_l+0x8b8>
 8007942:	4013      	ands	r3, r2
 8007944:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007948:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800794c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007950:	f04f 38ff 	mov.w	r8, #4294967295
 8007954:	e7d4      	b.n	8007900 <_strtod_l+0x8b8>
 8007956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007958:	ea13 0f08 	tst.w	r3, r8
 800795c:	e7e0      	b.n	8007920 <_strtod_l+0x8d8>
 800795e:	f7ff fb54 	bl	800700a <sulp>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	ec51 0b18 	vmov	r0, r1, d8
 800796a:	f7f8 fc9d 	bl	80002a8 <__aeabi_dsub>
 800796e:	2200      	movs	r2, #0
 8007970:	2300      	movs	r3, #0
 8007972:	4680      	mov	r8, r0
 8007974:	4689      	mov	r9, r1
 8007976:	f7f9 f8b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800797a:	2800      	cmp	r0, #0
 800797c:	d0c0      	beq.n	8007900 <_strtod_l+0x8b8>
 800797e:	e618      	b.n	80075b2 <_strtod_l+0x56a>
 8007980:	fffffc02 	.word	0xfffffc02
 8007984:	7ff00000 	.word	0x7ff00000
 8007988:	39500000 	.word	0x39500000
 800798c:	000fffff 	.word	0x000fffff
 8007990:	7fefffff 	.word	0x7fefffff
 8007994:	0800b578 	.word	0x0800b578
 8007998:	4659      	mov	r1, fp
 800799a:	4628      	mov	r0, r5
 800799c:	f002 ff82 	bl	800a8a4 <__ratio>
 80079a0:	ec57 6b10 	vmov	r6, r7, d0
 80079a4:	ee10 0a10 	vmov	r0, s0
 80079a8:	2200      	movs	r2, #0
 80079aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079ae:	4639      	mov	r1, r7
 80079b0:	f7f9 f8ae 	bl	8000b10 <__aeabi_dcmple>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d071      	beq.n	8007a9c <_strtod_l+0xa54>
 80079b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d17c      	bne.n	8007ab8 <_strtod_l+0xa70>
 80079be:	f1b8 0f00 	cmp.w	r8, #0
 80079c2:	d15a      	bne.n	8007a7a <_strtod_l+0xa32>
 80079c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d15d      	bne.n	8007a88 <_strtod_l+0xa40>
 80079cc:	4b90      	ldr	r3, [pc, #576]	; (8007c10 <_strtod_l+0xbc8>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	f7f9 f892 	bl	8000afc <__aeabi_dcmplt>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d15c      	bne.n	8007a96 <_strtod_l+0xa4e>
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	4b8c      	ldr	r3, [pc, #560]	; (8007c14 <_strtod_l+0xbcc>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	f7f8 fe18 	bl	8000618 <__aeabi_dmul>
 80079e8:	4606      	mov	r6, r0
 80079ea:	460f      	mov	r7, r1
 80079ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80079f0:	9606      	str	r6, [sp, #24]
 80079f2:	9307      	str	r3, [sp, #28]
 80079f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80079fc:	4b86      	ldr	r3, [pc, #536]	; (8007c18 <_strtod_l+0xbd0>)
 80079fe:	ea0a 0303 	and.w	r3, sl, r3
 8007a02:	930d      	str	r3, [sp, #52]	; 0x34
 8007a04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a06:	4b85      	ldr	r3, [pc, #532]	; (8007c1c <_strtod_l+0xbd4>)
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	f040 8090 	bne.w	8007b2e <_strtod_l+0xae6>
 8007a0e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007a12:	ec49 8b10 	vmov	d0, r8, r9
 8007a16:	f002 fe7b 	bl	800a710 <__ulp>
 8007a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a1e:	ec51 0b10 	vmov	r0, r1, d0
 8007a22:	f7f8 fdf9 	bl	8000618 <__aeabi_dmul>
 8007a26:	4642      	mov	r2, r8
 8007a28:	464b      	mov	r3, r9
 8007a2a:	f7f8 fc3f 	bl	80002ac <__adddf3>
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4979      	ldr	r1, [pc, #484]	; (8007c18 <_strtod_l+0xbd0>)
 8007a32:	4a7b      	ldr	r2, [pc, #492]	; (8007c20 <_strtod_l+0xbd8>)
 8007a34:	4019      	ands	r1, r3
 8007a36:	4291      	cmp	r1, r2
 8007a38:	4680      	mov	r8, r0
 8007a3a:	d944      	bls.n	8007ac6 <_strtod_l+0xa7e>
 8007a3c:	ee18 2a90 	vmov	r2, s17
 8007a40:	4b78      	ldr	r3, [pc, #480]	; (8007c24 <_strtod_l+0xbdc>)
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d104      	bne.n	8007a50 <_strtod_l+0xa08>
 8007a46:	ee18 3a10 	vmov	r3, s16
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f43f ad40 	beq.w	80074d0 <_strtod_l+0x488>
 8007a50:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007c24 <_strtod_l+0xbdc>
 8007a54:	f04f 38ff 	mov.w	r8, #4294967295
 8007a58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f002 fb2c 	bl	800a0b8 <_Bfree>
 8007a60:	9905      	ldr	r1, [sp, #20]
 8007a62:	4620      	mov	r0, r4
 8007a64:	f002 fb28 	bl	800a0b8 <_Bfree>
 8007a68:	4659      	mov	r1, fp
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f002 fb24 	bl	800a0b8 <_Bfree>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4620      	mov	r0, r4
 8007a74:	f002 fb20 	bl	800a0b8 <_Bfree>
 8007a78:	e609      	b.n	800768e <_strtod_l+0x646>
 8007a7a:	f1b8 0f01 	cmp.w	r8, #1
 8007a7e:	d103      	bne.n	8007a88 <_strtod_l+0xa40>
 8007a80:	f1b9 0f00 	cmp.w	r9, #0
 8007a84:	f43f ad95 	beq.w	80075b2 <_strtod_l+0x56a>
 8007a88:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007be0 <_strtod_l+0xb98>
 8007a8c:	4f60      	ldr	r7, [pc, #384]	; (8007c10 <_strtod_l+0xbc8>)
 8007a8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a92:	2600      	movs	r6, #0
 8007a94:	e7ae      	b.n	80079f4 <_strtod_l+0x9ac>
 8007a96:	4f5f      	ldr	r7, [pc, #380]	; (8007c14 <_strtod_l+0xbcc>)
 8007a98:	2600      	movs	r6, #0
 8007a9a:	e7a7      	b.n	80079ec <_strtod_l+0x9a4>
 8007a9c:	4b5d      	ldr	r3, [pc, #372]	; (8007c14 <_strtod_l+0xbcc>)
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f7f8 fdb8 	bl	8000618 <__aeabi_dmul>
 8007aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d09c      	beq.n	80079ec <_strtod_l+0x9a4>
 8007ab2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007ab6:	e79d      	b.n	80079f4 <_strtod_l+0x9ac>
 8007ab8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007be8 <_strtod_l+0xba0>
 8007abc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ac0:	ec57 6b17 	vmov	r6, r7, d7
 8007ac4:	e796      	b.n	80079f4 <_strtod_l+0x9ac>
 8007ac6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007aca:	9b04      	ldr	r3, [sp, #16]
 8007acc:	46ca      	mov	sl, r9
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1c2      	bne.n	8007a58 <_strtod_l+0xa10>
 8007ad2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ad8:	0d1b      	lsrs	r3, r3, #20
 8007ada:	051b      	lsls	r3, r3, #20
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d1bb      	bne.n	8007a58 <_strtod_l+0xa10>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f9 f8f8 	bl	8000cd8 <__aeabi_d2lz>
 8007ae8:	f7f8 fd68 	bl	80005bc <__aeabi_l2d>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	f7f8 fbd8 	bl	80002a8 <__aeabi_dsub>
 8007af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007afa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007afe:	ea43 0308 	orr.w	r3, r3, r8
 8007b02:	4313      	orrs	r3, r2
 8007b04:	4606      	mov	r6, r0
 8007b06:	460f      	mov	r7, r1
 8007b08:	d054      	beq.n	8007bb4 <_strtod_l+0xb6c>
 8007b0a:	a339      	add	r3, pc, #228	; (adr r3, 8007bf0 <_strtod_l+0xba8>)
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f7f8 fff4 	bl	8000afc <__aeabi_dcmplt>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f47f ace5 	bne.w	80074e4 <_strtod_l+0x49c>
 8007b1a:	a337      	add	r3, pc, #220	; (adr r3, 8007bf8 <_strtod_l+0xbb0>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	4630      	mov	r0, r6
 8007b22:	4639      	mov	r1, r7
 8007b24:	f7f9 f808 	bl	8000b38 <__aeabi_dcmpgt>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d095      	beq.n	8007a58 <_strtod_l+0xa10>
 8007b2c:	e4da      	b.n	80074e4 <_strtod_l+0x49c>
 8007b2e:	9b04      	ldr	r3, [sp, #16]
 8007b30:	b333      	cbz	r3, 8007b80 <_strtod_l+0xb38>
 8007b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b38:	d822      	bhi.n	8007b80 <_strtod_l+0xb38>
 8007b3a:	a331      	add	r3, pc, #196	; (adr r3, 8007c00 <_strtod_l+0xbb8>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f7f8 ffe4 	bl	8000b10 <__aeabi_dcmple>
 8007b48:	b1a0      	cbz	r0, 8007b74 <_strtod_l+0xb2c>
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7f9 f83b 	bl	8000bc8 <__aeabi_d2uiz>
 8007b52:	2801      	cmp	r0, #1
 8007b54:	bf38      	it	cc
 8007b56:	2001      	movcc	r0, #1
 8007b58:	f7f8 fce4 	bl	8000524 <__aeabi_ui2d>
 8007b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5e:	4606      	mov	r6, r0
 8007b60:	460f      	mov	r7, r1
 8007b62:	bb23      	cbnz	r3, 8007bae <_strtod_l+0xb66>
 8007b64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b68:	9010      	str	r0, [sp, #64]	; 0x40
 8007b6a:	9311      	str	r3, [sp, #68]	; 0x44
 8007b6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b84:	eeb0 0a48 	vmov.f32	s0, s16
 8007b88:	eef0 0a68 	vmov.f32	s1, s17
 8007b8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007b90:	f002 fdbe 	bl	800a710 <__ulp>
 8007b94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b98:	ec53 2b10 	vmov	r2, r3, d0
 8007b9c:	f7f8 fd3c 	bl	8000618 <__aeabi_dmul>
 8007ba0:	ec53 2b18 	vmov	r2, r3, d8
 8007ba4:	f7f8 fb82 	bl	80002ac <__adddf3>
 8007ba8:	4680      	mov	r8, r0
 8007baa:	4689      	mov	r9, r1
 8007bac:	e78d      	b.n	8007aca <_strtod_l+0xa82>
 8007bae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007bb2:	e7db      	b.n	8007b6c <_strtod_l+0xb24>
 8007bb4:	a314      	add	r3, pc, #80	; (adr r3, 8007c08 <_strtod_l+0xbc0>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f7f8 ff9f 	bl	8000afc <__aeabi_dcmplt>
 8007bbe:	e7b3      	b.n	8007b28 <_strtod_l+0xae0>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	f7ff ba7c 	b.w	80070c6 <_strtod_l+0x7e>
 8007bce:	2a65      	cmp	r2, #101	; 0x65
 8007bd0:	f43f ab75 	beq.w	80072be <_strtod_l+0x276>
 8007bd4:	2a45      	cmp	r2, #69	; 0x45
 8007bd6:	f43f ab72 	beq.w	80072be <_strtod_l+0x276>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f7ff bbaa 	b.w	8007334 <_strtod_l+0x2ec>
 8007be0:	00000000 	.word	0x00000000
 8007be4:	bff00000 	.word	0xbff00000
 8007be8:	00000000 	.word	0x00000000
 8007bec:	3ff00000 	.word	0x3ff00000
 8007bf0:	94a03595 	.word	0x94a03595
 8007bf4:	3fdfffff 	.word	0x3fdfffff
 8007bf8:	35afe535 	.word	0x35afe535
 8007bfc:	3fe00000 	.word	0x3fe00000
 8007c00:	ffc00000 	.word	0xffc00000
 8007c04:	41dfffff 	.word	0x41dfffff
 8007c08:	94a03595 	.word	0x94a03595
 8007c0c:	3fcfffff 	.word	0x3fcfffff
 8007c10:	3ff00000 	.word	0x3ff00000
 8007c14:	3fe00000 	.word	0x3fe00000
 8007c18:	7ff00000 	.word	0x7ff00000
 8007c1c:	7fe00000 	.word	0x7fe00000
 8007c20:	7c9fffff 	.word	0x7c9fffff
 8007c24:	7fefffff 	.word	0x7fefffff

08007c28 <strtod>:
 8007c28:	460a      	mov	r2, r1
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	4802      	ldr	r0, [pc, #8]	; (8007c38 <strtod+0x10>)
 8007c2e:	4b03      	ldr	r3, [pc, #12]	; (8007c3c <strtod+0x14>)
 8007c30:	6800      	ldr	r0, [r0, #0]
 8007c32:	f7ff ba09 	b.w	8007048 <_strtod_l>
 8007c36:	bf00      	nop
 8007c38:	200001e0 	.word	0x200001e0
 8007c3c:	20000028 	.word	0x20000028

08007c40 <_strtol_l.constprop.0>:
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c46:	d001      	beq.n	8007c4c <_strtol_l.constprop.0+0xc>
 8007c48:	2b24      	cmp	r3, #36	; 0x24
 8007c4a:	d906      	bls.n	8007c5a <_strtol_l.constprop.0+0x1a>
 8007c4c:	f000 fecc 	bl	80089e8 <__errno>
 8007c50:	2316      	movs	r3, #22
 8007c52:	6003      	str	r3, [r0, #0]
 8007c54:	2000      	movs	r0, #0
 8007c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007d40 <_strtol_l.constprop.0+0x100>
 8007c5e:	460d      	mov	r5, r1
 8007c60:	462e      	mov	r6, r5
 8007c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c66:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007c6a:	f017 0708 	ands.w	r7, r7, #8
 8007c6e:	d1f7      	bne.n	8007c60 <_strtol_l.constprop.0+0x20>
 8007c70:	2c2d      	cmp	r4, #45	; 0x2d
 8007c72:	d132      	bne.n	8007cda <_strtol_l.constprop.0+0x9a>
 8007c74:	782c      	ldrb	r4, [r5, #0]
 8007c76:	2701      	movs	r7, #1
 8007c78:	1cb5      	adds	r5, r6, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d05b      	beq.n	8007d36 <_strtol_l.constprop.0+0xf6>
 8007c7e:	2b10      	cmp	r3, #16
 8007c80:	d109      	bne.n	8007c96 <_strtol_l.constprop.0+0x56>
 8007c82:	2c30      	cmp	r4, #48	; 0x30
 8007c84:	d107      	bne.n	8007c96 <_strtol_l.constprop.0+0x56>
 8007c86:	782c      	ldrb	r4, [r5, #0]
 8007c88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c8c:	2c58      	cmp	r4, #88	; 0x58
 8007c8e:	d14d      	bne.n	8007d2c <_strtol_l.constprop.0+0xec>
 8007c90:	786c      	ldrb	r4, [r5, #1]
 8007c92:	2310      	movs	r3, #16
 8007c94:	3502      	adds	r5, #2
 8007c96:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007c9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c9e:	f04f 0e00 	mov.w	lr, #0
 8007ca2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007ca6:	4676      	mov	r6, lr
 8007ca8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007cac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007cb0:	f1bc 0f09 	cmp.w	ip, #9
 8007cb4:	d816      	bhi.n	8007ce4 <_strtol_l.constprop.0+0xa4>
 8007cb6:	4664      	mov	r4, ip
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	dd24      	ble.n	8007d06 <_strtol_l.constprop.0+0xc6>
 8007cbc:	f1be 3fff 	cmp.w	lr, #4294967295
 8007cc0:	d008      	beq.n	8007cd4 <_strtol_l.constprop.0+0x94>
 8007cc2:	45b1      	cmp	r9, r6
 8007cc4:	d31c      	bcc.n	8007d00 <_strtol_l.constprop.0+0xc0>
 8007cc6:	d101      	bne.n	8007ccc <_strtol_l.constprop.0+0x8c>
 8007cc8:	45a2      	cmp	sl, r4
 8007cca:	db19      	blt.n	8007d00 <_strtol_l.constprop.0+0xc0>
 8007ccc:	fb06 4603 	mla	r6, r6, r3, r4
 8007cd0:	f04f 0e01 	mov.w	lr, #1
 8007cd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cd8:	e7e8      	b.n	8007cac <_strtol_l.constprop.0+0x6c>
 8007cda:	2c2b      	cmp	r4, #43	; 0x2b
 8007cdc:	bf04      	itt	eq
 8007cde:	782c      	ldrbeq	r4, [r5, #0]
 8007ce0:	1cb5      	addeq	r5, r6, #2
 8007ce2:	e7ca      	b.n	8007c7a <_strtol_l.constprop.0+0x3a>
 8007ce4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007ce8:	f1bc 0f19 	cmp.w	ip, #25
 8007cec:	d801      	bhi.n	8007cf2 <_strtol_l.constprop.0+0xb2>
 8007cee:	3c37      	subs	r4, #55	; 0x37
 8007cf0:	e7e2      	b.n	8007cb8 <_strtol_l.constprop.0+0x78>
 8007cf2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007cf6:	f1bc 0f19 	cmp.w	ip, #25
 8007cfa:	d804      	bhi.n	8007d06 <_strtol_l.constprop.0+0xc6>
 8007cfc:	3c57      	subs	r4, #87	; 0x57
 8007cfe:	e7db      	b.n	8007cb8 <_strtol_l.constprop.0+0x78>
 8007d00:	f04f 3eff 	mov.w	lr, #4294967295
 8007d04:	e7e6      	b.n	8007cd4 <_strtol_l.constprop.0+0x94>
 8007d06:	f1be 3fff 	cmp.w	lr, #4294967295
 8007d0a:	d105      	bne.n	8007d18 <_strtol_l.constprop.0+0xd8>
 8007d0c:	2322      	movs	r3, #34	; 0x22
 8007d0e:	6003      	str	r3, [r0, #0]
 8007d10:	4646      	mov	r6, r8
 8007d12:	b942      	cbnz	r2, 8007d26 <_strtol_l.constprop.0+0xe6>
 8007d14:	4630      	mov	r0, r6
 8007d16:	e79e      	b.n	8007c56 <_strtol_l.constprop.0+0x16>
 8007d18:	b107      	cbz	r7, 8007d1c <_strtol_l.constprop.0+0xdc>
 8007d1a:	4276      	negs	r6, r6
 8007d1c:	2a00      	cmp	r2, #0
 8007d1e:	d0f9      	beq.n	8007d14 <_strtol_l.constprop.0+0xd4>
 8007d20:	f1be 0f00 	cmp.w	lr, #0
 8007d24:	d000      	beq.n	8007d28 <_strtol_l.constprop.0+0xe8>
 8007d26:	1e69      	subs	r1, r5, #1
 8007d28:	6011      	str	r1, [r2, #0]
 8007d2a:	e7f3      	b.n	8007d14 <_strtol_l.constprop.0+0xd4>
 8007d2c:	2430      	movs	r4, #48	; 0x30
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1b1      	bne.n	8007c96 <_strtol_l.constprop.0+0x56>
 8007d32:	2308      	movs	r3, #8
 8007d34:	e7af      	b.n	8007c96 <_strtol_l.constprop.0+0x56>
 8007d36:	2c30      	cmp	r4, #48	; 0x30
 8007d38:	d0a5      	beq.n	8007c86 <_strtol_l.constprop.0+0x46>
 8007d3a:	230a      	movs	r3, #10
 8007d3c:	e7ab      	b.n	8007c96 <_strtol_l.constprop.0+0x56>
 8007d3e:	bf00      	nop
 8007d40:	0800b5a1 	.word	0x0800b5a1

08007d44 <strtol>:
 8007d44:	4613      	mov	r3, r2
 8007d46:	460a      	mov	r2, r1
 8007d48:	4601      	mov	r1, r0
 8007d4a:	4802      	ldr	r0, [pc, #8]	; (8007d54 <strtol+0x10>)
 8007d4c:	6800      	ldr	r0, [r0, #0]
 8007d4e:	f7ff bf77 	b.w	8007c40 <_strtol_l.constprop.0>
 8007d52:	bf00      	nop
 8007d54:	200001e0 	.word	0x200001e0

08007d58 <__cvt>:
 8007d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	ec55 4b10 	vmov	r4, r5, d0
 8007d60:	2d00      	cmp	r5, #0
 8007d62:	460e      	mov	r6, r1
 8007d64:	4619      	mov	r1, r3
 8007d66:	462b      	mov	r3, r5
 8007d68:	bfbb      	ittet	lt
 8007d6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d6e:	461d      	movlt	r5, r3
 8007d70:	2300      	movge	r3, #0
 8007d72:	232d      	movlt	r3, #45	; 0x2d
 8007d74:	700b      	strb	r3, [r1, #0]
 8007d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d7c:	4691      	mov	r9, r2
 8007d7e:	f023 0820 	bic.w	r8, r3, #32
 8007d82:	bfbc      	itt	lt
 8007d84:	4622      	movlt	r2, r4
 8007d86:	4614      	movlt	r4, r2
 8007d88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d8c:	d005      	beq.n	8007d9a <__cvt+0x42>
 8007d8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d92:	d100      	bne.n	8007d96 <__cvt+0x3e>
 8007d94:	3601      	adds	r6, #1
 8007d96:	2102      	movs	r1, #2
 8007d98:	e000      	b.n	8007d9c <__cvt+0x44>
 8007d9a:	2103      	movs	r1, #3
 8007d9c:	ab03      	add	r3, sp, #12
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	ab02      	add	r3, sp, #8
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	ec45 4b10 	vmov	d0, r4, r5
 8007da8:	4653      	mov	r3, sl
 8007daa:	4632      	mov	r2, r6
 8007dac:	f000 fee8 	bl	8008b80 <_dtoa_r>
 8007db0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007db4:	4607      	mov	r7, r0
 8007db6:	d102      	bne.n	8007dbe <__cvt+0x66>
 8007db8:	f019 0f01 	tst.w	r9, #1
 8007dbc:	d022      	beq.n	8007e04 <__cvt+0xac>
 8007dbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dc2:	eb07 0906 	add.w	r9, r7, r6
 8007dc6:	d110      	bne.n	8007dea <__cvt+0x92>
 8007dc8:	783b      	ldrb	r3, [r7, #0]
 8007dca:	2b30      	cmp	r3, #48	; 0x30
 8007dcc:	d10a      	bne.n	8007de4 <__cvt+0x8c>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	f7f8 fe87 	bl	8000ae8 <__aeabi_dcmpeq>
 8007dda:	b918      	cbnz	r0, 8007de4 <__cvt+0x8c>
 8007ddc:	f1c6 0601 	rsb	r6, r6, #1
 8007de0:	f8ca 6000 	str.w	r6, [sl]
 8007de4:	f8da 3000 	ldr.w	r3, [sl]
 8007de8:	4499      	add	r9, r3
 8007dea:	2200      	movs	r2, #0
 8007dec:	2300      	movs	r3, #0
 8007dee:	4620      	mov	r0, r4
 8007df0:	4629      	mov	r1, r5
 8007df2:	f7f8 fe79 	bl	8000ae8 <__aeabi_dcmpeq>
 8007df6:	b108      	cbz	r0, 8007dfc <__cvt+0xa4>
 8007df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dfc:	2230      	movs	r2, #48	; 0x30
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	454b      	cmp	r3, r9
 8007e02:	d307      	bcc.n	8007e14 <__cvt+0xbc>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e08:	1bdb      	subs	r3, r3, r7
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	b004      	add	sp, #16
 8007e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e14:	1c59      	adds	r1, r3, #1
 8007e16:	9103      	str	r1, [sp, #12]
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	e7f0      	b.n	8007dfe <__cvt+0xa6>

08007e1c <__exponent>:
 8007e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2900      	cmp	r1, #0
 8007e22:	bfb8      	it	lt
 8007e24:	4249      	neglt	r1, r1
 8007e26:	f803 2b02 	strb.w	r2, [r3], #2
 8007e2a:	bfb4      	ite	lt
 8007e2c:	222d      	movlt	r2, #45	; 0x2d
 8007e2e:	222b      	movge	r2, #43	; 0x2b
 8007e30:	2909      	cmp	r1, #9
 8007e32:	7042      	strb	r2, [r0, #1]
 8007e34:	dd2a      	ble.n	8007e8c <__exponent+0x70>
 8007e36:	f10d 0207 	add.w	r2, sp, #7
 8007e3a:	4617      	mov	r7, r2
 8007e3c:	260a      	movs	r6, #10
 8007e3e:	4694      	mov	ip, r2
 8007e40:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e44:	fb06 1415 	mls	r4, r6, r5, r1
 8007e48:	3430      	adds	r4, #48	; 0x30
 8007e4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e4e:	460c      	mov	r4, r1
 8007e50:	2c63      	cmp	r4, #99	; 0x63
 8007e52:	f102 32ff 	add.w	r2, r2, #4294967295
 8007e56:	4629      	mov	r1, r5
 8007e58:	dcf1      	bgt.n	8007e3e <__exponent+0x22>
 8007e5a:	3130      	adds	r1, #48	; 0x30
 8007e5c:	f1ac 0402 	sub.w	r4, ip, #2
 8007e60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e64:	1c41      	adds	r1, r0, #1
 8007e66:	4622      	mov	r2, r4
 8007e68:	42ba      	cmp	r2, r7
 8007e6a:	d30a      	bcc.n	8007e82 <__exponent+0x66>
 8007e6c:	f10d 0209 	add.w	r2, sp, #9
 8007e70:	eba2 020c 	sub.w	r2, r2, ip
 8007e74:	42bc      	cmp	r4, r7
 8007e76:	bf88      	it	hi
 8007e78:	2200      	movhi	r2, #0
 8007e7a:	4413      	add	r3, r2
 8007e7c:	1a18      	subs	r0, r3, r0
 8007e7e:	b003      	add	sp, #12
 8007e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007e86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007e8a:	e7ed      	b.n	8007e68 <__exponent+0x4c>
 8007e8c:	2330      	movs	r3, #48	; 0x30
 8007e8e:	3130      	adds	r1, #48	; 0x30
 8007e90:	7083      	strb	r3, [r0, #2]
 8007e92:	70c1      	strb	r1, [r0, #3]
 8007e94:	1d03      	adds	r3, r0, #4
 8007e96:	e7f1      	b.n	8007e7c <__exponent+0x60>

08007e98 <_printf_float>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	ed2d 8b02 	vpush	{d8}
 8007ea0:	b08d      	sub	sp, #52	; 0x34
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	461f      	mov	r7, r3
 8007eac:	4605      	mov	r5, r0
 8007eae:	f000 fcfb 	bl	80088a8 <_localeconv_r>
 8007eb2:	f8d0 a000 	ldr.w	sl, [r0]
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f7f8 f9ea 	bl	8000290 <strlen>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ecc:	3307      	adds	r3, #7
 8007ece:	f023 0307 	bic.w	r3, r3, #7
 8007ed2:	f103 0208 	add.w	r2, r3, #8
 8007ed6:	f8c8 2000 	str.w	r2, [r8]
 8007eda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ede:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ee2:	9307      	str	r3, [sp, #28]
 8007ee4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ee8:	ee08 0a10 	vmov	s16, r0
 8007eec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007ef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ef4:	4b9e      	ldr	r3, [pc, #632]	; (8008170 <_printf_float+0x2d8>)
 8007ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8007efa:	f7f8 fe27 	bl	8000b4c <__aeabi_dcmpun>
 8007efe:	bb88      	cbnz	r0, 8007f64 <_printf_float+0xcc>
 8007f00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f04:	4b9a      	ldr	r3, [pc, #616]	; (8008170 <_printf_float+0x2d8>)
 8007f06:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0a:	f7f8 fe01 	bl	8000b10 <__aeabi_dcmple>
 8007f0e:	bb48      	cbnz	r0, 8007f64 <_printf_float+0xcc>
 8007f10:	2200      	movs	r2, #0
 8007f12:	2300      	movs	r3, #0
 8007f14:	4640      	mov	r0, r8
 8007f16:	4649      	mov	r1, r9
 8007f18:	f7f8 fdf0 	bl	8000afc <__aeabi_dcmplt>
 8007f1c:	b110      	cbz	r0, 8007f24 <_printf_float+0x8c>
 8007f1e:	232d      	movs	r3, #45	; 0x2d
 8007f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f24:	4a93      	ldr	r2, [pc, #588]	; (8008174 <_printf_float+0x2dc>)
 8007f26:	4b94      	ldr	r3, [pc, #592]	; (8008178 <_printf_float+0x2e0>)
 8007f28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f2c:	bf94      	ite	ls
 8007f2e:	4690      	movls	r8, r2
 8007f30:	4698      	movhi	r8, r3
 8007f32:	2303      	movs	r3, #3
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	9b05      	ldr	r3, [sp, #20]
 8007f38:	f023 0304 	bic.w	r3, r3, #4
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	f04f 0900 	mov.w	r9, #0
 8007f42:	9700      	str	r7, [sp, #0]
 8007f44:	4633      	mov	r3, r6
 8007f46:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f000 f9da 	bl	8008304 <_printf_common>
 8007f50:	3001      	adds	r0, #1
 8007f52:	f040 8090 	bne.w	8008076 <_printf_float+0x1de>
 8007f56:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5a:	b00d      	add	sp, #52	; 0x34
 8007f5c:	ecbd 8b02 	vpop	{d8}
 8007f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f64:	4642      	mov	r2, r8
 8007f66:	464b      	mov	r3, r9
 8007f68:	4640      	mov	r0, r8
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	f7f8 fdee 	bl	8000b4c <__aeabi_dcmpun>
 8007f70:	b140      	cbz	r0, 8007f84 <_printf_float+0xec>
 8007f72:	464b      	mov	r3, r9
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bfbc      	itt	lt
 8007f78:	232d      	movlt	r3, #45	; 0x2d
 8007f7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f7e:	4a7f      	ldr	r2, [pc, #508]	; (800817c <_printf_float+0x2e4>)
 8007f80:	4b7f      	ldr	r3, [pc, #508]	; (8008180 <_printf_float+0x2e8>)
 8007f82:	e7d1      	b.n	8007f28 <_printf_float+0x90>
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f8a:	9206      	str	r2, [sp, #24]
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	d13f      	bne.n	8008010 <_printf_float+0x178>
 8007f90:	2306      	movs	r3, #6
 8007f92:	6063      	str	r3, [r4, #4]
 8007f94:	9b05      	ldr	r3, [sp, #20]
 8007f96:	6861      	ldr	r1, [r4, #4]
 8007f98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9303      	str	r3, [sp, #12]
 8007fa0:	ab0a      	add	r3, sp, #40	; 0x28
 8007fa2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fa6:	ab09      	add	r3, sp, #36	; 0x24
 8007fa8:	ec49 8b10 	vmov	d0, r8, r9
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f7ff fecf 	bl	8007d58 <__cvt>
 8007fba:	9b06      	ldr	r3, [sp, #24]
 8007fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fbe:	2b47      	cmp	r3, #71	; 0x47
 8007fc0:	4680      	mov	r8, r0
 8007fc2:	d108      	bne.n	8007fd6 <_printf_float+0x13e>
 8007fc4:	1cc8      	adds	r0, r1, #3
 8007fc6:	db02      	blt.n	8007fce <_printf_float+0x136>
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	4299      	cmp	r1, r3
 8007fcc:	dd41      	ble.n	8008052 <_printf_float+0x1ba>
 8007fce:	f1ab 0302 	sub.w	r3, fp, #2
 8007fd2:	fa5f fb83 	uxtb.w	fp, r3
 8007fd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fda:	d820      	bhi.n	800801e <_printf_float+0x186>
 8007fdc:	3901      	subs	r1, #1
 8007fde:	465a      	mov	r2, fp
 8007fe0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fe4:	9109      	str	r1, [sp, #36]	; 0x24
 8007fe6:	f7ff ff19 	bl	8007e1c <__exponent>
 8007fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fec:	1813      	adds	r3, r2, r0
 8007fee:	2a01      	cmp	r2, #1
 8007ff0:	4681      	mov	r9, r0
 8007ff2:	6123      	str	r3, [r4, #16]
 8007ff4:	dc02      	bgt.n	8007ffc <_printf_float+0x164>
 8007ff6:	6822      	ldr	r2, [r4, #0]
 8007ff8:	07d2      	lsls	r2, r2, #31
 8007ffa:	d501      	bpl.n	8008000 <_printf_float+0x168>
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008004:	2b00      	cmp	r3, #0
 8008006:	d09c      	beq.n	8007f42 <_printf_float+0xaa>
 8008008:	232d      	movs	r3, #45	; 0x2d
 800800a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800800e:	e798      	b.n	8007f42 <_printf_float+0xaa>
 8008010:	9a06      	ldr	r2, [sp, #24]
 8008012:	2a47      	cmp	r2, #71	; 0x47
 8008014:	d1be      	bne.n	8007f94 <_printf_float+0xfc>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1bc      	bne.n	8007f94 <_printf_float+0xfc>
 800801a:	2301      	movs	r3, #1
 800801c:	e7b9      	b.n	8007f92 <_printf_float+0xfa>
 800801e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008022:	d118      	bne.n	8008056 <_printf_float+0x1be>
 8008024:	2900      	cmp	r1, #0
 8008026:	6863      	ldr	r3, [r4, #4]
 8008028:	dd0b      	ble.n	8008042 <_printf_float+0x1aa>
 800802a:	6121      	str	r1, [r4, #16]
 800802c:	b913      	cbnz	r3, 8008034 <_printf_float+0x19c>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	07d0      	lsls	r0, r2, #31
 8008032:	d502      	bpl.n	800803a <_printf_float+0x1a2>
 8008034:	3301      	adds	r3, #1
 8008036:	440b      	add	r3, r1
 8008038:	6123      	str	r3, [r4, #16]
 800803a:	65a1      	str	r1, [r4, #88]	; 0x58
 800803c:	f04f 0900 	mov.w	r9, #0
 8008040:	e7de      	b.n	8008000 <_printf_float+0x168>
 8008042:	b913      	cbnz	r3, 800804a <_printf_float+0x1b2>
 8008044:	6822      	ldr	r2, [r4, #0]
 8008046:	07d2      	lsls	r2, r2, #31
 8008048:	d501      	bpl.n	800804e <_printf_float+0x1b6>
 800804a:	3302      	adds	r3, #2
 800804c:	e7f4      	b.n	8008038 <_printf_float+0x1a0>
 800804e:	2301      	movs	r3, #1
 8008050:	e7f2      	b.n	8008038 <_printf_float+0x1a0>
 8008052:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008058:	4299      	cmp	r1, r3
 800805a:	db05      	blt.n	8008068 <_printf_float+0x1d0>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	6121      	str	r1, [r4, #16]
 8008060:	07d8      	lsls	r0, r3, #31
 8008062:	d5ea      	bpl.n	800803a <_printf_float+0x1a2>
 8008064:	1c4b      	adds	r3, r1, #1
 8008066:	e7e7      	b.n	8008038 <_printf_float+0x1a0>
 8008068:	2900      	cmp	r1, #0
 800806a:	bfd4      	ite	le
 800806c:	f1c1 0202 	rsble	r2, r1, #2
 8008070:	2201      	movgt	r2, #1
 8008072:	4413      	add	r3, r2
 8008074:	e7e0      	b.n	8008038 <_printf_float+0x1a0>
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	055a      	lsls	r2, r3, #21
 800807a:	d407      	bmi.n	800808c <_printf_float+0x1f4>
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	4642      	mov	r2, r8
 8008080:	4631      	mov	r1, r6
 8008082:	4628      	mov	r0, r5
 8008084:	47b8      	blx	r7
 8008086:	3001      	adds	r0, #1
 8008088:	d12c      	bne.n	80080e4 <_printf_float+0x24c>
 800808a:	e764      	b.n	8007f56 <_printf_float+0xbe>
 800808c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008090:	f240 80e0 	bls.w	8008254 <_printf_float+0x3bc>
 8008094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008098:	2200      	movs	r2, #0
 800809a:	2300      	movs	r3, #0
 800809c:	f7f8 fd24 	bl	8000ae8 <__aeabi_dcmpeq>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d034      	beq.n	800810e <_printf_float+0x276>
 80080a4:	4a37      	ldr	r2, [pc, #220]	; (8008184 <_printf_float+0x2ec>)
 80080a6:	2301      	movs	r3, #1
 80080a8:	4631      	mov	r1, r6
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b8      	blx	r7
 80080ae:	3001      	adds	r0, #1
 80080b0:	f43f af51 	beq.w	8007f56 <_printf_float+0xbe>
 80080b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080b8:	429a      	cmp	r2, r3
 80080ba:	db02      	blt.n	80080c2 <_printf_float+0x22a>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	07d8      	lsls	r0, r3, #31
 80080c0:	d510      	bpl.n	80080e4 <_printf_float+0x24c>
 80080c2:	ee18 3a10 	vmov	r3, s16
 80080c6:	4652      	mov	r2, sl
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	f43f af41 	beq.w	8007f56 <_printf_float+0xbe>
 80080d4:	f04f 0800 	mov.w	r8, #0
 80080d8:	f104 091a 	add.w	r9, r4, #26
 80080dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080de:	3b01      	subs	r3, #1
 80080e0:	4543      	cmp	r3, r8
 80080e2:	dc09      	bgt.n	80080f8 <_printf_float+0x260>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	079b      	lsls	r3, r3, #30
 80080e8:	f100 8107 	bmi.w	80082fa <_printf_float+0x462>
 80080ec:	68e0      	ldr	r0, [r4, #12]
 80080ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f0:	4298      	cmp	r0, r3
 80080f2:	bfb8      	it	lt
 80080f4:	4618      	movlt	r0, r3
 80080f6:	e730      	b.n	8007f5a <_printf_float+0xc2>
 80080f8:	2301      	movs	r3, #1
 80080fa:	464a      	mov	r2, r9
 80080fc:	4631      	mov	r1, r6
 80080fe:	4628      	mov	r0, r5
 8008100:	47b8      	blx	r7
 8008102:	3001      	adds	r0, #1
 8008104:	f43f af27 	beq.w	8007f56 <_printf_float+0xbe>
 8008108:	f108 0801 	add.w	r8, r8, #1
 800810c:	e7e6      	b.n	80080dc <_printf_float+0x244>
 800810e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	dc39      	bgt.n	8008188 <_printf_float+0x2f0>
 8008114:	4a1b      	ldr	r2, [pc, #108]	; (8008184 <_printf_float+0x2ec>)
 8008116:	2301      	movs	r3, #1
 8008118:	4631      	mov	r1, r6
 800811a:	4628      	mov	r0, r5
 800811c:	47b8      	blx	r7
 800811e:	3001      	adds	r0, #1
 8008120:	f43f af19 	beq.w	8007f56 <_printf_float+0xbe>
 8008124:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008128:	4313      	orrs	r3, r2
 800812a:	d102      	bne.n	8008132 <_printf_float+0x29a>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	07d9      	lsls	r1, r3, #31
 8008130:	d5d8      	bpl.n	80080e4 <_printf_float+0x24c>
 8008132:	ee18 3a10 	vmov	r3, s16
 8008136:	4652      	mov	r2, sl
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	f43f af09 	beq.w	8007f56 <_printf_float+0xbe>
 8008144:	f04f 0900 	mov.w	r9, #0
 8008148:	f104 0a1a 	add.w	sl, r4, #26
 800814c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814e:	425b      	negs	r3, r3
 8008150:	454b      	cmp	r3, r9
 8008152:	dc01      	bgt.n	8008158 <_printf_float+0x2c0>
 8008154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008156:	e792      	b.n	800807e <_printf_float+0x1e6>
 8008158:	2301      	movs	r3, #1
 800815a:	4652      	mov	r2, sl
 800815c:	4631      	mov	r1, r6
 800815e:	4628      	mov	r0, r5
 8008160:	47b8      	blx	r7
 8008162:	3001      	adds	r0, #1
 8008164:	f43f aef7 	beq.w	8007f56 <_printf_float+0xbe>
 8008168:	f109 0901 	add.w	r9, r9, #1
 800816c:	e7ee      	b.n	800814c <_printf_float+0x2b4>
 800816e:	bf00      	nop
 8008170:	7fefffff 	.word	0x7fefffff
 8008174:	0800b6a1 	.word	0x0800b6a1
 8008178:	0800b6a5 	.word	0x0800b6a5
 800817c:	0800b6a9 	.word	0x0800b6a9
 8008180:	0800b6ad 	.word	0x0800b6ad
 8008184:	0800b6b1 	.word	0x0800b6b1
 8008188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800818a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800818c:	429a      	cmp	r2, r3
 800818e:	bfa8      	it	ge
 8008190:	461a      	movge	r2, r3
 8008192:	2a00      	cmp	r2, #0
 8008194:	4691      	mov	r9, r2
 8008196:	dc37      	bgt.n	8008208 <_printf_float+0x370>
 8008198:	f04f 0b00 	mov.w	fp, #0
 800819c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081a0:	f104 021a 	add.w	r2, r4, #26
 80081a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081a6:	9305      	str	r3, [sp, #20]
 80081a8:	eba3 0309 	sub.w	r3, r3, r9
 80081ac:	455b      	cmp	r3, fp
 80081ae:	dc33      	bgt.n	8008218 <_printf_float+0x380>
 80081b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081b4:	429a      	cmp	r2, r3
 80081b6:	db3b      	blt.n	8008230 <_printf_float+0x398>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	07da      	lsls	r2, r3, #31
 80081bc:	d438      	bmi.n	8008230 <_printf_float+0x398>
 80081be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80081c2:	eba2 0903 	sub.w	r9, r2, r3
 80081c6:	9b05      	ldr	r3, [sp, #20]
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	4591      	cmp	r9, r2
 80081cc:	bfa8      	it	ge
 80081ce:	4691      	movge	r9, r2
 80081d0:	f1b9 0f00 	cmp.w	r9, #0
 80081d4:	dc35      	bgt.n	8008242 <_printf_float+0x3aa>
 80081d6:	f04f 0800 	mov.w	r8, #0
 80081da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081de:	f104 0a1a 	add.w	sl, r4, #26
 80081e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	eba3 0309 	sub.w	r3, r3, r9
 80081ec:	4543      	cmp	r3, r8
 80081ee:	f77f af79 	ble.w	80080e4 <_printf_float+0x24c>
 80081f2:	2301      	movs	r3, #1
 80081f4:	4652      	mov	r2, sl
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	47b8      	blx	r7
 80081fc:	3001      	adds	r0, #1
 80081fe:	f43f aeaa 	beq.w	8007f56 <_printf_float+0xbe>
 8008202:	f108 0801 	add.w	r8, r8, #1
 8008206:	e7ec      	b.n	80081e2 <_printf_float+0x34a>
 8008208:	4613      	mov	r3, r2
 800820a:	4631      	mov	r1, r6
 800820c:	4642      	mov	r2, r8
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	d1c0      	bne.n	8008198 <_printf_float+0x300>
 8008216:	e69e      	b.n	8007f56 <_printf_float+0xbe>
 8008218:	2301      	movs	r3, #1
 800821a:	4631      	mov	r1, r6
 800821c:	4628      	mov	r0, r5
 800821e:	9205      	str	r2, [sp, #20]
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f ae97 	beq.w	8007f56 <_printf_float+0xbe>
 8008228:	9a05      	ldr	r2, [sp, #20]
 800822a:	f10b 0b01 	add.w	fp, fp, #1
 800822e:	e7b9      	b.n	80081a4 <_printf_float+0x30c>
 8008230:	ee18 3a10 	vmov	r3, s16
 8008234:	4652      	mov	r2, sl
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	d1be      	bne.n	80081be <_printf_float+0x326>
 8008240:	e689      	b.n	8007f56 <_printf_float+0xbe>
 8008242:	9a05      	ldr	r2, [sp, #20]
 8008244:	464b      	mov	r3, r9
 8008246:	4442      	add	r2, r8
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	d1c1      	bne.n	80081d6 <_printf_float+0x33e>
 8008252:	e680      	b.n	8007f56 <_printf_float+0xbe>
 8008254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008256:	2a01      	cmp	r2, #1
 8008258:	dc01      	bgt.n	800825e <_printf_float+0x3c6>
 800825a:	07db      	lsls	r3, r3, #31
 800825c:	d53a      	bpl.n	80082d4 <_printf_float+0x43c>
 800825e:	2301      	movs	r3, #1
 8008260:	4642      	mov	r2, r8
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	f43f ae74 	beq.w	8007f56 <_printf_float+0xbe>
 800826e:	ee18 3a10 	vmov	r3, s16
 8008272:	4652      	mov	r2, sl
 8008274:	4631      	mov	r1, r6
 8008276:	4628      	mov	r0, r5
 8008278:	47b8      	blx	r7
 800827a:	3001      	adds	r0, #1
 800827c:	f43f ae6b 	beq.w	8007f56 <_printf_float+0xbe>
 8008280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008284:	2200      	movs	r2, #0
 8008286:	2300      	movs	r3, #0
 8008288:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800828c:	f7f8 fc2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008290:	b9d8      	cbnz	r0, 80082ca <_printf_float+0x432>
 8008292:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008296:	f108 0201 	add.w	r2, r8, #1
 800829a:	4631      	mov	r1, r6
 800829c:	4628      	mov	r0, r5
 800829e:	47b8      	blx	r7
 80082a0:	3001      	adds	r0, #1
 80082a2:	d10e      	bne.n	80082c2 <_printf_float+0x42a>
 80082a4:	e657      	b.n	8007f56 <_printf_float+0xbe>
 80082a6:	2301      	movs	r3, #1
 80082a8:	4652      	mov	r2, sl
 80082aa:	4631      	mov	r1, r6
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b8      	blx	r7
 80082b0:	3001      	adds	r0, #1
 80082b2:	f43f ae50 	beq.w	8007f56 <_printf_float+0xbe>
 80082b6:	f108 0801 	add.w	r8, r8, #1
 80082ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082bc:	3b01      	subs	r3, #1
 80082be:	4543      	cmp	r3, r8
 80082c0:	dcf1      	bgt.n	80082a6 <_printf_float+0x40e>
 80082c2:	464b      	mov	r3, r9
 80082c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082c8:	e6da      	b.n	8008080 <_printf_float+0x1e8>
 80082ca:	f04f 0800 	mov.w	r8, #0
 80082ce:	f104 0a1a 	add.w	sl, r4, #26
 80082d2:	e7f2      	b.n	80082ba <_printf_float+0x422>
 80082d4:	2301      	movs	r3, #1
 80082d6:	4642      	mov	r2, r8
 80082d8:	e7df      	b.n	800829a <_printf_float+0x402>
 80082da:	2301      	movs	r3, #1
 80082dc:	464a      	mov	r2, r9
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f ae36 	beq.w	8007f56 <_printf_float+0xbe>
 80082ea:	f108 0801 	add.w	r8, r8, #1
 80082ee:	68e3      	ldr	r3, [r4, #12]
 80082f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082f2:	1a5b      	subs	r3, r3, r1
 80082f4:	4543      	cmp	r3, r8
 80082f6:	dcf0      	bgt.n	80082da <_printf_float+0x442>
 80082f8:	e6f8      	b.n	80080ec <_printf_float+0x254>
 80082fa:	f04f 0800 	mov.w	r8, #0
 80082fe:	f104 0919 	add.w	r9, r4, #25
 8008302:	e7f4      	b.n	80082ee <_printf_float+0x456>

08008304 <_printf_common>:
 8008304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	4616      	mov	r6, r2
 800830a:	4699      	mov	r9, r3
 800830c:	688a      	ldr	r2, [r1, #8]
 800830e:	690b      	ldr	r3, [r1, #16]
 8008310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008314:	4293      	cmp	r3, r2
 8008316:	bfb8      	it	lt
 8008318:	4613      	movlt	r3, r2
 800831a:	6033      	str	r3, [r6, #0]
 800831c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008320:	4607      	mov	r7, r0
 8008322:	460c      	mov	r4, r1
 8008324:	b10a      	cbz	r2, 800832a <_printf_common+0x26>
 8008326:	3301      	adds	r3, #1
 8008328:	6033      	str	r3, [r6, #0]
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	0699      	lsls	r1, r3, #26
 800832e:	bf42      	ittt	mi
 8008330:	6833      	ldrmi	r3, [r6, #0]
 8008332:	3302      	addmi	r3, #2
 8008334:	6033      	strmi	r3, [r6, #0]
 8008336:	6825      	ldr	r5, [r4, #0]
 8008338:	f015 0506 	ands.w	r5, r5, #6
 800833c:	d106      	bne.n	800834c <_printf_common+0x48>
 800833e:	f104 0a19 	add.w	sl, r4, #25
 8008342:	68e3      	ldr	r3, [r4, #12]
 8008344:	6832      	ldr	r2, [r6, #0]
 8008346:	1a9b      	subs	r3, r3, r2
 8008348:	42ab      	cmp	r3, r5
 800834a:	dc26      	bgt.n	800839a <_printf_common+0x96>
 800834c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008350:	1e13      	subs	r3, r2, #0
 8008352:	6822      	ldr	r2, [r4, #0]
 8008354:	bf18      	it	ne
 8008356:	2301      	movne	r3, #1
 8008358:	0692      	lsls	r2, r2, #26
 800835a:	d42b      	bmi.n	80083b4 <_printf_common+0xb0>
 800835c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008360:	4649      	mov	r1, r9
 8008362:	4638      	mov	r0, r7
 8008364:	47c0      	blx	r8
 8008366:	3001      	adds	r0, #1
 8008368:	d01e      	beq.n	80083a8 <_printf_common+0xa4>
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	6922      	ldr	r2, [r4, #16]
 800836e:	f003 0306 	and.w	r3, r3, #6
 8008372:	2b04      	cmp	r3, #4
 8008374:	bf02      	ittt	eq
 8008376:	68e5      	ldreq	r5, [r4, #12]
 8008378:	6833      	ldreq	r3, [r6, #0]
 800837a:	1aed      	subeq	r5, r5, r3
 800837c:	68a3      	ldr	r3, [r4, #8]
 800837e:	bf0c      	ite	eq
 8008380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008384:	2500      	movne	r5, #0
 8008386:	4293      	cmp	r3, r2
 8008388:	bfc4      	itt	gt
 800838a:	1a9b      	subgt	r3, r3, r2
 800838c:	18ed      	addgt	r5, r5, r3
 800838e:	2600      	movs	r6, #0
 8008390:	341a      	adds	r4, #26
 8008392:	42b5      	cmp	r5, r6
 8008394:	d11a      	bne.n	80083cc <_printf_common+0xc8>
 8008396:	2000      	movs	r0, #0
 8008398:	e008      	b.n	80083ac <_printf_common+0xa8>
 800839a:	2301      	movs	r3, #1
 800839c:	4652      	mov	r2, sl
 800839e:	4649      	mov	r1, r9
 80083a0:	4638      	mov	r0, r7
 80083a2:	47c0      	blx	r8
 80083a4:	3001      	adds	r0, #1
 80083a6:	d103      	bne.n	80083b0 <_printf_common+0xac>
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b0:	3501      	adds	r5, #1
 80083b2:	e7c6      	b.n	8008342 <_printf_common+0x3e>
 80083b4:	18e1      	adds	r1, r4, r3
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	2030      	movs	r0, #48	; 0x30
 80083ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083be:	4422      	add	r2, r4
 80083c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083c8:	3302      	adds	r3, #2
 80083ca:	e7c7      	b.n	800835c <_printf_common+0x58>
 80083cc:	2301      	movs	r3, #1
 80083ce:	4622      	mov	r2, r4
 80083d0:	4649      	mov	r1, r9
 80083d2:	4638      	mov	r0, r7
 80083d4:	47c0      	blx	r8
 80083d6:	3001      	adds	r0, #1
 80083d8:	d0e6      	beq.n	80083a8 <_printf_common+0xa4>
 80083da:	3601      	adds	r6, #1
 80083dc:	e7d9      	b.n	8008392 <_printf_common+0x8e>
	...

080083e0 <_printf_i>:
 80083e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083e4:	7e0f      	ldrb	r7, [r1, #24]
 80083e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083e8:	2f78      	cmp	r7, #120	; 0x78
 80083ea:	4691      	mov	r9, r2
 80083ec:	4680      	mov	r8, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	469a      	mov	sl, r3
 80083f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083f6:	d807      	bhi.n	8008408 <_printf_i+0x28>
 80083f8:	2f62      	cmp	r7, #98	; 0x62
 80083fa:	d80a      	bhi.n	8008412 <_printf_i+0x32>
 80083fc:	2f00      	cmp	r7, #0
 80083fe:	f000 80d4 	beq.w	80085aa <_printf_i+0x1ca>
 8008402:	2f58      	cmp	r7, #88	; 0x58
 8008404:	f000 80c0 	beq.w	8008588 <_printf_i+0x1a8>
 8008408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800840c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008410:	e03a      	b.n	8008488 <_printf_i+0xa8>
 8008412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008416:	2b15      	cmp	r3, #21
 8008418:	d8f6      	bhi.n	8008408 <_printf_i+0x28>
 800841a:	a101      	add	r1, pc, #4	; (adr r1, 8008420 <_printf_i+0x40>)
 800841c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008420:	08008479 	.word	0x08008479
 8008424:	0800848d 	.word	0x0800848d
 8008428:	08008409 	.word	0x08008409
 800842c:	08008409 	.word	0x08008409
 8008430:	08008409 	.word	0x08008409
 8008434:	08008409 	.word	0x08008409
 8008438:	0800848d 	.word	0x0800848d
 800843c:	08008409 	.word	0x08008409
 8008440:	08008409 	.word	0x08008409
 8008444:	08008409 	.word	0x08008409
 8008448:	08008409 	.word	0x08008409
 800844c:	08008591 	.word	0x08008591
 8008450:	080084b9 	.word	0x080084b9
 8008454:	0800854b 	.word	0x0800854b
 8008458:	08008409 	.word	0x08008409
 800845c:	08008409 	.word	0x08008409
 8008460:	080085b3 	.word	0x080085b3
 8008464:	08008409 	.word	0x08008409
 8008468:	080084b9 	.word	0x080084b9
 800846c:	08008409 	.word	0x08008409
 8008470:	08008409 	.word	0x08008409
 8008474:	08008553 	.word	0x08008553
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	1d1a      	adds	r2, r3, #4
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	602a      	str	r2, [r5, #0]
 8008480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008488:	2301      	movs	r3, #1
 800848a:	e09f      	b.n	80085cc <_printf_i+0x1ec>
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	682b      	ldr	r3, [r5, #0]
 8008490:	0607      	lsls	r7, r0, #24
 8008492:	f103 0104 	add.w	r1, r3, #4
 8008496:	6029      	str	r1, [r5, #0]
 8008498:	d501      	bpl.n	800849e <_printf_i+0xbe>
 800849a:	681e      	ldr	r6, [r3, #0]
 800849c:	e003      	b.n	80084a6 <_printf_i+0xc6>
 800849e:	0646      	lsls	r6, r0, #25
 80084a0:	d5fb      	bpl.n	800849a <_printf_i+0xba>
 80084a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80084a6:	2e00      	cmp	r6, #0
 80084a8:	da03      	bge.n	80084b2 <_printf_i+0xd2>
 80084aa:	232d      	movs	r3, #45	; 0x2d
 80084ac:	4276      	negs	r6, r6
 80084ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b2:	485a      	ldr	r0, [pc, #360]	; (800861c <_printf_i+0x23c>)
 80084b4:	230a      	movs	r3, #10
 80084b6:	e012      	b.n	80084de <_printf_i+0xfe>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	6820      	ldr	r0, [r4, #0]
 80084bc:	1d19      	adds	r1, r3, #4
 80084be:	6029      	str	r1, [r5, #0]
 80084c0:	0605      	lsls	r5, r0, #24
 80084c2:	d501      	bpl.n	80084c8 <_printf_i+0xe8>
 80084c4:	681e      	ldr	r6, [r3, #0]
 80084c6:	e002      	b.n	80084ce <_printf_i+0xee>
 80084c8:	0641      	lsls	r1, r0, #25
 80084ca:	d5fb      	bpl.n	80084c4 <_printf_i+0xe4>
 80084cc:	881e      	ldrh	r6, [r3, #0]
 80084ce:	4853      	ldr	r0, [pc, #332]	; (800861c <_printf_i+0x23c>)
 80084d0:	2f6f      	cmp	r7, #111	; 0x6f
 80084d2:	bf0c      	ite	eq
 80084d4:	2308      	moveq	r3, #8
 80084d6:	230a      	movne	r3, #10
 80084d8:	2100      	movs	r1, #0
 80084da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084de:	6865      	ldr	r5, [r4, #4]
 80084e0:	60a5      	str	r5, [r4, #8]
 80084e2:	2d00      	cmp	r5, #0
 80084e4:	bfa2      	ittt	ge
 80084e6:	6821      	ldrge	r1, [r4, #0]
 80084e8:	f021 0104 	bicge.w	r1, r1, #4
 80084ec:	6021      	strge	r1, [r4, #0]
 80084ee:	b90e      	cbnz	r6, 80084f4 <_printf_i+0x114>
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	d04b      	beq.n	800858c <_printf_i+0x1ac>
 80084f4:	4615      	mov	r5, r2
 80084f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80084fa:	fb03 6711 	mls	r7, r3, r1, r6
 80084fe:	5dc7      	ldrb	r7, [r0, r7]
 8008500:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008504:	4637      	mov	r7, r6
 8008506:	42bb      	cmp	r3, r7
 8008508:	460e      	mov	r6, r1
 800850a:	d9f4      	bls.n	80084f6 <_printf_i+0x116>
 800850c:	2b08      	cmp	r3, #8
 800850e:	d10b      	bne.n	8008528 <_printf_i+0x148>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	07de      	lsls	r6, r3, #31
 8008514:	d508      	bpl.n	8008528 <_printf_i+0x148>
 8008516:	6923      	ldr	r3, [r4, #16]
 8008518:	6861      	ldr	r1, [r4, #4]
 800851a:	4299      	cmp	r1, r3
 800851c:	bfde      	ittt	le
 800851e:	2330      	movle	r3, #48	; 0x30
 8008520:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008524:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008528:	1b52      	subs	r2, r2, r5
 800852a:	6122      	str	r2, [r4, #16]
 800852c:	f8cd a000 	str.w	sl, [sp]
 8008530:	464b      	mov	r3, r9
 8008532:	aa03      	add	r2, sp, #12
 8008534:	4621      	mov	r1, r4
 8008536:	4640      	mov	r0, r8
 8008538:	f7ff fee4 	bl	8008304 <_printf_common>
 800853c:	3001      	adds	r0, #1
 800853e:	d14a      	bne.n	80085d6 <_printf_i+0x1f6>
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	b004      	add	sp, #16
 8008546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	f043 0320 	orr.w	r3, r3, #32
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	4833      	ldr	r0, [pc, #204]	; (8008620 <_printf_i+0x240>)
 8008554:	2778      	movs	r7, #120	; 0x78
 8008556:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	6829      	ldr	r1, [r5, #0]
 800855e:	061f      	lsls	r7, r3, #24
 8008560:	f851 6b04 	ldr.w	r6, [r1], #4
 8008564:	d402      	bmi.n	800856c <_printf_i+0x18c>
 8008566:	065f      	lsls	r7, r3, #25
 8008568:	bf48      	it	mi
 800856a:	b2b6      	uxthmi	r6, r6
 800856c:	07df      	lsls	r7, r3, #31
 800856e:	bf48      	it	mi
 8008570:	f043 0320 	orrmi.w	r3, r3, #32
 8008574:	6029      	str	r1, [r5, #0]
 8008576:	bf48      	it	mi
 8008578:	6023      	strmi	r3, [r4, #0]
 800857a:	b91e      	cbnz	r6, 8008584 <_printf_i+0x1a4>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	f023 0320 	bic.w	r3, r3, #32
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	2310      	movs	r3, #16
 8008586:	e7a7      	b.n	80084d8 <_printf_i+0xf8>
 8008588:	4824      	ldr	r0, [pc, #144]	; (800861c <_printf_i+0x23c>)
 800858a:	e7e4      	b.n	8008556 <_printf_i+0x176>
 800858c:	4615      	mov	r5, r2
 800858e:	e7bd      	b.n	800850c <_printf_i+0x12c>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	6826      	ldr	r6, [r4, #0]
 8008594:	6961      	ldr	r1, [r4, #20]
 8008596:	1d18      	adds	r0, r3, #4
 8008598:	6028      	str	r0, [r5, #0]
 800859a:	0635      	lsls	r5, r6, #24
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	d501      	bpl.n	80085a4 <_printf_i+0x1c4>
 80085a0:	6019      	str	r1, [r3, #0]
 80085a2:	e002      	b.n	80085aa <_printf_i+0x1ca>
 80085a4:	0670      	lsls	r0, r6, #25
 80085a6:	d5fb      	bpl.n	80085a0 <_printf_i+0x1c0>
 80085a8:	8019      	strh	r1, [r3, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	4615      	mov	r5, r2
 80085b0:	e7bc      	b.n	800852c <_printf_i+0x14c>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	1d1a      	adds	r2, r3, #4
 80085b6:	602a      	str	r2, [r5, #0]
 80085b8:	681d      	ldr	r5, [r3, #0]
 80085ba:	6862      	ldr	r2, [r4, #4]
 80085bc:	2100      	movs	r1, #0
 80085be:	4628      	mov	r0, r5
 80085c0:	f7f7 fe16 	bl	80001f0 <memchr>
 80085c4:	b108      	cbz	r0, 80085ca <_printf_i+0x1ea>
 80085c6:	1b40      	subs	r0, r0, r5
 80085c8:	6060      	str	r0, [r4, #4]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	2300      	movs	r3, #0
 80085d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085d4:	e7aa      	b.n	800852c <_printf_i+0x14c>
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	462a      	mov	r2, r5
 80085da:	4649      	mov	r1, r9
 80085dc:	4640      	mov	r0, r8
 80085de:	47d0      	blx	sl
 80085e0:	3001      	adds	r0, #1
 80085e2:	d0ad      	beq.n	8008540 <_printf_i+0x160>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	079b      	lsls	r3, r3, #30
 80085e8:	d413      	bmi.n	8008612 <_printf_i+0x232>
 80085ea:	68e0      	ldr	r0, [r4, #12]
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	4298      	cmp	r0, r3
 80085f0:	bfb8      	it	lt
 80085f2:	4618      	movlt	r0, r3
 80085f4:	e7a6      	b.n	8008544 <_printf_i+0x164>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4632      	mov	r2, r6
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	47d0      	blx	sl
 8008600:	3001      	adds	r0, #1
 8008602:	d09d      	beq.n	8008540 <_printf_i+0x160>
 8008604:	3501      	adds	r5, #1
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	9903      	ldr	r1, [sp, #12]
 800860a:	1a5b      	subs	r3, r3, r1
 800860c:	42ab      	cmp	r3, r5
 800860e:	dcf2      	bgt.n	80085f6 <_printf_i+0x216>
 8008610:	e7eb      	b.n	80085ea <_printf_i+0x20a>
 8008612:	2500      	movs	r5, #0
 8008614:	f104 0619 	add.w	r6, r4, #25
 8008618:	e7f5      	b.n	8008606 <_printf_i+0x226>
 800861a:	bf00      	nop
 800861c:	0800b6b3 	.word	0x0800b6b3
 8008620:	0800b6c4 	.word	0x0800b6c4

08008624 <std>:
 8008624:	2300      	movs	r3, #0
 8008626:	b510      	push	{r4, lr}
 8008628:	4604      	mov	r4, r0
 800862a:	e9c0 3300 	strd	r3, r3, [r0]
 800862e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008632:	6083      	str	r3, [r0, #8]
 8008634:	8181      	strh	r1, [r0, #12]
 8008636:	6643      	str	r3, [r0, #100]	; 0x64
 8008638:	81c2      	strh	r2, [r0, #14]
 800863a:	6183      	str	r3, [r0, #24]
 800863c:	4619      	mov	r1, r3
 800863e:	2208      	movs	r2, #8
 8008640:	305c      	adds	r0, #92	; 0x5c
 8008642:	f000 f916 	bl	8008872 <memset>
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <std+0x38>)
 8008648:	6263      	str	r3, [r4, #36]	; 0x24
 800864a:	4b05      	ldr	r3, [pc, #20]	; (8008660 <std+0x3c>)
 800864c:	62a3      	str	r3, [r4, #40]	; 0x28
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <std+0x40>)
 8008650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <std+0x44>)
 8008654:	6224      	str	r4, [r4, #32]
 8008656:	6323      	str	r3, [r4, #48]	; 0x30
 8008658:	bd10      	pop	{r4, pc}
 800865a:	bf00      	nop
 800865c:	080087ed 	.word	0x080087ed
 8008660:	0800880f 	.word	0x0800880f
 8008664:	08008847 	.word	0x08008847
 8008668:	0800886b 	.word	0x0800886b

0800866c <stdio_exit_handler>:
 800866c:	4a02      	ldr	r2, [pc, #8]	; (8008678 <stdio_exit_handler+0xc>)
 800866e:	4903      	ldr	r1, [pc, #12]	; (800867c <stdio_exit_handler+0x10>)
 8008670:	4803      	ldr	r0, [pc, #12]	; (8008680 <stdio_exit_handler+0x14>)
 8008672:	f000 b869 	b.w	8008748 <_fwalk_sglue>
 8008676:	bf00      	nop
 8008678:	2000001c 	.word	0x2000001c
 800867c:	0800ad69 	.word	0x0800ad69
 8008680:	20000194 	.word	0x20000194

08008684 <cleanup_stdio>:
 8008684:	6841      	ldr	r1, [r0, #4]
 8008686:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <cleanup_stdio+0x34>)
 8008688:	4299      	cmp	r1, r3
 800868a:	b510      	push	{r4, lr}
 800868c:	4604      	mov	r4, r0
 800868e:	d001      	beq.n	8008694 <cleanup_stdio+0x10>
 8008690:	f002 fb6a 	bl	800ad68 <_fflush_r>
 8008694:	68a1      	ldr	r1, [r4, #8]
 8008696:	4b09      	ldr	r3, [pc, #36]	; (80086bc <cleanup_stdio+0x38>)
 8008698:	4299      	cmp	r1, r3
 800869a:	d002      	beq.n	80086a2 <cleanup_stdio+0x1e>
 800869c:	4620      	mov	r0, r4
 800869e:	f002 fb63 	bl	800ad68 <_fflush_r>
 80086a2:	68e1      	ldr	r1, [r4, #12]
 80086a4:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <cleanup_stdio+0x3c>)
 80086a6:	4299      	cmp	r1, r3
 80086a8:	d004      	beq.n	80086b4 <cleanup_stdio+0x30>
 80086aa:	4620      	mov	r0, r4
 80086ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b0:	f002 bb5a 	b.w	800ad68 <_fflush_r>
 80086b4:	bd10      	pop	{r4, pc}
 80086b6:	bf00      	nop
 80086b8:	20004354 	.word	0x20004354
 80086bc:	200043bc 	.word	0x200043bc
 80086c0:	20004424 	.word	0x20004424

080086c4 <global_stdio_init.part.0>:
 80086c4:	b510      	push	{r4, lr}
 80086c6:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <global_stdio_init.part.0+0x30>)
 80086c8:	4c0b      	ldr	r4, [pc, #44]	; (80086f8 <global_stdio_init.part.0+0x34>)
 80086ca:	4a0c      	ldr	r2, [pc, #48]	; (80086fc <global_stdio_init.part.0+0x38>)
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	4620      	mov	r0, r4
 80086d0:	2200      	movs	r2, #0
 80086d2:	2104      	movs	r1, #4
 80086d4:	f7ff ffa6 	bl	8008624 <std>
 80086d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80086dc:	2201      	movs	r2, #1
 80086de:	2109      	movs	r1, #9
 80086e0:	f7ff ffa0 	bl	8008624 <std>
 80086e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80086e8:	2202      	movs	r2, #2
 80086ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ee:	2112      	movs	r1, #18
 80086f0:	f7ff bf98 	b.w	8008624 <std>
 80086f4:	2000448c 	.word	0x2000448c
 80086f8:	20004354 	.word	0x20004354
 80086fc:	0800866d 	.word	0x0800866d

08008700 <__sfp_lock_acquire>:
 8008700:	4801      	ldr	r0, [pc, #4]	; (8008708 <__sfp_lock_acquire+0x8>)
 8008702:	f000 b99b 	b.w	8008a3c <__retarget_lock_acquire_recursive>
 8008706:	bf00      	nop
 8008708:	20004495 	.word	0x20004495

0800870c <__sfp_lock_release>:
 800870c:	4801      	ldr	r0, [pc, #4]	; (8008714 <__sfp_lock_release+0x8>)
 800870e:	f000 b996 	b.w	8008a3e <__retarget_lock_release_recursive>
 8008712:	bf00      	nop
 8008714:	20004495 	.word	0x20004495

08008718 <__sinit>:
 8008718:	b510      	push	{r4, lr}
 800871a:	4604      	mov	r4, r0
 800871c:	f7ff fff0 	bl	8008700 <__sfp_lock_acquire>
 8008720:	6a23      	ldr	r3, [r4, #32]
 8008722:	b11b      	cbz	r3, 800872c <__sinit+0x14>
 8008724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008728:	f7ff bff0 	b.w	800870c <__sfp_lock_release>
 800872c:	4b04      	ldr	r3, [pc, #16]	; (8008740 <__sinit+0x28>)
 800872e:	6223      	str	r3, [r4, #32]
 8008730:	4b04      	ldr	r3, [pc, #16]	; (8008744 <__sinit+0x2c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1f5      	bne.n	8008724 <__sinit+0xc>
 8008738:	f7ff ffc4 	bl	80086c4 <global_stdio_init.part.0>
 800873c:	e7f2      	b.n	8008724 <__sinit+0xc>
 800873e:	bf00      	nop
 8008740:	08008685 	.word	0x08008685
 8008744:	2000448c 	.word	0x2000448c

08008748 <_fwalk_sglue>:
 8008748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800874c:	4607      	mov	r7, r0
 800874e:	4688      	mov	r8, r1
 8008750:	4614      	mov	r4, r2
 8008752:	2600      	movs	r6, #0
 8008754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008758:	f1b9 0901 	subs.w	r9, r9, #1
 800875c:	d505      	bpl.n	800876a <_fwalk_sglue+0x22>
 800875e:	6824      	ldr	r4, [r4, #0]
 8008760:	2c00      	cmp	r4, #0
 8008762:	d1f7      	bne.n	8008754 <_fwalk_sglue+0xc>
 8008764:	4630      	mov	r0, r6
 8008766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d907      	bls.n	8008780 <_fwalk_sglue+0x38>
 8008770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008774:	3301      	adds	r3, #1
 8008776:	d003      	beq.n	8008780 <_fwalk_sglue+0x38>
 8008778:	4629      	mov	r1, r5
 800877a:	4638      	mov	r0, r7
 800877c:	47c0      	blx	r8
 800877e:	4306      	orrs	r6, r0
 8008780:	3568      	adds	r5, #104	; 0x68
 8008782:	e7e9      	b.n	8008758 <_fwalk_sglue+0x10>

08008784 <sniprintf>:
 8008784:	b40c      	push	{r2, r3}
 8008786:	b530      	push	{r4, r5, lr}
 8008788:	4b17      	ldr	r3, [pc, #92]	; (80087e8 <sniprintf+0x64>)
 800878a:	1e0c      	subs	r4, r1, #0
 800878c:	681d      	ldr	r5, [r3, #0]
 800878e:	b09d      	sub	sp, #116	; 0x74
 8008790:	da08      	bge.n	80087a4 <sniprintf+0x20>
 8008792:	238b      	movs	r3, #139	; 0x8b
 8008794:	602b      	str	r3, [r5, #0]
 8008796:	f04f 30ff 	mov.w	r0, #4294967295
 800879a:	b01d      	add	sp, #116	; 0x74
 800879c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087a0:	b002      	add	sp, #8
 80087a2:	4770      	bx	lr
 80087a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80087a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80087ac:	bf14      	ite	ne
 80087ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087b2:	4623      	moveq	r3, r4
 80087b4:	9304      	str	r3, [sp, #16]
 80087b6:	9307      	str	r3, [sp, #28]
 80087b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087bc:	9002      	str	r0, [sp, #8]
 80087be:	9006      	str	r0, [sp, #24]
 80087c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80087c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087c6:	ab21      	add	r3, sp, #132	; 0x84
 80087c8:	a902      	add	r1, sp, #8
 80087ca:	4628      	mov	r0, r5
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	f002 f947 	bl	800aa60 <_svfiprintf_r>
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	bfbc      	itt	lt
 80087d6:	238b      	movlt	r3, #139	; 0x8b
 80087d8:	602b      	strlt	r3, [r5, #0]
 80087da:	2c00      	cmp	r4, #0
 80087dc:	d0dd      	beq.n	800879a <sniprintf+0x16>
 80087de:	9b02      	ldr	r3, [sp, #8]
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]
 80087e4:	e7d9      	b.n	800879a <sniprintf+0x16>
 80087e6:	bf00      	nop
 80087e8:	200001e0 	.word	0x200001e0

080087ec <__sread>:
 80087ec:	b510      	push	{r4, lr}
 80087ee:	460c      	mov	r4, r1
 80087f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f4:	f000 f8d4 	bl	80089a0 <_read_r>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	bfab      	itete	ge
 80087fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008800:	181b      	addge	r3, r3, r0
 8008802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008806:	bfac      	ite	ge
 8008808:	6563      	strge	r3, [r4, #84]	; 0x54
 800880a:	81a3      	strhlt	r3, [r4, #12]
 800880c:	bd10      	pop	{r4, pc}

0800880e <__swrite>:
 800880e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008812:	461f      	mov	r7, r3
 8008814:	898b      	ldrh	r3, [r1, #12]
 8008816:	05db      	lsls	r3, r3, #23
 8008818:	4605      	mov	r5, r0
 800881a:	460c      	mov	r4, r1
 800881c:	4616      	mov	r6, r2
 800881e:	d505      	bpl.n	800882c <__swrite+0x1e>
 8008820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008824:	2302      	movs	r3, #2
 8008826:	2200      	movs	r2, #0
 8008828:	f000 f8a8 	bl	800897c <_lseek_r>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	4632      	mov	r2, r6
 800883a:	463b      	mov	r3, r7
 800883c:	4628      	mov	r0, r5
 800883e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008842:	f000 b8bf 	b.w	80089c4 <_write_r>

08008846 <__sseek>:
 8008846:	b510      	push	{r4, lr}
 8008848:	460c      	mov	r4, r1
 800884a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884e:	f000 f895 	bl	800897c <_lseek_r>
 8008852:	1c43      	adds	r3, r0, #1
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	bf15      	itete	ne
 8008858:	6560      	strne	r0, [r4, #84]	; 0x54
 800885a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800885e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008862:	81a3      	strheq	r3, [r4, #12]
 8008864:	bf18      	it	ne
 8008866:	81a3      	strhne	r3, [r4, #12]
 8008868:	bd10      	pop	{r4, pc}

0800886a <__sclose>:
 800886a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886e:	f000 b81f 	b.w	80088b0 <_close_r>

08008872 <memset>:
 8008872:	4402      	add	r2, r0
 8008874:	4603      	mov	r3, r0
 8008876:	4293      	cmp	r3, r2
 8008878:	d100      	bne.n	800887c <memset+0xa>
 800887a:	4770      	bx	lr
 800887c:	f803 1b01 	strb.w	r1, [r3], #1
 8008880:	e7f9      	b.n	8008876 <memset+0x4>

08008882 <strncmp>:
 8008882:	b510      	push	{r4, lr}
 8008884:	b16a      	cbz	r2, 80088a2 <strncmp+0x20>
 8008886:	3901      	subs	r1, #1
 8008888:	1884      	adds	r4, r0, r2
 800888a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800888e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008892:	429a      	cmp	r2, r3
 8008894:	d103      	bne.n	800889e <strncmp+0x1c>
 8008896:	42a0      	cmp	r0, r4
 8008898:	d001      	beq.n	800889e <strncmp+0x1c>
 800889a:	2a00      	cmp	r2, #0
 800889c:	d1f5      	bne.n	800888a <strncmp+0x8>
 800889e:	1ad0      	subs	r0, r2, r3
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	4610      	mov	r0, r2
 80088a4:	e7fc      	b.n	80088a0 <strncmp+0x1e>
	...

080088a8 <_localeconv_r>:
 80088a8:	4800      	ldr	r0, [pc, #0]	; (80088ac <_localeconv_r+0x4>)
 80088aa:	4770      	bx	lr
 80088ac:	20000118 	.word	0x20000118

080088b0 <_close_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d06      	ldr	r5, [pc, #24]	; (80088cc <_close_r+0x1c>)
 80088b4:	2300      	movs	r3, #0
 80088b6:	4604      	mov	r4, r0
 80088b8:	4608      	mov	r0, r1
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	f7f9 fc49 	bl	8002152 <_close>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_close_r+0x1a>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_close_r+0x1a>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	20004490 	.word	0x20004490

080088d0 <_reclaim_reent>:
 80088d0:	4b29      	ldr	r3, [pc, #164]	; (8008978 <_reclaim_reent+0xa8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4283      	cmp	r3, r0
 80088d6:	b570      	push	{r4, r5, r6, lr}
 80088d8:	4604      	mov	r4, r0
 80088da:	d04b      	beq.n	8008974 <_reclaim_reent+0xa4>
 80088dc:	69c3      	ldr	r3, [r0, #28]
 80088de:	b143      	cbz	r3, 80088f2 <_reclaim_reent+0x22>
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d144      	bne.n	8008970 <_reclaim_reent+0xa0>
 80088e6:	69e3      	ldr	r3, [r4, #28]
 80088e8:	6819      	ldr	r1, [r3, #0]
 80088ea:	b111      	cbz	r1, 80088f2 <_reclaim_reent+0x22>
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 ff39 	bl	8009764 <_free_r>
 80088f2:	6961      	ldr	r1, [r4, #20]
 80088f4:	b111      	cbz	r1, 80088fc <_reclaim_reent+0x2c>
 80088f6:	4620      	mov	r0, r4
 80088f8:	f000 ff34 	bl	8009764 <_free_r>
 80088fc:	69e1      	ldr	r1, [r4, #28]
 80088fe:	b111      	cbz	r1, 8008906 <_reclaim_reent+0x36>
 8008900:	4620      	mov	r0, r4
 8008902:	f000 ff2f 	bl	8009764 <_free_r>
 8008906:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008908:	b111      	cbz	r1, 8008910 <_reclaim_reent+0x40>
 800890a:	4620      	mov	r0, r4
 800890c:	f000 ff2a 	bl	8009764 <_free_r>
 8008910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008912:	b111      	cbz	r1, 800891a <_reclaim_reent+0x4a>
 8008914:	4620      	mov	r0, r4
 8008916:	f000 ff25 	bl	8009764 <_free_r>
 800891a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800891c:	b111      	cbz	r1, 8008924 <_reclaim_reent+0x54>
 800891e:	4620      	mov	r0, r4
 8008920:	f000 ff20 	bl	8009764 <_free_r>
 8008924:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008926:	b111      	cbz	r1, 800892e <_reclaim_reent+0x5e>
 8008928:	4620      	mov	r0, r4
 800892a:	f000 ff1b 	bl	8009764 <_free_r>
 800892e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008930:	b111      	cbz	r1, 8008938 <_reclaim_reent+0x68>
 8008932:	4620      	mov	r0, r4
 8008934:	f000 ff16 	bl	8009764 <_free_r>
 8008938:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800893a:	b111      	cbz	r1, 8008942 <_reclaim_reent+0x72>
 800893c:	4620      	mov	r0, r4
 800893e:	f000 ff11 	bl	8009764 <_free_r>
 8008942:	6a23      	ldr	r3, [r4, #32]
 8008944:	b1b3      	cbz	r3, 8008974 <_reclaim_reent+0xa4>
 8008946:	4620      	mov	r0, r4
 8008948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800894c:	4718      	bx	r3
 800894e:	5949      	ldr	r1, [r1, r5]
 8008950:	b941      	cbnz	r1, 8008964 <_reclaim_reent+0x94>
 8008952:	3504      	adds	r5, #4
 8008954:	69e3      	ldr	r3, [r4, #28]
 8008956:	2d80      	cmp	r5, #128	; 0x80
 8008958:	68d9      	ldr	r1, [r3, #12]
 800895a:	d1f8      	bne.n	800894e <_reclaim_reent+0x7e>
 800895c:	4620      	mov	r0, r4
 800895e:	f000 ff01 	bl	8009764 <_free_r>
 8008962:	e7c0      	b.n	80088e6 <_reclaim_reent+0x16>
 8008964:	680e      	ldr	r6, [r1, #0]
 8008966:	4620      	mov	r0, r4
 8008968:	f000 fefc 	bl	8009764 <_free_r>
 800896c:	4631      	mov	r1, r6
 800896e:	e7ef      	b.n	8008950 <_reclaim_reent+0x80>
 8008970:	2500      	movs	r5, #0
 8008972:	e7ef      	b.n	8008954 <_reclaim_reent+0x84>
 8008974:	bd70      	pop	{r4, r5, r6, pc}
 8008976:	bf00      	nop
 8008978:	200001e0 	.word	0x200001e0

0800897c <_lseek_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d07      	ldr	r5, [pc, #28]	; (800899c <_lseek_r+0x20>)
 8008980:	4604      	mov	r4, r0
 8008982:	4608      	mov	r0, r1
 8008984:	4611      	mov	r1, r2
 8008986:	2200      	movs	r2, #0
 8008988:	602a      	str	r2, [r5, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	f7f9 fc08 	bl	80021a0 <_lseek>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_lseek_r+0x1e>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_lseek_r+0x1e>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	20004490 	.word	0x20004490

080089a0 <_read_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d07      	ldr	r5, [pc, #28]	; (80089c0 <_read_r+0x20>)
 80089a4:	4604      	mov	r4, r0
 80089a6:	4608      	mov	r0, r1
 80089a8:	4611      	mov	r1, r2
 80089aa:	2200      	movs	r2, #0
 80089ac:	602a      	str	r2, [r5, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	f7f9 fb96 	bl	80020e0 <_read>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_read_r+0x1e>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b103      	cbz	r3, 80089be <_read_r+0x1e>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	20004490 	.word	0x20004490

080089c4 <_write_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d07      	ldr	r5, [pc, #28]	; (80089e4 <_write_r+0x20>)
 80089c8:	4604      	mov	r4, r0
 80089ca:	4608      	mov	r0, r1
 80089cc:	4611      	mov	r1, r2
 80089ce:	2200      	movs	r2, #0
 80089d0:	602a      	str	r2, [r5, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	f7f9 fba1 	bl	800211a <_write>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	d102      	bne.n	80089e2 <_write_r+0x1e>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	b103      	cbz	r3, 80089e2 <_write_r+0x1e>
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	20004490 	.word	0x20004490

080089e8 <__errno>:
 80089e8:	4b01      	ldr	r3, [pc, #4]	; (80089f0 <__errno+0x8>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	200001e0 	.word	0x200001e0

080089f4 <__libc_init_array>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	4d0d      	ldr	r5, [pc, #52]	; (8008a2c <__libc_init_array+0x38>)
 80089f8:	4c0d      	ldr	r4, [pc, #52]	; (8008a30 <__libc_init_array+0x3c>)
 80089fa:	1b64      	subs	r4, r4, r5
 80089fc:	10a4      	asrs	r4, r4, #2
 80089fe:	2600      	movs	r6, #0
 8008a00:	42a6      	cmp	r6, r4
 8008a02:	d109      	bne.n	8008a18 <__libc_init_array+0x24>
 8008a04:	4d0b      	ldr	r5, [pc, #44]	; (8008a34 <__libc_init_array+0x40>)
 8008a06:	4c0c      	ldr	r4, [pc, #48]	; (8008a38 <__libc_init_array+0x44>)
 8008a08:	f002 fd26 	bl	800b458 <_init>
 8008a0c:	1b64      	subs	r4, r4, r5
 8008a0e:	10a4      	asrs	r4, r4, #2
 8008a10:	2600      	movs	r6, #0
 8008a12:	42a6      	cmp	r6, r4
 8008a14:	d105      	bne.n	8008a22 <__libc_init_array+0x2e>
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1c:	4798      	blx	r3
 8008a1e:	3601      	adds	r6, #1
 8008a20:	e7ee      	b.n	8008a00 <__libc_init_array+0xc>
 8008a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a26:	4798      	blx	r3
 8008a28:	3601      	adds	r6, #1
 8008a2a:	e7f2      	b.n	8008a12 <__libc_init_array+0x1e>
 8008a2c:	0800b97c 	.word	0x0800b97c
 8008a30:	0800b97c 	.word	0x0800b97c
 8008a34:	0800b97c 	.word	0x0800b97c
 8008a38:	0800b980 	.word	0x0800b980

08008a3c <__retarget_lock_acquire_recursive>:
 8008a3c:	4770      	bx	lr

08008a3e <__retarget_lock_release_recursive>:
 8008a3e:	4770      	bx	lr

08008a40 <memcpy>:
 8008a40:	440a      	add	r2, r1
 8008a42:	4291      	cmp	r1, r2
 8008a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a48:	d100      	bne.n	8008a4c <memcpy+0xc>
 8008a4a:	4770      	bx	lr
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a56:	4291      	cmp	r1, r2
 8008a58:	d1f9      	bne.n	8008a4e <memcpy+0xe>
 8008a5a:	bd10      	pop	{r4, pc}
 8008a5c:	0000      	movs	r0, r0
	...

08008a60 <nan>:
 8008a60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a68 <nan+0x8>
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	7ff80000 	.word	0x7ff80000

08008a70 <quorem>:
 8008a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	6903      	ldr	r3, [r0, #16]
 8008a76:	690c      	ldr	r4, [r1, #16]
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	db7e      	blt.n	8008b7c <quorem+0x10c>
 8008a7e:	3c01      	subs	r4, #1
 8008a80:	f101 0814 	add.w	r8, r1, #20
 8008a84:	f100 0514 	add.w	r5, r0, #20
 8008a88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a96:	3301      	adds	r3, #1
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008aa2:	fbb2 f6f3 	udiv	r6, r2, r3
 8008aa6:	d331      	bcc.n	8008b0c <quorem+0x9c>
 8008aa8:	f04f 0e00 	mov.w	lr, #0
 8008aac:	4640      	mov	r0, r8
 8008aae:	46ac      	mov	ip, r5
 8008ab0:	46f2      	mov	sl, lr
 8008ab2:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ab6:	b293      	uxth	r3, r2
 8008ab8:	fb06 e303 	mla	r3, r6, r3, lr
 8008abc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ac0:	0c1a      	lsrs	r2, r3, #16
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	ebaa 0303 	sub.w	r3, sl, r3
 8008ac8:	f8dc a000 	ldr.w	sl, [ip]
 8008acc:	fa13 f38a 	uxtah	r3, r3, sl
 8008ad0:	fb06 220e 	mla	r2, r6, lr, r2
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	9b00      	ldr	r3, [sp, #0]
 8008ad8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008adc:	b292      	uxth	r2, r2
 8008ade:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ae2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ae6:	f8bd 3000 	ldrh.w	r3, [sp]
 8008aea:	4581      	cmp	r9, r0
 8008aec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008af0:	f84c 3b04 	str.w	r3, [ip], #4
 8008af4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008af8:	d2db      	bcs.n	8008ab2 <quorem+0x42>
 8008afa:	f855 300b 	ldr.w	r3, [r5, fp]
 8008afe:	b92b      	cbnz	r3, 8008b0c <quorem+0x9c>
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	3b04      	subs	r3, #4
 8008b04:	429d      	cmp	r5, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	d32c      	bcc.n	8008b64 <quorem+0xf4>
 8008b0a:	613c      	str	r4, [r7, #16]
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f001 fd59 	bl	800a5c4 <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	db22      	blt.n	8008b5c <quorem+0xec>
 8008b16:	3601      	adds	r6, #1
 8008b18:	4629      	mov	r1, r5
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b20:	f8d1 c000 	ldr.w	ip, [r1]
 8008b24:	b293      	uxth	r3, r2
 8008b26:	1ac3      	subs	r3, r0, r3
 8008b28:	0c12      	lsrs	r2, r2, #16
 8008b2a:	fa13 f38c 	uxtah	r3, r3, ip
 8008b2e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b3c:	45c1      	cmp	r9, r8
 8008b3e:	f841 3b04 	str.w	r3, [r1], #4
 8008b42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b46:	d2e9      	bcs.n	8008b1c <quorem+0xac>
 8008b48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b50:	b922      	cbnz	r2, 8008b5c <quorem+0xec>
 8008b52:	3b04      	subs	r3, #4
 8008b54:	429d      	cmp	r5, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	d30a      	bcc.n	8008b70 <quorem+0x100>
 8008b5a:	613c      	str	r4, [r7, #16]
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	b003      	add	sp, #12
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	3b04      	subs	r3, #4
 8008b68:	2a00      	cmp	r2, #0
 8008b6a:	d1ce      	bne.n	8008b0a <quorem+0x9a>
 8008b6c:	3c01      	subs	r4, #1
 8008b6e:	e7c9      	b.n	8008b04 <quorem+0x94>
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	3b04      	subs	r3, #4
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	d1f0      	bne.n	8008b5a <quorem+0xea>
 8008b78:	3c01      	subs	r4, #1
 8008b7a:	e7eb      	b.n	8008b54 <quorem+0xe4>
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e7ee      	b.n	8008b5e <quorem+0xee>

08008b80 <_dtoa_r>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	ed2d 8b04 	vpush	{d8-d9}
 8008b88:	69c5      	ldr	r5, [r0, #28]
 8008b8a:	b093      	sub	sp, #76	; 0x4c
 8008b8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b90:	ec57 6b10 	vmov	r6, r7, d0
 8008b94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b98:	9107      	str	r1, [sp, #28]
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	920a      	str	r2, [sp, #40]	; 0x28
 8008b9e:	930d      	str	r3, [sp, #52]	; 0x34
 8008ba0:	b975      	cbnz	r5, 8008bc0 <_dtoa_r+0x40>
 8008ba2:	2010      	movs	r0, #16
 8008ba4:	f001 f982 	bl	8009eac <malloc>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	61e0      	str	r0, [r4, #28]
 8008bac:	b920      	cbnz	r0, 8008bb8 <_dtoa_r+0x38>
 8008bae:	4bae      	ldr	r3, [pc, #696]	; (8008e68 <_dtoa_r+0x2e8>)
 8008bb0:	21ef      	movs	r1, #239	; 0xef
 8008bb2:	48ae      	ldr	r0, [pc, #696]	; (8008e6c <_dtoa_r+0x2ec>)
 8008bb4:	f002 f92a 	bl	800ae0c <__assert_func>
 8008bb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bbc:	6005      	str	r5, [r0, #0]
 8008bbe:	60c5      	str	r5, [r0, #12]
 8008bc0:	69e3      	ldr	r3, [r4, #28]
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	b151      	cbz	r1, 8008bdc <_dtoa_r+0x5c>
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	604a      	str	r2, [r1, #4]
 8008bca:	2301      	movs	r3, #1
 8008bcc:	4093      	lsls	r3, r2
 8008bce:	608b      	str	r3, [r1, #8]
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f001 fa71 	bl	800a0b8 <_Bfree>
 8008bd6:	69e3      	ldr	r3, [r4, #28]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	1e3b      	subs	r3, r7, #0
 8008bde:	bfbb      	ittet	lt
 8008be0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008be4:	9303      	strlt	r3, [sp, #12]
 8008be6:	2300      	movge	r3, #0
 8008be8:	2201      	movlt	r2, #1
 8008bea:	bfac      	ite	ge
 8008bec:	f8c8 3000 	strge.w	r3, [r8]
 8008bf0:	f8c8 2000 	strlt.w	r2, [r8]
 8008bf4:	4b9e      	ldr	r3, [pc, #632]	; (8008e70 <_dtoa_r+0x2f0>)
 8008bf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008bfa:	ea33 0308 	bics.w	r3, r3, r8
 8008bfe:	d11b      	bne.n	8008c38 <_dtoa_r+0xb8>
 8008c00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c02:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008c0c:	4333      	orrs	r3, r6
 8008c0e:	f000 8593 	beq.w	8009738 <_dtoa_r+0xbb8>
 8008c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c14:	b963      	cbnz	r3, 8008c30 <_dtoa_r+0xb0>
 8008c16:	4b97      	ldr	r3, [pc, #604]	; (8008e74 <_dtoa_r+0x2f4>)
 8008c18:	e027      	b.n	8008c6a <_dtoa_r+0xea>
 8008c1a:	4b97      	ldr	r3, [pc, #604]	; (8008e78 <_dtoa_r+0x2f8>)
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	3308      	adds	r3, #8
 8008c20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	9800      	ldr	r0, [sp, #0]
 8008c26:	b013      	add	sp, #76	; 0x4c
 8008c28:	ecbd 8b04 	vpop	{d8-d9}
 8008c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c30:	4b90      	ldr	r3, [pc, #576]	; (8008e74 <_dtoa_r+0x2f4>)
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	3303      	adds	r3, #3
 8008c36:	e7f3      	b.n	8008c20 <_dtoa_r+0xa0>
 8008c38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	ec51 0b17 	vmov	r0, r1, d7
 8008c42:	eeb0 8a47 	vmov.f32	s16, s14
 8008c46:	eef0 8a67 	vmov.f32	s17, s15
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f7f7 ff4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c50:	4681      	mov	r9, r0
 8008c52:	b160      	cbz	r0, 8008c6e <_dtoa_r+0xee>
 8008c54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c56:	2301      	movs	r3, #1
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 8568 	beq.w	8009732 <_dtoa_r+0xbb2>
 8008c62:	4b86      	ldr	r3, [pc, #536]	; (8008e7c <_dtoa_r+0x2fc>)
 8008c64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	e7da      	b.n	8008c24 <_dtoa_r+0xa4>
 8008c6e:	aa10      	add	r2, sp, #64	; 0x40
 8008c70:	a911      	add	r1, sp, #68	; 0x44
 8008c72:	4620      	mov	r0, r4
 8008c74:	eeb0 0a48 	vmov.f32	s0, s16
 8008c78:	eef0 0a68 	vmov.f32	s1, s17
 8008c7c:	f001 fdb8 	bl	800a7f0 <__d2b>
 8008c80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008c84:	4682      	mov	sl, r0
 8008c86:	2d00      	cmp	r5, #0
 8008c88:	d07f      	beq.n	8008d8a <_dtoa_r+0x20a>
 8008c8a:	ee18 3a90 	vmov	r3, s17
 8008c8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008c96:	ec51 0b18 	vmov	r0, r1, d8
 8008c9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ca2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4b75      	ldr	r3, [pc, #468]	; (8008e80 <_dtoa_r+0x300>)
 8008cac:	f7f7 fafc 	bl	80002a8 <__aeabi_dsub>
 8008cb0:	a367      	add	r3, pc, #412	; (adr r3, 8008e50 <_dtoa_r+0x2d0>)
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	f7f7 fcaf 	bl	8000618 <__aeabi_dmul>
 8008cba:	a367      	add	r3, pc, #412	; (adr r3, 8008e58 <_dtoa_r+0x2d8>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	f7f7 faf4 	bl	80002ac <__adddf3>
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	460f      	mov	r7, r1
 8008cca:	f7f7 fc3b 	bl	8000544 <__aeabi_i2d>
 8008cce:	a364      	add	r3, pc, #400	; (adr r3, 8008e60 <_dtoa_r+0x2e0>)
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f7f7 fca0 	bl	8000618 <__aeabi_dmul>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4639      	mov	r1, r7
 8008ce0:	f7f7 fae4 	bl	80002ac <__adddf3>
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	460f      	mov	r7, r1
 8008ce8:	f7f7 ff46 	bl	8000b78 <__aeabi_d2iz>
 8008cec:	2200      	movs	r2, #0
 8008cee:	4683      	mov	fp, r0
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	f7f7 ff01 	bl	8000afc <__aeabi_dcmplt>
 8008cfa:	b148      	cbz	r0, 8008d10 <_dtoa_r+0x190>
 8008cfc:	4658      	mov	r0, fp
 8008cfe:	f7f7 fc21 	bl	8000544 <__aeabi_i2d>
 8008d02:	4632      	mov	r2, r6
 8008d04:	463b      	mov	r3, r7
 8008d06:	f7f7 feef 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d0a:	b908      	cbnz	r0, 8008d10 <_dtoa_r+0x190>
 8008d0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d10:	f1bb 0f16 	cmp.w	fp, #22
 8008d14:	d857      	bhi.n	8008dc6 <_dtoa_r+0x246>
 8008d16:	4b5b      	ldr	r3, [pc, #364]	; (8008e84 <_dtoa_r+0x304>)
 8008d18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	ec51 0b18 	vmov	r0, r1, d8
 8008d24:	f7f7 feea 	bl	8000afc <__aeabi_dcmplt>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d04e      	beq.n	8008dca <_dtoa_r+0x24a>
 8008d2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d30:	2300      	movs	r3, #0
 8008d32:	930c      	str	r3, [sp, #48]	; 0x30
 8008d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d36:	1b5b      	subs	r3, r3, r5
 8008d38:	1e5a      	subs	r2, r3, #1
 8008d3a:	bf45      	ittet	mi
 8008d3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d40:	9305      	strmi	r3, [sp, #20]
 8008d42:	2300      	movpl	r3, #0
 8008d44:	2300      	movmi	r3, #0
 8008d46:	9206      	str	r2, [sp, #24]
 8008d48:	bf54      	ite	pl
 8008d4a:	9305      	strpl	r3, [sp, #20]
 8008d4c:	9306      	strmi	r3, [sp, #24]
 8008d4e:	f1bb 0f00 	cmp.w	fp, #0
 8008d52:	db3c      	blt.n	8008dce <_dtoa_r+0x24e>
 8008d54:	9b06      	ldr	r3, [sp, #24]
 8008d56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008d5a:	445b      	add	r3, fp
 8008d5c:	9306      	str	r3, [sp, #24]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9308      	str	r3, [sp, #32]
 8008d62:	9b07      	ldr	r3, [sp, #28]
 8008d64:	2b09      	cmp	r3, #9
 8008d66:	d868      	bhi.n	8008e3a <_dtoa_r+0x2ba>
 8008d68:	2b05      	cmp	r3, #5
 8008d6a:	bfc4      	itt	gt
 8008d6c:	3b04      	subgt	r3, #4
 8008d6e:	9307      	strgt	r3, [sp, #28]
 8008d70:	9b07      	ldr	r3, [sp, #28]
 8008d72:	f1a3 0302 	sub.w	r3, r3, #2
 8008d76:	bfcc      	ite	gt
 8008d78:	2500      	movgt	r5, #0
 8008d7a:	2501      	movle	r5, #1
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	f200 8085 	bhi.w	8008e8c <_dtoa_r+0x30c>
 8008d82:	e8df f003 	tbb	[pc, r3]
 8008d86:	3b2e      	.short	0x3b2e
 8008d88:	5839      	.short	0x5839
 8008d8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d8e:	441d      	add	r5, r3
 8008d90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	bfc1      	itttt	gt
 8008d98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008da0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008da4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008da8:	bfd6      	itet	le
 8008daa:	f1c3 0320 	rsble	r3, r3, #32
 8008dae:	ea48 0003 	orrgt.w	r0, r8, r3
 8008db2:	fa06 f003 	lslle.w	r0, r6, r3
 8008db6:	f7f7 fbb5 	bl	8000524 <__aeabi_ui2d>
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008dc0:	3d01      	subs	r5, #1
 8008dc2:	920e      	str	r2, [sp, #56]	; 0x38
 8008dc4:	e76f      	b.n	8008ca6 <_dtoa_r+0x126>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e7b3      	b.n	8008d32 <_dtoa_r+0x1b2>
 8008dca:	900c      	str	r0, [sp, #48]	; 0x30
 8008dcc:	e7b2      	b.n	8008d34 <_dtoa_r+0x1b4>
 8008dce:	9b05      	ldr	r3, [sp, #20]
 8008dd0:	eba3 030b 	sub.w	r3, r3, fp
 8008dd4:	9305      	str	r3, [sp, #20]
 8008dd6:	f1cb 0300 	rsb	r3, fp, #0
 8008dda:	9308      	str	r3, [sp, #32]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8008de0:	e7bf      	b.n	8008d62 <_dtoa_r+0x1e2>
 8008de2:	2300      	movs	r3, #0
 8008de4:	9309      	str	r3, [sp, #36]	; 0x24
 8008de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	dc52      	bgt.n	8008e92 <_dtoa_r+0x312>
 8008dec:	2301      	movs	r3, #1
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	9304      	str	r3, [sp, #16]
 8008df2:	461a      	mov	r2, r3
 8008df4:	920a      	str	r2, [sp, #40]	; 0x28
 8008df6:	e00b      	b.n	8008e10 <_dtoa_r+0x290>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e7f3      	b.n	8008de4 <_dtoa_r+0x264>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e02:	445b      	add	r3, fp
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	3301      	adds	r3, #1
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	bfb8      	it	lt
 8008e0e:	2301      	movlt	r3, #1
 8008e10:	69e0      	ldr	r0, [r4, #28]
 8008e12:	2100      	movs	r1, #0
 8008e14:	2204      	movs	r2, #4
 8008e16:	f102 0614 	add.w	r6, r2, #20
 8008e1a:	429e      	cmp	r6, r3
 8008e1c:	d93d      	bls.n	8008e9a <_dtoa_r+0x31a>
 8008e1e:	6041      	str	r1, [r0, #4]
 8008e20:	4620      	mov	r0, r4
 8008e22:	f001 f909 	bl	800a038 <_Balloc>
 8008e26:	9000      	str	r0, [sp, #0]
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d139      	bne.n	8008ea0 <_dtoa_r+0x320>
 8008e2c:	4b16      	ldr	r3, [pc, #88]	; (8008e88 <_dtoa_r+0x308>)
 8008e2e:	4602      	mov	r2, r0
 8008e30:	f240 11af 	movw	r1, #431	; 0x1af
 8008e34:	e6bd      	b.n	8008bb2 <_dtoa_r+0x32>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e7e1      	b.n	8008dfe <_dtoa_r+0x27e>
 8008e3a:	2501      	movs	r5, #1
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9307      	str	r3, [sp, #28]
 8008e40:	9509      	str	r5, [sp, #36]	; 0x24
 8008e42:	f04f 33ff 	mov.w	r3, #4294967295
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2312      	movs	r3, #18
 8008e4e:	e7d1      	b.n	8008df4 <_dtoa_r+0x274>
 8008e50:	636f4361 	.word	0x636f4361
 8008e54:	3fd287a7 	.word	0x3fd287a7
 8008e58:	8b60c8b3 	.word	0x8b60c8b3
 8008e5c:	3fc68a28 	.word	0x3fc68a28
 8008e60:	509f79fb 	.word	0x509f79fb
 8008e64:	3fd34413 	.word	0x3fd34413
 8008e68:	0800b6ea 	.word	0x0800b6ea
 8008e6c:	0800b701 	.word	0x0800b701
 8008e70:	7ff00000 	.word	0x7ff00000
 8008e74:	0800b6e6 	.word	0x0800b6e6
 8008e78:	0800b6dd 	.word	0x0800b6dd
 8008e7c:	0800b6b2 	.word	0x0800b6b2
 8008e80:	3ff80000 	.word	0x3ff80000
 8008e84:	0800b850 	.word	0x0800b850
 8008e88:	0800b759 	.word	0x0800b759
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e90:	e7d7      	b.n	8008e42 <_dtoa_r+0x2c2>
 8008e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	e7ba      	b.n	8008e10 <_dtoa_r+0x290>
 8008e9a:	3101      	adds	r1, #1
 8008e9c:	0052      	lsls	r2, r2, #1
 8008e9e:	e7ba      	b.n	8008e16 <_dtoa_r+0x296>
 8008ea0:	69e3      	ldr	r3, [r4, #28]
 8008ea2:	9a00      	ldr	r2, [sp, #0]
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	9b04      	ldr	r3, [sp, #16]
 8008ea8:	2b0e      	cmp	r3, #14
 8008eaa:	f200 80a8 	bhi.w	8008ffe <_dtoa_r+0x47e>
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	f000 80a5 	beq.w	8008ffe <_dtoa_r+0x47e>
 8008eb4:	f1bb 0f00 	cmp.w	fp, #0
 8008eb8:	dd38      	ble.n	8008f2c <_dtoa_r+0x3ac>
 8008eba:	4bc0      	ldr	r3, [pc, #768]	; (80091bc <_dtoa_r+0x63c>)
 8008ebc:	f00b 020f 	and.w	r2, fp, #15
 8008ec0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ec4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ec8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008ecc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008ed0:	d019      	beq.n	8008f06 <_dtoa_r+0x386>
 8008ed2:	4bbb      	ldr	r3, [pc, #748]	; (80091c0 <_dtoa_r+0x640>)
 8008ed4:	ec51 0b18 	vmov	r0, r1, d8
 8008ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008edc:	f7f7 fcc6 	bl	800086c <__aeabi_ddiv>
 8008ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ee4:	f008 080f 	and.w	r8, r8, #15
 8008ee8:	2503      	movs	r5, #3
 8008eea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80091c0 <_dtoa_r+0x640>
 8008eee:	f1b8 0f00 	cmp.w	r8, #0
 8008ef2:	d10a      	bne.n	8008f0a <_dtoa_r+0x38a>
 8008ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef8:	4632      	mov	r2, r6
 8008efa:	463b      	mov	r3, r7
 8008efc:	f7f7 fcb6 	bl	800086c <__aeabi_ddiv>
 8008f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f04:	e02b      	b.n	8008f5e <_dtoa_r+0x3de>
 8008f06:	2502      	movs	r5, #2
 8008f08:	e7ef      	b.n	8008eea <_dtoa_r+0x36a>
 8008f0a:	f018 0f01 	tst.w	r8, #1
 8008f0e:	d008      	beq.n	8008f22 <_dtoa_r+0x3a2>
 8008f10:	4630      	mov	r0, r6
 8008f12:	4639      	mov	r1, r7
 8008f14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f18:	f7f7 fb7e 	bl	8000618 <__aeabi_dmul>
 8008f1c:	3501      	adds	r5, #1
 8008f1e:	4606      	mov	r6, r0
 8008f20:	460f      	mov	r7, r1
 8008f22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f26:	f109 0908 	add.w	r9, r9, #8
 8008f2a:	e7e0      	b.n	8008eee <_dtoa_r+0x36e>
 8008f2c:	f000 809f 	beq.w	800906e <_dtoa_r+0x4ee>
 8008f30:	f1cb 0600 	rsb	r6, fp, #0
 8008f34:	4ba1      	ldr	r3, [pc, #644]	; (80091bc <_dtoa_r+0x63c>)
 8008f36:	4fa2      	ldr	r7, [pc, #648]	; (80091c0 <_dtoa_r+0x640>)
 8008f38:	f006 020f 	and.w	r2, r6, #15
 8008f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	ec51 0b18 	vmov	r0, r1, d8
 8008f48:	f7f7 fb66 	bl	8000618 <__aeabi_dmul>
 8008f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f50:	1136      	asrs	r6, r6, #4
 8008f52:	2300      	movs	r3, #0
 8008f54:	2502      	movs	r5, #2
 8008f56:	2e00      	cmp	r6, #0
 8008f58:	d17e      	bne.n	8009058 <_dtoa_r+0x4d8>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1d0      	bne.n	8008f00 <_dtoa_r+0x380>
 8008f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 8084 	beq.w	8009072 <_dtoa_r+0x4f2>
 8008f6a:	4b96      	ldr	r3, [pc, #600]	; (80091c4 <_dtoa_r+0x644>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 fdc3 	bl	8000afc <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d07b      	beq.n	8009072 <_dtoa_r+0x4f2>
 8008f7a:	9b04      	ldr	r3, [sp, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d078      	beq.n	8009072 <_dtoa_r+0x4f2>
 8008f80:	9b01      	ldr	r3, [sp, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dd39      	ble.n	8008ffa <_dtoa_r+0x47a>
 8008f86:	4b90      	ldr	r3, [pc, #576]	; (80091c8 <_dtoa_r+0x648>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	f7f7 fb43 	bl	8000618 <__aeabi_dmul>
 8008f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f96:	9e01      	ldr	r6, [sp, #4]
 8008f98:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f7f7 face 	bl	8000544 <__aeabi_i2d>
 8008fa8:	4642      	mov	r2, r8
 8008faa:	464b      	mov	r3, r9
 8008fac:	f7f7 fb34 	bl	8000618 <__aeabi_dmul>
 8008fb0:	4b86      	ldr	r3, [pc, #536]	; (80091cc <_dtoa_r+0x64c>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f7f7 f97a 	bl	80002ac <__adddf3>
 8008fb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	d158      	bne.n	8009078 <_dtoa_r+0x4f8>
 8008fc6:	4b82      	ldr	r3, [pc, #520]	; (80091d0 <_dtoa_r+0x650>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4640      	mov	r0, r8
 8008fcc:	4649      	mov	r1, r9
 8008fce:	f7f7 f96b 	bl	80002a8 <__aeabi_dsub>
 8008fd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fd6:	4680      	mov	r8, r0
 8008fd8:	4689      	mov	r9, r1
 8008fda:	f7f7 fdad 	bl	8000b38 <__aeabi_dcmpgt>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	f040 8296 	bne.w	8009510 <_dtoa_r+0x990>
 8008fe4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008fe8:	4640      	mov	r0, r8
 8008fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fee:	4649      	mov	r1, r9
 8008ff0:	f7f7 fd84 	bl	8000afc <__aeabi_dcmplt>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f040 8289 	bne.w	800950c <_dtoa_r+0x98c>
 8008ffa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009000:	2b00      	cmp	r3, #0
 8009002:	f2c0 814e 	blt.w	80092a2 <_dtoa_r+0x722>
 8009006:	f1bb 0f0e 	cmp.w	fp, #14
 800900a:	f300 814a 	bgt.w	80092a2 <_dtoa_r+0x722>
 800900e:	4b6b      	ldr	r3, [pc, #428]	; (80091bc <_dtoa_r+0x63c>)
 8009010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009014:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800901a:	2b00      	cmp	r3, #0
 800901c:	f280 80dc 	bge.w	80091d8 <_dtoa_r+0x658>
 8009020:	9b04      	ldr	r3, [sp, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f300 80d8 	bgt.w	80091d8 <_dtoa_r+0x658>
 8009028:	f040 826f 	bne.w	800950a <_dtoa_r+0x98a>
 800902c:	4b68      	ldr	r3, [pc, #416]	; (80091d0 <_dtoa_r+0x650>)
 800902e:	2200      	movs	r2, #0
 8009030:	4640      	mov	r0, r8
 8009032:	4649      	mov	r1, r9
 8009034:	f7f7 faf0 	bl	8000618 <__aeabi_dmul>
 8009038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800903c:	f7f7 fd72 	bl	8000b24 <__aeabi_dcmpge>
 8009040:	9e04      	ldr	r6, [sp, #16]
 8009042:	4637      	mov	r7, r6
 8009044:	2800      	cmp	r0, #0
 8009046:	f040 8245 	bne.w	80094d4 <_dtoa_r+0x954>
 800904a:	9d00      	ldr	r5, [sp, #0]
 800904c:	2331      	movs	r3, #49	; 0x31
 800904e:	f805 3b01 	strb.w	r3, [r5], #1
 8009052:	f10b 0b01 	add.w	fp, fp, #1
 8009056:	e241      	b.n	80094dc <_dtoa_r+0x95c>
 8009058:	07f2      	lsls	r2, r6, #31
 800905a:	d505      	bpl.n	8009068 <_dtoa_r+0x4e8>
 800905c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009060:	f7f7 fada 	bl	8000618 <__aeabi_dmul>
 8009064:	3501      	adds	r5, #1
 8009066:	2301      	movs	r3, #1
 8009068:	1076      	asrs	r6, r6, #1
 800906a:	3708      	adds	r7, #8
 800906c:	e773      	b.n	8008f56 <_dtoa_r+0x3d6>
 800906e:	2502      	movs	r5, #2
 8009070:	e775      	b.n	8008f5e <_dtoa_r+0x3de>
 8009072:	9e04      	ldr	r6, [sp, #16]
 8009074:	465f      	mov	r7, fp
 8009076:	e792      	b.n	8008f9e <_dtoa_r+0x41e>
 8009078:	9900      	ldr	r1, [sp, #0]
 800907a:	4b50      	ldr	r3, [pc, #320]	; (80091bc <_dtoa_r+0x63c>)
 800907c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009080:	4431      	add	r1, r6
 8009082:	9102      	str	r1, [sp, #8]
 8009084:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009086:	eeb0 9a47 	vmov.f32	s18, s14
 800908a:	eef0 9a67 	vmov.f32	s19, s15
 800908e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009092:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009096:	2900      	cmp	r1, #0
 8009098:	d044      	beq.n	8009124 <_dtoa_r+0x5a4>
 800909a:	494e      	ldr	r1, [pc, #312]	; (80091d4 <_dtoa_r+0x654>)
 800909c:	2000      	movs	r0, #0
 800909e:	f7f7 fbe5 	bl	800086c <__aeabi_ddiv>
 80090a2:	ec53 2b19 	vmov	r2, r3, d9
 80090a6:	f7f7 f8ff 	bl	80002a8 <__aeabi_dsub>
 80090aa:	9d00      	ldr	r5, [sp, #0]
 80090ac:	ec41 0b19 	vmov	d9, r0, r1
 80090b0:	4649      	mov	r1, r9
 80090b2:	4640      	mov	r0, r8
 80090b4:	f7f7 fd60 	bl	8000b78 <__aeabi_d2iz>
 80090b8:	4606      	mov	r6, r0
 80090ba:	f7f7 fa43 	bl	8000544 <__aeabi_i2d>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4640      	mov	r0, r8
 80090c4:	4649      	mov	r1, r9
 80090c6:	f7f7 f8ef 	bl	80002a8 <__aeabi_dsub>
 80090ca:	3630      	adds	r6, #48	; 0x30
 80090cc:	f805 6b01 	strb.w	r6, [r5], #1
 80090d0:	ec53 2b19 	vmov	r2, r3, d9
 80090d4:	4680      	mov	r8, r0
 80090d6:	4689      	mov	r9, r1
 80090d8:	f7f7 fd10 	bl	8000afc <__aeabi_dcmplt>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d164      	bne.n	80091aa <_dtoa_r+0x62a>
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	4937      	ldr	r1, [pc, #220]	; (80091c4 <_dtoa_r+0x644>)
 80090e6:	2000      	movs	r0, #0
 80090e8:	f7f7 f8de 	bl	80002a8 <__aeabi_dsub>
 80090ec:	ec53 2b19 	vmov	r2, r3, d9
 80090f0:	f7f7 fd04 	bl	8000afc <__aeabi_dcmplt>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f040 80b6 	bne.w	8009266 <_dtoa_r+0x6e6>
 80090fa:	9b02      	ldr	r3, [sp, #8]
 80090fc:	429d      	cmp	r5, r3
 80090fe:	f43f af7c 	beq.w	8008ffa <_dtoa_r+0x47a>
 8009102:	4b31      	ldr	r3, [pc, #196]	; (80091c8 <_dtoa_r+0x648>)
 8009104:	ec51 0b19 	vmov	r0, r1, d9
 8009108:	2200      	movs	r2, #0
 800910a:	f7f7 fa85 	bl	8000618 <__aeabi_dmul>
 800910e:	4b2e      	ldr	r3, [pc, #184]	; (80091c8 <_dtoa_r+0x648>)
 8009110:	ec41 0b19 	vmov	d9, r0, r1
 8009114:	2200      	movs	r2, #0
 8009116:	4640      	mov	r0, r8
 8009118:	4649      	mov	r1, r9
 800911a:	f7f7 fa7d 	bl	8000618 <__aeabi_dmul>
 800911e:	4680      	mov	r8, r0
 8009120:	4689      	mov	r9, r1
 8009122:	e7c5      	b.n	80090b0 <_dtoa_r+0x530>
 8009124:	ec51 0b17 	vmov	r0, r1, d7
 8009128:	f7f7 fa76 	bl	8000618 <__aeabi_dmul>
 800912c:	9b02      	ldr	r3, [sp, #8]
 800912e:	9d00      	ldr	r5, [sp, #0]
 8009130:	930f      	str	r3, [sp, #60]	; 0x3c
 8009132:	ec41 0b19 	vmov	d9, r0, r1
 8009136:	4649      	mov	r1, r9
 8009138:	4640      	mov	r0, r8
 800913a:	f7f7 fd1d 	bl	8000b78 <__aeabi_d2iz>
 800913e:	4606      	mov	r6, r0
 8009140:	f7f7 fa00 	bl	8000544 <__aeabi_i2d>
 8009144:	3630      	adds	r6, #48	; 0x30
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4640      	mov	r0, r8
 800914c:	4649      	mov	r1, r9
 800914e:	f7f7 f8ab 	bl	80002a8 <__aeabi_dsub>
 8009152:	f805 6b01 	strb.w	r6, [r5], #1
 8009156:	9b02      	ldr	r3, [sp, #8]
 8009158:	429d      	cmp	r5, r3
 800915a:	4680      	mov	r8, r0
 800915c:	4689      	mov	r9, r1
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	d124      	bne.n	80091ae <_dtoa_r+0x62e>
 8009164:	4b1b      	ldr	r3, [pc, #108]	; (80091d4 <_dtoa_r+0x654>)
 8009166:	ec51 0b19 	vmov	r0, r1, d9
 800916a:	f7f7 f89f 	bl	80002ac <__adddf3>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	f7f7 fcdf 	bl	8000b38 <__aeabi_dcmpgt>
 800917a:	2800      	cmp	r0, #0
 800917c:	d173      	bne.n	8009266 <_dtoa_r+0x6e6>
 800917e:	ec53 2b19 	vmov	r2, r3, d9
 8009182:	4914      	ldr	r1, [pc, #80]	; (80091d4 <_dtoa_r+0x654>)
 8009184:	2000      	movs	r0, #0
 8009186:	f7f7 f88f 	bl	80002a8 <__aeabi_dsub>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4640      	mov	r0, r8
 8009190:	4649      	mov	r1, r9
 8009192:	f7f7 fcb3 	bl	8000afc <__aeabi_dcmplt>
 8009196:	2800      	cmp	r0, #0
 8009198:	f43f af2f 	beq.w	8008ffa <_dtoa_r+0x47a>
 800919c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800919e:	1e6b      	subs	r3, r5, #1
 80091a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80091a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091a6:	2b30      	cmp	r3, #48	; 0x30
 80091a8:	d0f8      	beq.n	800919c <_dtoa_r+0x61c>
 80091aa:	46bb      	mov	fp, r7
 80091ac:	e04a      	b.n	8009244 <_dtoa_r+0x6c4>
 80091ae:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <_dtoa_r+0x648>)
 80091b0:	f7f7 fa32 	bl	8000618 <__aeabi_dmul>
 80091b4:	4680      	mov	r8, r0
 80091b6:	4689      	mov	r9, r1
 80091b8:	e7bd      	b.n	8009136 <_dtoa_r+0x5b6>
 80091ba:	bf00      	nop
 80091bc:	0800b850 	.word	0x0800b850
 80091c0:	0800b828 	.word	0x0800b828
 80091c4:	3ff00000 	.word	0x3ff00000
 80091c8:	40240000 	.word	0x40240000
 80091cc:	401c0000 	.word	0x401c0000
 80091d0:	40140000 	.word	0x40140000
 80091d4:	3fe00000 	.word	0x3fe00000
 80091d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091dc:	9d00      	ldr	r5, [sp, #0]
 80091de:	4642      	mov	r2, r8
 80091e0:	464b      	mov	r3, r9
 80091e2:	4630      	mov	r0, r6
 80091e4:	4639      	mov	r1, r7
 80091e6:	f7f7 fb41 	bl	800086c <__aeabi_ddiv>
 80091ea:	f7f7 fcc5 	bl	8000b78 <__aeabi_d2iz>
 80091ee:	9001      	str	r0, [sp, #4]
 80091f0:	f7f7 f9a8 	bl	8000544 <__aeabi_i2d>
 80091f4:	4642      	mov	r2, r8
 80091f6:	464b      	mov	r3, r9
 80091f8:	f7f7 fa0e 	bl	8000618 <__aeabi_dmul>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4630      	mov	r0, r6
 8009202:	4639      	mov	r1, r7
 8009204:	f7f7 f850 	bl	80002a8 <__aeabi_dsub>
 8009208:	9e01      	ldr	r6, [sp, #4]
 800920a:	9f04      	ldr	r7, [sp, #16]
 800920c:	3630      	adds	r6, #48	; 0x30
 800920e:	f805 6b01 	strb.w	r6, [r5], #1
 8009212:	9e00      	ldr	r6, [sp, #0]
 8009214:	1bae      	subs	r6, r5, r6
 8009216:	42b7      	cmp	r7, r6
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	d134      	bne.n	8009288 <_dtoa_r+0x708>
 800921e:	f7f7 f845 	bl	80002ac <__adddf3>
 8009222:	4642      	mov	r2, r8
 8009224:	464b      	mov	r3, r9
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	f7f7 fc85 	bl	8000b38 <__aeabi_dcmpgt>
 800922e:	b9c8      	cbnz	r0, 8009264 <_dtoa_r+0x6e4>
 8009230:	4642      	mov	r2, r8
 8009232:	464b      	mov	r3, r9
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 fc56 	bl	8000ae8 <__aeabi_dcmpeq>
 800923c:	b110      	cbz	r0, 8009244 <_dtoa_r+0x6c4>
 800923e:	9b01      	ldr	r3, [sp, #4]
 8009240:	07db      	lsls	r3, r3, #31
 8009242:	d40f      	bmi.n	8009264 <_dtoa_r+0x6e4>
 8009244:	4651      	mov	r1, sl
 8009246:	4620      	mov	r0, r4
 8009248:	f000 ff36 	bl	800a0b8 <_Bfree>
 800924c:	2300      	movs	r3, #0
 800924e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009250:	702b      	strb	r3, [r5, #0]
 8009252:	f10b 0301 	add.w	r3, fp, #1
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800925a:	2b00      	cmp	r3, #0
 800925c:	f43f ace2 	beq.w	8008c24 <_dtoa_r+0xa4>
 8009260:	601d      	str	r5, [r3, #0]
 8009262:	e4df      	b.n	8008c24 <_dtoa_r+0xa4>
 8009264:	465f      	mov	r7, fp
 8009266:	462b      	mov	r3, r5
 8009268:	461d      	mov	r5, r3
 800926a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800926e:	2a39      	cmp	r2, #57	; 0x39
 8009270:	d106      	bne.n	8009280 <_dtoa_r+0x700>
 8009272:	9a00      	ldr	r2, [sp, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d1f7      	bne.n	8009268 <_dtoa_r+0x6e8>
 8009278:	9900      	ldr	r1, [sp, #0]
 800927a:	2230      	movs	r2, #48	; 0x30
 800927c:	3701      	adds	r7, #1
 800927e:	700a      	strb	r2, [r1, #0]
 8009280:	781a      	ldrb	r2, [r3, #0]
 8009282:	3201      	adds	r2, #1
 8009284:	701a      	strb	r2, [r3, #0]
 8009286:	e790      	b.n	80091aa <_dtoa_r+0x62a>
 8009288:	4ba3      	ldr	r3, [pc, #652]	; (8009518 <_dtoa_r+0x998>)
 800928a:	2200      	movs	r2, #0
 800928c:	f7f7 f9c4 	bl	8000618 <__aeabi_dmul>
 8009290:	2200      	movs	r2, #0
 8009292:	2300      	movs	r3, #0
 8009294:	4606      	mov	r6, r0
 8009296:	460f      	mov	r7, r1
 8009298:	f7f7 fc26 	bl	8000ae8 <__aeabi_dcmpeq>
 800929c:	2800      	cmp	r0, #0
 800929e:	d09e      	beq.n	80091de <_dtoa_r+0x65e>
 80092a0:	e7d0      	b.n	8009244 <_dtoa_r+0x6c4>
 80092a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	f000 80ca 	beq.w	800943e <_dtoa_r+0x8be>
 80092aa:	9a07      	ldr	r2, [sp, #28]
 80092ac:	2a01      	cmp	r2, #1
 80092ae:	f300 80ad 	bgt.w	800940c <_dtoa_r+0x88c>
 80092b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	f000 80a5 	beq.w	8009404 <_dtoa_r+0x884>
 80092ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092be:	9e08      	ldr	r6, [sp, #32]
 80092c0:	9d05      	ldr	r5, [sp, #20]
 80092c2:	9a05      	ldr	r2, [sp, #20]
 80092c4:	441a      	add	r2, r3
 80092c6:	9205      	str	r2, [sp, #20]
 80092c8:	9a06      	ldr	r2, [sp, #24]
 80092ca:	2101      	movs	r1, #1
 80092cc:	441a      	add	r2, r3
 80092ce:	4620      	mov	r0, r4
 80092d0:	9206      	str	r2, [sp, #24]
 80092d2:	f000 fff1 	bl	800a2b8 <__i2b>
 80092d6:	4607      	mov	r7, r0
 80092d8:	b165      	cbz	r5, 80092f4 <_dtoa_r+0x774>
 80092da:	9b06      	ldr	r3, [sp, #24]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd09      	ble.n	80092f4 <_dtoa_r+0x774>
 80092e0:	42ab      	cmp	r3, r5
 80092e2:	9a05      	ldr	r2, [sp, #20]
 80092e4:	bfa8      	it	ge
 80092e6:	462b      	movge	r3, r5
 80092e8:	1ad2      	subs	r2, r2, r3
 80092ea:	9205      	str	r2, [sp, #20]
 80092ec:	9a06      	ldr	r2, [sp, #24]
 80092ee:	1aed      	subs	r5, r5, r3
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	9306      	str	r3, [sp, #24]
 80092f4:	9b08      	ldr	r3, [sp, #32]
 80092f6:	b1f3      	cbz	r3, 8009336 <_dtoa_r+0x7b6>
 80092f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 80a3 	beq.w	8009446 <_dtoa_r+0x8c6>
 8009300:	2e00      	cmp	r6, #0
 8009302:	dd10      	ble.n	8009326 <_dtoa_r+0x7a6>
 8009304:	4639      	mov	r1, r7
 8009306:	4632      	mov	r2, r6
 8009308:	4620      	mov	r0, r4
 800930a:	f001 f895 	bl	800a438 <__pow5mult>
 800930e:	4652      	mov	r2, sl
 8009310:	4601      	mov	r1, r0
 8009312:	4607      	mov	r7, r0
 8009314:	4620      	mov	r0, r4
 8009316:	f000 ffe5 	bl	800a2e4 <__multiply>
 800931a:	4651      	mov	r1, sl
 800931c:	4680      	mov	r8, r0
 800931e:	4620      	mov	r0, r4
 8009320:	f000 feca 	bl	800a0b8 <_Bfree>
 8009324:	46c2      	mov	sl, r8
 8009326:	9b08      	ldr	r3, [sp, #32]
 8009328:	1b9a      	subs	r2, r3, r6
 800932a:	d004      	beq.n	8009336 <_dtoa_r+0x7b6>
 800932c:	4651      	mov	r1, sl
 800932e:	4620      	mov	r0, r4
 8009330:	f001 f882 	bl	800a438 <__pow5mult>
 8009334:	4682      	mov	sl, r0
 8009336:	2101      	movs	r1, #1
 8009338:	4620      	mov	r0, r4
 800933a:	f000 ffbd 	bl	800a2b8 <__i2b>
 800933e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009340:	2b00      	cmp	r3, #0
 8009342:	4606      	mov	r6, r0
 8009344:	f340 8081 	ble.w	800944a <_dtoa_r+0x8ca>
 8009348:	461a      	mov	r2, r3
 800934a:	4601      	mov	r1, r0
 800934c:	4620      	mov	r0, r4
 800934e:	f001 f873 	bl	800a438 <__pow5mult>
 8009352:	9b07      	ldr	r3, [sp, #28]
 8009354:	2b01      	cmp	r3, #1
 8009356:	4606      	mov	r6, r0
 8009358:	dd7a      	ble.n	8009450 <_dtoa_r+0x8d0>
 800935a:	f04f 0800 	mov.w	r8, #0
 800935e:	6933      	ldr	r3, [r6, #16]
 8009360:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009364:	6918      	ldr	r0, [r3, #16]
 8009366:	f000 ff59 	bl	800a21c <__hi0bits>
 800936a:	f1c0 0020 	rsb	r0, r0, #32
 800936e:	9b06      	ldr	r3, [sp, #24]
 8009370:	4418      	add	r0, r3
 8009372:	f010 001f 	ands.w	r0, r0, #31
 8009376:	f000 8094 	beq.w	80094a2 <_dtoa_r+0x922>
 800937a:	f1c0 0320 	rsb	r3, r0, #32
 800937e:	2b04      	cmp	r3, #4
 8009380:	f340 8085 	ble.w	800948e <_dtoa_r+0x90e>
 8009384:	9b05      	ldr	r3, [sp, #20]
 8009386:	f1c0 001c 	rsb	r0, r0, #28
 800938a:	4403      	add	r3, r0
 800938c:	9305      	str	r3, [sp, #20]
 800938e:	9b06      	ldr	r3, [sp, #24]
 8009390:	4403      	add	r3, r0
 8009392:	4405      	add	r5, r0
 8009394:	9306      	str	r3, [sp, #24]
 8009396:	9b05      	ldr	r3, [sp, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	dd05      	ble.n	80093a8 <_dtoa_r+0x828>
 800939c:	4651      	mov	r1, sl
 800939e:	461a      	mov	r2, r3
 80093a0:	4620      	mov	r0, r4
 80093a2:	f001 f8a3 	bl	800a4ec <__lshift>
 80093a6:	4682      	mov	sl, r0
 80093a8:	9b06      	ldr	r3, [sp, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dd05      	ble.n	80093ba <_dtoa_r+0x83a>
 80093ae:	4631      	mov	r1, r6
 80093b0:	461a      	mov	r2, r3
 80093b2:	4620      	mov	r0, r4
 80093b4:	f001 f89a 	bl	800a4ec <__lshift>
 80093b8:	4606      	mov	r6, r0
 80093ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d072      	beq.n	80094a6 <_dtoa_r+0x926>
 80093c0:	4631      	mov	r1, r6
 80093c2:	4650      	mov	r0, sl
 80093c4:	f001 f8fe 	bl	800a5c4 <__mcmp>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	da6c      	bge.n	80094a6 <_dtoa_r+0x926>
 80093cc:	2300      	movs	r3, #0
 80093ce:	4651      	mov	r1, sl
 80093d0:	220a      	movs	r2, #10
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 fe92 	bl	800a0fc <__multadd>
 80093d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093de:	4682      	mov	sl, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 81b0 	beq.w	8009746 <_dtoa_r+0xbc6>
 80093e6:	2300      	movs	r3, #0
 80093e8:	4639      	mov	r1, r7
 80093ea:	220a      	movs	r2, #10
 80093ec:	4620      	mov	r0, r4
 80093ee:	f000 fe85 	bl	800a0fc <__multadd>
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	4607      	mov	r7, r0
 80093f8:	f300 8096 	bgt.w	8009528 <_dtoa_r+0x9a8>
 80093fc:	9b07      	ldr	r3, [sp, #28]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	dc59      	bgt.n	80094b6 <_dtoa_r+0x936>
 8009402:	e091      	b.n	8009528 <_dtoa_r+0x9a8>
 8009404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800940a:	e758      	b.n	80092be <_dtoa_r+0x73e>
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	1e5e      	subs	r6, r3, #1
 8009410:	9b08      	ldr	r3, [sp, #32]
 8009412:	42b3      	cmp	r3, r6
 8009414:	bfbf      	itttt	lt
 8009416:	9b08      	ldrlt	r3, [sp, #32]
 8009418:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800941a:	9608      	strlt	r6, [sp, #32]
 800941c:	1af3      	sublt	r3, r6, r3
 800941e:	bfb4      	ite	lt
 8009420:	18d2      	addlt	r2, r2, r3
 8009422:	1b9e      	subge	r6, r3, r6
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	bfbc      	itt	lt
 8009428:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800942a:	2600      	movlt	r6, #0
 800942c:	2b00      	cmp	r3, #0
 800942e:	bfb7      	itett	lt
 8009430:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009434:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009438:	1a9d      	sublt	r5, r3, r2
 800943a:	2300      	movlt	r3, #0
 800943c:	e741      	b.n	80092c2 <_dtoa_r+0x742>
 800943e:	9e08      	ldr	r6, [sp, #32]
 8009440:	9d05      	ldr	r5, [sp, #20]
 8009442:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009444:	e748      	b.n	80092d8 <_dtoa_r+0x758>
 8009446:	9a08      	ldr	r2, [sp, #32]
 8009448:	e770      	b.n	800932c <_dtoa_r+0x7ac>
 800944a:	9b07      	ldr	r3, [sp, #28]
 800944c:	2b01      	cmp	r3, #1
 800944e:	dc19      	bgt.n	8009484 <_dtoa_r+0x904>
 8009450:	9b02      	ldr	r3, [sp, #8]
 8009452:	b9bb      	cbnz	r3, 8009484 <_dtoa_r+0x904>
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800945a:	b99b      	cbnz	r3, 8009484 <_dtoa_r+0x904>
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009462:	0d1b      	lsrs	r3, r3, #20
 8009464:	051b      	lsls	r3, r3, #20
 8009466:	b183      	cbz	r3, 800948a <_dtoa_r+0x90a>
 8009468:	9b05      	ldr	r3, [sp, #20]
 800946a:	3301      	adds	r3, #1
 800946c:	9305      	str	r3, [sp, #20]
 800946e:	9b06      	ldr	r3, [sp, #24]
 8009470:	3301      	adds	r3, #1
 8009472:	9306      	str	r3, [sp, #24]
 8009474:	f04f 0801 	mov.w	r8, #1
 8009478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800947a:	2b00      	cmp	r3, #0
 800947c:	f47f af6f 	bne.w	800935e <_dtoa_r+0x7de>
 8009480:	2001      	movs	r0, #1
 8009482:	e774      	b.n	800936e <_dtoa_r+0x7ee>
 8009484:	f04f 0800 	mov.w	r8, #0
 8009488:	e7f6      	b.n	8009478 <_dtoa_r+0x8f8>
 800948a:	4698      	mov	r8, r3
 800948c:	e7f4      	b.n	8009478 <_dtoa_r+0x8f8>
 800948e:	d082      	beq.n	8009396 <_dtoa_r+0x816>
 8009490:	9a05      	ldr	r2, [sp, #20]
 8009492:	331c      	adds	r3, #28
 8009494:	441a      	add	r2, r3
 8009496:	9205      	str	r2, [sp, #20]
 8009498:	9a06      	ldr	r2, [sp, #24]
 800949a:	441a      	add	r2, r3
 800949c:	441d      	add	r5, r3
 800949e:	9206      	str	r2, [sp, #24]
 80094a0:	e779      	b.n	8009396 <_dtoa_r+0x816>
 80094a2:	4603      	mov	r3, r0
 80094a4:	e7f4      	b.n	8009490 <_dtoa_r+0x910>
 80094a6:	9b04      	ldr	r3, [sp, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc37      	bgt.n	800951c <_dtoa_r+0x99c>
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	dd34      	ble.n	800951c <_dtoa_r+0x99c>
 80094b2:	9b04      	ldr	r3, [sp, #16]
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	b963      	cbnz	r3, 80094d4 <_dtoa_r+0x954>
 80094ba:	4631      	mov	r1, r6
 80094bc:	2205      	movs	r2, #5
 80094be:	4620      	mov	r0, r4
 80094c0:	f000 fe1c 	bl	800a0fc <__multadd>
 80094c4:	4601      	mov	r1, r0
 80094c6:	4606      	mov	r6, r0
 80094c8:	4650      	mov	r0, sl
 80094ca:	f001 f87b 	bl	800a5c4 <__mcmp>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f73f adbb 	bgt.w	800904a <_dtoa_r+0x4ca>
 80094d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d6:	9d00      	ldr	r5, [sp, #0]
 80094d8:	ea6f 0b03 	mvn.w	fp, r3
 80094dc:	f04f 0800 	mov.w	r8, #0
 80094e0:	4631      	mov	r1, r6
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 fde8 	bl	800a0b8 <_Bfree>
 80094e8:	2f00      	cmp	r7, #0
 80094ea:	f43f aeab 	beq.w	8009244 <_dtoa_r+0x6c4>
 80094ee:	f1b8 0f00 	cmp.w	r8, #0
 80094f2:	d005      	beq.n	8009500 <_dtoa_r+0x980>
 80094f4:	45b8      	cmp	r8, r7
 80094f6:	d003      	beq.n	8009500 <_dtoa_r+0x980>
 80094f8:	4641      	mov	r1, r8
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 fddc 	bl	800a0b8 <_Bfree>
 8009500:	4639      	mov	r1, r7
 8009502:	4620      	mov	r0, r4
 8009504:	f000 fdd8 	bl	800a0b8 <_Bfree>
 8009508:	e69c      	b.n	8009244 <_dtoa_r+0x6c4>
 800950a:	2600      	movs	r6, #0
 800950c:	4637      	mov	r7, r6
 800950e:	e7e1      	b.n	80094d4 <_dtoa_r+0x954>
 8009510:	46bb      	mov	fp, r7
 8009512:	4637      	mov	r7, r6
 8009514:	e599      	b.n	800904a <_dtoa_r+0x4ca>
 8009516:	bf00      	nop
 8009518:	40240000 	.word	0x40240000
 800951c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 80c8 	beq.w	80096b4 <_dtoa_r+0xb34>
 8009524:	9b04      	ldr	r3, [sp, #16]
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	2d00      	cmp	r5, #0
 800952a:	dd05      	ble.n	8009538 <_dtoa_r+0x9b8>
 800952c:	4639      	mov	r1, r7
 800952e:	462a      	mov	r2, r5
 8009530:	4620      	mov	r0, r4
 8009532:	f000 ffdb 	bl	800a4ec <__lshift>
 8009536:	4607      	mov	r7, r0
 8009538:	f1b8 0f00 	cmp.w	r8, #0
 800953c:	d05b      	beq.n	80095f6 <_dtoa_r+0xa76>
 800953e:	6879      	ldr	r1, [r7, #4]
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fd79 	bl	800a038 <_Balloc>
 8009546:	4605      	mov	r5, r0
 8009548:	b928      	cbnz	r0, 8009556 <_dtoa_r+0x9d6>
 800954a:	4b83      	ldr	r3, [pc, #524]	; (8009758 <_dtoa_r+0xbd8>)
 800954c:	4602      	mov	r2, r0
 800954e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009552:	f7ff bb2e 	b.w	8008bb2 <_dtoa_r+0x32>
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	3202      	adds	r2, #2
 800955a:	0092      	lsls	r2, r2, #2
 800955c:	f107 010c 	add.w	r1, r7, #12
 8009560:	300c      	adds	r0, #12
 8009562:	f7ff fa6d 	bl	8008a40 <memcpy>
 8009566:	2201      	movs	r2, #1
 8009568:	4629      	mov	r1, r5
 800956a:	4620      	mov	r0, r4
 800956c:	f000 ffbe 	bl	800a4ec <__lshift>
 8009570:	9b00      	ldr	r3, [sp, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800957a:	4413      	add	r3, r2
 800957c:	9308      	str	r3, [sp, #32]
 800957e:	9b02      	ldr	r3, [sp, #8]
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	46b8      	mov	r8, r7
 8009586:	9306      	str	r3, [sp, #24]
 8009588:	4607      	mov	r7, r0
 800958a:	9b04      	ldr	r3, [sp, #16]
 800958c:	4631      	mov	r1, r6
 800958e:	3b01      	subs	r3, #1
 8009590:	4650      	mov	r0, sl
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	f7ff fa6c 	bl	8008a70 <quorem>
 8009598:	4641      	mov	r1, r8
 800959a:	9002      	str	r0, [sp, #8]
 800959c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095a0:	4650      	mov	r0, sl
 80095a2:	f001 f80f 	bl	800a5c4 <__mcmp>
 80095a6:	463a      	mov	r2, r7
 80095a8:	9005      	str	r0, [sp, #20]
 80095aa:	4631      	mov	r1, r6
 80095ac:	4620      	mov	r0, r4
 80095ae:	f001 f825 	bl	800a5fc <__mdiff>
 80095b2:	68c2      	ldr	r2, [r0, #12]
 80095b4:	4605      	mov	r5, r0
 80095b6:	bb02      	cbnz	r2, 80095fa <_dtoa_r+0xa7a>
 80095b8:	4601      	mov	r1, r0
 80095ba:	4650      	mov	r0, sl
 80095bc:	f001 f802 	bl	800a5c4 <__mcmp>
 80095c0:	4602      	mov	r2, r0
 80095c2:	4629      	mov	r1, r5
 80095c4:	4620      	mov	r0, r4
 80095c6:	9209      	str	r2, [sp, #36]	; 0x24
 80095c8:	f000 fd76 	bl	800a0b8 <_Bfree>
 80095cc:	9b07      	ldr	r3, [sp, #28]
 80095ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d0:	9d04      	ldr	r5, [sp, #16]
 80095d2:	ea43 0102 	orr.w	r1, r3, r2
 80095d6:	9b06      	ldr	r3, [sp, #24]
 80095d8:	4319      	orrs	r1, r3
 80095da:	d110      	bne.n	80095fe <_dtoa_r+0xa7e>
 80095dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095e0:	d029      	beq.n	8009636 <_dtoa_r+0xab6>
 80095e2:	9b05      	ldr	r3, [sp, #20]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dd02      	ble.n	80095ee <_dtoa_r+0xa6e>
 80095e8:	9b02      	ldr	r3, [sp, #8]
 80095ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80095ee:	9b01      	ldr	r3, [sp, #4]
 80095f0:	f883 9000 	strb.w	r9, [r3]
 80095f4:	e774      	b.n	80094e0 <_dtoa_r+0x960>
 80095f6:	4638      	mov	r0, r7
 80095f8:	e7ba      	b.n	8009570 <_dtoa_r+0x9f0>
 80095fa:	2201      	movs	r2, #1
 80095fc:	e7e1      	b.n	80095c2 <_dtoa_r+0xa42>
 80095fe:	9b05      	ldr	r3, [sp, #20]
 8009600:	2b00      	cmp	r3, #0
 8009602:	db04      	blt.n	800960e <_dtoa_r+0xa8e>
 8009604:	9907      	ldr	r1, [sp, #28]
 8009606:	430b      	orrs	r3, r1
 8009608:	9906      	ldr	r1, [sp, #24]
 800960a:	430b      	orrs	r3, r1
 800960c:	d120      	bne.n	8009650 <_dtoa_r+0xad0>
 800960e:	2a00      	cmp	r2, #0
 8009610:	dded      	ble.n	80095ee <_dtoa_r+0xa6e>
 8009612:	4651      	mov	r1, sl
 8009614:	2201      	movs	r2, #1
 8009616:	4620      	mov	r0, r4
 8009618:	f000 ff68 	bl	800a4ec <__lshift>
 800961c:	4631      	mov	r1, r6
 800961e:	4682      	mov	sl, r0
 8009620:	f000 ffd0 	bl	800a5c4 <__mcmp>
 8009624:	2800      	cmp	r0, #0
 8009626:	dc03      	bgt.n	8009630 <_dtoa_r+0xab0>
 8009628:	d1e1      	bne.n	80095ee <_dtoa_r+0xa6e>
 800962a:	f019 0f01 	tst.w	r9, #1
 800962e:	d0de      	beq.n	80095ee <_dtoa_r+0xa6e>
 8009630:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009634:	d1d8      	bne.n	80095e8 <_dtoa_r+0xa68>
 8009636:	9a01      	ldr	r2, [sp, #4]
 8009638:	2339      	movs	r3, #57	; 0x39
 800963a:	7013      	strb	r3, [r2, #0]
 800963c:	462b      	mov	r3, r5
 800963e:	461d      	mov	r5, r3
 8009640:	3b01      	subs	r3, #1
 8009642:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009646:	2a39      	cmp	r2, #57	; 0x39
 8009648:	d06c      	beq.n	8009724 <_dtoa_r+0xba4>
 800964a:	3201      	adds	r2, #1
 800964c:	701a      	strb	r2, [r3, #0]
 800964e:	e747      	b.n	80094e0 <_dtoa_r+0x960>
 8009650:	2a00      	cmp	r2, #0
 8009652:	dd07      	ble.n	8009664 <_dtoa_r+0xae4>
 8009654:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009658:	d0ed      	beq.n	8009636 <_dtoa_r+0xab6>
 800965a:	9a01      	ldr	r2, [sp, #4]
 800965c:	f109 0301 	add.w	r3, r9, #1
 8009660:	7013      	strb	r3, [r2, #0]
 8009662:	e73d      	b.n	80094e0 <_dtoa_r+0x960>
 8009664:	9b04      	ldr	r3, [sp, #16]
 8009666:	9a08      	ldr	r2, [sp, #32]
 8009668:	f803 9c01 	strb.w	r9, [r3, #-1]
 800966c:	4293      	cmp	r3, r2
 800966e:	d043      	beq.n	80096f8 <_dtoa_r+0xb78>
 8009670:	4651      	mov	r1, sl
 8009672:	2300      	movs	r3, #0
 8009674:	220a      	movs	r2, #10
 8009676:	4620      	mov	r0, r4
 8009678:	f000 fd40 	bl	800a0fc <__multadd>
 800967c:	45b8      	cmp	r8, r7
 800967e:	4682      	mov	sl, r0
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	f04f 020a 	mov.w	r2, #10
 8009688:	4641      	mov	r1, r8
 800968a:	4620      	mov	r0, r4
 800968c:	d107      	bne.n	800969e <_dtoa_r+0xb1e>
 800968e:	f000 fd35 	bl	800a0fc <__multadd>
 8009692:	4680      	mov	r8, r0
 8009694:	4607      	mov	r7, r0
 8009696:	9b04      	ldr	r3, [sp, #16]
 8009698:	3301      	adds	r3, #1
 800969a:	9304      	str	r3, [sp, #16]
 800969c:	e775      	b.n	800958a <_dtoa_r+0xa0a>
 800969e:	f000 fd2d 	bl	800a0fc <__multadd>
 80096a2:	4639      	mov	r1, r7
 80096a4:	4680      	mov	r8, r0
 80096a6:	2300      	movs	r3, #0
 80096a8:	220a      	movs	r2, #10
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 fd26 	bl	800a0fc <__multadd>
 80096b0:	4607      	mov	r7, r0
 80096b2:	e7f0      	b.n	8009696 <_dtoa_r+0xb16>
 80096b4:	9b04      	ldr	r3, [sp, #16]
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	9d00      	ldr	r5, [sp, #0]
 80096ba:	4631      	mov	r1, r6
 80096bc:	4650      	mov	r0, sl
 80096be:	f7ff f9d7 	bl	8008a70 <quorem>
 80096c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80096c6:	9b00      	ldr	r3, [sp, #0]
 80096c8:	f805 9b01 	strb.w	r9, [r5], #1
 80096cc:	1aea      	subs	r2, r5, r3
 80096ce:	9b01      	ldr	r3, [sp, #4]
 80096d0:	4293      	cmp	r3, r2
 80096d2:	dd07      	ble.n	80096e4 <_dtoa_r+0xb64>
 80096d4:	4651      	mov	r1, sl
 80096d6:	2300      	movs	r3, #0
 80096d8:	220a      	movs	r2, #10
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 fd0e 	bl	800a0fc <__multadd>
 80096e0:	4682      	mov	sl, r0
 80096e2:	e7ea      	b.n	80096ba <_dtoa_r+0xb3a>
 80096e4:	9b01      	ldr	r3, [sp, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfc8      	it	gt
 80096ea:	461d      	movgt	r5, r3
 80096ec:	9b00      	ldr	r3, [sp, #0]
 80096ee:	bfd8      	it	le
 80096f0:	2501      	movle	r5, #1
 80096f2:	441d      	add	r5, r3
 80096f4:	f04f 0800 	mov.w	r8, #0
 80096f8:	4651      	mov	r1, sl
 80096fa:	2201      	movs	r2, #1
 80096fc:	4620      	mov	r0, r4
 80096fe:	f000 fef5 	bl	800a4ec <__lshift>
 8009702:	4631      	mov	r1, r6
 8009704:	4682      	mov	sl, r0
 8009706:	f000 ff5d 	bl	800a5c4 <__mcmp>
 800970a:	2800      	cmp	r0, #0
 800970c:	dc96      	bgt.n	800963c <_dtoa_r+0xabc>
 800970e:	d102      	bne.n	8009716 <_dtoa_r+0xb96>
 8009710:	f019 0f01 	tst.w	r9, #1
 8009714:	d192      	bne.n	800963c <_dtoa_r+0xabc>
 8009716:	462b      	mov	r3, r5
 8009718:	461d      	mov	r5, r3
 800971a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800971e:	2a30      	cmp	r2, #48	; 0x30
 8009720:	d0fa      	beq.n	8009718 <_dtoa_r+0xb98>
 8009722:	e6dd      	b.n	80094e0 <_dtoa_r+0x960>
 8009724:	9a00      	ldr	r2, [sp, #0]
 8009726:	429a      	cmp	r2, r3
 8009728:	d189      	bne.n	800963e <_dtoa_r+0xabe>
 800972a:	f10b 0b01 	add.w	fp, fp, #1
 800972e:	2331      	movs	r3, #49	; 0x31
 8009730:	e796      	b.n	8009660 <_dtoa_r+0xae0>
 8009732:	4b0a      	ldr	r3, [pc, #40]	; (800975c <_dtoa_r+0xbdc>)
 8009734:	f7ff ba99 	b.w	8008c6a <_dtoa_r+0xea>
 8009738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800973a:	2b00      	cmp	r3, #0
 800973c:	f47f aa6d 	bne.w	8008c1a <_dtoa_r+0x9a>
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <_dtoa_r+0xbe0>)
 8009742:	f7ff ba92 	b.w	8008c6a <_dtoa_r+0xea>
 8009746:	9b01      	ldr	r3, [sp, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	dcb5      	bgt.n	80096b8 <_dtoa_r+0xb38>
 800974c:	9b07      	ldr	r3, [sp, #28]
 800974e:	2b02      	cmp	r3, #2
 8009750:	f73f aeb1 	bgt.w	80094b6 <_dtoa_r+0x936>
 8009754:	e7b0      	b.n	80096b8 <_dtoa_r+0xb38>
 8009756:	bf00      	nop
 8009758:	0800b759 	.word	0x0800b759
 800975c:	0800b6b1 	.word	0x0800b6b1
 8009760:	0800b6dd 	.word	0x0800b6dd

08009764 <_free_r>:
 8009764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009766:	2900      	cmp	r1, #0
 8009768:	d044      	beq.n	80097f4 <_free_r+0x90>
 800976a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800976e:	9001      	str	r0, [sp, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f1a1 0404 	sub.w	r4, r1, #4
 8009776:	bfb8      	it	lt
 8009778:	18e4      	addlt	r4, r4, r3
 800977a:	f000 fc51 	bl	800a020 <__malloc_lock>
 800977e:	4a1e      	ldr	r2, [pc, #120]	; (80097f8 <_free_r+0x94>)
 8009780:	9801      	ldr	r0, [sp, #4]
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	b933      	cbnz	r3, 8009794 <_free_r+0x30>
 8009786:	6063      	str	r3, [r4, #4]
 8009788:	6014      	str	r4, [r2, #0]
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009790:	f000 bc4c 	b.w	800a02c <__malloc_unlock>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d908      	bls.n	80097aa <_free_r+0x46>
 8009798:	6825      	ldr	r5, [r4, #0]
 800979a:	1961      	adds	r1, r4, r5
 800979c:	428b      	cmp	r3, r1
 800979e:	bf01      	itttt	eq
 80097a0:	6819      	ldreq	r1, [r3, #0]
 80097a2:	685b      	ldreq	r3, [r3, #4]
 80097a4:	1949      	addeq	r1, r1, r5
 80097a6:	6021      	streq	r1, [r4, #0]
 80097a8:	e7ed      	b.n	8009786 <_free_r+0x22>
 80097aa:	461a      	mov	r2, r3
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	b10b      	cbz	r3, 80097b4 <_free_r+0x50>
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	d9fa      	bls.n	80097aa <_free_r+0x46>
 80097b4:	6811      	ldr	r1, [r2, #0]
 80097b6:	1855      	adds	r5, r2, r1
 80097b8:	42a5      	cmp	r5, r4
 80097ba:	d10b      	bne.n	80097d4 <_free_r+0x70>
 80097bc:	6824      	ldr	r4, [r4, #0]
 80097be:	4421      	add	r1, r4
 80097c0:	1854      	adds	r4, r2, r1
 80097c2:	42a3      	cmp	r3, r4
 80097c4:	6011      	str	r1, [r2, #0]
 80097c6:	d1e0      	bne.n	800978a <_free_r+0x26>
 80097c8:	681c      	ldr	r4, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	6053      	str	r3, [r2, #4]
 80097ce:	440c      	add	r4, r1
 80097d0:	6014      	str	r4, [r2, #0]
 80097d2:	e7da      	b.n	800978a <_free_r+0x26>
 80097d4:	d902      	bls.n	80097dc <_free_r+0x78>
 80097d6:	230c      	movs	r3, #12
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	e7d6      	b.n	800978a <_free_r+0x26>
 80097dc:	6825      	ldr	r5, [r4, #0]
 80097de:	1961      	adds	r1, r4, r5
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf04      	itt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	bf04      	itt	eq
 80097ec:	1949      	addeq	r1, r1, r5
 80097ee:	6021      	streq	r1, [r4, #0]
 80097f0:	6054      	str	r4, [r2, #4]
 80097f2:	e7ca      	b.n	800978a <_free_r+0x26>
 80097f4:	b003      	add	sp, #12
 80097f6:	bd30      	pop	{r4, r5, pc}
 80097f8:	20004498 	.word	0x20004498

080097fc <rshift>:
 80097fc:	6903      	ldr	r3, [r0, #16]
 80097fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009802:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009806:	ea4f 1261 	mov.w	r2, r1, asr #5
 800980a:	f100 0414 	add.w	r4, r0, #20
 800980e:	dd45      	ble.n	800989c <rshift+0xa0>
 8009810:	f011 011f 	ands.w	r1, r1, #31
 8009814:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009818:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800981c:	d10c      	bne.n	8009838 <rshift+0x3c>
 800981e:	f100 0710 	add.w	r7, r0, #16
 8009822:	4629      	mov	r1, r5
 8009824:	42b1      	cmp	r1, r6
 8009826:	d334      	bcc.n	8009892 <rshift+0x96>
 8009828:	1a9b      	subs	r3, r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	1eea      	subs	r2, r5, #3
 800982e:	4296      	cmp	r6, r2
 8009830:	bf38      	it	cc
 8009832:	2300      	movcc	r3, #0
 8009834:	4423      	add	r3, r4
 8009836:	e015      	b.n	8009864 <rshift+0x68>
 8009838:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800983c:	f1c1 0820 	rsb	r8, r1, #32
 8009840:	40cf      	lsrs	r7, r1
 8009842:	f105 0e04 	add.w	lr, r5, #4
 8009846:	46a1      	mov	r9, r4
 8009848:	4576      	cmp	r6, lr
 800984a:	46f4      	mov	ip, lr
 800984c:	d815      	bhi.n	800987a <rshift+0x7e>
 800984e:	1a9a      	subs	r2, r3, r2
 8009850:	0092      	lsls	r2, r2, #2
 8009852:	3a04      	subs	r2, #4
 8009854:	3501      	adds	r5, #1
 8009856:	42ae      	cmp	r6, r5
 8009858:	bf38      	it	cc
 800985a:	2200      	movcc	r2, #0
 800985c:	18a3      	adds	r3, r4, r2
 800985e:	50a7      	str	r7, [r4, r2]
 8009860:	b107      	cbz	r7, 8009864 <rshift+0x68>
 8009862:	3304      	adds	r3, #4
 8009864:	1b1a      	subs	r2, r3, r4
 8009866:	42a3      	cmp	r3, r4
 8009868:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800986c:	bf08      	it	eq
 800986e:	2300      	moveq	r3, #0
 8009870:	6102      	str	r2, [r0, #16]
 8009872:	bf08      	it	eq
 8009874:	6143      	streq	r3, [r0, #20]
 8009876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800987a:	f8dc c000 	ldr.w	ip, [ip]
 800987e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009882:	ea4c 0707 	orr.w	r7, ip, r7
 8009886:	f849 7b04 	str.w	r7, [r9], #4
 800988a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800988e:	40cf      	lsrs	r7, r1
 8009890:	e7da      	b.n	8009848 <rshift+0x4c>
 8009892:	f851 cb04 	ldr.w	ip, [r1], #4
 8009896:	f847 cf04 	str.w	ip, [r7, #4]!
 800989a:	e7c3      	b.n	8009824 <rshift+0x28>
 800989c:	4623      	mov	r3, r4
 800989e:	e7e1      	b.n	8009864 <rshift+0x68>

080098a0 <__hexdig_fun>:
 80098a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098a4:	2b09      	cmp	r3, #9
 80098a6:	d802      	bhi.n	80098ae <__hexdig_fun+0xe>
 80098a8:	3820      	subs	r0, #32
 80098aa:	b2c0      	uxtb	r0, r0
 80098ac:	4770      	bx	lr
 80098ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098b2:	2b05      	cmp	r3, #5
 80098b4:	d801      	bhi.n	80098ba <__hexdig_fun+0x1a>
 80098b6:	3847      	subs	r0, #71	; 0x47
 80098b8:	e7f7      	b.n	80098aa <__hexdig_fun+0xa>
 80098ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098be:	2b05      	cmp	r3, #5
 80098c0:	d801      	bhi.n	80098c6 <__hexdig_fun+0x26>
 80098c2:	3827      	subs	r0, #39	; 0x27
 80098c4:	e7f1      	b.n	80098aa <__hexdig_fun+0xa>
 80098c6:	2000      	movs	r0, #0
 80098c8:	4770      	bx	lr
	...

080098cc <__gethex>:
 80098cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	4617      	mov	r7, r2
 80098d2:	680a      	ldr	r2, [r1, #0]
 80098d4:	b085      	sub	sp, #20
 80098d6:	f102 0b02 	add.w	fp, r2, #2
 80098da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80098de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098e2:	4681      	mov	r9, r0
 80098e4:	468a      	mov	sl, r1
 80098e6:	9302      	str	r3, [sp, #8]
 80098e8:	32fe      	adds	r2, #254	; 0xfe
 80098ea:	eb02 030b 	add.w	r3, r2, fp
 80098ee:	46d8      	mov	r8, fp
 80098f0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	2830      	cmp	r0, #48	; 0x30
 80098f8:	d0f7      	beq.n	80098ea <__gethex+0x1e>
 80098fa:	f7ff ffd1 	bl	80098a0 <__hexdig_fun>
 80098fe:	4604      	mov	r4, r0
 8009900:	2800      	cmp	r0, #0
 8009902:	d138      	bne.n	8009976 <__gethex+0xaa>
 8009904:	49a7      	ldr	r1, [pc, #668]	; (8009ba4 <__gethex+0x2d8>)
 8009906:	2201      	movs	r2, #1
 8009908:	4640      	mov	r0, r8
 800990a:	f7fe ffba 	bl	8008882 <strncmp>
 800990e:	4606      	mov	r6, r0
 8009910:	2800      	cmp	r0, #0
 8009912:	d169      	bne.n	80099e8 <__gethex+0x11c>
 8009914:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009918:	465d      	mov	r5, fp
 800991a:	f7ff ffc1 	bl	80098a0 <__hexdig_fun>
 800991e:	2800      	cmp	r0, #0
 8009920:	d064      	beq.n	80099ec <__gethex+0x120>
 8009922:	465a      	mov	r2, fp
 8009924:	7810      	ldrb	r0, [r2, #0]
 8009926:	2830      	cmp	r0, #48	; 0x30
 8009928:	4690      	mov	r8, r2
 800992a:	f102 0201 	add.w	r2, r2, #1
 800992e:	d0f9      	beq.n	8009924 <__gethex+0x58>
 8009930:	f7ff ffb6 	bl	80098a0 <__hexdig_fun>
 8009934:	2301      	movs	r3, #1
 8009936:	fab0 f480 	clz	r4, r0
 800993a:	0964      	lsrs	r4, r4, #5
 800993c:	465e      	mov	r6, fp
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	4642      	mov	r2, r8
 8009942:	4615      	mov	r5, r2
 8009944:	3201      	adds	r2, #1
 8009946:	7828      	ldrb	r0, [r5, #0]
 8009948:	f7ff ffaa 	bl	80098a0 <__hexdig_fun>
 800994c:	2800      	cmp	r0, #0
 800994e:	d1f8      	bne.n	8009942 <__gethex+0x76>
 8009950:	4994      	ldr	r1, [pc, #592]	; (8009ba4 <__gethex+0x2d8>)
 8009952:	2201      	movs	r2, #1
 8009954:	4628      	mov	r0, r5
 8009956:	f7fe ff94 	bl	8008882 <strncmp>
 800995a:	b978      	cbnz	r0, 800997c <__gethex+0xb0>
 800995c:	b946      	cbnz	r6, 8009970 <__gethex+0xa4>
 800995e:	1c6e      	adds	r6, r5, #1
 8009960:	4632      	mov	r2, r6
 8009962:	4615      	mov	r5, r2
 8009964:	3201      	adds	r2, #1
 8009966:	7828      	ldrb	r0, [r5, #0]
 8009968:	f7ff ff9a 	bl	80098a0 <__hexdig_fun>
 800996c:	2800      	cmp	r0, #0
 800996e:	d1f8      	bne.n	8009962 <__gethex+0x96>
 8009970:	1b73      	subs	r3, r6, r5
 8009972:	009e      	lsls	r6, r3, #2
 8009974:	e004      	b.n	8009980 <__gethex+0xb4>
 8009976:	2400      	movs	r4, #0
 8009978:	4626      	mov	r6, r4
 800997a:	e7e1      	b.n	8009940 <__gethex+0x74>
 800997c:	2e00      	cmp	r6, #0
 800997e:	d1f7      	bne.n	8009970 <__gethex+0xa4>
 8009980:	782b      	ldrb	r3, [r5, #0]
 8009982:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009986:	2b50      	cmp	r3, #80	; 0x50
 8009988:	d13d      	bne.n	8009a06 <__gethex+0x13a>
 800998a:	786b      	ldrb	r3, [r5, #1]
 800998c:	2b2b      	cmp	r3, #43	; 0x2b
 800998e:	d02f      	beq.n	80099f0 <__gethex+0x124>
 8009990:	2b2d      	cmp	r3, #45	; 0x2d
 8009992:	d031      	beq.n	80099f8 <__gethex+0x12c>
 8009994:	1c69      	adds	r1, r5, #1
 8009996:	f04f 0b00 	mov.w	fp, #0
 800999a:	7808      	ldrb	r0, [r1, #0]
 800999c:	f7ff ff80 	bl	80098a0 <__hexdig_fun>
 80099a0:	1e42      	subs	r2, r0, #1
 80099a2:	b2d2      	uxtb	r2, r2
 80099a4:	2a18      	cmp	r2, #24
 80099a6:	d82e      	bhi.n	8009a06 <__gethex+0x13a>
 80099a8:	f1a0 0210 	sub.w	r2, r0, #16
 80099ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099b0:	f7ff ff76 	bl	80098a0 <__hexdig_fun>
 80099b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80099b8:	fa5f fc8c 	uxtb.w	ip, ip
 80099bc:	f1bc 0f18 	cmp.w	ip, #24
 80099c0:	d91d      	bls.n	80099fe <__gethex+0x132>
 80099c2:	f1bb 0f00 	cmp.w	fp, #0
 80099c6:	d000      	beq.n	80099ca <__gethex+0xfe>
 80099c8:	4252      	negs	r2, r2
 80099ca:	4416      	add	r6, r2
 80099cc:	f8ca 1000 	str.w	r1, [sl]
 80099d0:	b1dc      	cbz	r4, 8009a0a <__gethex+0x13e>
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	bf14      	ite	ne
 80099d8:	f04f 0800 	movne.w	r8, #0
 80099dc:	f04f 0806 	moveq.w	r8, #6
 80099e0:	4640      	mov	r0, r8
 80099e2:	b005      	add	sp, #20
 80099e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e8:	4645      	mov	r5, r8
 80099ea:	4626      	mov	r6, r4
 80099ec:	2401      	movs	r4, #1
 80099ee:	e7c7      	b.n	8009980 <__gethex+0xb4>
 80099f0:	f04f 0b00 	mov.w	fp, #0
 80099f4:	1ca9      	adds	r1, r5, #2
 80099f6:	e7d0      	b.n	800999a <__gethex+0xce>
 80099f8:	f04f 0b01 	mov.w	fp, #1
 80099fc:	e7fa      	b.n	80099f4 <__gethex+0x128>
 80099fe:	230a      	movs	r3, #10
 8009a00:	fb03 0002 	mla	r0, r3, r2, r0
 8009a04:	e7d0      	b.n	80099a8 <__gethex+0xdc>
 8009a06:	4629      	mov	r1, r5
 8009a08:	e7e0      	b.n	80099cc <__gethex+0x100>
 8009a0a:	eba5 0308 	sub.w	r3, r5, r8
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	4621      	mov	r1, r4
 8009a12:	2b07      	cmp	r3, #7
 8009a14:	dc0a      	bgt.n	8009a2c <__gethex+0x160>
 8009a16:	4648      	mov	r0, r9
 8009a18:	f000 fb0e 	bl	800a038 <_Balloc>
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	b940      	cbnz	r0, 8009a32 <__gethex+0x166>
 8009a20:	4b61      	ldr	r3, [pc, #388]	; (8009ba8 <__gethex+0x2dc>)
 8009a22:	4602      	mov	r2, r0
 8009a24:	21e4      	movs	r1, #228	; 0xe4
 8009a26:	4861      	ldr	r0, [pc, #388]	; (8009bac <__gethex+0x2e0>)
 8009a28:	f001 f9f0 	bl	800ae0c <__assert_func>
 8009a2c:	3101      	adds	r1, #1
 8009a2e:	105b      	asrs	r3, r3, #1
 8009a30:	e7ef      	b.n	8009a12 <__gethex+0x146>
 8009a32:	f100 0a14 	add.w	sl, r0, #20
 8009a36:	2300      	movs	r3, #0
 8009a38:	495a      	ldr	r1, [pc, #360]	; (8009ba4 <__gethex+0x2d8>)
 8009a3a:	f8cd a004 	str.w	sl, [sp, #4]
 8009a3e:	469b      	mov	fp, r3
 8009a40:	45a8      	cmp	r8, r5
 8009a42:	d342      	bcc.n	8009aca <__gethex+0x1fe>
 8009a44:	9801      	ldr	r0, [sp, #4]
 8009a46:	f840 bb04 	str.w	fp, [r0], #4
 8009a4a:	eba0 000a 	sub.w	r0, r0, sl
 8009a4e:	1080      	asrs	r0, r0, #2
 8009a50:	6120      	str	r0, [r4, #16]
 8009a52:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009a56:	4658      	mov	r0, fp
 8009a58:	f000 fbe0 	bl	800a21c <__hi0bits>
 8009a5c:	683d      	ldr	r5, [r7, #0]
 8009a5e:	eba8 0000 	sub.w	r0, r8, r0
 8009a62:	42a8      	cmp	r0, r5
 8009a64:	dd59      	ble.n	8009b1a <__gethex+0x24e>
 8009a66:	eba0 0805 	sub.w	r8, r0, r5
 8009a6a:	4641      	mov	r1, r8
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f000 ff6f 	bl	800a950 <__any_on>
 8009a72:	4683      	mov	fp, r0
 8009a74:	b1b8      	cbz	r0, 8009aa6 <__gethex+0x1da>
 8009a76:	f108 33ff 	add.w	r3, r8, #4294967295
 8009a7a:	1159      	asrs	r1, r3, #5
 8009a7c:	f003 021f 	and.w	r2, r3, #31
 8009a80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a84:	f04f 0b01 	mov.w	fp, #1
 8009a88:	fa0b f202 	lsl.w	r2, fp, r2
 8009a8c:	420a      	tst	r2, r1
 8009a8e:	d00a      	beq.n	8009aa6 <__gethex+0x1da>
 8009a90:	455b      	cmp	r3, fp
 8009a92:	dd06      	ble.n	8009aa2 <__gethex+0x1d6>
 8009a94:	f1a8 0102 	sub.w	r1, r8, #2
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 ff59 	bl	800a950 <__any_on>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d138      	bne.n	8009b14 <__gethex+0x248>
 8009aa2:	f04f 0b02 	mov.w	fp, #2
 8009aa6:	4641      	mov	r1, r8
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f7ff fea7 	bl	80097fc <rshift>
 8009aae:	4446      	add	r6, r8
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	42b3      	cmp	r3, r6
 8009ab4:	da41      	bge.n	8009b3a <__gethex+0x26e>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4648      	mov	r0, r9
 8009aba:	f000 fafd 	bl	800a0b8 <_Bfree>
 8009abe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009ac8:	e78a      	b.n	80099e0 <__gethex+0x114>
 8009aca:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009ace:	2a2e      	cmp	r2, #46	; 0x2e
 8009ad0:	d014      	beq.n	8009afc <__gethex+0x230>
 8009ad2:	2b20      	cmp	r3, #32
 8009ad4:	d106      	bne.n	8009ae4 <__gethex+0x218>
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	f843 bb04 	str.w	fp, [r3], #4
 8009adc:	f04f 0b00 	mov.w	fp, #0
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	465b      	mov	r3, fp
 8009ae4:	7828      	ldrb	r0, [r5, #0]
 8009ae6:	9303      	str	r3, [sp, #12]
 8009ae8:	f7ff feda 	bl	80098a0 <__hexdig_fun>
 8009aec:	9b03      	ldr	r3, [sp, #12]
 8009aee:	f000 000f 	and.w	r0, r0, #15
 8009af2:	4098      	lsls	r0, r3
 8009af4:	ea4b 0b00 	orr.w	fp, fp, r0
 8009af8:	3304      	adds	r3, #4
 8009afa:	e7a1      	b.n	8009a40 <__gethex+0x174>
 8009afc:	45a8      	cmp	r8, r5
 8009afe:	d8e8      	bhi.n	8009ad2 <__gethex+0x206>
 8009b00:	2201      	movs	r2, #1
 8009b02:	4628      	mov	r0, r5
 8009b04:	9303      	str	r3, [sp, #12]
 8009b06:	f7fe febc 	bl	8008882 <strncmp>
 8009b0a:	4926      	ldr	r1, [pc, #152]	; (8009ba4 <__gethex+0x2d8>)
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d1df      	bne.n	8009ad2 <__gethex+0x206>
 8009b12:	e795      	b.n	8009a40 <__gethex+0x174>
 8009b14:	f04f 0b03 	mov.w	fp, #3
 8009b18:	e7c5      	b.n	8009aa6 <__gethex+0x1da>
 8009b1a:	da0b      	bge.n	8009b34 <__gethex+0x268>
 8009b1c:	eba5 0800 	sub.w	r8, r5, r0
 8009b20:	4621      	mov	r1, r4
 8009b22:	4642      	mov	r2, r8
 8009b24:	4648      	mov	r0, r9
 8009b26:	f000 fce1 	bl	800a4ec <__lshift>
 8009b2a:	eba6 0608 	sub.w	r6, r6, r8
 8009b2e:	4604      	mov	r4, r0
 8009b30:	f100 0a14 	add.w	sl, r0, #20
 8009b34:	f04f 0b00 	mov.w	fp, #0
 8009b38:	e7ba      	b.n	8009ab0 <__gethex+0x1e4>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	42b3      	cmp	r3, r6
 8009b3e:	dd73      	ble.n	8009c28 <__gethex+0x35c>
 8009b40:	1b9e      	subs	r6, r3, r6
 8009b42:	42b5      	cmp	r5, r6
 8009b44:	dc34      	bgt.n	8009bb0 <__gethex+0x2e4>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d023      	beq.n	8009b94 <__gethex+0x2c8>
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d025      	beq.n	8009b9c <__gethex+0x2d0>
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d115      	bne.n	8009b80 <__gethex+0x2b4>
 8009b54:	42b5      	cmp	r5, r6
 8009b56:	d113      	bne.n	8009b80 <__gethex+0x2b4>
 8009b58:	2d01      	cmp	r5, #1
 8009b5a:	d10b      	bne.n	8009b74 <__gethex+0x2a8>
 8009b5c:	9a02      	ldr	r2, [sp, #8]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6013      	str	r3, [r2, #0]
 8009b62:	2301      	movs	r3, #1
 8009b64:	6123      	str	r3, [r4, #16]
 8009b66:	f8ca 3000 	str.w	r3, [sl]
 8009b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b6c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009b70:	601c      	str	r4, [r3, #0]
 8009b72:	e735      	b.n	80099e0 <__gethex+0x114>
 8009b74:	1e69      	subs	r1, r5, #1
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 feea 	bl	800a950 <__any_on>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d1ed      	bne.n	8009b5c <__gethex+0x290>
 8009b80:	4621      	mov	r1, r4
 8009b82:	4648      	mov	r0, r9
 8009b84:	f000 fa98 	bl	800a0b8 <_Bfree>
 8009b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009b92:	e725      	b.n	80099e0 <__gethex+0x114>
 8009b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1f2      	bne.n	8009b80 <__gethex+0x2b4>
 8009b9a:	e7df      	b.n	8009b5c <__gethex+0x290>
 8009b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1dc      	bne.n	8009b5c <__gethex+0x290>
 8009ba2:	e7ed      	b.n	8009b80 <__gethex+0x2b4>
 8009ba4:	0800b548 	.word	0x0800b548
 8009ba8:	0800b759 	.word	0x0800b759
 8009bac:	0800b76a 	.word	0x0800b76a
 8009bb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8009bb4:	f1bb 0f00 	cmp.w	fp, #0
 8009bb8:	d133      	bne.n	8009c22 <__gethex+0x356>
 8009bba:	f1b8 0f00 	cmp.w	r8, #0
 8009bbe:	d004      	beq.n	8009bca <__gethex+0x2fe>
 8009bc0:	4641      	mov	r1, r8
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 fec4 	bl	800a950 <__any_on>
 8009bc8:	4683      	mov	fp, r0
 8009bca:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009bd4:	f008 081f 	and.w	r8, r8, #31
 8009bd8:	fa03 f308 	lsl.w	r3, r3, r8
 8009bdc:	4213      	tst	r3, r2
 8009bde:	4631      	mov	r1, r6
 8009be0:	4620      	mov	r0, r4
 8009be2:	bf18      	it	ne
 8009be4:	f04b 0b02 	orrne.w	fp, fp, #2
 8009be8:	1bad      	subs	r5, r5, r6
 8009bea:	f7ff fe07 	bl	80097fc <rshift>
 8009bee:	687e      	ldr	r6, [r7, #4]
 8009bf0:	f04f 0802 	mov.w	r8, #2
 8009bf4:	f1bb 0f00 	cmp.w	fp, #0
 8009bf8:	d04a      	beq.n	8009c90 <__gethex+0x3c4>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d016      	beq.n	8009c2e <__gethex+0x362>
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d018      	beq.n	8009c36 <__gethex+0x36a>
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d109      	bne.n	8009c1c <__gethex+0x350>
 8009c08:	f01b 0f02 	tst.w	fp, #2
 8009c0c:	d006      	beq.n	8009c1c <__gethex+0x350>
 8009c0e:	f8da 3000 	ldr.w	r3, [sl]
 8009c12:	ea4b 0b03 	orr.w	fp, fp, r3
 8009c16:	f01b 0f01 	tst.w	fp, #1
 8009c1a:	d10f      	bne.n	8009c3c <__gethex+0x370>
 8009c1c:	f048 0810 	orr.w	r8, r8, #16
 8009c20:	e036      	b.n	8009c90 <__gethex+0x3c4>
 8009c22:	f04f 0b01 	mov.w	fp, #1
 8009c26:	e7d0      	b.n	8009bca <__gethex+0x2fe>
 8009c28:	f04f 0801 	mov.w	r8, #1
 8009c2c:	e7e2      	b.n	8009bf4 <__gethex+0x328>
 8009c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c30:	f1c3 0301 	rsb	r3, r3, #1
 8009c34:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0ef      	beq.n	8009c1c <__gethex+0x350>
 8009c3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c40:	f104 0214 	add.w	r2, r4, #20
 8009c44:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009c4e:	2300      	movs	r3, #0
 8009c50:	4694      	mov	ip, r2
 8009c52:	f852 1b04 	ldr.w	r1, [r2], #4
 8009c56:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009c5a:	d01e      	beq.n	8009c9a <__gethex+0x3ce>
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	f8cc 1000 	str.w	r1, [ip]
 8009c62:	f1b8 0f02 	cmp.w	r8, #2
 8009c66:	f104 0214 	add.w	r2, r4, #20
 8009c6a:	d13d      	bne.n	8009ce8 <__gethex+0x41c>
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	42ab      	cmp	r3, r5
 8009c72:	d10b      	bne.n	8009c8c <__gethex+0x3c0>
 8009c74:	1169      	asrs	r1, r5, #5
 8009c76:	2301      	movs	r3, #1
 8009c78:	f005 051f 	and.w	r5, r5, #31
 8009c7c:	fa03 f505 	lsl.w	r5, r3, r5
 8009c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c84:	421d      	tst	r5, r3
 8009c86:	bf18      	it	ne
 8009c88:	f04f 0801 	movne.w	r8, #1
 8009c8c:	f048 0820 	orr.w	r8, r8, #32
 8009c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c92:	601c      	str	r4, [r3, #0]
 8009c94:	9b02      	ldr	r3, [sp, #8]
 8009c96:	601e      	str	r6, [r3, #0]
 8009c98:	e6a2      	b.n	80099e0 <__gethex+0x114>
 8009c9a:	4290      	cmp	r0, r2
 8009c9c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009ca0:	d8d6      	bhi.n	8009c50 <__gethex+0x384>
 8009ca2:	68a2      	ldr	r2, [r4, #8]
 8009ca4:	4593      	cmp	fp, r2
 8009ca6:	db17      	blt.n	8009cd8 <__gethex+0x40c>
 8009ca8:	6861      	ldr	r1, [r4, #4]
 8009caa:	4648      	mov	r0, r9
 8009cac:	3101      	adds	r1, #1
 8009cae:	f000 f9c3 	bl	800a038 <_Balloc>
 8009cb2:	4682      	mov	sl, r0
 8009cb4:	b918      	cbnz	r0, 8009cbe <__gethex+0x3f2>
 8009cb6:	4b1b      	ldr	r3, [pc, #108]	; (8009d24 <__gethex+0x458>)
 8009cb8:	4602      	mov	r2, r0
 8009cba:	2184      	movs	r1, #132	; 0x84
 8009cbc:	e6b3      	b.n	8009a26 <__gethex+0x15a>
 8009cbe:	6922      	ldr	r2, [r4, #16]
 8009cc0:	3202      	adds	r2, #2
 8009cc2:	f104 010c 	add.w	r1, r4, #12
 8009cc6:	0092      	lsls	r2, r2, #2
 8009cc8:	300c      	adds	r0, #12
 8009cca:	f7fe feb9 	bl	8008a40 <memcpy>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4648      	mov	r0, r9
 8009cd2:	f000 f9f1 	bl	800a0b8 <_Bfree>
 8009cd6:	4654      	mov	r4, sl
 8009cd8:	6922      	ldr	r2, [r4, #16]
 8009cda:	1c51      	adds	r1, r2, #1
 8009cdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ce0:	6121      	str	r1, [r4, #16]
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	6151      	str	r1, [r2, #20]
 8009ce6:	e7bc      	b.n	8009c62 <__gethex+0x396>
 8009ce8:	6921      	ldr	r1, [r4, #16]
 8009cea:	4559      	cmp	r1, fp
 8009cec:	dd0b      	ble.n	8009d06 <__gethex+0x43a>
 8009cee:	2101      	movs	r1, #1
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f7ff fd83 	bl	80097fc <rshift>
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	3601      	adds	r6, #1
 8009cfa:	42b3      	cmp	r3, r6
 8009cfc:	f6ff aedb 	blt.w	8009ab6 <__gethex+0x1ea>
 8009d00:	f04f 0801 	mov.w	r8, #1
 8009d04:	e7c2      	b.n	8009c8c <__gethex+0x3c0>
 8009d06:	f015 051f 	ands.w	r5, r5, #31
 8009d0a:	d0f9      	beq.n	8009d00 <__gethex+0x434>
 8009d0c:	9b01      	ldr	r3, [sp, #4]
 8009d0e:	441a      	add	r2, r3
 8009d10:	f1c5 0520 	rsb	r5, r5, #32
 8009d14:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009d18:	f000 fa80 	bl	800a21c <__hi0bits>
 8009d1c:	42a8      	cmp	r0, r5
 8009d1e:	dbe6      	blt.n	8009cee <__gethex+0x422>
 8009d20:	e7ee      	b.n	8009d00 <__gethex+0x434>
 8009d22:	bf00      	nop
 8009d24:	0800b759 	.word	0x0800b759

08009d28 <L_shift>:
 8009d28:	f1c2 0208 	rsb	r2, r2, #8
 8009d2c:	0092      	lsls	r2, r2, #2
 8009d2e:	b570      	push	{r4, r5, r6, lr}
 8009d30:	f1c2 0620 	rsb	r6, r2, #32
 8009d34:	6843      	ldr	r3, [r0, #4]
 8009d36:	6804      	ldr	r4, [r0, #0]
 8009d38:	fa03 f506 	lsl.w	r5, r3, r6
 8009d3c:	432c      	orrs	r4, r5
 8009d3e:	40d3      	lsrs	r3, r2
 8009d40:	6004      	str	r4, [r0, #0]
 8009d42:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d46:	4288      	cmp	r0, r1
 8009d48:	d3f4      	bcc.n	8009d34 <L_shift+0xc>
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}

08009d4c <__match>:
 8009d4c:	b530      	push	{r4, r5, lr}
 8009d4e:	6803      	ldr	r3, [r0, #0]
 8009d50:	3301      	adds	r3, #1
 8009d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d56:	b914      	cbnz	r4, 8009d5e <__match+0x12>
 8009d58:	6003      	str	r3, [r0, #0]
 8009d5a:	2001      	movs	r0, #1
 8009d5c:	bd30      	pop	{r4, r5, pc}
 8009d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d66:	2d19      	cmp	r5, #25
 8009d68:	bf98      	it	ls
 8009d6a:	3220      	addls	r2, #32
 8009d6c:	42a2      	cmp	r2, r4
 8009d6e:	d0f0      	beq.n	8009d52 <__match+0x6>
 8009d70:	2000      	movs	r0, #0
 8009d72:	e7f3      	b.n	8009d5c <__match+0x10>

08009d74 <__hexnan>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	680b      	ldr	r3, [r1, #0]
 8009d7a:	6801      	ldr	r1, [r0, #0]
 8009d7c:	115e      	asrs	r6, r3, #5
 8009d7e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d82:	f013 031f 	ands.w	r3, r3, #31
 8009d86:	b087      	sub	sp, #28
 8009d88:	bf18      	it	ne
 8009d8a:	3604      	addne	r6, #4
 8009d8c:	2500      	movs	r5, #0
 8009d8e:	1f37      	subs	r7, r6, #4
 8009d90:	4682      	mov	sl, r0
 8009d92:	4690      	mov	r8, r2
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d9a:	46b9      	mov	r9, r7
 8009d9c:	463c      	mov	r4, r7
 8009d9e:	9502      	str	r5, [sp, #8]
 8009da0:	46ab      	mov	fp, r5
 8009da2:	784a      	ldrb	r2, [r1, #1]
 8009da4:	1c4b      	adds	r3, r1, #1
 8009da6:	9303      	str	r3, [sp, #12]
 8009da8:	b342      	cbz	r2, 8009dfc <__hexnan+0x88>
 8009daa:	4610      	mov	r0, r2
 8009dac:	9105      	str	r1, [sp, #20]
 8009dae:	9204      	str	r2, [sp, #16]
 8009db0:	f7ff fd76 	bl	80098a0 <__hexdig_fun>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d14f      	bne.n	8009e58 <__hexnan+0xe4>
 8009db8:	9a04      	ldr	r2, [sp, #16]
 8009dba:	9905      	ldr	r1, [sp, #20]
 8009dbc:	2a20      	cmp	r2, #32
 8009dbe:	d818      	bhi.n	8009df2 <__hexnan+0x7e>
 8009dc0:	9b02      	ldr	r3, [sp, #8]
 8009dc2:	459b      	cmp	fp, r3
 8009dc4:	dd13      	ble.n	8009dee <__hexnan+0x7a>
 8009dc6:	454c      	cmp	r4, r9
 8009dc8:	d206      	bcs.n	8009dd8 <__hexnan+0x64>
 8009dca:	2d07      	cmp	r5, #7
 8009dcc:	dc04      	bgt.n	8009dd8 <__hexnan+0x64>
 8009dce:	462a      	mov	r2, r5
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f7ff ffa8 	bl	8009d28 <L_shift>
 8009dd8:	4544      	cmp	r4, r8
 8009dda:	d950      	bls.n	8009e7e <__hexnan+0x10a>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f1a4 0904 	sub.w	r9, r4, #4
 8009de2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009de6:	f8cd b008 	str.w	fp, [sp, #8]
 8009dea:	464c      	mov	r4, r9
 8009dec:	461d      	mov	r5, r3
 8009dee:	9903      	ldr	r1, [sp, #12]
 8009df0:	e7d7      	b.n	8009da2 <__hexnan+0x2e>
 8009df2:	2a29      	cmp	r2, #41	; 0x29
 8009df4:	d155      	bne.n	8009ea2 <__hexnan+0x12e>
 8009df6:	3102      	adds	r1, #2
 8009df8:	f8ca 1000 	str.w	r1, [sl]
 8009dfc:	f1bb 0f00 	cmp.w	fp, #0
 8009e00:	d04f      	beq.n	8009ea2 <__hexnan+0x12e>
 8009e02:	454c      	cmp	r4, r9
 8009e04:	d206      	bcs.n	8009e14 <__hexnan+0xa0>
 8009e06:	2d07      	cmp	r5, #7
 8009e08:	dc04      	bgt.n	8009e14 <__hexnan+0xa0>
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f7ff ff8a 	bl	8009d28 <L_shift>
 8009e14:	4544      	cmp	r4, r8
 8009e16:	d934      	bls.n	8009e82 <__hexnan+0x10e>
 8009e18:	f1a8 0204 	sub.w	r2, r8, #4
 8009e1c:	4623      	mov	r3, r4
 8009e1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e22:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e26:	429f      	cmp	r7, r3
 8009e28:	d2f9      	bcs.n	8009e1e <__hexnan+0xaa>
 8009e2a:	1b3b      	subs	r3, r7, r4
 8009e2c:	f023 0303 	bic.w	r3, r3, #3
 8009e30:	3304      	adds	r3, #4
 8009e32:	3e03      	subs	r6, #3
 8009e34:	3401      	adds	r4, #1
 8009e36:	42a6      	cmp	r6, r4
 8009e38:	bf38      	it	cc
 8009e3a:	2304      	movcc	r3, #4
 8009e3c:	4443      	add	r3, r8
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f843 2b04 	str.w	r2, [r3], #4
 8009e44:	429f      	cmp	r7, r3
 8009e46:	d2fb      	bcs.n	8009e40 <__hexnan+0xcc>
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	b91b      	cbnz	r3, 8009e54 <__hexnan+0xe0>
 8009e4c:	4547      	cmp	r7, r8
 8009e4e:	d126      	bne.n	8009e9e <__hexnan+0x12a>
 8009e50:	2301      	movs	r3, #1
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	2005      	movs	r0, #5
 8009e56:	e025      	b.n	8009ea4 <__hexnan+0x130>
 8009e58:	3501      	adds	r5, #1
 8009e5a:	2d08      	cmp	r5, #8
 8009e5c:	f10b 0b01 	add.w	fp, fp, #1
 8009e60:	dd06      	ble.n	8009e70 <__hexnan+0xfc>
 8009e62:	4544      	cmp	r4, r8
 8009e64:	d9c3      	bls.n	8009dee <__hexnan+0x7a>
 8009e66:	2300      	movs	r3, #0
 8009e68:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e6c:	2501      	movs	r5, #1
 8009e6e:	3c04      	subs	r4, #4
 8009e70:	6822      	ldr	r2, [r4, #0]
 8009e72:	f000 000f 	and.w	r0, r0, #15
 8009e76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e7a:	6020      	str	r0, [r4, #0]
 8009e7c:	e7b7      	b.n	8009dee <__hexnan+0x7a>
 8009e7e:	2508      	movs	r5, #8
 8009e80:	e7b5      	b.n	8009dee <__hexnan+0x7a>
 8009e82:	9b01      	ldr	r3, [sp, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0df      	beq.n	8009e48 <__hexnan+0xd4>
 8009e88:	f1c3 0320 	rsb	r3, r3, #32
 8009e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e90:	40da      	lsrs	r2, r3
 8009e92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e96:	4013      	ands	r3, r2
 8009e98:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e9c:	e7d4      	b.n	8009e48 <__hexnan+0xd4>
 8009e9e:	3f04      	subs	r7, #4
 8009ea0:	e7d2      	b.n	8009e48 <__hexnan+0xd4>
 8009ea2:	2004      	movs	r0, #4
 8009ea4:	b007      	add	sp, #28
 8009ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009eac <malloc>:
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <malloc+0xc>)
 8009eae:	4601      	mov	r1, r0
 8009eb0:	6818      	ldr	r0, [r3, #0]
 8009eb2:	f000 b823 	b.w	8009efc <_malloc_r>
 8009eb6:	bf00      	nop
 8009eb8:	200001e0 	.word	0x200001e0

08009ebc <sbrk_aligned>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	4e0e      	ldr	r6, [pc, #56]	; (8009ef8 <sbrk_aligned+0x3c>)
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	6831      	ldr	r1, [r6, #0]
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	b911      	cbnz	r1, 8009ece <sbrk_aligned+0x12>
 8009ec8:	f000 ff90 	bl	800adec <_sbrk_r>
 8009ecc:	6030      	str	r0, [r6, #0]
 8009ece:	4621      	mov	r1, r4
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f000 ff8b 	bl	800adec <_sbrk_r>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d00a      	beq.n	8009ef0 <sbrk_aligned+0x34>
 8009eda:	1cc4      	adds	r4, r0, #3
 8009edc:	f024 0403 	bic.w	r4, r4, #3
 8009ee0:	42a0      	cmp	r0, r4
 8009ee2:	d007      	beq.n	8009ef4 <sbrk_aligned+0x38>
 8009ee4:	1a21      	subs	r1, r4, r0
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 ff80 	bl	800adec <_sbrk_r>
 8009eec:	3001      	adds	r0, #1
 8009eee:	d101      	bne.n	8009ef4 <sbrk_aligned+0x38>
 8009ef0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}
 8009ef8:	2000449c 	.word	0x2000449c

08009efc <_malloc_r>:
 8009efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f00:	1ccd      	adds	r5, r1, #3
 8009f02:	f025 0503 	bic.w	r5, r5, #3
 8009f06:	3508      	adds	r5, #8
 8009f08:	2d0c      	cmp	r5, #12
 8009f0a:	bf38      	it	cc
 8009f0c:	250c      	movcc	r5, #12
 8009f0e:	2d00      	cmp	r5, #0
 8009f10:	4607      	mov	r7, r0
 8009f12:	db01      	blt.n	8009f18 <_malloc_r+0x1c>
 8009f14:	42a9      	cmp	r1, r5
 8009f16:	d905      	bls.n	8009f24 <_malloc_r+0x28>
 8009f18:	230c      	movs	r3, #12
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	2600      	movs	r6, #0
 8009f1e:	4630      	mov	r0, r6
 8009f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ff8 <_malloc_r+0xfc>
 8009f28:	f000 f87a 	bl	800a020 <__malloc_lock>
 8009f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f30:	461c      	mov	r4, r3
 8009f32:	bb5c      	cbnz	r4, 8009f8c <_malloc_r+0x90>
 8009f34:	4629      	mov	r1, r5
 8009f36:	4638      	mov	r0, r7
 8009f38:	f7ff ffc0 	bl	8009ebc <sbrk_aligned>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	4604      	mov	r4, r0
 8009f40:	d155      	bne.n	8009fee <_malloc_r+0xf2>
 8009f42:	f8d8 4000 	ldr.w	r4, [r8]
 8009f46:	4626      	mov	r6, r4
 8009f48:	2e00      	cmp	r6, #0
 8009f4a:	d145      	bne.n	8009fd8 <_malloc_r+0xdc>
 8009f4c:	2c00      	cmp	r4, #0
 8009f4e:	d048      	beq.n	8009fe2 <_malloc_r+0xe6>
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	4631      	mov	r1, r6
 8009f54:	4638      	mov	r0, r7
 8009f56:	eb04 0903 	add.w	r9, r4, r3
 8009f5a:	f000 ff47 	bl	800adec <_sbrk_r>
 8009f5e:	4581      	cmp	r9, r0
 8009f60:	d13f      	bne.n	8009fe2 <_malloc_r+0xe6>
 8009f62:	6821      	ldr	r1, [r4, #0]
 8009f64:	1a6d      	subs	r5, r5, r1
 8009f66:	4629      	mov	r1, r5
 8009f68:	4638      	mov	r0, r7
 8009f6a:	f7ff ffa7 	bl	8009ebc <sbrk_aligned>
 8009f6e:	3001      	adds	r0, #1
 8009f70:	d037      	beq.n	8009fe2 <_malloc_r+0xe6>
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	442b      	add	r3, r5
 8009f76:	6023      	str	r3, [r4, #0]
 8009f78:	f8d8 3000 	ldr.w	r3, [r8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d038      	beq.n	8009ff2 <_malloc_r+0xf6>
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	42a2      	cmp	r2, r4
 8009f84:	d12b      	bne.n	8009fde <_malloc_r+0xe2>
 8009f86:	2200      	movs	r2, #0
 8009f88:	605a      	str	r2, [r3, #4]
 8009f8a:	e00f      	b.n	8009fac <_malloc_r+0xb0>
 8009f8c:	6822      	ldr	r2, [r4, #0]
 8009f8e:	1b52      	subs	r2, r2, r5
 8009f90:	d41f      	bmi.n	8009fd2 <_malloc_r+0xd6>
 8009f92:	2a0b      	cmp	r2, #11
 8009f94:	d917      	bls.n	8009fc6 <_malloc_r+0xca>
 8009f96:	1961      	adds	r1, r4, r5
 8009f98:	42a3      	cmp	r3, r4
 8009f9a:	6025      	str	r5, [r4, #0]
 8009f9c:	bf18      	it	ne
 8009f9e:	6059      	strne	r1, [r3, #4]
 8009fa0:	6863      	ldr	r3, [r4, #4]
 8009fa2:	bf08      	it	eq
 8009fa4:	f8c8 1000 	streq.w	r1, [r8]
 8009fa8:	5162      	str	r2, [r4, r5]
 8009faa:	604b      	str	r3, [r1, #4]
 8009fac:	4638      	mov	r0, r7
 8009fae:	f104 060b 	add.w	r6, r4, #11
 8009fb2:	f000 f83b 	bl	800a02c <__malloc_unlock>
 8009fb6:	f026 0607 	bic.w	r6, r6, #7
 8009fba:	1d23      	adds	r3, r4, #4
 8009fbc:	1af2      	subs	r2, r6, r3
 8009fbe:	d0ae      	beq.n	8009f1e <_malloc_r+0x22>
 8009fc0:	1b9b      	subs	r3, r3, r6
 8009fc2:	50a3      	str	r3, [r4, r2]
 8009fc4:	e7ab      	b.n	8009f1e <_malloc_r+0x22>
 8009fc6:	42a3      	cmp	r3, r4
 8009fc8:	6862      	ldr	r2, [r4, #4]
 8009fca:	d1dd      	bne.n	8009f88 <_malloc_r+0x8c>
 8009fcc:	f8c8 2000 	str.w	r2, [r8]
 8009fd0:	e7ec      	b.n	8009fac <_malloc_r+0xb0>
 8009fd2:	4623      	mov	r3, r4
 8009fd4:	6864      	ldr	r4, [r4, #4]
 8009fd6:	e7ac      	b.n	8009f32 <_malloc_r+0x36>
 8009fd8:	4634      	mov	r4, r6
 8009fda:	6876      	ldr	r6, [r6, #4]
 8009fdc:	e7b4      	b.n	8009f48 <_malloc_r+0x4c>
 8009fde:	4613      	mov	r3, r2
 8009fe0:	e7cc      	b.n	8009f7c <_malloc_r+0x80>
 8009fe2:	230c      	movs	r3, #12
 8009fe4:	603b      	str	r3, [r7, #0]
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	f000 f820 	bl	800a02c <__malloc_unlock>
 8009fec:	e797      	b.n	8009f1e <_malloc_r+0x22>
 8009fee:	6025      	str	r5, [r4, #0]
 8009ff0:	e7dc      	b.n	8009fac <_malloc_r+0xb0>
 8009ff2:	605b      	str	r3, [r3, #4]
 8009ff4:	deff      	udf	#255	; 0xff
 8009ff6:	bf00      	nop
 8009ff8:	20004498 	.word	0x20004498

08009ffc <__ascii_mbtowc>:
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	b901      	cbnz	r1, 800a002 <__ascii_mbtowc+0x6>
 800a000:	a901      	add	r1, sp, #4
 800a002:	b142      	cbz	r2, 800a016 <__ascii_mbtowc+0x1a>
 800a004:	b14b      	cbz	r3, 800a01a <__ascii_mbtowc+0x1e>
 800a006:	7813      	ldrb	r3, [r2, #0]
 800a008:	600b      	str	r3, [r1, #0]
 800a00a:	7812      	ldrb	r2, [r2, #0]
 800a00c:	1e10      	subs	r0, r2, #0
 800a00e:	bf18      	it	ne
 800a010:	2001      	movne	r0, #1
 800a012:	b002      	add	sp, #8
 800a014:	4770      	bx	lr
 800a016:	4610      	mov	r0, r2
 800a018:	e7fb      	b.n	800a012 <__ascii_mbtowc+0x16>
 800a01a:	f06f 0001 	mvn.w	r0, #1
 800a01e:	e7f8      	b.n	800a012 <__ascii_mbtowc+0x16>

0800a020 <__malloc_lock>:
 800a020:	4801      	ldr	r0, [pc, #4]	; (800a028 <__malloc_lock+0x8>)
 800a022:	f7fe bd0b 	b.w	8008a3c <__retarget_lock_acquire_recursive>
 800a026:	bf00      	nop
 800a028:	20004494 	.word	0x20004494

0800a02c <__malloc_unlock>:
 800a02c:	4801      	ldr	r0, [pc, #4]	; (800a034 <__malloc_unlock+0x8>)
 800a02e:	f7fe bd06 	b.w	8008a3e <__retarget_lock_release_recursive>
 800a032:	bf00      	nop
 800a034:	20004494 	.word	0x20004494

0800a038 <_Balloc>:
 800a038:	b570      	push	{r4, r5, r6, lr}
 800a03a:	69c6      	ldr	r6, [r0, #28]
 800a03c:	4604      	mov	r4, r0
 800a03e:	460d      	mov	r5, r1
 800a040:	b976      	cbnz	r6, 800a060 <_Balloc+0x28>
 800a042:	2010      	movs	r0, #16
 800a044:	f7ff ff32 	bl	8009eac <malloc>
 800a048:	4602      	mov	r2, r0
 800a04a:	61e0      	str	r0, [r4, #28]
 800a04c:	b920      	cbnz	r0, 800a058 <_Balloc+0x20>
 800a04e:	4b18      	ldr	r3, [pc, #96]	; (800a0b0 <_Balloc+0x78>)
 800a050:	4818      	ldr	r0, [pc, #96]	; (800a0b4 <_Balloc+0x7c>)
 800a052:	216b      	movs	r1, #107	; 0x6b
 800a054:	f000 feda 	bl	800ae0c <__assert_func>
 800a058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a05c:	6006      	str	r6, [r0, #0]
 800a05e:	60c6      	str	r6, [r0, #12]
 800a060:	69e6      	ldr	r6, [r4, #28]
 800a062:	68f3      	ldr	r3, [r6, #12]
 800a064:	b183      	cbz	r3, 800a088 <_Balloc+0x50>
 800a066:	69e3      	ldr	r3, [r4, #28]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a06e:	b9b8      	cbnz	r0, 800a0a0 <_Balloc+0x68>
 800a070:	2101      	movs	r1, #1
 800a072:	fa01 f605 	lsl.w	r6, r1, r5
 800a076:	1d72      	adds	r2, r6, #5
 800a078:	0092      	lsls	r2, r2, #2
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 fee4 	bl	800ae48 <_calloc_r>
 800a080:	b160      	cbz	r0, 800a09c <_Balloc+0x64>
 800a082:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a086:	e00e      	b.n	800a0a6 <_Balloc+0x6e>
 800a088:	2221      	movs	r2, #33	; 0x21
 800a08a:	2104      	movs	r1, #4
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 fedb 	bl	800ae48 <_calloc_r>
 800a092:	69e3      	ldr	r3, [r4, #28]
 800a094:	60f0      	str	r0, [r6, #12]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1e4      	bne.n	800a066 <_Balloc+0x2e>
 800a09c:	2000      	movs	r0, #0
 800a09e:	bd70      	pop	{r4, r5, r6, pc}
 800a0a0:	6802      	ldr	r2, [r0, #0]
 800a0a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0ac:	e7f7      	b.n	800a09e <_Balloc+0x66>
 800a0ae:	bf00      	nop
 800a0b0:	0800b6ea 	.word	0x0800b6ea
 800a0b4:	0800b7ca 	.word	0x0800b7ca

0800a0b8 <_Bfree>:
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	69c6      	ldr	r6, [r0, #28]
 800a0bc:	4605      	mov	r5, r0
 800a0be:	460c      	mov	r4, r1
 800a0c0:	b976      	cbnz	r6, 800a0e0 <_Bfree+0x28>
 800a0c2:	2010      	movs	r0, #16
 800a0c4:	f7ff fef2 	bl	8009eac <malloc>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	61e8      	str	r0, [r5, #28]
 800a0cc:	b920      	cbnz	r0, 800a0d8 <_Bfree+0x20>
 800a0ce:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <_Bfree+0x3c>)
 800a0d0:	4809      	ldr	r0, [pc, #36]	; (800a0f8 <_Bfree+0x40>)
 800a0d2:	218f      	movs	r1, #143	; 0x8f
 800a0d4:	f000 fe9a 	bl	800ae0c <__assert_func>
 800a0d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0dc:	6006      	str	r6, [r0, #0]
 800a0de:	60c6      	str	r6, [r0, #12]
 800a0e0:	b13c      	cbz	r4, 800a0f2 <_Bfree+0x3a>
 800a0e2:	69eb      	ldr	r3, [r5, #28]
 800a0e4:	6862      	ldr	r2, [r4, #4]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0ec:	6021      	str	r1, [r4, #0]
 800a0ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}
 800a0f4:	0800b6ea 	.word	0x0800b6ea
 800a0f8:	0800b7ca 	.word	0x0800b7ca

0800a0fc <__multadd>:
 800a0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a100:	690d      	ldr	r5, [r1, #16]
 800a102:	4607      	mov	r7, r0
 800a104:	460c      	mov	r4, r1
 800a106:	461e      	mov	r6, r3
 800a108:	f101 0c14 	add.w	ip, r1, #20
 800a10c:	2000      	movs	r0, #0
 800a10e:	f8dc 3000 	ldr.w	r3, [ip]
 800a112:	b299      	uxth	r1, r3
 800a114:	fb02 6101 	mla	r1, r2, r1, r6
 800a118:	0c1e      	lsrs	r6, r3, #16
 800a11a:	0c0b      	lsrs	r3, r1, #16
 800a11c:	fb02 3306 	mla	r3, r2, r6, r3
 800a120:	b289      	uxth	r1, r1
 800a122:	3001      	adds	r0, #1
 800a124:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a128:	4285      	cmp	r5, r0
 800a12a:	f84c 1b04 	str.w	r1, [ip], #4
 800a12e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a132:	dcec      	bgt.n	800a10e <__multadd+0x12>
 800a134:	b30e      	cbz	r6, 800a17a <__multadd+0x7e>
 800a136:	68a3      	ldr	r3, [r4, #8]
 800a138:	42ab      	cmp	r3, r5
 800a13a:	dc19      	bgt.n	800a170 <__multadd+0x74>
 800a13c:	6861      	ldr	r1, [r4, #4]
 800a13e:	4638      	mov	r0, r7
 800a140:	3101      	adds	r1, #1
 800a142:	f7ff ff79 	bl	800a038 <_Balloc>
 800a146:	4680      	mov	r8, r0
 800a148:	b928      	cbnz	r0, 800a156 <__multadd+0x5a>
 800a14a:	4602      	mov	r2, r0
 800a14c:	4b0c      	ldr	r3, [pc, #48]	; (800a180 <__multadd+0x84>)
 800a14e:	480d      	ldr	r0, [pc, #52]	; (800a184 <__multadd+0x88>)
 800a150:	21ba      	movs	r1, #186	; 0xba
 800a152:	f000 fe5b 	bl	800ae0c <__assert_func>
 800a156:	6922      	ldr	r2, [r4, #16]
 800a158:	3202      	adds	r2, #2
 800a15a:	f104 010c 	add.w	r1, r4, #12
 800a15e:	0092      	lsls	r2, r2, #2
 800a160:	300c      	adds	r0, #12
 800a162:	f7fe fc6d 	bl	8008a40 <memcpy>
 800a166:	4621      	mov	r1, r4
 800a168:	4638      	mov	r0, r7
 800a16a:	f7ff ffa5 	bl	800a0b8 <_Bfree>
 800a16e:	4644      	mov	r4, r8
 800a170:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a174:	3501      	adds	r5, #1
 800a176:	615e      	str	r6, [r3, #20]
 800a178:	6125      	str	r5, [r4, #16]
 800a17a:	4620      	mov	r0, r4
 800a17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a180:	0800b759 	.word	0x0800b759
 800a184:	0800b7ca 	.word	0x0800b7ca

0800a188 <__s2b>:
 800a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	460c      	mov	r4, r1
 800a18e:	4615      	mov	r5, r2
 800a190:	461f      	mov	r7, r3
 800a192:	2209      	movs	r2, #9
 800a194:	3308      	adds	r3, #8
 800a196:	4606      	mov	r6, r0
 800a198:	fb93 f3f2 	sdiv	r3, r3, r2
 800a19c:	2100      	movs	r1, #0
 800a19e:	2201      	movs	r2, #1
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	db09      	blt.n	800a1b8 <__s2b+0x30>
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff ff47 	bl	800a038 <_Balloc>
 800a1aa:	b940      	cbnz	r0, 800a1be <__s2b+0x36>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	4b19      	ldr	r3, [pc, #100]	; (800a214 <__s2b+0x8c>)
 800a1b0:	4819      	ldr	r0, [pc, #100]	; (800a218 <__s2b+0x90>)
 800a1b2:	21d3      	movs	r1, #211	; 0xd3
 800a1b4:	f000 fe2a 	bl	800ae0c <__assert_func>
 800a1b8:	0052      	lsls	r2, r2, #1
 800a1ba:	3101      	adds	r1, #1
 800a1bc:	e7f0      	b.n	800a1a0 <__s2b+0x18>
 800a1be:	9b08      	ldr	r3, [sp, #32]
 800a1c0:	6143      	str	r3, [r0, #20]
 800a1c2:	2d09      	cmp	r5, #9
 800a1c4:	f04f 0301 	mov.w	r3, #1
 800a1c8:	6103      	str	r3, [r0, #16]
 800a1ca:	dd16      	ble.n	800a1fa <__s2b+0x72>
 800a1cc:	f104 0909 	add.w	r9, r4, #9
 800a1d0:	46c8      	mov	r8, r9
 800a1d2:	442c      	add	r4, r5
 800a1d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1d8:	4601      	mov	r1, r0
 800a1da:	3b30      	subs	r3, #48	; 0x30
 800a1dc:	220a      	movs	r2, #10
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f7ff ff8c 	bl	800a0fc <__multadd>
 800a1e4:	45a0      	cmp	r8, r4
 800a1e6:	d1f5      	bne.n	800a1d4 <__s2b+0x4c>
 800a1e8:	f1a5 0408 	sub.w	r4, r5, #8
 800a1ec:	444c      	add	r4, r9
 800a1ee:	1b2d      	subs	r5, r5, r4
 800a1f0:	1963      	adds	r3, r4, r5
 800a1f2:	42bb      	cmp	r3, r7
 800a1f4:	db04      	blt.n	800a200 <__s2b+0x78>
 800a1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1fa:	340a      	adds	r4, #10
 800a1fc:	2509      	movs	r5, #9
 800a1fe:	e7f6      	b.n	800a1ee <__s2b+0x66>
 800a200:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a204:	4601      	mov	r1, r0
 800a206:	3b30      	subs	r3, #48	; 0x30
 800a208:	220a      	movs	r2, #10
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7ff ff76 	bl	800a0fc <__multadd>
 800a210:	e7ee      	b.n	800a1f0 <__s2b+0x68>
 800a212:	bf00      	nop
 800a214:	0800b759 	.word	0x0800b759
 800a218:	0800b7ca 	.word	0x0800b7ca

0800a21c <__hi0bits>:
 800a21c:	0c03      	lsrs	r3, r0, #16
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	b9d3      	cbnz	r3, 800a258 <__hi0bits+0x3c>
 800a222:	0400      	lsls	r0, r0, #16
 800a224:	2310      	movs	r3, #16
 800a226:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a22a:	bf04      	itt	eq
 800a22c:	0200      	lsleq	r0, r0, #8
 800a22e:	3308      	addeq	r3, #8
 800a230:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a234:	bf04      	itt	eq
 800a236:	0100      	lsleq	r0, r0, #4
 800a238:	3304      	addeq	r3, #4
 800a23a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a23e:	bf04      	itt	eq
 800a240:	0080      	lsleq	r0, r0, #2
 800a242:	3302      	addeq	r3, #2
 800a244:	2800      	cmp	r0, #0
 800a246:	db05      	blt.n	800a254 <__hi0bits+0x38>
 800a248:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a24c:	f103 0301 	add.w	r3, r3, #1
 800a250:	bf08      	it	eq
 800a252:	2320      	moveq	r3, #32
 800a254:	4618      	mov	r0, r3
 800a256:	4770      	bx	lr
 800a258:	2300      	movs	r3, #0
 800a25a:	e7e4      	b.n	800a226 <__hi0bits+0xa>

0800a25c <__lo0bits>:
 800a25c:	6803      	ldr	r3, [r0, #0]
 800a25e:	f013 0207 	ands.w	r2, r3, #7
 800a262:	d00c      	beq.n	800a27e <__lo0bits+0x22>
 800a264:	07d9      	lsls	r1, r3, #31
 800a266:	d422      	bmi.n	800a2ae <__lo0bits+0x52>
 800a268:	079a      	lsls	r2, r3, #30
 800a26a:	bf49      	itett	mi
 800a26c:	085b      	lsrmi	r3, r3, #1
 800a26e:	089b      	lsrpl	r3, r3, #2
 800a270:	6003      	strmi	r3, [r0, #0]
 800a272:	2201      	movmi	r2, #1
 800a274:	bf5c      	itt	pl
 800a276:	6003      	strpl	r3, [r0, #0]
 800a278:	2202      	movpl	r2, #2
 800a27a:	4610      	mov	r0, r2
 800a27c:	4770      	bx	lr
 800a27e:	b299      	uxth	r1, r3
 800a280:	b909      	cbnz	r1, 800a286 <__lo0bits+0x2a>
 800a282:	0c1b      	lsrs	r3, r3, #16
 800a284:	2210      	movs	r2, #16
 800a286:	b2d9      	uxtb	r1, r3
 800a288:	b909      	cbnz	r1, 800a28e <__lo0bits+0x32>
 800a28a:	3208      	adds	r2, #8
 800a28c:	0a1b      	lsrs	r3, r3, #8
 800a28e:	0719      	lsls	r1, r3, #28
 800a290:	bf04      	itt	eq
 800a292:	091b      	lsreq	r3, r3, #4
 800a294:	3204      	addeq	r2, #4
 800a296:	0799      	lsls	r1, r3, #30
 800a298:	bf04      	itt	eq
 800a29a:	089b      	lsreq	r3, r3, #2
 800a29c:	3202      	addeq	r2, #2
 800a29e:	07d9      	lsls	r1, r3, #31
 800a2a0:	d403      	bmi.n	800a2aa <__lo0bits+0x4e>
 800a2a2:	085b      	lsrs	r3, r3, #1
 800a2a4:	f102 0201 	add.w	r2, r2, #1
 800a2a8:	d003      	beq.n	800a2b2 <__lo0bits+0x56>
 800a2aa:	6003      	str	r3, [r0, #0]
 800a2ac:	e7e5      	b.n	800a27a <__lo0bits+0x1e>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	e7e3      	b.n	800a27a <__lo0bits+0x1e>
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	e7e1      	b.n	800a27a <__lo0bits+0x1e>
	...

0800a2b8 <__i2b>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	2101      	movs	r1, #1
 800a2be:	f7ff febb 	bl	800a038 <_Balloc>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <__i2b+0x1a>
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <__i2b+0x24>)
 800a2c8:	4805      	ldr	r0, [pc, #20]	; (800a2e0 <__i2b+0x28>)
 800a2ca:	f240 1145 	movw	r1, #325	; 0x145
 800a2ce:	f000 fd9d 	bl	800ae0c <__assert_func>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	6144      	str	r4, [r0, #20]
 800a2d6:	6103      	str	r3, [r0, #16]
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	bf00      	nop
 800a2dc:	0800b759 	.word	0x0800b759
 800a2e0:	0800b7ca 	.word	0x0800b7ca

0800a2e4 <__multiply>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	4691      	mov	r9, r2
 800a2ea:	690a      	ldr	r2, [r1, #16]
 800a2ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	bfb8      	it	lt
 800a2f4:	460b      	movlt	r3, r1
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	bfbc      	itt	lt
 800a2fa:	464c      	movlt	r4, r9
 800a2fc:	4699      	movlt	r9, r3
 800a2fe:	6927      	ldr	r7, [r4, #16]
 800a300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a304:	68a3      	ldr	r3, [r4, #8]
 800a306:	6861      	ldr	r1, [r4, #4]
 800a308:	eb07 060a 	add.w	r6, r7, sl
 800a30c:	42b3      	cmp	r3, r6
 800a30e:	b085      	sub	sp, #20
 800a310:	bfb8      	it	lt
 800a312:	3101      	addlt	r1, #1
 800a314:	f7ff fe90 	bl	800a038 <_Balloc>
 800a318:	b930      	cbnz	r0, 800a328 <__multiply+0x44>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b44      	ldr	r3, [pc, #272]	; (800a430 <__multiply+0x14c>)
 800a31e:	4845      	ldr	r0, [pc, #276]	; (800a434 <__multiply+0x150>)
 800a320:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a324:	f000 fd72 	bl	800ae0c <__assert_func>
 800a328:	f100 0514 	add.w	r5, r0, #20
 800a32c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a330:	462b      	mov	r3, r5
 800a332:	2200      	movs	r2, #0
 800a334:	4543      	cmp	r3, r8
 800a336:	d321      	bcc.n	800a37c <__multiply+0x98>
 800a338:	f104 0314 	add.w	r3, r4, #20
 800a33c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a340:	f109 0314 	add.w	r3, r9, #20
 800a344:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a348:	9202      	str	r2, [sp, #8]
 800a34a:	1b3a      	subs	r2, r7, r4
 800a34c:	3a15      	subs	r2, #21
 800a34e:	f022 0203 	bic.w	r2, r2, #3
 800a352:	3204      	adds	r2, #4
 800a354:	f104 0115 	add.w	r1, r4, #21
 800a358:	428f      	cmp	r7, r1
 800a35a:	bf38      	it	cc
 800a35c:	2204      	movcc	r2, #4
 800a35e:	9201      	str	r2, [sp, #4]
 800a360:	9a02      	ldr	r2, [sp, #8]
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	429a      	cmp	r2, r3
 800a366:	d80c      	bhi.n	800a382 <__multiply+0x9e>
 800a368:	2e00      	cmp	r6, #0
 800a36a:	dd03      	ble.n	800a374 <__multiply+0x90>
 800a36c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a370:	2b00      	cmp	r3, #0
 800a372:	d05b      	beq.n	800a42c <__multiply+0x148>
 800a374:	6106      	str	r6, [r0, #16]
 800a376:	b005      	add	sp, #20
 800a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37c:	f843 2b04 	str.w	r2, [r3], #4
 800a380:	e7d8      	b.n	800a334 <__multiply+0x50>
 800a382:	f8b3 a000 	ldrh.w	sl, [r3]
 800a386:	f1ba 0f00 	cmp.w	sl, #0
 800a38a:	d024      	beq.n	800a3d6 <__multiply+0xf2>
 800a38c:	f104 0e14 	add.w	lr, r4, #20
 800a390:	46a9      	mov	r9, r5
 800a392:	f04f 0c00 	mov.w	ip, #0
 800a396:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a39a:	f8d9 1000 	ldr.w	r1, [r9]
 800a39e:	fa1f fb82 	uxth.w	fp, r2
 800a3a2:	b289      	uxth	r1, r1
 800a3a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a3b0:	4461      	add	r1, ip
 800a3b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3be:	b289      	uxth	r1, r1
 800a3c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3c4:	4577      	cmp	r7, lr
 800a3c6:	f849 1b04 	str.w	r1, [r9], #4
 800a3ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ce:	d8e2      	bhi.n	800a396 <__multiply+0xb2>
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	f845 c002 	str.w	ip, [r5, r2]
 800a3d6:	9a03      	ldr	r2, [sp, #12]
 800a3d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	f1b9 0f00 	cmp.w	r9, #0
 800a3e2:	d021      	beq.n	800a428 <__multiply+0x144>
 800a3e4:	6829      	ldr	r1, [r5, #0]
 800a3e6:	f104 0c14 	add.w	ip, r4, #20
 800a3ea:	46ae      	mov	lr, r5
 800a3ec:	f04f 0a00 	mov.w	sl, #0
 800a3f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a3f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3f8:	fb09 220b 	mla	r2, r9, fp, r2
 800a3fc:	4452      	add	r2, sl
 800a3fe:	b289      	uxth	r1, r1
 800a400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a404:	f84e 1b04 	str.w	r1, [lr], #4
 800a408:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a40c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a410:	f8be 1000 	ldrh.w	r1, [lr]
 800a414:	fb09 110a 	mla	r1, r9, sl, r1
 800a418:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a41c:	4567      	cmp	r7, ip
 800a41e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a422:	d8e5      	bhi.n	800a3f0 <__multiply+0x10c>
 800a424:	9a01      	ldr	r2, [sp, #4]
 800a426:	50a9      	str	r1, [r5, r2]
 800a428:	3504      	adds	r5, #4
 800a42a:	e799      	b.n	800a360 <__multiply+0x7c>
 800a42c:	3e01      	subs	r6, #1
 800a42e:	e79b      	b.n	800a368 <__multiply+0x84>
 800a430:	0800b759 	.word	0x0800b759
 800a434:	0800b7ca 	.word	0x0800b7ca

0800a438 <__pow5mult>:
 800a438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a43c:	4615      	mov	r5, r2
 800a43e:	f012 0203 	ands.w	r2, r2, #3
 800a442:	4606      	mov	r6, r0
 800a444:	460f      	mov	r7, r1
 800a446:	d007      	beq.n	800a458 <__pow5mult+0x20>
 800a448:	4c25      	ldr	r4, [pc, #148]	; (800a4e0 <__pow5mult+0xa8>)
 800a44a:	3a01      	subs	r2, #1
 800a44c:	2300      	movs	r3, #0
 800a44e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a452:	f7ff fe53 	bl	800a0fc <__multadd>
 800a456:	4607      	mov	r7, r0
 800a458:	10ad      	asrs	r5, r5, #2
 800a45a:	d03d      	beq.n	800a4d8 <__pow5mult+0xa0>
 800a45c:	69f4      	ldr	r4, [r6, #28]
 800a45e:	b97c      	cbnz	r4, 800a480 <__pow5mult+0x48>
 800a460:	2010      	movs	r0, #16
 800a462:	f7ff fd23 	bl	8009eac <malloc>
 800a466:	4602      	mov	r2, r0
 800a468:	61f0      	str	r0, [r6, #28]
 800a46a:	b928      	cbnz	r0, 800a478 <__pow5mult+0x40>
 800a46c:	4b1d      	ldr	r3, [pc, #116]	; (800a4e4 <__pow5mult+0xac>)
 800a46e:	481e      	ldr	r0, [pc, #120]	; (800a4e8 <__pow5mult+0xb0>)
 800a470:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a474:	f000 fcca 	bl	800ae0c <__assert_func>
 800a478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a47c:	6004      	str	r4, [r0, #0]
 800a47e:	60c4      	str	r4, [r0, #12]
 800a480:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a488:	b94c      	cbnz	r4, 800a49e <__pow5mult+0x66>
 800a48a:	f240 2171 	movw	r1, #625	; 0x271
 800a48e:	4630      	mov	r0, r6
 800a490:	f7ff ff12 	bl	800a2b8 <__i2b>
 800a494:	2300      	movs	r3, #0
 800a496:	f8c8 0008 	str.w	r0, [r8, #8]
 800a49a:	4604      	mov	r4, r0
 800a49c:	6003      	str	r3, [r0, #0]
 800a49e:	f04f 0900 	mov.w	r9, #0
 800a4a2:	07eb      	lsls	r3, r5, #31
 800a4a4:	d50a      	bpl.n	800a4bc <__pow5mult+0x84>
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff ff1a 	bl	800a2e4 <__multiply>
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	4680      	mov	r8, r0
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7ff fdff 	bl	800a0b8 <_Bfree>
 800a4ba:	4647      	mov	r7, r8
 800a4bc:	106d      	asrs	r5, r5, #1
 800a4be:	d00b      	beq.n	800a4d8 <__pow5mult+0xa0>
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	b938      	cbnz	r0, 800a4d4 <__pow5mult+0x9c>
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	f7ff ff0b 	bl	800a2e4 <__multiply>
 800a4ce:	6020      	str	r0, [r4, #0]
 800a4d0:	f8c0 9000 	str.w	r9, [r0]
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	e7e4      	b.n	800a4a2 <__pow5mult+0x6a>
 800a4d8:	4638      	mov	r0, r7
 800a4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800b918 	.word	0x0800b918
 800a4e4:	0800b6ea 	.word	0x0800b6ea
 800a4e8:	0800b7ca 	.word	0x0800b7ca

0800a4ec <__lshift>:
 800a4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	6849      	ldr	r1, [r1, #4]
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	4607      	mov	r7, r0
 800a4fe:	4691      	mov	r9, r2
 800a500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a504:	f108 0601 	add.w	r6, r8, #1
 800a508:	42b3      	cmp	r3, r6
 800a50a:	db0b      	blt.n	800a524 <__lshift+0x38>
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff fd93 	bl	800a038 <_Balloc>
 800a512:	4605      	mov	r5, r0
 800a514:	b948      	cbnz	r0, 800a52a <__lshift+0x3e>
 800a516:	4602      	mov	r2, r0
 800a518:	4b28      	ldr	r3, [pc, #160]	; (800a5bc <__lshift+0xd0>)
 800a51a:	4829      	ldr	r0, [pc, #164]	; (800a5c0 <__lshift+0xd4>)
 800a51c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a520:	f000 fc74 	bl	800ae0c <__assert_func>
 800a524:	3101      	adds	r1, #1
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	e7ee      	b.n	800a508 <__lshift+0x1c>
 800a52a:	2300      	movs	r3, #0
 800a52c:	f100 0114 	add.w	r1, r0, #20
 800a530:	f100 0210 	add.w	r2, r0, #16
 800a534:	4618      	mov	r0, r3
 800a536:	4553      	cmp	r3, sl
 800a538:	db33      	blt.n	800a5a2 <__lshift+0xb6>
 800a53a:	6920      	ldr	r0, [r4, #16]
 800a53c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a540:	f104 0314 	add.w	r3, r4, #20
 800a544:	f019 091f 	ands.w	r9, r9, #31
 800a548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a54c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a550:	d02b      	beq.n	800a5aa <__lshift+0xbe>
 800a552:	f1c9 0e20 	rsb	lr, r9, #32
 800a556:	468a      	mov	sl, r1
 800a558:	2200      	movs	r2, #0
 800a55a:	6818      	ldr	r0, [r3, #0]
 800a55c:	fa00 f009 	lsl.w	r0, r0, r9
 800a560:	4310      	orrs	r0, r2
 800a562:	f84a 0b04 	str.w	r0, [sl], #4
 800a566:	f853 2b04 	ldr.w	r2, [r3], #4
 800a56a:	459c      	cmp	ip, r3
 800a56c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a570:	d8f3      	bhi.n	800a55a <__lshift+0x6e>
 800a572:	ebac 0304 	sub.w	r3, ip, r4
 800a576:	3b15      	subs	r3, #21
 800a578:	f023 0303 	bic.w	r3, r3, #3
 800a57c:	3304      	adds	r3, #4
 800a57e:	f104 0015 	add.w	r0, r4, #21
 800a582:	4584      	cmp	ip, r0
 800a584:	bf38      	it	cc
 800a586:	2304      	movcc	r3, #4
 800a588:	50ca      	str	r2, [r1, r3]
 800a58a:	b10a      	cbz	r2, 800a590 <__lshift+0xa4>
 800a58c:	f108 0602 	add.w	r6, r8, #2
 800a590:	3e01      	subs	r6, #1
 800a592:	4638      	mov	r0, r7
 800a594:	612e      	str	r6, [r5, #16]
 800a596:	4621      	mov	r1, r4
 800a598:	f7ff fd8e 	bl	800a0b8 <_Bfree>
 800a59c:	4628      	mov	r0, r5
 800a59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	e7c5      	b.n	800a536 <__lshift+0x4a>
 800a5aa:	3904      	subs	r1, #4
 800a5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5b4:	459c      	cmp	ip, r3
 800a5b6:	d8f9      	bhi.n	800a5ac <__lshift+0xc0>
 800a5b8:	e7ea      	b.n	800a590 <__lshift+0xa4>
 800a5ba:	bf00      	nop
 800a5bc:	0800b759 	.word	0x0800b759
 800a5c0:	0800b7ca 	.word	0x0800b7ca

0800a5c4 <__mcmp>:
 800a5c4:	b530      	push	{r4, r5, lr}
 800a5c6:	6902      	ldr	r2, [r0, #16]
 800a5c8:	690c      	ldr	r4, [r1, #16]
 800a5ca:	1b12      	subs	r2, r2, r4
 800a5cc:	d10e      	bne.n	800a5ec <__mcmp+0x28>
 800a5ce:	f100 0314 	add.w	r3, r0, #20
 800a5d2:	3114      	adds	r1, #20
 800a5d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5e4:	42a5      	cmp	r5, r4
 800a5e6:	d003      	beq.n	800a5f0 <__mcmp+0x2c>
 800a5e8:	d305      	bcc.n	800a5f6 <__mcmp+0x32>
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	bd30      	pop	{r4, r5, pc}
 800a5f0:	4283      	cmp	r3, r0
 800a5f2:	d3f3      	bcc.n	800a5dc <__mcmp+0x18>
 800a5f4:	e7fa      	b.n	800a5ec <__mcmp+0x28>
 800a5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5fa:	e7f7      	b.n	800a5ec <__mcmp+0x28>

0800a5fc <__mdiff>:
 800a5fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a600:	460c      	mov	r4, r1
 800a602:	4606      	mov	r6, r0
 800a604:	4611      	mov	r1, r2
 800a606:	4620      	mov	r0, r4
 800a608:	4690      	mov	r8, r2
 800a60a:	f7ff ffdb 	bl	800a5c4 <__mcmp>
 800a60e:	1e05      	subs	r5, r0, #0
 800a610:	d110      	bne.n	800a634 <__mdiff+0x38>
 800a612:	4629      	mov	r1, r5
 800a614:	4630      	mov	r0, r6
 800a616:	f7ff fd0f 	bl	800a038 <_Balloc>
 800a61a:	b930      	cbnz	r0, 800a62a <__mdiff+0x2e>
 800a61c:	4b3a      	ldr	r3, [pc, #232]	; (800a708 <__mdiff+0x10c>)
 800a61e:	4602      	mov	r2, r0
 800a620:	f240 2137 	movw	r1, #567	; 0x237
 800a624:	4839      	ldr	r0, [pc, #228]	; (800a70c <__mdiff+0x110>)
 800a626:	f000 fbf1 	bl	800ae0c <__assert_func>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a634:	bfa4      	itt	ge
 800a636:	4643      	movge	r3, r8
 800a638:	46a0      	movge	r8, r4
 800a63a:	4630      	mov	r0, r6
 800a63c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a640:	bfa6      	itte	ge
 800a642:	461c      	movge	r4, r3
 800a644:	2500      	movge	r5, #0
 800a646:	2501      	movlt	r5, #1
 800a648:	f7ff fcf6 	bl	800a038 <_Balloc>
 800a64c:	b920      	cbnz	r0, 800a658 <__mdiff+0x5c>
 800a64e:	4b2e      	ldr	r3, [pc, #184]	; (800a708 <__mdiff+0x10c>)
 800a650:	4602      	mov	r2, r0
 800a652:	f240 2145 	movw	r1, #581	; 0x245
 800a656:	e7e5      	b.n	800a624 <__mdiff+0x28>
 800a658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a65c:	6926      	ldr	r6, [r4, #16]
 800a65e:	60c5      	str	r5, [r0, #12]
 800a660:	f104 0914 	add.w	r9, r4, #20
 800a664:	f108 0514 	add.w	r5, r8, #20
 800a668:	f100 0e14 	add.w	lr, r0, #20
 800a66c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a674:	f108 0210 	add.w	r2, r8, #16
 800a678:	46f2      	mov	sl, lr
 800a67a:	2100      	movs	r1, #0
 800a67c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a684:	fa11 f88b 	uxtah	r8, r1, fp
 800a688:	b299      	uxth	r1, r3
 800a68a:	0c1b      	lsrs	r3, r3, #16
 800a68c:	eba8 0801 	sub.w	r8, r8, r1
 800a690:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a694:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a698:	fa1f f888 	uxth.w	r8, r8
 800a69c:	1419      	asrs	r1, r3, #16
 800a69e:	454e      	cmp	r6, r9
 800a6a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6a4:	f84a 3b04 	str.w	r3, [sl], #4
 800a6a8:	d8e8      	bhi.n	800a67c <__mdiff+0x80>
 800a6aa:	1b33      	subs	r3, r6, r4
 800a6ac:	3b15      	subs	r3, #21
 800a6ae:	f023 0303 	bic.w	r3, r3, #3
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	3415      	adds	r4, #21
 800a6b6:	42a6      	cmp	r6, r4
 800a6b8:	bf38      	it	cc
 800a6ba:	2304      	movcc	r3, #4
 800a6bc:	441d      	add	r5, r3
 800a6be:	4473      	add	r3, lr
 800a6c0:	469e      	mov	lr, r3
 800a6c2:	462e      	mov	r6, r5
 800a6c4:	4566      	cmp	r6, ip
 800a6c6:	d30e      	bcc.n	800a6e6 <__mdiff+0xea>
 800a6c8:	f10c 0203 	add.w	r2, ip, #3
 800a6cc:	1b52      	subs	r2, r2, r5
 800a6ce:	f022 0203 	bic.w	r2, r2, #3
 800a6d2:	3d03      	subs	r5, #3
 800a6d4:	45ac      	cmp	ip, r5
 800a6d6:	bf38      	it	cc
 800a6d8:	2200      	movcc	r2, #0
 800a6da:	4413      	add	r3, r2
 800a6dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a6e0:	b17a      	cbz	r2, 800a702 <__mdiff+0x106>
 800a6e2:	6107      	str	r7, [r0, #16]
 800a6e4:	e7a4      	b.n	800a630 <__mdiff+0x34>
 800a6e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6ea:	fa11 f288 	uxtah	r2, r1, r8
 800a6ee:	1414      	asrs	r4, r2, #16
 800a6f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6f4:	b292      	uxth	r2, r2
 800a6f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6fa:	f84e 2b04 	str.w	r2, [lr], #4
 800a6fe:	1421      	asrs	r1, r4, #16
 800a700:	e7e0      	b.n	800a6c4 <__mdiff+0xc8>
 800a702:	3f01      	subs	r7, #1
 800a704:	e7ea      	b.n	800a6dc <__mdiff+0xe0>
 800a706:	bf00      	nop
 800a708:	0800b759 	.word	0x0800b759
 800a70c:	0800b7ca 	.word	0x0800b7ca

0800a710 <__ulp>:
 800a710:	b082      	sub	sp, #8
 800a712:	ed8d 0b00 	vstr	d0, [sp]
 800a716:	9a01      	ldr	r2, [sp, #4]
 800a718:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <__ulp+0x48>)
 800a71a:	4013      	ands	r3, r2
 800a71c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc08      	bgt.n	800a736 <__ulp+0x26>
 800a724:	425b      	negs	r3, r3
 800a726:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a72a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a72e:	da04      	bge.n	800a73a <__ulp+0x2a>
 800a730:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a734:	4113      	asrs	r3, r2
 800a736:	2200      	movs	r2, #0
 800a738:	e008      	b.n	800a74c <__ulp+0x3c>
 800a73a:	f1a2 0314 	sub.w	r3, r2, #20
 800a73e:	2b1e      	cmp	r3, #30
 800a740:	bfda      	itte	le
 800a742:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a746:	40da      	lsrle	r2, r3
 800a748:	2201      	movgt	r2, #1
 800a74a:	2300      	movs	r3, #0
 800a74c:	4619      	mov	r1, r3
 800a74e:	4610      	mov	r0, r2
 800a750:	ec41 0b10 	vmov	d0, r0, r1
 800a754:	b002      	add	sp, #8
 800a756:	4770      	bx	lr
 800a758:	7ff00000 	.word	0x7ff00000

0800a75c <__b2d>:
 800a75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a760:	6906      	ldr	r6, [r0, #16]
 800a762:	f100 0814 	add.w	r8, r0, #20
 800a766:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a76a:	1f37      	subs	r7, r6, #4
 800a76c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a770:	4610      	mov	r0, r2
 800a772:	f7ff fd53 	bl	800a21c <__hi0bits>
 800a776:	f1c0 0320 	rsb	r3, r0, #32
 800a77a:	280a      	cmp	r0, #10
 800a77c:	600b      	str	r3, [r1, #0]
 800a77e:	491b      	ldr	r1, [pc, #108]	; (800a7ec <__b2d+0x90>)
 800a780:	dc15      	bgt.n	800a7ae <__b2d+0x52>
 800a782:	f1c0 0c0b 	rsb	ip, r0, #11
 800a786:	fa22 f30c 	lsr.w	r3, r2, ip
 800a78a:	45b8      	cmp	r8, r7
 800a78c:	ea43 0501 	orr.w	r5, r3, r1
 800a790:	bf34      	ite	cc
 800a792:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a796:	2300      	movcs	r3, #0
 800a798:	3015      	adds	r0, #21
 800a79a:	fa02 f000 	lsl.w	r0, r2, r0
 800a79e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a7a2:	4303      	orrs	r3, r0
 800a7a4:	461c      	mov	r4, r3
 800a7a6:	ec45 4b10 	vmov	d0, r4, r5
 800a7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ae:	45b8      	cmp	r8, r7
 800a7b0:	bf3a      	itte	cc
 800a7b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a7b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a7ba:	2300      	movcs	r3, #0
 800a7bc:	380b      	subs	r0, #11
 800a7be:	d012      	beq.n	800a7e6 <__b2d+0x8a>
 800a7c0:	f1c0 0120 	rsb	r1, r0, #32
 800a7c4:	fa23 f401 	lsr.w	r4, r3, r1
 800a7c8:	4082      	lsls	r2, r0
 800a7ca:	4322      	orrs	r2, r4
 800a7cc:	4547      	cmp	r7, r8
 800a7ce:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a7d2:	bf8c      	ite	hi
 800a7d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a7d8:	2200      	movls	r2, #0
 800a7da:	4083      	lsls	r3, r0
 800a7dc:	40ca      	lsrs	r2, r1
 800a7de:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	e7de      	b.n	800a7a4 <__b2d+0x48>
 800a7e6:	ea42 0501 	orr.w	r5, r2, r1
 800a7ea:	e7db      	b.n	800a7a4 <__b2d+0x48>
 800a7ec:	3ff00000 	.word	0x3ff00000

0800a7f0 <__d2b>:
 800a7f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	460f      	mov	r7, r1
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	ec59 8b10 	vmov	r8, r9, d0
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	f7ff fc1b 	bl	800a038 <_Balloc>
 800a802:	4604      	mov	r4, r0
 800a804:	b930      	cbnz	r0, 800a814 <__d2b+0x24>
 800a806:	4602      	mov	r2, r0
 800a808:	4b24      	ldr	r3, [pc, #144]	; (800a89c <__d2b+0xac>)
 800a80a:	4825      	ldr	r0, [pc, #148]	; (800a8a0 <__d2b+0xb0>)
 800a80c:	f240 310f 	movw	r1, #783	; 0x30f
 800a810:	f000 fafc 	bl	800ae0c <__assert_func>
 800a814:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a81c:	bb2d      	cbnz	r5, 800a86a <__d2b+0x7a>
 800a81e:	9301      	str	r3, [sp, #4]
 800a820:	f1b8 0300 	subs.w	r3, r8, #0
 800a824:	d026      	beq.n	800a874 <__d2b+0x84>
 800a826:	4668      	mov	r0, sp
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	f7ff fd17 	bl	800a25c <__lo0bits>
 800a82e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a832:	b1e8      	cbz	r0, 800a870 <__d2b+0x80>
 800a834:	f1c0 0320 	rsb	r3, r0, #32
 800a838:	fa02 f303 	lsl.w	r3, r2, r3
 800a83c:	430b      	orrs	r3, r1
 800a83e:	40c2      	lsrs	r2, r0
 800a840:	6163      	str	r3, [r4, #20]
 800a842:	9201      	str	r2, [sp, #4]
 800a844:	9b01      	ldr	r3, [sp, #4]
 800a846:	61a3      	str	r3, [r4, #24]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	bf14      	ite	ne
 800a84c:	2202      	movne	r2, #2
 800a84e:	2201      	moveq	r2, #1
 800a850:	6122      	str	r2, [r4, #16]
 800a852:	b1bd      	cbz	r5, 800a884 <__d2b+0x94>
 800a854:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a858:	4405      	add	r5, r0
 800a85a:	603d      	str	r5, [r7, #0]
 800a85c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a860:	6030      	str	r0, [r6, #0]
 800a862:	4620      	mov	r0, r4
 800a864:	b003      	add	sp, #12
 800a866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a86a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a86e:	e7d6      	b.n	800a81e <__d2b+0x2e>
 800a870:	6161      	str	r1, [r4, #20]
 800a872:	e7e7      	b.n	800a844 <__d2b+0x54>
 800a874:	a801      	add	r0, sp, #4
 800a876:	f7ff fcf1 	bl	800a25c <__lo0bits>
 800a87a:	9b01      	ldr	r3, [sp, #4]
 800a87c:	6163      	str	r3, [r4, #20]
 800a87e:	3020      	adds	r0, #32
 800a880:	2201      	movs	r2, #1
 800a882:	e7e5      	b.n	800a850 <__d2b+0x60>
 800a884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a88c:	6038      	str	r0, [r7, #0]
 800a88e:	6918      	ldr	r0, [r3, #16]
 800a890:	f7ff fcc4 	bl	800a21c <__hi0bits>
 800a894:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a898:	e7e2      	b.n	800a860 <__d2b+0x70>
 800a89a:	bf00      	nop
 800a89c:	0800b759 	.word	0x0800b759
 800a8a0:	0800b7ca 	.word	0x0800b7ca

0800a8a4 <__ratio>:
 800a8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	4688      	mov	r8, r1
 800a8aa:	4669      	mov	r1, sp
 800a8ac:	4681      	mov	r9, r0
 800a8ae:	f7ff ff55 	bl	800a75c <__b2d>
 800a8b2:	a901      	add	r1, sp, #4
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	ec55 4b10 	vmov	r4, r5, d0
 800a8ba:	f7ff ff4f 	bl	800a75c <__b2d>
 800a8be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8c6:	eba3 0c02 	sub.w	ip, r3, r2
 800a8ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8ce:	1a9b      	subs	r3, r3, r2
 800a8d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a8d4:	ec51 0b10 	vmov	r0, r1, d0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	bfd6      	itet	le
 800a8dc:	460a      	movle	r2, r1
 800a8de:	462a      	movgt	r2, r5
 800a8e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8e4:	468b      	mov	fp, r1
 800a8e6:	462f      	mov	r7, r5
 800a8e8:	bfd4      	ite	le
 800a8ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a8ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	ee10 2a10 	vmov	r2, s0
 800a8f8:	465b      	mov	r3, fp
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	f7f5 ffb6 	bl	800086c <__aeabi_ddiv>
 800a900:	ec41 0b10 	vmov	d0, r0, r1
 800a904:	b003      	add	sp, #12
 800a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a90a <__copybits>:
 800a90a:	3901      	subs	r1, #1
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	1149      	asrs	r1, r1, #5
 800a910:	6914      	ldr	r4, [r2, #16]
 800a912:	3101      	adds	r1, #1
 800a914:	f102 0314 	add.w	r3, r2, #20
 800a918:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a91c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a920:	1f05      	subs	r5, r0, #4
 800a922:	42a3      	cmp	r3, r4
 800a924:	d30c      	bcc.n	800a940 <__copybits+0x36>
 800a926:	1aa3      	subs	r3, r4, r2
 800a928:	3b11      	subs	r3, #17
 800a92a:	f023 0303 	bic.w	r3, r3, #3
 800a92e:	3211      	adds	r2, #17
 800a930:	42a2      	cmp	r2, r4
 800a932:	bf88      	it	hi
 800a934:	2300      	movhi	r3, #0
 800a936:	4418      	add	r0, r3
 800a938:	2300      	movs	r3, #0
 800a93a:	4288      	cmp	r0, r1
 800a93c:	d305      	bcc.n	800a94a <__copybits+0x40>
 800a93e:	bd70      	pop	{r4, r5, r6, pc}
 800a940:	f853 6b04 	ldr.w	r6, [r3], #4
 800a944:	f845 6f04 	str.w	r6, [r5, #4]!
 800a948:	e7eb      	b.n	800a922 <__copybits+0x18>
 800a94a:	f840 3b04 	str.w	r3, [r0], #4
 800a94e:	e7f4      	b.n	800a93a <__copybits+0x30>

0800a950 <__any_on>:
 800a950:	f100 0214 	add.w	r2, r0, #20
 800a954:	6900      	ldr	r0, [r0, #16]
 800a956:	114b      	asrs	r3, r1, #5
 800a958:	4298      	cmp	r0, r3
 800a95a:	b510      	push	{r4, lr}
 800a95c:	db11      	blt.n	800a982 <__any_on+0x32>
 800a95e:	dd0a      	ble.n	800a976 <__any_on+0x26>
 800a960:	f011 011f 	ands.w	r1, r1, #31
 800a964:	d007      	beq.n	800a976 <__any_on+0x26>
 800a966:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a96a:	fa24 f001 	lsr.w	r0, r4, r1
 800a96e:	fa00 f101 	lsl.w	r1, r0, r1
 800a972:	428c      	cmp	r4, r1
 800a974:	d10b      	bne.n	800a98e <__any_on+0x3e>
 800a976:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d803      	bhi.n	800a986 <__any_on+0x36>
 800a97e:	2000      	movs	r0, #0
 800a980:	bd10      	pop	{r4, pc}
 800a982:	4603      	mov	r3, r0
 800a984:	e7f7      	b.n	800a976 <__any_on+0x26>
 800a986:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a98a:	2900      	cmp	r1, #0
 800a98c:	d0f5      	beq.n	800a97a <__any_on+0x2a>
 800a98e:	2001      	movs	r0, #1
 800a990:	e7f6      	b.n	800a980 <__any_on+0x30>

0800a992 <__ascii_wctomb>:
 800a992:	b149      	cbz	r1, 800a9a8 <__ascii_wctomb+0x16>
 800a994:	2aff      	cmp	r2, #255	; 0xff
 800a996:	bf85      	ittet	hi
 800a998:	238a      	movhi	r3, #138	; 0x8a
 800a99a:	6003      	strhi	r3, [r0, #0]
 800a99c:	700a      	strbls	r2, [r1, #0]
 800a99e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9a2:	bf98      	it	ls
 800a9a4:	2001      	movls	r0, #1
 800a9a6:	4770      	bx	lr
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	4770      	bx	lr

0800a9ac <__ssputs_r>:
 800a9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b0:	688e      	ldr	r6, [r1, #8]
 800a9b2:	461f      	mov	r7, r3
 800a9b4:	42be      	cmp	r6, r7
 800a9b6:	680b      	ldr	r3, [r1, #0]
 800a9b8:	4682      	mov	sl, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	4690      	mov	r8, r2
 800a9be:	d82c      	bhi.n	800aa1a <__ssputs_r+0x6e>
 800a9c0:	898a      	ldrh	r2, [r1, #12]
 800a9c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9c6:	d026      	beq.n	800aa16 <__ssputs_r+0x6a>
 800a9c8:	6965      	ldr	r5, [r4, #20]
 800a9ca:	6909      	ldr	r1, [r1, #16]
 800a9cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9d0:	eba3 0901 	sub.w	r9, r3, r1
 800a9d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9d8:	1c7b      	adds	r3, r7, #1
 800a9da:	444b      	add	r3, r9
 800a9dc:	106d      	asrs	r5, r5, #1
 800a9de:	429d      	cmp	r5, r3
 800a9e0:	bf38      	it	cc
 800a9e2:	461d      	movcc	r5, r3
 800a9e4:	0553      	lsls	r3, r2, #21
 800a9e6:	d527      	bpl.n	800aa38 <__ssputs_r+0x8c>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	f7ff fa87 	bl	8009efc <_malloc_r>
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	b360      	cbz	r0, 800aa4c <__ssputs_r+0xa0>
 800a9f2:	6921      	ldr	r1, [r4, #16]
 800a9f4:	464a      	mov	r2, r9
 800a9f6:	f7fe f823 	bl	8008a40 <memcpy>
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa04:	81a3      	strh	r3, [r4, #12]
 800aa06:	6126      	str	r6, [r4, #16]
 800aa08:	6165      	str	r5, [r4, #20]
 800aa0a:	444e      	add	r6, r9
 800aa0c:	eba5 0509 	sub.w	r5, r5, r9
 800aa10:	6026      	str	r6, [r4, #0]
 800aa12:	60a5      	str	r5, [r4, #8]
 800aa14:	463e      	mov	r6, r7
 800aa16:	42be      	cmp	r6, r7
 800aa18:	d900      	bls.n	800aa1c <__ssputs_r+0x70>
 800aa1a:	463e      	mov	r6, r7
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	4632      	mov	r2, r6
 800aa20:	4641      	mov	r1, r8
 800aa22:	f000 f9c9 	bl	800adb8 <memmove>
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	1b9b      	subs	r3, r3, r6
 800aa2a:	60a3      	str	r3, [r4, #8]
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	4433      	add	r3, r6
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	2000      	movs	r0, #0
 800aa34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa38:	462a      	mov	r2, r5
 800aa3a:	f000 fa1b 	bl	800ae74 <_realloc_r>
 800aa3e:	4606      	mov	r6, r0
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d1e0      	bne.n	800aa06 <__ssputs_r+0x5a>
 800aa44:	6921      	ldr	r1, [r4, #16]
 800aa46:	4650      	mov	r0, sl
 800aa48:	f7fe fe8c 	bl	8009764 <_free_r>
 800aa4c:	230c      	movs	r3, #12
 800aa4e:	f8ca 3000 	str.w	r3, [sl]
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5e:	e7e9      	b.n	800aa34 <__ssputs_r+0x88>

0800aa60 <_svfiprintf_r>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	4698      	mov	r8, r3
 800aa66:	898b      	ldrh	r3, [r1, #12]
 800aa68:	061b      	lsls	r3, r3, #24
 800aa6a:	b09d      	sub	sp, #116	; 0x74
 800aa6c:	4607      	mov	r7, r0
 800aa6e:	460d      	mov	r5, r1
 800aa70:	4614      	mov	r4, r2
 800aa72:	d50e      	bpl.n	800aa92 <_svfiprintf_r+0x32>
 800aa74:	690b      	ldr	r3, [r1, #16]
 800aa76:	b963      	cbnz	r3, 800aa92 <_svfiprintf_r+0x32>
 800aa78:	2140      	movs	r1, #64	; 0x40
 800aa7a:	f7ff fa3f 	bl	8009efc <_malloc_r>
 800aa7e:	6028      	str	r0, [r5, #0]
 800aa80:	6128      	str	r0, [r5, #16]
 800aa82:	b920      	cbnz	r0, 800aa8e <_svfiprintf_r+0x2e>
 800aa84:	230c      	movs	r3, #12
 800aa86:	603b      	str	r3, [r7, #0]
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8c:	e0d0      	b.n	800ac30 <_svfiprintf_r+0x1d0>
 800aa8e:	2340      	movs	r3, #64	; 0x40
 800aa90:	616b      	str	r3, [r5, #20]
 800aa92:	2300      	movs	r3, #0
 800aa94:	9309      	str	r3, [sp, #36]	; 0x24
 800aa96:	2320      	movs	r3, #32
 800aa98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaa0:	2330      	movs	r3, #48	; 0x30
 800aaa2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac48 <_svfiprintf_r+0x1e8>
 800aaa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaaa:	f04f 0901 	mov.w	r9, #1
 800aaae:	4623      	mov	r3, r4
 800aab0:	469a      	mov	sl, r3
 800aab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aab6:	b10a      	cbz	r2, 800aabc <_svfiprintf_r+0x5c>
 800aab8:	2a25      	cmp	r2, #37	; 0x25
 800aaba:	d1f9      	bne.n	800aab0 <_svfiprintf_r+0x50>
 800aabc:	ebba 0b04 	subs.w	fp, sl, r4
 800aac0:	d00b      	beq.n	800aada <_svfiprintf_r+0x7a>
 800aac2:	465b      	mov	r3, fp
 800aac4:	4622      	mov	r2, r4
 800aac6:	4629      	mov	r1, r5
 800aac8:	4638      	mov	r0, r7
 800aaca:	f7ff ff6f 	bl	800a9ac <__ssputs_r>
 800aace:	3001      	adds	r0, #1
 800aad0:	f000 80a9 	beq.w	800ac26 <_svfiprintf_r+0x1c6>
 800aad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aad6:	445a      	add	r2, fp
 800aad8:	9209      	str	r2, [sp, #36]	; 0x24
 800aada:	f89a 3000 	ldrb.w	r3, [sl]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 80a1 	beq.w	800ac26 <_svfiprintf_r+0x1c6>
 800aae4:	2300      	movs	r3, #0
 800aae6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaee:	f10a 0a01 	add.w	sl, sl, #1
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	9307      	str	r3, [sp, #28]
 800aaf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aafa:	931a      	str	r3, [sp, #104]	; 0x68
 800aafc:	4654      	mov	r4, sl
 800aafe:	2205      	movs	r2, #5
 800ab00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab04:	4850      	ldr	r0, [pc, #320]	; (800ac48 <_svfiprintf_r+0x1e8>)
 800ab06:	f7f5 fb73 	bl	80001f0 <memchr>
 800ab0a:	9a04      	ldr	r2, [sp, #16]
 800ab0c:	b9d8      	cbnz	r0, 800ab46 <_svfiprintf_r+0xe6>
 800ab0e:	06d0      	lsls	r0, r2, #27
 800ab10:	bf44      	itt	mi
 800ab12:	2320      	movmi	r3, #32
 800ab14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab18:	0711      	lsls	r1, r2, #28
 800ab1a:	bf44      	itt	mi
 800ab1c:	232b      	movmi	r3, #43	; 0x2b
 800ab1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab22:	f89a 3000 	ldrb.w	r3, [sl]
 800ab26:	2b2a      	cmp	r3, #42	; 0x2a
 800ab28:	d015      	beq.n	800ab56 <_svfiprintf_r+0xf6>
 800ab2a:	9a07      	ldr	r2, [sp, #28]
 800ab2c:	4654      	mov	r4, sl
 800ab2e:	2000      	movs	r0, #0
 800ab30:	f04f 0c0a 	mov.w	ip, #10
 800ab34:	4621      	mov	r1, r4
 800ab36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab3a:	3b30      	subs	r3, #48	; 0x30
 800ab3c:	2b09      	cmp	r3, #9
 800ab3e:	d94d      	bls.n	800abdc <_svfiprintf_r+0x17c>
 800ab40:	b1b0      	cbz	r0, 800ab70 <_svfiprintf_r+0x110>
 800ab42:	9207      	str	r2, [sp, #28]
 800ab44:	e014      	b.n	800ab70 <_svfiprintf_r+0x110>
 800ab46:	eba0 0308 	sub.w	r3, r0, r8
 800ab4a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	46a2      	mov	sl, r4
 800ab54:	e7d2      	b.n	800aafc <_svfiprintf_r+0x9c>
 800ab56:	9b03      	ldr	r3, [sp, #12]
 800ab58:	1d19      	adds	r1, r3, #4
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	9103      	str	r1, [sp, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfbb      	ittet	lt
 800ab62:	425b      	neglt	r3, r3
 800ab64:	f042 0202 	orrlt.w	r2, r2, #2
 800ab68:	9307      	strge	r3, [sp, #28]
 800ab6a:	9307      	strlt	r3, [sp, #28]
 800ab6c:	bfb8      	it	lt
 800ab6e:	9204      	strlt	r2, [sp, #16]
 800ab70:	7823      	ldrb	r3, [r4, #0]
 800ab72:	2b2e      	cmp	r3, #46	; 0x2e
 800ab74:	d10c      	bne.n	800ab90 <_svfiprintf_r+0x130>
 800ab76:	7863      	ldrb	r3, [r4, #1]
 800ab78:	2b2a      	cmp	r3, #42	; 0x2a
 800ab7a:	d134      	bne.n	800abe6 <_svfiprintf_r+0x186>
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	1d1a      	adds	r2, r3, #4
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	9203      	str	r2, [sp, #12]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	bfb8      	it	lt
 800ab88:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab8c:	3402      	adds	r4, #2
 800ab8e:	9305      	str	r3, [sp, #20]
 800ab90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac58 <_svfiprintf_r+0x1f8>
 800ab94:	7821      	ldrb	r1, [r4, #0]
 800ab96:	2203      	movs	r2, #3
 800ab98:	4650      	mov	r0, sl
 800ab9a:	f7f5 fb29 	bl	80001f0 <memchr>
 800ab9e:	b138      	cbz	r0, 800abb0 <_svfiprintf_r+0x150>
 800aba0:	9b04      	ldr	r3, [sp, #16]
 800aba2:	eba0 000a 	sub.w	r0, r0, sl
 800aba6:	2240      	movs	r2, #64	; 0x40
 800aba8:	4082      	lsls	r2, r0
 800abaa:	4313      	orrs	r3, r2
 800abac:	3401      	adds	r4, #1
 800abae:	9304      	str	r3, [sp, #16]
 800abb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb4:	4825      	ldr	r0, [pc, #148]	; (800ac4c <_svfiprintf_r+0x1ec>)
 800abb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abba:	2206      	movs	r2, #6
 800abbc:	f7f5 fb18 	bl	80001f0 <memchr>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d038      	beq.n	800ac36 <_svfiprintf_r+0x1d6>
 800abc4:	4b22      	ldr	r3, [pc, #136]	; (800ac50 <_svfiprintf_r+0x1f0>)
 800abc6:	bb1b      	cbnz	r3, 800ac10 <_svfiprintf_r+0x1b0>
 800abc8:	9b03      	ldr	r3, [sp, #12]
 800abca:	3307      	adds	r3, #7
 800abcc:	f023 0307 	bic.w	r3, r3, #7
 800abd0:	3308      	adds	r3, #8
 800abd2:	9303      	str	r3, [sp, #12]
 800abd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd6:	4433      	add	r3, r6
 800abd8:	9309      	str	r3, [sp, #36]	; 0x24
 800abda:	e768      	b.n	800aaae <_svfiprintf_r+0x4e>
 800abdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800abe0:	460c      	mov	r4, r1
 800abe2:	2001      	movs	r0, #1
 800abe4:	e7a6      	b.n	800ab34 <_svfiprintf_r+0xd4>
 800abe6:	2300      	movs	r3, #0
 800abe8:	3401      	adds	r4, #1
 800abea:	9305      	str	r3, [sp, #20]
 800abec:	4619      	mov	r1, r3
 800abee:	f04f 0c0a 	mov.w	ip, #10
 800abf2:	4620      	mov	r0, r4
 800abf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abf8:	3a30      	subs	r2, #48	; 0x30
 800abfa:	2a09      	cmp	r2, #9
 800abfc:	d903      	bls.n	800ac06 <_svfiprintf_r+0x1a6>
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d0c6      	beq.n	800ab90 <_svfiprintf_r+0x130>
 800ac02:	9105      	str	r1, [sp, #20]
 800ac04:	e7c4      	b.n	800ab90 <_svfiprintf_r+0x130>
 800ac06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e7f0      	b.n	800abf2 <_svfiprintf_r+0x192>
 800ac10:	ab03      	add	r3, sp, #12
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	462a      	mov	r2, r5
 800ac16:	4b0f      	ldr	r3, [pc, #60]	; (800ac54 <_svfiprintf_r+0x1f4>)
 800ac18:	a904      	add	r1, sp, #16
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	f7fd f93c 	bl	8007e98 <_printf_float>
 800ac20:	1c42      	adds	r2, r0, #1
 800ac22:	4606      	mov	r6, r0
 800ac24:	d1d6      	bne.n	800abd4 <_svfiprintf_r+0x174>
 800ac26:	89ab      	ldrh	r3, [r5, #12]
 800ac28:	065b      	lsls	r3, r3, #25
 800ac2a:	f53f af2d 	bmi.w	800aa88 <_svfiprintf_r+0x28>
 800ac2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac30:	b01d      	add	sp, #116	; 0x74
 800ac32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac36:	ab03      	add	r3, sp, #12
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <_svfiprintf_r+0x1f4>)
 800ac3e:	a904      	add	r1, sp, #16
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7fd fbcd 	bl	80083e0 <_printf_i>
 800ac46:	e7eb      	b.n	800ac20 <_svfiprintf_r+0x1c0>
 800ac48:	0800b924 	.word	0x0800b924
 800ac4c:	0800b92e 	.word	0x0800b92e
 800ac50:	08007e99 	.word	0x08007e99
 800ac54:	0800a9ad 	.word	0x0800a9ad
 800ac58:	0800b92a 	.word	0x0800b92a

0800ac5c <__sflush_r>:
 800ac5c:	898a      	ldrh	r2, [r1, #12]
 800ac5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac62:	4605      	mov	r5, r0
 800ac64:	0710      	lsls	r0, r2, #28
 800ac66:	460c      	mov	r4, r1
 800ac68:	d458      	bmi.n	800ad1c <__sflush_r+0xc0>
 800ac6a:	684b      	ldr	r3, [r1, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dc05      	bgt.n	800ac7c <__sflush_r+0x20>
 800ac70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	dc02      	bgt.n	800ac7c <__sflush_r+0x20>
 800ac76:	2000      	movs	r0, #0
 800ac78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	d0f9      	beq.n	800ac76 <__sflush_r+0x1a>
 800ac82:	2300      	movs	r3, #0
 800ac84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac88:	682f      	ldr	r7, [r5, #0]
 800ac8a:	6a21      	ldr	r1, [r4, #32]
 800ac8c:	602b      	str	r3, [r5, #0]
 800ac8e:	d032      	beq.n	800acf6 <__sflush_r+0x9a>
 800ac90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	075a      	lsls	r2, r3, #29
 800ac96:	d505      	bpl.n	800aca4 <__sflush_r+0x48>
 800ac98:	6863      	ldr	r3, [r4, #4]
 800ac9a:	1ac0      	subs	r0, r0, r3
 800ac9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac9e:	b10b      	cbz	r3, 800aca4 <__sflush_r+0x48>
 800aca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aca2:	1ac0      	subs	r0, r0, r3
 800aca4:	2300      	movs	r3, #0
 800aca6:	4602      	mov	r2, r0
 800aca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acaa:	6a21      	ldr	r1, [r4, #32]
 800acac:	4628      	mov	r0, r5
 800acae:	47b0      	blx	r6
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	d106      	bne.n	800acc4 <__sflush_r+0x68>
 800acb6:	6829      	ldr	r1, [r5, #0]
 800acb8:	291d      	cmp	r1, #29
 800acba:	d82b      	bhi.n	800ad14 <__sflush_r+0xb8>
 800acbc:	4a29      	ldr	r2, [pc, #164]	; (800ad64 <__sflush_r+0x108>)
 800acbe:	410a      	asrs	r2, r1
 800acc0:	07d6      	lsls	r6, r2, #31
 800acc2:	d427      	bmi.n	800ad14 <__sflush_r+0xb8>
 800acc4:	2200      	movs	r2, #0
 800acc6:	6062      	str	r2, [r4, #4]
 800acc8:	04d9      	lsls	r1, r3, #19
 800acca:	6922      	ldr	r2, [r4, #16]
 800accc:	6022      	str	r2, [r4, #0]
 800acce:	d504      	bpl.n	800acda <__sflush_r+0x7e>
 800acd0:	1c42      	adds	r2, r0, #1
 800acd2:	d101      	bne.n	800acd8 <__sflush_r+0x7c>
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	b903      	cbnz	r3, 800acda <__sflush_r+0x7e>
 800acd8:	6560      	str	r0, [r4, #84]	; 0x54
 800acda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acdc:	602f      	str	r7, [r5, #0]
 800acde:	2900      	cmp	r1, #0
 800ace0:	d0c9      	beq.n	800ac76 <__sflush_r+0x1a>
 800ace2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ace6:	4299      	cmp	r1, r3
 800ace8:	d002      	beq.n	800acf0 <__sflush_r+0x94>
 800acea:	4628      	mov	r0, r5
 800acec:	f7fe fd3a 	bl	8009764 <_free_r>
 800acf0:	2000      	movs	r0, #0
 800acf2:	6360      	str	r0, [r4, #52]	; 0x34
 800acf4:	e7c0      	b.n	800ac78 <__sflush_r+0x1c>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4628      	mov	r0, r5
 800acfa:	47b0      	blx	r6
 800acfc:	1c41      	adds	r1, r0, #1
 800acfe:	d1c8      	bne.n	800ac92 <__sflush_r+0x36>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0c5      	beq.n	800ac92 <__sflush_r+0x36>
 800ad06:	2b1d      	cmp	r3, #29
 800ad08:	d001      	beq.n	800ad0e <__sflush_r+0xb2>
 800ad0a:	2b16      	cmp	r3, #22
 800ad0c:	d101      	bne.n	800ad12 <__sflush_r+0xb6>
 800ad0e:	602f      	str	r7, [r5, #0]
 800ad10:	e7b1      	b.n	800ac76 <__sflush_r+0x1a>
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	e7ad      	b.n	800ac78 <__sflush_r+0x1c>
 800ad1c:	690f      	ldr	r7, [r1, #16]
 800ad1e:	2f00      	cmp	r7, #0
 800ad20:	d0a9      	beq.n	800ac76 <__sflush_r+0x1a>
 800ad22:	0793      	lsls	r3, r2, #30
 800ad24:	680e      	ldr	r6, [r1, #0]
 800ad26:	bf08      	it	eq
 800ad28:	694b      	ldreq	r3, [r1, #20]
 800ad2a:	600f      	str	r7, [r1, #0]
 800ad2c:	bf18      	it	ne
 800ad2e:	2300      	movne	r3, #0
 800ad30:	eba6 0807 	sub.w	r8, r6, r7
 800ad34:	608b      	str	r3, [r1, #8]
 800ad36:	f1b8 0f00 	cmp.w	r8, #0
 800ad3a:	dd9c      	ble.n	800ac76 <__sflush_r+0x1a>
 800ad3c:	6a21      	ldr	r1, [r4, #32]
 800ad3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad40:	4643      	mov	r3, r8
 800ad42:	463a      	mov	r2, r7
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b0      	blx	r6
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	dc06      	bgt.n	800ad5a <__sflush_r+0xfe>
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	e78e      	b.n	800ac78 <__sflush_r+0x1c>
 800ad5a:	4407      	add	r7, r0
 800ad5c:	eba8 0800 	sub.w	r8, r8, r0
 800ad60:	e7e9      	b.n	800ad36 <__sflush_r+0xda>
 800ad62:	bf00      	nop
 800ad64:	dfbffffe 	.word	0xdfbffffe

0800ad68 <_fflush_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	690b      	ldr	r3, [r1, #16]
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	460c      	mov	r4, r1
 800ad70:	b913      	cbnz	r3, 800ad78 <_fflush_r+0x10>
 800ad72:	2500      	movs	r5, #0
 800ad74:	4628      	mov	r0, r5
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	b118      	cbz	r0, 800ad82 <_fflush_r+0x1a>
 800ad7a:	6a03      	ldr	r3, [r0, #32]
 800ad7c:	b90b      	cbnz	r3, 800ad82 <_fflush_r+0x1a>
 800ad7e:	f7fd fccb 	bl	8008718 <__sinit>
 800ad82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0f3      	beq.n	800ad72 <_fflush_r+0xa>
 800ad8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad8c:	07d0      	lsls	r0, r2, #31
 800ad8e:	d404      	bmi.n	800ad9a <_fflush_r+0x32>
 800ad90:	0599      	lsls	r1, r3, #22
 800ad92:	d402      	bmi.n	800ad9a <_fflush_r+0x32>
 800ad94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad96:	f7fd fe51 	bl	8008a3c <__retarget_lock_acquire_recursive>
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	f7ff ff5d 	bl	800ac5c <__sflush_r>
 800ada2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ada4:	07da      	lsls	r2, r3, #31
 800ada6:	4605      	mov	r5, r0
 800ada8:	d4e4      	bmi.n	800ad74 <_fflush_r+0xc>
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	059b      	lsls	r3, r3, #22
 800adae:	d4e1      	bmi.n	800ad74 <_fflush_r+0xc>
 800adb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adb2:	f7fd fe44 	bl	8008a3e <__retarget_lock_release_recursive>
 800adb6:	e7dd      	b.n	800ad74 <_fflush_r+0xc>

0800adb8 <memmove>:
 800adb8:	4288      	cmp	r0, r1
 800adba:	b510      	push	{r4, lr}
 800adbc:	eb01 0402 	add.w	r4, r1, r2
 800adc0:	d902      	bls.n	800adc8 <memmove+0x10>
 800adc2:	4284      	cmp	r4, r0
 800adc4:	4623      	mov	r3, r4
 800adc6:	d807      	bhi.n	800add8 <memmove+0x20>
 800adc8:	1e43      	subs	r3, r0, #1
 800adca:	42a1      	cmp	r1, r4
 800adcc:	d008      	beq.n	800ade0 <memmove+0x28>
 800adce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800add2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800add6:	e7f8      	b.n	800adca <memmove+0x12>
 800add8:	4402      	add	r2, r0
 800adda:	4601      	mov	r1, r0
 800addc:	428a      	cmp	r2, r1
 800adde:	d100      	bne.n	800ade2 <memmove+0x2a>
 800ade0:	bd10      	pop	{r4, pc}
 800ade2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ade6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adea:	e7f7      	b.n	800addc <memmove+0x24>

0800adec <_sbrk_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d06      	ldr	r5, [pc, #24]	; (800ae08 <_sbrk_r+0x1c>)
 800adf0:	2300      	movs	r3, #0
 800adf2:	4604      	mov	r4, r0
 800adf4:	4608      	mov	r0, r1
 800adf6:	602b      	str	r3, [r5, #0]
 800adf8:	f7f7 f9e0 	bl	80021bc <_sbrk>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d102      	bne.n	800ae06 <_sbrk_r+0x1a>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	b103      	cbz	r3, 800ae06 <_sbrk_r+0x1a>
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	bd38      	pop	{r3, r4, r5, pc}
 800ae08:	20004490 	.word	0x20004490

0800ae0c <__assert_func>:
 800ae0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae0e:	4614      	mov	r4, r2
 800ae10:	461a      	mov	r2, r3
 800ae12:	4b09      	ldr	r3, [pc, #36]	; (800ae38 <__assert_func+0x2c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4605      	mov	r5, r0
 800ae18:	68d8      	ldr	r0, [r3, #12]
 800ae1a:	b14c      	cbz	r4, 800ae30 <__assert_func+0x24>
 800ae1c:	4b07      	ldr	r3, [pc, #28]	; (800ae3c <__assert_func+0x30>)
 800ae1e:	9100      	str	r1, [sp, #0]
 800ae20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae24:	4906      	ldr	r1, [pc, #24]	; (800ae40 <__assert_func+0x34>)
 800ae26:	462b      	mov	r3, r5
 800ae28:	f000 f854 	bl	800aed4 <fiprintf>
 800ae2c:	f000 f864 	bl	800aef8 <abort>
 800ae30:	4b04      	ldr	r3, [pc, #16]	; (800ae44 <__assert_func+0x38>)
 800ae32:	461c      	mov	r4, r3
 800ae34:	e7f3      	b.n	800ae1e <__assert_func+0x12>
 800ae36:	bf00      	nop
 800ae38:	200001e0 	.word	0x200001e0
 800ae3c:	0800b935 	.word	0x0800b935
 800ae40:	0800b942 	.word	0x0800b942
 800ae44:	0800b970 	.word	0x0800b970

0800ae48 <_calloc_r>:
 800ae48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae4a:	fba1 2402 	umull	r2, r4, r1, r2
 800ae4e:	b94c      	cbnz	r4, 800ae64 <_calloc_r+0x1c>
 800ae50:	4611      	mov	r1, r2
 800ae52:	9201      	str	r2, [sp, #4]
 800ae54:	f7ff f852 	bl	8009efc <_malloc_r>
 800ae58:	9a01      	ldr	r2, [sp, #4]
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	b930      	cbnz	r0, 800ae6c <_calloc_r+0x24>
 800ae5e:	4628      	mov	r0, r5
 800ae60:	b003      	add	sp, #12
 800ae62:	bd30      	pop	{r4, r5, pc}
 800ae64:	220c      	movs	r2, #12
 800ae66:	6002      	str	r2, [r0, #0]
 800ae68:	2500      	movs	r5, #0
 800ae6a:	e7f8      	b.n	800ae5e <_calloc_r+0x16>
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	f7fd fd00 	bl	8008872 <memset>
 800ae72:	e7f4      	b.n	800ae5e <_calloc_r+0x16>

0800ae74 <_realloc_r>:
 800ae74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae78:	4680      	mov	r8, r0
 800ae7a:	4614      	mov	r4, r2
 800ae7c:	460e      	mov	r6, r1
 800ae7e:	b921      	cbnz	r1, 800ae8a <_realloc_r+0x16>
 800ae80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae84:	4611      	mov	r1, r2
 800ae86:	f7ff b839 	b.w	8009efc <_malloc_r>
 800ae8a:	b92a      	cbnz	r2, 800ae98 <_realloc_r+0x24>
 800ae8c:	f7fe fc6a 	bl	8009764 <_free_r>
 800ae90:	4625      	mov	r5, r4
 800ae92:	4628      	mov	r0, r5
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	f000 f835 	bl	800af06 <_malloc_usable_size_r>
 800ae9c:	4284      	cmp	r4, r0
 800ae9e:	4607      	mov	r7, r0
 800aea0:	d802      	bhi.n	800aea8 <_realloc_r+0x34>
 800aea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aea6:	d812      	bhi.n	800aece <_realloc_r+0x5a>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4640      	mov	r0, r8
 800aeac:	f7ff f826 	bl	8009efc <_malloc_r>
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d0ed      	beq.n	800ae92 <_realloc_r+0x1e>
 800aeb6:	42bc      	cmp	r4, r7
 800aeb8:	4622      	mov	r2, r4
 800aeba:	4631      	mov	r1, r6
 800aebc:	bf28      	it	cs
 800aebe:	463a      	movcs	r2, r7
 800aec0:	f7fd fdbe 	bl	8008a40 <memcpy>
 800aec4:	4631      	mov	r1, r6
 800aec6:	4640      	mov	r0, r8
 800aec8:	f7fe fc4c 	bl	8009764 <_free_r>
 800aecc:	e7e1      	b.n	800ae92 <_realloc_r+0x1e>
 800aece:	4635      	mov	r5, r6
 800aed0:	e7df      	b.n	800ae92 <_realloc_r+0x1e>
	...

0800aed4 <fiprintf>:
 800aed4:	b40e      	push	{r1, r2, r3}
 800aed6:	b503      	push	{r0, r1, lr}
 800aed8:	4601      	mov	r1, r0
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	4805      	ldr	r0, [pc, #20]	; (800aef4 <fiprintf+0x20>)
 800aede:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee2:	6800      	ldr	r0, [r0, #0]
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	f000 f83f 	bl	800af68 <_vfiprintf_r>
 800aeea:	b002      	add	sp, #8
 800aeec:	f85d eb04 	ldr.w	lr, [sp], #4
 800aef0:	b003      	add	sp, #12
 800aef2:	4770      	bx	lr
 800aef4:	200001e0 	.word	0x200001e0

0800aef8 <abort>:
 800aef8:	b508      	push	{r3, lr}
 800aefa:	2006      	movs	r0, #6
 800aefc:	f000 fa0c 	bl	800b318 <raise>
 800af00:	2001      	movs	r0, #1
 800af02:	f7f7 f8e3 	bl	80020cc <_exit>

0800af06 <_malloc_usable_size_r>:
 800af06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0a:	1f18      	subs	r0, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	bfbc      	itt	lt
 800af10:	580b      	ldrlt	r3, [r1, r0]
 800af12:	18c0      	addlt	r0, r0, r3
 800af14:	4770      	bx	lr

0800af16 <__sfputc_r>:
 800af16:	6893      	ldr	r3, [r2, #8]
 800af18:	3b01      	subs	r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	b410      	push	{r4}
 800af1e:	6093      	str	r3, [r2, #8]
 800af20:	da08      	bge.n	800af34 <__sfputc_r+0x1e>
 800af22:	6994      	ldr	r4, [r2, #24]
 800af24:	42a3      	cmp	r3, r4
 800af26:	db01      	blt.n	800af2c <__sfputc_r+0x16>
 800af28:	290a      	cmp	r1, #10
 800af2a:	d103      	bne.n	800af34 <__sfputc_r+0x1e>
 800af2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af30:	f000 b934 	b.w	800b19c <__swbuf_r>
 800af34:	6813      	ldr	r3, [r2, #0]
 800af36:	1c58      	adds	r0, r3, #1
 800af38:	6010      	str	r0, [r2, #0]
 800af3a:	7019      	strb	r1, [r3, #0]
 800af3c:	4608      	mov	r0, r1
 800af3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <__sfputs_r>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	4606      	mov	r6, r0
 800af48:	460f      	mov	r7, r1
 800af4a:	4614      	mov	r4, r2
 800af4c:	18d5      	adds	r5, r2, r3
 800af4e:	42ac      	cmp	r4, r5
 800af50:	d101      	bne.n	800af56 <__sfputs_r+0x12>
 800af52:	2000      	movs	r0, #0
 800af54:	e007      	b.n	800af66 <__sfputs_r+0x22>
 800af56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af5a:	463a      	mov	r2, r7
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7ff ffda 	bl	800af16 <__sfputc_r>
 800af62:	1c43      	adds	r3, r0, #1
 800af64:	d1f3      	bne.n	800af4e <__sfputs_r+0xa>
 800af66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af68 <_vfiprintf_r>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	460d      	mov	r5, r1
 800af6e:	b09d      	sub	sp, #116	; 0x74
 800af70:	4614      	mov	r4, r2
 800af72:	4698      	mov	r8, r3
 800af74:	4606      	mov	r6, r0
 800af76:	b118      	cbz	r0, 800af80 <_vfiprintf_r+0x18>
 800af78:	6a03      	ldr	r3, [r0, #32]
 800af7a:	b90b      	cbnz	r3, 800af80 <_vfiprintf_r+0x18>
 800af7c:	f7fd fbcc 	bl	8008718 <__sinit>
 800af80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af82:	07d9      	lsls	r1, r3, #31
 800af84:	d405      	bmi.n	800af92 <_vfiprintf_r+0x2a>
 800af86:	89ab      	ldrh	r3, [r5, #12]
 800af88:	059a      	lsls	r2, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_vfiprintf_r+0x2a>
 800af8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af8e:	f7fd fd55 	bl	8008a3c <__retarget_lock_acquire_recursive>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	071b      	lsls	r3, r3, #28
 800af96:	d501      	bpl.n	800af9c <_vfiprintf_r+0x34>
 800af98:	692b      	ldr	r3, [r5, #16]
 800af9a:	b99b      	cbnz	r3, 800afc4 <_vfiprintf_r+0x5c>
 800af9c:	4629      	mov	r1, r5
 800af9e:	4630      	mov	r0, r6
 800afa0:	f000 f93a 	bl	800b218 <__swsetup_r>
 800afa4:	b170      	cbz	r0, 800afc4 <_vfiprintf_r+0x5c>
 800afa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa8:	07dc      	lsls	r4, r3, #31
 800afaa:	d504      	bpl.n	800afb6 <_vfiprintf_r+0x4e>
 800afac:	f04f 30ff 	mov.w	r0, #4294967295
 800afb0:	b01d      	add	sp, #116	; 0x74
 800afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb6:	89ab      	ldrh	r3, [r5, #12]
 800afb8:	0598      	lsls	r0, r3, #22
 800afba:	d4f7      	bmi.n	800afac <_vfiprintf_r+0x44>
 800afbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afbe:	f7fd fd3e 	bl	8008a3e <__retarget_lock_release_recursive>
 800afc2:	e7f3      	b.n	800afac <_vfiprintf_r+0x44>
 800afc4:	2300      	movs	r3, #0
 800afc6:	9309      	str	r3, [sp, #36]	; 0x24
 800afc8:	2320      	movs	r3, #32
 800afca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afce:	f8cd 800c 	str.w	r8, [sp, #12]
 800afd2:	2330      	movs	r3, #48	; 0x30
 800afd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b188 <_vfiprintf_r+0x220>
 800afd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afdc:	f04f 0901 	mov.w	r9, #1
 800afe0:	4623      	mov	r3, r4
 800afe2:	469a      	mov	sl, r3
 800afe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afe8:	b10a      	cbz	r2, 800afee <_vfiprintf_r+0x86>
 800afea:	2a25      	cmp	r2, #37	; 0x25
 800afec:	d1f9      	bne.n	800afe2 <_vfiprintf_r+0x7a>
 800afee:	ebba 0b04 	subs.w	fp, sl, r4
 800aff2:	d00b      	beq.n	800b00c <_vfiprintf_r+0xa4>
 800aff4:	465b      	mov	r3, fp
 800aff6:	4622      	mov	r2, r4
 800aff8:	4629      	mov	r1, r5
 800affa:	4630      	mov	r0, r6
 800affc:	f7ff ffa2 	bl	800af44 <__sfputs_r>
 800b000:	3001      	adds	r0, #1
 800b002:	f000 80a9 	beq.w	800b158 <_vfiprintf_r+0x1f0>
 800b006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b008:	445a      	add	r2, fp
 800b00a:	9209      	str	r2, [sp, #36]	; 0x24
 800b00c:	f89a 3000 	ldrb.w	r3, [sl]
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 80a1 	beq.w	800b158 <_vfiprintf_r+0x1f0>
 800b016:	2300      	movs	r3, #0
 800b018:	f04f 32ff 	mov.w	r2, #4294967295
 800b01c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b020:	f10a 0a01 	add.w	sl, sl, #1
 800b024:	9304      	str	r3, [sp, #16]
 800b026:	9307      	str	r3, [sp, #28]
 800b028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b02c:	931a      	str	r3, [sp, #104]	; 0x68
 800b02e:	4654      	mov	r4, sl
 800b030:	2205      	movs	r2, #5
 800b032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b036:	4854      	ldr	r0, [pc, #336]	; (800b188 <_vfiprintf_r+0x220>)
 800b038:	f7f5 f8da 	bl	80001f0 <memchr>
 800b03c:	9a04      	ldr	r2, [sp, #16]
 800b03e:	b9d8      	cbnz	r0, 800b078 <_vfiprintf_r+0x110>
 800b040:	06d1      	lsls	r1, r2, #27
 800b042:	bf44      	itt	mi
 800b044:	2320      	movmi	r3, #32
 800b046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b04a:	0713      	lsls	r3, r2, #28
 800b04c:	bf44      	itt	mi
 800b04e:	232b      	movmi	r3, #43	; 0x2b
 800b050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b054:	f89a 3000 	ldrb.w	r3, [sl]
 800b058:	2b2a      	cmp	r3, #42	; 0x2a
 800b05a:	d015      	beq.n	800b088 <_vfiprintf_r+0x120>
 800b05c:	9a07      	ldr	r2, [sp, #28]
 800b05e:	4654      	mov	r4, sl
 800b060:	2000      	movs	r0, #0
 800b062:	f04f 0c0a 	mov.w	ip, #10
 800b066:	4621      	mov	r1, r4
 800b068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b06c:	3b30      	subs	r3, #48	; 0x30
 800b06e:	2b09      	cmp	r3, #9
 800b070:	d94d      	bls.n	800b10e <_vfiprintf_r+0x1a6>
 800b072:	b1b0      	cbz	r0, 800b0a2 <_vfiprintf_r+0x13a>
 800b074:	9207      	str	r2, [sp, #28]
 800b076:	e014      	b.n	800b0a2 <_vfiprintf_r+0x13a>
 800b078:	eba0 0308 	sub.w	r3, r0, r8
 800b07c:	fa09 f303 	lsl.w	r3, r9, r3
 800b080:	4313      	orrs	r3, r2
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	46a2      	mov	sl, r4
 800b086:	e7d2      	b.n	800b02e <_vfiprintf_r+0xc6>
 800b088:	9b03      	ldr	r3, [sp, #12]
 800b08a:	1d19      	adds	r1, r3, #4
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	9103      	str	r1, [sp, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	bfbb      	ittet	lt
 800b094:	425b      	neglt	r3, r3
 800b096:	f042 0202 	orrlt.w	r2, r2, #2
 800b09a:	9307      	strge	r3, [sp, #28]
 800b09c:	9307      	strlt	r3, [sp, #28]
 800b09e:	bfb8      	it	lt
 800b0a0:	9204      	strlt	r2, [sp, #16]
 800b0a2:	7823      	ldrb	r3, [r4, #0]
 800b0a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b0a6:	d10c      	bne.n	800b0c2 <_vfiprintf_r+0x15a>
 800b0a8:	7863      	ldrb	r3, [r4, #1]
 800b0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ac:	d134      	bne.n	800b118 <_vfiprintf_r+0x1b0>
 800b0ae:	9b03      	ldr	r3, [sp, #12]
 800b0b0:	1d1a      	adds	r2, r3, #4
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	9203      	str	r2, [sp, #12]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	bfb8      	it	lt
 800b0ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0be:	3402      	adds	r4, #2
 800b0c0:	9305      	str	r3, [sp, #20]
 800b0c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b198 <_vfiprintf_r+0x230>
 800b0c6:	7821      	ldrb	r1, [r4, #0]
 800b0c8:	2203      	movs	r2, #3
 800b0ca:	4650      	mov	r0, sl
 800b0cc:	f7f5 f890 	bl	80001f0 <memchr>
 800b0d0:	b138      	cbz	r0, 800b0e2 <_vfiprintf_r+0x17a>
 800b0d2:	9b04      	ldr	r3, [sp, #16]
 800b0d4:	eba0 000a 	sub.w	r0, r0, sl
 800b0d8:	2240      	movs	r2, #64	; 0x40
 800b0da:	4082      	lsls	r2, r0
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	3401      	adds	r4, #1
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e6:	4829      	ldr	r0, [pc, #164]	; (800b18c <_vfiprintf_r+0x224>)
 800b0e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0ec:	2206      	movs	r2, #6
 800b0ee:	f7f5 f87f 	bl	80001f0 <memchr>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d03f      	beq.n	800b176 <_vfiprintf_r+0x20e>
 800b0f6:	4b26      	ldr	r3, [pc, #152]	; (800b190 <_vfiprintf_r+0x228>)
 800b0f8:	bb1b      	cbnz	r3, 800b142 <_vfiprintf_r+0x1da>
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	3307      	adds	r3, #7
 800b0fe:	f023 0307 	bic.w	r3, r3, #7
 800b102:	3308      	adds	r3, #8
 800b104:	9303      	str	r3, [sp, #12]
 800b106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b108:	443b      	add	r3, r7
 800b10a:	9309      	str	r3, [sp, #36]	; 0x24
 800b10c:	e768      	b.n	800afe0 <_vfiprintf_r+0x78>
 800b10e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b112:	460c      	mov	r4, r1
 800b114:	2001      	movs	r0, #1
 800b116:	e7a6      	b.n	800b066 <_vfiprintf_r+0xfe>
 800b118:	2300      	movs	r3, #0
 800b11a:	3401      	adds	r4, #1
 800b11c:	9305      	str	r3, [sp, #20]
 800b11e:	4619      	mov	r1, r3
 800b120:	f04f 0c0a 	mov.w	ip, #10
 800b124:	4620      	mov	r0, r4
 800b126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b12a:	3a30      	subs	r2, #48	; 0x30
 800b12c:	2a09      	cmp	r2, #9
 800b12e:	d903      	bls.n	800b138 <_vfiprintf_r+0x1d0>
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0c6      	beq.n	800b0c2 <_vfiprintf_r+0x15a>
 800b134:	9105      	str	r1, [sp, #20]
 800b136:	e7c4      	b.n	800b0c2 <_vfiprintf_r+0x15a>
 800b138:	fb0c 2101 	mla	r1, ip, r1, r2
 800b13c:	4604      	mov	r4, r0
 800b13e:	2301      	movs	r3, #1
 800b140:	e7f0      	b.n	800b124 <_vfiprintf_r+0x1bc>
 800b142:	ab03      	add	r3, sp, #12
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	462a      	mov	r2, r5
 800b148:	4b12      	ldr	r3, [pc, #72]	; (800b194 <_vfiprintf_r+0x22c>)
 800b14a:	a904      	add	r1, sp, #16
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7fc fea3 	bl	8007e98 <_printf_float>
 800b152:	4607      	mov	r7, r0
 800b154:	1c78      	adds	r0, r7, #1
 800b156:	d1d6      	bne.n	800b106 <_vfiprintf_r+0x19e>
 800b158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b15a:	07d9      	lsls	r1, r3, #31
 800b15c:	d405      	bmi.n	800b16a <_vfiprintf_r+0x202>
 800b15e:	89ab      	ldrh	r3, [r5, #12]
 800b160:	059a      	lsls	r2, r3, #22
 800b162:	d402      	bmi.n	800b16a <_vfiprintf_r+0x202>
 800b164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b166:	f7fd fc6a 	bl	8008a3e <__retarget_lock_release_recursive>
 800b16a:	89ab      	ldrh	r3, [r5, #12]
 800b16c:	065b      	lsls	r3, r3, #25
 800b16e:	f53f af1d 	bmi.w	800afac <_vfiprintf_r+0x44>
 800b172:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b174:	e71c      	b.n	800afb0 <_vfiprintf_r+0x48>
 800b176:	ab03      	add	r3, sp, #12
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	462a      	mov	r2, r5
 800b17c:	4b05      	ldr	r3, [pc, #20]	; (800b194 <_vfiprintf_r+0x22c>)
 800b17e:	a904      	add	r1, sp, #16
 800b180:	4630      	mov	r0, r6
 800b182:	f7fd f92d 	bl	80083e0 <_printf_i>
 800b186:	e7e4      	b.n	800b152 <_vfiprintf_r+0x1ea>
 800b188:	0800b924 	.word	0x0800b924
 800b18c:	0800b92e 	.word	0x0800b92e
 800b190:	08007e99 	.word	0x08007e99
 800b194:	0800af45 	.word	0x0800af45
 800b198:	0800b92a 	.word	0x0800b92a

0800b19c <__swbuf_r>:
 800b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19e:	460e      	mov	r6, r1
 800b1a0:	4614      	mov	r4, r2
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	b118      	cbz	r0, 800b1ae <__swbuf_r+0x12>
 800b1a6:	6a03      	ldr	r3, [r0, #32]
 800b1a8:	b90b      	cbnz	r3, 800b1ae <__swbuf_r+0x12>
 800b1aa:	f7fd fab5 	bl	8008718 <__sinit>
 800b1ae:	69a3      	ldr	r3, [r4, #24]
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	89a3      	ldrh	r3, [r4, #12]
 800b1b4:	071a      	lsls	r2, r3, #28
 800b1b6:	d525      	bpl.n	800b204 <__swbuf_r+0x68>
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	b31b      	cbz	r3, 800b204 <__swbuf_r+0x68>
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	6922      	ldr	r2, [r4, #16]
 800b1c0:	1a98      	subs	r0, r3, r2
 800b1c2:	6963      	ldr	r3, [r4, #20]
 800b1c4:	b2f6      	uxtb	r6, r6
 800b1c6:	4283      	cmp	r3, r0
 800b1c8:	4637      	mov	r7, r6
 800b1ca:	dc04      	bgt.n	800b1d6 <__swbuf_r+0x3a>
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f7ff fdca 	bl	800ad68 <_fflush_r>
 800b1d4:	b9e0      	cbnz	r0, 800b210 <__swbuf_r+0x74>
 800b1d6:	68a3      	ldr	r3, [r4, #8]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	60a3      	str	r3, [r4, #8]
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	1c5a      	adds	r2, r3, #1
 800b1e0:	6022      	str	r2, [r4, #0]
 800b1e2:	701e      	strb	r6, [r3, #0]
 800b1e4:	6962      	ldr	r2, [r4, #20]
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d004      	beq.n	800b1f6 <__swbuf_r+0x5a>
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	07db      	lsls	r3, r3, #31
 800b1f0:	d506      	bpl.n	800b200 <__swbuf_r+0x64>
 800b1f2:	2e0a      	cmp	r6, #10
 800b1f4:	d104      	bne.n	800b200 <__swbuf_r+0x64>
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	f7ff fdb5 	bl	800ad68 <_fflush_r>
 800b1fe:	b938      	cbnz	r0, 800b210 <__swbuf_r+0x74>
 800b200:	4638      	mov	r0, r7
 800b202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b204:	4621      	mov	r1, r4
 800b206:	4628      	mov	r0, r5
 800b208:	f000 f806 	bl	800b218 <__swsetup_r>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d0d5      	beq.n	800b1bc <__swbuf_r+0x20>
 800b210:	f04f 37ff 	mov.w	r7, #4294967295
 800b214:	e7f4      	b.n	800b200 <__swbuf_r+0x64>
	...

0800b218 <__swsetup_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4b2a      	ldr	r3, [pc, #168]	; (800b2c4 <__swsetup_r+0xac>)
 800b21c:	4605      	mov	r5, r0
 800b21e:	6818      	ldr	r0, [r3, #0]
 800b220:	460c      	mov	r4, r1
 800b222:	b118      	cbz	r0, 800b22c <__swsetup_r+0x14>
 800b224:	6a03      	ldr	r3, [r0, #32]
 800b226:	b90b      	cbnz	r3, 800b22c <__swsetup_r+0x14>
 800b228:	f7fd fa76 	bl	8008718 <__sinit>
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b232:	0718      	lsls	r0, r3, #28
 800b234:	d422      	bmi.n	800b27c <__swsetup_r+0x64>
 800b236:	06d9      	lsls	r1, r3, #27
 800b238:	d407      	bmi.n	800b24a <__swsetup_r+0x32>
 800b23a:	2309      	movs	r3, #9
 800b23c:	602b      	str	r3, [r5, #0]
 800b23e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b242:	81a3      	strh	r3, [r4, #12]
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	e034      	b.n	800b2b4 <__swsetup_r+0x9c>
 800b24a:	0758      	lsls	r0, r3, #29
 800b24c:	d512      	bpl.n	800b274 <__swsetup_r+0x5c>
 800b24e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b250:	b141      	cbz	r1, 800b264 <__swsetup_r+0x4c>
 800b252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b256:	4299      	cmp	r1, r3
 800b258:	d002      	beq.n	800b260 <__swsetup_r+0x48>
 800b25a:	4628      	mov	r0, r5
 800b25c:	f7fe fa82 	bl	8009764 <_free_r>
 800b260:	2300      	movs	r3, #0
 800b262:	6363      	str	r3, [r4, #52]	; 0x34
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b26a:	81a3      	strh	r3, [r4, #12]
 800b26c:	2300      	movs	r3, #0
 800b26e:	6063      	str	r3, [r4, #4]
 800b270:	6923      	ldr	r3, [r4, #16]
 800b272:	6023      	str	r3, [r4, #0]
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f043 0308 	orr.w	r3, r3, #8
 800b27a:	81a3      	strh	r3, [r4, #12]
 800b27c:	6923      	ldr	r3, [r4, #16]
 800b27e:	b94b      	cbnz	r3, 800b294 <__swsetup_r+0x7c>
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b28a:	d003      	beq.n	800b294 <__swsetup_r+0x7c>
 800b28c:	4621      	mov	r1, r4
 800b28e:	4628      	mov	r0, r5
 800b290:	f000 f884 	bl	800b39c <__smakebuf_r>
 800b294:	89a0      	ldrh	r0, [r4, #12]
 800b296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b29a:	f010 0301 	ands.w	r3, r0, #1
 800b29e:	d00a      	beq.n	800b2b6 <__swsetup_r+0x9e>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60a3      	str	r3, [r4, #8]
 800b2a4:	6963      	ldr	r3, [r4, #20]
 800b2a6:	425b      	negs	r3, r3
 800b2a8:	61a3      	str	r3, [r4, #24]
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	b943      	cbnz	r3, 800b2c0 <__swsetup_r+0xa8>
 800b2ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2b2:	d1c4      	bne.n	800b23e <__swsetup_r+0x26>
 800b2b4:	bd38      	pop	{r3, r4, r5, pc}
 800b2b6:	0781      	lsls	r1, r0, #30
 800b2b8:	bf58      	it	pl
 800b2ba:	6963      	ldrpl	r3, [r4, #20]
 800b2bc:	60a3      	str	r3, [r4, #8]
 800b2be:	e7f4      	b.n	800b2aa <__swsetup_r+0x92>
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	e7f7      	b.n	800b2b4 <__swsetup_r+0x9c>
 800b2c4:	200001e0 	.word	0x200001e0

0800b2c8 <_raise_r>:
 800b2c8:	291f      	cmp	r1, #31
 800b2ca:	b538      	push	{r3, r4, r5, lr}
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	460d      	mov	r5, r1
 800b2d0:	d904      	bls.n	800b2dc <_raise_r+0x14>
 800b2d2:	2316      	movs	r3, #22
 800b2d4:	6003      	str	r3, [r0, #0]
 800b2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b2de:	b112      	cbz	r2, 800b2e6 <_raise_r+0x1e>
 800b2e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2e4:	b94b      	cbnz	r3, 800b2fa <_raise_r+0x32>
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f000 f830 	bl	800b34c <_getpid_r>
 800b2ec:	462a      	mov	r2, r5
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2f6:	f000 b817 	b.w	800b328 <_kill_r>
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d00a      	beq.n	800b314 <_raise_r+0x4c>
 800b2fe:	1c59      	adds	r1, r3, #1
 800b300:	d103      	bne.n	800b30a <_raise_r+0x42>
 800b302:	2316      	movs	r3, #22
 800b304:	6003      	str	r3, [r0, #0]
 800b306:	2001      	movs	r0, #1
 800b308:	e7e7      	b.n	800b2da <_raise_r+0x12>
 800b30a:	2400      	movs	r4, #0
 800b30c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b310:	4628      	mov	r0, r5
 800b312:	4798      	blx	r3
 800b314:	2000      	movs	r0, #0
 800b316:	e7e0      	b.n	800b2da <_raise_r+0x12>

0800b318 <raise>:
 800b318:	4b02      	ldr	r3, [pc, #8]	; (800b324 <raise+0xc>)
 800b31a:	4601      	mov	r1, r0
 800b31c:	6818      	ldr	r0, [r3, #0]
 800b31e:	f7ff bfd3 	b.w	800b2c8 <_raise_r>
 800b322:	bf00      	nop
 800b324:	200001e0 	.word	0x200001e0

0800b328 <_kill_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d07      	ldr	r5, [pc, #28]	; (800b348 <_kill_r+0x20>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	4611      	mov	r1, r2
 800b334:	602b      	str	r3, [r5, #0]
 800b336:	f7f6 feb9 	bl	80020ac <_kill>
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	d102      	bne.n	800b344 <_kill_r+0x1c>
 800b33e:	682b      	ldr	r3, [r5, #0]
 800b340:	b103      	cbz	r3, 800b344 <_kill_r+0x1c>
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	bd38      	pop	{r3, r4, r5, pc}
 800b346:	bf00      	nop
 800b348:	20004490 	.word	0x20004490

0800b34c <_getpid_r>:
 800b34c:	f7f6 bea6 	b.w	800209c <_getpid>

0800b350 <__swhatbuf_r>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	460c      	mov	r4, r1
 800b354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b358:	2900      	cmp	r1, #0
 800b35a:	b096      	sub	sp, #88	; 0x58
 800b35c:	4615      	mov	r5, r2
 800b35e:	461e      	mov	r6, r3
 800b360:	da0d      	bge.n	800b37e <__swhatbuf_r+0x2e>
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b368:	f04f 0100 	mov.w	r1, #0
 800b36c:	bf0c      	ite	eq
 800b36e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b372:	2340      	movne	r3, #64	; 0x40
 800b374:	2000      	movs	r0, #0
 800b376:	6031      	str	r1, [r6, #0]
 800b378:	602b      	str	r3, [r5, #0]
 800b37a:	b016      	add	sp, #88	; 0x58
 800b37c:	bd70      	pop	{r4, r5, r6, pc}
 800b37e:	466a      	mov	r2, sp
 800b380:	f000 f848 	bl	800b414 <_fstat_r>
 800b384:	2800      	cmp	r0, #0
 800b386:	dbec      	blt.n	800b362 <__swhatbuf_r+0x12>
 800b388:	9901      	ldr	r1, [sp, #4]
 800b38a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b38e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b392:	4259      	negs	r1, r3
 800b394:	4159      	adcs	r1, r3
 800b396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b39a:	e7eb      	b.n	800b374 <__swhatbuf_r+0x24>

0800b39c <__smakebuf_r>:
 800b39c:	898b      	ldrh	r3, [r1, #12]
 800b39e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3a0:	079d      	lsls	r5, r3, #30
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	d507      	bpl.n	800b3b8 <__smakebuf_r+0x1c>
 800b3a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	6123      	str	r3, [r4, #16]
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	6163      	str	r3, [r4, #20]
 800b3b4:	b002      	add	sp, #8
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	ab01      	add	r3, sp, #4
 800b3ba:	466a      	mov	r2, sp
 800b3bc:	f7ff ffc8 	bl	800b350 <__swhatbuf_r>
 800b3c0:	9900      	ldr	r1, [sp, #0]
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f7fe fd99 	bl	8009efc <_malloc_r>
 800b3ca:	b948      	cbnz	r0, 800b3e0 <__smakebuf_r+0x44>
 800b3cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d0:	059a      	lsls	r2, r3, #22
 800b3d2:	d4ef      	bmi.n	800b3b4 <__smakebuf_r+0x18>
 800b3d4:	f023 0303 	bic.w	r3, r3, #3
 800b3d8:	f043 0302 	orr.w	r3, r3, #2
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	e7e3      	b.n	800b3a8 <__smakebuf_r+0xc>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	6020      	str	r0, [r4, #0]
 800b3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	9b00      	ldr	r3, [sp, #0]
 800b3ec:	6163      	str	r3, [r4, #20]
 800b3ee:	9b01      	ldr	r3, [sp, #4]
 800b3f0:	6120      	str	r0, [r4, #16]
 800b3f2:	b15b      	cbz	r3, 800b40c <__smakebuf_r+0x70>
 800b3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	f000 f81d 	bl	800b438 <_isatty_r>
 800b3fe:	b128      	cbz	r0, 800b40c <__smakebuf_r+0x70>
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	f023 0303 	bic.w	r3, r3, #3
 800b406:	f043 0301 	orr.w	r3, r3, #1
 800b40a:	81a3      	strh	r3, [r4, #12]
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	431d      	orrs	r5, r3
 800b410:	81a5      	strh	r5, [r4, #12]
 800b412:	e7cf      	b.n	800b3b4 <__smakebuf_r+0x18>

0800b414 <_fstat_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4d07      	ldr	r5, [pc, #28]	; (800b434 <_fstat_r+0x20>)
 800b418:	2300      	movs	r3, #0
 800b41a:	4604      	mov	r4, r0
 800b41c:	4608      	mov	r0, r1
 800b41e:	4611      	mov	r1, r2
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	f7f6 fea2 	bl	800216a <_fstat>
 800b426:	1c43      	adds	r3, r0, #1
 800b428:	d102      	bne.n	800b430 <_fstat_r+0x1c>
 800b42a:	682b      	ldr	r3, [r5, #0]
 800b42c:	b103      	cbz	r3, 800b430 <_fstat_r+0x1c>
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	bd38      	pop	{r3, r4, r5, pc}
 800b432:	bf00      	nop
 800b434:	20004490 	.word	0x20004490

0800b438 <_isatty_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4d06      	ldr	r5, [pc, #24]	; (800b454 <_isatty_r+0x1c>)
 800b43c:	2300      	movs	r3, #0
 800b43e:	4604      	mov	r4, r0
 800b440:	4608      	mov	r0, r1
 800b442:	602b      	str	r3, [r5, #0]
 800b444:	f7f6 fea1 	bl	800218a <_isatty>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_isatty_r+0x1a>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_isatty_r+0x1a>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	20004490 	.word	0x20004490

0800b458 <_init>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	bf00      	nop
 800b45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45e:	bc08      	pop	{r3}
 800b460:	469e      	mov	lr, r3
 800b462:	4770      	bx	lr

0800b464 <_fini>:
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b466:	bf00      	nop
 800b468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46a:	bc08      	pop	{r3}
 800b46c:	469e      	mov	lr, r3
 800b46e:	4770      	bx	lr
