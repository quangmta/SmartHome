
SmartHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800bb68  0800bb68  0001bb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c074  0800c074  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c074  0800c074  0001c074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c07c  0800c07c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c080  0800c080  0001c080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00004330  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004514  20004514  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015c3d  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003343  00000000  00000000  00035e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001358  00000000  00000000  000391d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f04  00000000  00000000  0003a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002739b  00000000  00000000  0003b434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016dd7  00000000  00000000  000627cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eee54  00000000  00000000  000795a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006570  00000000  00000000  001683fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0016e96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bb50 	.word	0x0800bb50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800bb50 	.word	0x0800bb50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <PID_Calc>:
float last_error_pres=0;
float integrated_error_pres=0;
//extern UART_HandleTypeDef huart6;

int16_t PID_Calc(PidParameter PID,float current,float setPoint)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af00      	add	r7, sp, #0
 8001016:	eef0 6a40 	vmov.f32	s13, s0
 800101a:	eeb0 7a60 	vmov.f32	s14, s1
 800101e:	eef0 7a41 	vmov.f32	s15, s2
 8001022:	edc7 1a02 	vstr	s3, [r7, #8]
 8001026:	ed87 2a01 	vstr	s4, [r7, #4]
 800102a:	edc7 6a03 	vstr	s13, [r7, #12]
 800102e:	ed87 7a04 	vstr	s14, [r7, #16]
 8001032:	edc7 7a05 	vstr	s15, [r7, #20]
	int16_t pidOut=0;
 8001036:	2300      	movs	r3, #0
 8001038:	86fb      	strh	r3, [r7, #54]	; 0x36
	float pTerm = 0, iTerm = 0,dTerm = 0, dt = 10;
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
 800104c:	4b45      	ldr	r3, [pc, #276]	; (8001164 <PID_Calc+0x154>)
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t now = HAL_GetTick();
 8001050:	f001 f982 	bl	8002358 <HAL_GetTick>
 8001054:	6238      	str	r0, [r7, #32]
	if (now>timerPID_pres) dt = (float) (HAL_GetTick() - timerPID_pres);
 8001056:	4b44      	ldr	r3, [pc, #272]	; (8001168 <PID_Calc+0x158>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a3a      	ldr	r2, [r7, #32]
 800105c:	429a      	cmp	r2, r3
 800105e:	d90b      	bls.n	8001078 <PID_Calc+0x68>
 8001060:	f001 f97a 	bl	8002358 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <PID_Calc+0x158>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001074:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	timerPID_pres= HAL_GetTick();
 8001078:	f001 f96e 	bl	8002358 <HAL_GetTick>
 800107c:	4603      	mov	r3, r0
 800107e:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <PID_Calc+0x158>)
 8001080:	6013      	str	r3, [r2, #0]
	float error = setPoint - current;
 8001082:	ed97 7a01 	vldr	s14, [r7, #4]
 8001086:	edd7 7a02 	vldr	s15, [r7, #8]
 800108a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108e:	edc7 7a07 	vstr	s15, [r7, #28]

	pTerm =   PID.Kp  * error;
 8001092:	edd7 7a03 	vldr	s15, [r7, #12]
 8001096:	ed97 7a07 	vldr	s14, [r7, #28]
 800109a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	integrated_error_pres += error * dt;
 80010a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <PID_Calc+0x15c>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <PID_Calc+0x15c>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	iTerm =   PID.Ki * integrated_error_pres/1000.0;
 80010be:	ed97 7a04 	vldr	s14, [r7, #16]
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <PID_Calc+0x15c>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010cc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001170 <PID_Calc+0x160>
 80010d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//	if(iTerm>PWM_MAX/2) iTerm=PWM_MAX/2;
//	else if(iTerm<-PWM_MAX/2) iTerm=-PWM_MAX/2;

	if ( dt != 0) {
 80010d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d014      	beq.n	8001110 <PID_Calc+0x100>
		dTerm =  1000*PID.Kd * (error-last_error_pres)/dt;
 80010e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ea:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001170 <PID_Calc+0x160>
 80010ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <PID_Calc+0x164>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80010fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001100:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001104:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	}

	pidOut = (int16_t)(pTerm + iTerm + dTerm);
 8001110:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001114:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800111c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001128:	ee17 3a90 	vmov	r3, s15
 800112c:	86fb      	strh	r3, [r7, #54]	; 0x36

	last_error_pres = error;
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <PID_Calc+0x164>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	6013      	str	r3, [r2, #0]

	if (pidOut>PWM_MAX) pidOut=PWM_MAX;
 8001134:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800113c:	db03      	blt.n	8001146 <PID_Calc+0x136>
 800113e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001142:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001144:	e007      	b.n	8001156 <PID_Calc+0x146>
	else if(pidOut<-PWM_MAX) pidOut=-PWM_MAX;
 8001146:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800114a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800114e:	dc02      	bgt.n	8001156 <PID_Calc+0x146>
 8001150:	f64f 4319 	movw	r3, #64537	; 0xfc19
 8001154:	86fb      	strh	r3, [r7, #54]	; 0x36
	return pidOut;
 8001156:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 800115a:	4618      	mov	r0, r3
 800115c:	3738      	adds	r7, #56	; 0x38
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	41200000 	.word	0x41200000
 8001168:	20000200 	.word	0x20000200
 800116c:	20000208 	.word	0x20000208
 8001170:	447a0000 	.word	0x447a0000
 8001174:	20000204 	.word	0x20000204

08001178 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001188:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <vApplicationGetIdleTaskMemory+0x30>)
 800118e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2000020c 	.word	0x2000020c
 80011a8:	200002ac 	.word	0x200002ac

080011ac <HAL_ADC_ConvCpltCallback>:
void StartTaskHeater(void const *argument);
void StartTaskFan(void const *argument);
void StartTaskSendData(void const *argument);

/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	// time Conv = (480+15)/180Mhz = 2.75 us
	adc_value = adc_buffer;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_ADC_ConvCpltCallback+0x68>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a17      	ldr	r2, [pc, #92]	; (8001218 <HAL_ADC_ConvCpltCallback+0x6c>)
 80011ba:	6013      	str	r3, [r2, #0]

	if (count == 50) {
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_ADC_ConvCpltCallback+0x70>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	2b32      	cmp	r3, #50	; 0x32
 80011c2:	d111      	bne.n	80011e8 <HAL_ADC_ConvCpltCallback+0x3c>
		adc_average = sum / count;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_ADC_ConvCpltCallback+0x74>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <HAL_ADC_ConvCpltCallback+0x70>)
 80011ca:	8812      	ldrh	r2, [r2, #0]
 80011cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <HAL_ADC_ConvCpltCallback+0x78>)
 80011d2:	6013      	str	r3, [r2, #0]
		sum = 0;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_ADC_ConvCpltCallback+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
		count = 0;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_ADC_ConvCpltCallback+0x70>)
 80011dc:	2200      	movs	r2, #0
 80011de:	801a      	strh	r2, [r3, #0]
		flag_avg = 1;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_ADC_ConvCpltCallback+0x7c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e00c      	b.n	8001202 <HAL_ADC_ConvCpltCallback+0x56>
	} else {
		sum += adc_buffer;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_ADC_ConvCpltCallback+0x74>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_ADC_ConvCpltCallback+0x68>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <HAL_ADC_ConvCpltCallback+0x74>)
 80011f4:	6013      	str	r3, [r2, #0]
		count++;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_ADC_ConvCpltCallback+0x70>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_ADC_ConvCpltCallback+0x70>)
 8001200:	801a      	strh	r2, [r3, #0]
	}
	flag_adc = 1;
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_ADC_ConvCpltCallback+0x80>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	200005f4 	.word	0x200005f4
 8001218:	200005f0 	.word	0x200005f0
 800121c:	20000600 	.word	0x20000600
 8001220:	200005f8 	.word	0x200005f8
 8001224:	200005fc 	.word	0x200005fc
 8001228:	20000602 	.word	0x20000602
 800122c:	20000603 	.word	0x20000603

08001230 <HAL_UART_RxCpltCallback>:
	if (GPIO_Pin == FC_Failure_Pin) {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
		HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin, 0);
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart6.Instance) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <HAL_UART_RxCpltCallback+0x88>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d134      	bne.n	80012ae <HAL_UART_RxCpltCallback+0x7e>
		if (!rx_index) {
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_UART_RxCpltCallback+0x8c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10d      	bne.n	8001268 <HAL_UART_RxCpltCallback+0x38>
			for (int i = 0; i < 20; i++) {
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e007      	b.n	8001262 <HAL_UART_RxCpltCallback+0x32>
				rx_buffer[i] = '\0';
 8001252:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <HAL_UART_RxCpltCallback+0x90>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b13      	cmp	r3, #19
 8001266:	ddf4      	ble.n	8001252 <HAL_UART_RxCpltCallback+0x22>
			}
		}
		if (rx_data != '\n' && rx_data != '\r' && rx_data != '/') {
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_UART_RxCpltCallback+0x94>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b0a      	cmp	r3, #10
 800126e:	d013      	beq.n	8001298 <HAL_UART_RxCpltCallback+0x68>
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_UART_RxCpltCallback+0x94>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b0d      	cmp	r3, #13
 8001276:	d00f      	beq.n	8001298 <HAL_UART_RxCpltCallback+0x68>
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_UART_RxCpltCallback+0x94>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b2f      	cmp	r3, #47	; 0x2f
 800127e:	d00b      	beq.n	8001298 <HAL_UART_RxCpltCallback+0x68>
			rx_buffer[rx_index++] = rx_data;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_UART_RxCpltCallback+0x8c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	b2d1      	uxtb	r1, r2
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_UART_RxCpltCallback+0x8c>)
 800128a:	7011      	strb	r1, [r2, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_UART_RxCpltCallback+0x94>)
 8001290:	7819      	ldrb	r1, [r3, #0]
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_UART_RxCpltCallback+0x90>)
 8001294:	5499      	strb	r1, [r3, r2]
 8001296:	e005      	b.n	80012a4 <HAL_UART_RxCpltCallback+0x74>
		} else {
			//HAL_UART_Transmit(&huart1, (uint8_t*)rx_buffer, strlen(rx_buffer), HAL_MAX_DELAY);
			flag_value = 1;
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_UART_RxCpltCallback+0x98>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_UART_RxCpltCallback+0x8c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	4907      	ldr	r1, [pc, #28]	; (80012c4 <HAL_UART_RxCpltCallback+0x94>)
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <HAL_UART_RxCpltCallback+0x88>)
 80012aa:	f004 f80a 	bl	80052c2 <HAL_UART_Receive_IT>
	}
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000059c 	.word	0x2000059c
 80012bc:	2000066a 	.word	0x2000066a
 80012c0:	2000064c 	.word	0x2000064c
 80012c4:	2000066b 	.word	0x2000066b
 80012c8:	20000604 	.word	0x20000604

080012cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b09c      	sub	sp, #112	; 0x70
 80012d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012d2:	f000 ffdb 	bl	800228c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012d6:	f000 f883 	bl	80013e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012da:	f000 fa39 	bl	8001750 <MX_GPIO_Init>
	MX_DMA_Init();
 80012de:	f000 fa17 	bl	8001710 <MX_DMA_Init>
	MX_ADC1_Init();
 80012e2:	f000 f8ed 	bl	80014c0 <MX_ADC1_Init>
	MX_TIM1_Init();
 80012e6:	f000 f93d 	bl	8001564 <MX_TIM1_Init>
	MX_USART6_UART_Init();
 80012ea:	f000 f9e7 	bl	80016bc <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &adc_buffer, 1);
 80012ee:	2201      	movs	r2, #1
 80012f0:	492e      	ldr	r1, [pc, #184]	; (80013ac <main+0xe0>)
 80012f2:	482f      	ldr	r0, [pc, #188]	; (80013b0 <main+0xe4>)
 80012f4:	f001 f880 	bl	80023f8 <HAL_ADC_Start_DMA>
	HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	492e      	ldr	r1, [pc, #184]	; (80013b4 <main+0xe8>)
 80012fc:	482e      	ldr	r0, [pc, #184]	; (80013b8 <main+0xec>)
 80012fe:	f003 ffe0 	bl	80052c2 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001302:	2108      	movs	r1, #8
 8001304:	482d      	ldr	r0, [pc, #180]	; (80013bc <main+0xf0>)
 8001306:	f003 f8cd 	bl	80044a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800130a:	210c      	movs	r1, #12
 800130c:	482b      	ldr	r0, [pc, #172]	; (80013bc <main+0xf0>)
 800130e:	f003 f8c9 	bl	80044a4 <HAL_TIM_PWM_Start>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of TaskReceiveData */
	osThreadDef(TaskReceiveData, StartTaskReceiveData, osPriorityHigh, 0, 128);
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <main+0xf4>)
 8001314:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001318:	461d      	mov	r5, r3
 800131a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001322:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskReceiveDataHandle = osThreadCreate(osThread(TaskReceiveData), NULL);
 8001326:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f004 ff80 	bl	8006232 <osThreadCreate>
 8001332:	4603      	mov	r3, r0
 8001334:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <main+0xf8>)
 8001336:	6013      	str	r3, [r2, #0]

	/* definition and creation of TaskHeater */
	osThreadDef(TaskHeater, StartTaskHeater, osPriorityNormal, 0, 128);
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <main+0xfc>)
 800133a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800133e:	461d      	mov	r5, r3
 8001340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskHeaterHandle = osThreadCreate(osThread(TaskHeater), NULL);
 800134c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f004 ff6d 	bl	8006232 <osThreadCreate>
 8001358:	4603      	mov	r3, r0
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <main+0x100>)
 800135c:	6013      	str	r3, [r2, #0]

	/* definition and creation of TaskFan */
	osThreadDef(TaskFan, StartTaskFan, osPriorityBelowNormal, 0, 128);
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <main+0x104>)
 8001360:	f107 041c 	add.w	r4, r7, #28
 8001364:	461d      	mov	r5, r3
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800136e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskFanHandle = osThreadCreate(osThread(TaskFan), NULL);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f004 ff5a 	bl	8006232 <osThreadCreate>
 800137e:	4603      	mov	r3, r0
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <main+0x108>)
 8001382:	6013      	str	r3, [r2, #0]

	/* definition and creation of TaskSendData */
	osThreadDef(TaskSendData, StartTaskSendData, osPriorityLow, 0, 128);
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <main+0x10c>)
 8001386:	463c      	mov	r4, r7
 8001388:	461d      	mov	r5, r3
 800138a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TaskSendDataHandle = osThreadCreate(osThread(TaskSendData), NULL);
 8001396:	463b      	mov	r3, r7
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f004 ff49 	bl	8006232 <osThreadCreate>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <main+0x110>)
 80013a4:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80013a6:	f004 ff3d 	bl	8006224 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80013aa:	e7fe      	b.n	80013aa <main+0xde>
 80013ac:	200005f4 	.word	0x200005f4
 80013b0:	200004ac 	.word	0x200004ac
 80013b4:	2000066b 	.word	0x2000066b
 80013b8:	2000059c 	.word	0x2000059c
 80013bc:	20000554 	.word	0x20000554
 80013c0:	0800bb78 	.word	0x0800bb78
 80013c4:	200005e0 	.word	0x200005e0
 80013c8:	0800bba0 	.word	0x0800bba0
 80013cc:	200005e4 	.word	0x200005e4
 80013d0:	0800bbc4 	.word	0x0800bbc4
 80013d4:	200005e8 	.word	0x200005e8
 80013d8:	0800bbf0 	.word	0x0800bbf0
 80013dc:	200005ec 	.word	0x200005ec

080013e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b094      	sub	sp, #80	; 0x50
 80013e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	2230      	movs	r2, #48	; 0x30
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fdbb 	bl	8008f6a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <SystemClock_Config+0xd8>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <SystemClock_Config+0xd8>)
 800140e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001412:	6413      	str	r3, [r2, #64]	; 0x40
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <SystemClock_Config+0xd8>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <SystemClock_Config+0xdc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a24      	ldr	r2, [pc, #144]	; (80014bc <SystemClock_Config+0xdc>)
 800142a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <SystemClock_Config+0xdc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800143c:	2301      	movs	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001454:	23b4      	movs	r3, #180	; 0xb4
 8001456:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001460:	f107 0320 	add.w	r3, r7, #32
 8001464:	4618      	mov	r0, r3
 8001466:	f002 fadd 	bl	8003a24 <HAL_RCC_OscConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0x94>
		Error_Handler();
 8001470:	f000 fc72 	bl	8001d58 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001474:	f002 fa86 	bl	8003984 <HAL_PWREx_EnableOverDrive>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0xa2>
		Error_Handler();
 800147e:	f000 fc6b 	bl	8001d58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2302      	movs	r3, #2
 8001488:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001492:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2105      	movs	r1, #5
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fd37 	bl	8003f14 <HAL_RCC_ClockConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0xd0>
		Error_Handler();
 80014ac:	f000 fc54 	bl	8001d58 <Error_Handler>
	}
}
 80014b0:	bf00      	nop
 80014b2:	3750      	adds	r7, #80	; 0x50
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_ADC1_Init+0x98>)
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <MX_ADC1_Init+0x9c>)
 80014d6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_ADC1_Init+0x98>)
 80014da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014de:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_ADC1_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_ADC1_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_ADC1_Init+0x98>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MX_ADC1_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_ADC1_Init+0x98>)
 8001502:	4a17      	ldr	r2, [pc, #92]	; (8001560 <MX_ADC1_Init+0xa0>)
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_ADC1_Init+0x98>)
 800150e:	2201      	movs	r2, #1
 8001510:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_ADC1_Init+0x98>)
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_ADC1_Init+0x98>)
 800151c:	2201      	movs	r2, #1
 800151e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_ADC1_Init+0x98>)
 8001522:	f000 ff25 	bl	8002370 <HAL_ADC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC1_Init+0x70>
		Error_Handler();
 800152c:	f000 fc14 	bl	8001d58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001530:	2305      	movs	r3, #5
 8001532:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001538:	2307      	movs	r3, #7
 800153a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_ADC1_Init+0x98>)
 8001542:	f001 f87d 	bl	8002640 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0x90>
		Error_Handler();
 800154c:	f000 fc04 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200004ac 	.word	0x200004ac
 800155c:	40012000 	.word	0x40012000
 8001560:	0f000001 	.word	0x0f000001

08001564 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b096      	sub	sp, #88	; 0x58
 8001568:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800156a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001578:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	615a      	str	r2, [r3, #20]
 8001594:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2220      	movs	r2, #32
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f007 fce4 	bl	8008f6a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015a4:	4a44      	ldr	r2, [pc, #272]	; (80016b8 <MX_TIM1_Init+0x154>)
 80015a6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 9 - 1;
 80015a8:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015aa:	2208      	movs	r2, #8
 80015ac:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80015b4:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ba:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80015c2:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80015ce:	4839      	ldr	r0, [pc, #228]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015d0:	f002 fec0 	bl	8004354 <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0x7a>
		Error_Handler();
 80015da:	f000 fbbd 	bl	8001d58 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015e8:	4619      	mov	r1, r3
 80015ea:	4832      	ldr	r0, [pc, #200]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015ec:	f003 f8e4 	bl	80047b8 <HAL_TIM_ConfigClockSource>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM1_Init+0x96>
		Error_Handler();
 80015f6:	f000 fbaf 	bl	8001d58 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80015fa:	482e      	ldr	r0, [pc, #184]	; (80016b4 <MX_TIM1_Init+0x150>)
 80015fc:	f002 fef9 	bl	80043f2 <HAL_TIM_PWM_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001606:	f000 fba7 	bl	8001d58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001612:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001616:	4619      	mov	r1, r3
 8001618:	4826      	ldr	r0, [pc, #152]	; (80016b4 <MX_TIM1_Init+0x150>)
 800161a:	f003 fca5 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001624:	f000 fb98 	bl	8001d58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001628:	2360      	movs	r3, #96	; 0x60
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	2208      	movs	r2, #8
 800164a:	4619      	mov	r1, r3
 800164c:	4819      	ldr	r0, [pc, #100]	; (80016b4 <MX_TIM1_Init+0x150>)
 800164e:	f002 fff1 	bl	8004634 <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001658:	f000 fb7e 	bl	8001d58 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	220c      	movs	r2, #12
 8001662:	4619      	mov	r1, r3
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <MX_TIM1_Init+0x150>)
 8001666:	f002 ffe5 	bl	8004634 <HAL_TIM_PWM_ConfigChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8001670:	f000 fb72 	bl	8001d58 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4619      	mov	r1, r3
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <MX_TIM1_Init+0x150>)
 8001698:	f003 fce2 	bl	8005060 <HAL_TIMEx_ConfigBreakDeadTime>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 80016a2:	f000 fb59 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80016a6:	4803      	ldr	r0, [pc, #12]	; (80016b4 <MX_TIM1_Init+0x150>)
 80016a8:	f000 fc2c 	bl	8001f04 <HAL_TIM_MspPostInit>

}
 80016ac:	bf00      	nop
 80016ae:	3758      	adds	r7, #88	; 0x58
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000554 	.word	0x20000554
 80016b8:	40010000 	.word	0x40010000

080016bc <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART6_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART6_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART6_UART_Init+0x4c>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART6_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART6_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART6_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART6_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART6_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART6_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART6_UART_Init+0x4c>)
 80016f4:	f003 fd06 	bl	8005104 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 80016fe:	f000 fb2b 	bl	8001d58 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000059c 	.word	0x2000059c
 800170c:	40011400 	.word	0x40011400

08001710 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_DMA_Init+0x3c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <MX_DMA_Init+0x3c>)
 8001720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_DMA_Init+0x3c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2105      	movs	r1, #5
 8001736:	2038      	movs	r0, #56	; 0x38
 8001738:	f001 fb0d 	bl	8002d56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800173c:	2038      	movs	r0, #56	; 0x38
 800173e:	f001 fb26 	bl	8002d8e <HAL_NVIC_EnableIRQ>

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b46      	ldr	r3, [pc, #280]	; (8001884 <MX_GPIO_Init+0x134>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a45      	ldr	r2, [pc, #276]	; (8001884 <MX_GPIO_Init+0x134>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b43      	ldr	r3, [pc, #268]	; (8001884 <MX_GPIO_Init+0x134>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <MX_GPIO_Init+0x134>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a3e      	ldr	r2, [pc, #248]	; (8001884 <MX_GPIO_Init+0x134>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b3c      	ldr	r3, [pc, #240]	; (8001884 <MX_GPIO_Init+0x134>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b38      	ldr	r3, [pc, #224]	; (8001884 <MX_GPIO_Init+0x134>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a37      	ldr	r2, [pc, #220]	; (8001884 <MX_GPIO_Init+0x134>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b35      	ldr	r3, [pc, #212]	; (8001884 <MX_GPIO_Init+0x134>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <MX_GPIO_Init+0x134>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a30      	ldr	r2, [pc, #192]	; (8001884 <MX_GPIO_Init+0x134>)
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <MX_GPIO_Init+0x134>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <MX_GPIO_Init+0x134>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a29      	ldr	r2, [pc, #164]	; (8001884 <MX_GPIO_Init+0x134>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <MX_GPIO_Init+0x134>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f8:	4823      	ldr	r0, [pc, #140]	; (8001888 <MX_GPIO_Init+0x138>)
 80017fa:	f002 f8a9 	bl	8003950 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80017fe:	2200      	movs	r2, #0
 8001800:	f24e 010a 	movw	r1, #57354	; 0xe00a
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_GPIO_Init+0x13c>)
 8001806:	f002 f8a3 	bl	8003950 <HAL_GPIO_WritePin>
	GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | FC_Ctrl_Pin | Fan_Ctrl_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : Thermostat_Pin Relay_Pin */
	GPIO_InitStruct.Pin = Thermostat_Pin | Relay_Pin;
 800180a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001810:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001814:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4819      	ldr	r0, [pc, #100]	; (8001888 <MX_GPIO_Init+0x138>)
 8001822:	f001 fed1 	bl	80035c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Heater_Ctrl_Pin */
	GPIO_InitStruct.Pin = Heater_Ctrl_Pin;
 8001826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Heater_Ctrl_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4812      	ldr	r0, [pc, #72]	; (8001888 <MX_GPIO_Init+0x138>)
 8001840:	f001 fec2 	bl	80035c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD13 PD14 PD15 FC_Ctrl_Pin
	 Fan_Ctrl_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | FC_Ctrl_Pin
 8001844:	f24e 030a 	movw	r3, #57354	; 0xe00a
 8001848:	617b      	str	r3, [r7, #20]
			| Fan_Ctrl_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <MX_GPIO_Init+0x13c>)
 800185e:	f001 feb3 	bl	80035c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : FC_Failure_Pin */
	GPIO_InitStruct.Pin = FC_Failure_Pin;
 8001862:	2310      	movs	r3, #16
 8001864:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800186a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(FC_Failure_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_GPIO_Init+0x13c>)
 8001878:	f001 fea6 	bl	80035c8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40021000 	.word	0x40021000
 800188c:	40020c00 	.word	0x40020c00

08001890 <StartTaskReceiveData>:
 * @brief  Function implementing the TaskReceiveData thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskReceiveData */
void StartTaskReceiveData(void const *argument) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (flag_value) {
 8001898:	4b80      	ldr	r3, [pc, #512]	; (8001a9c <StartTaskReceiveData+0x20c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80f8 	beq.w	8001a92 <StartTaskReceiveData+0x202>
			char num[30];
			uint8_t num_index = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			while (rx_buffer[num_index] != '\0') {
 80018a8:	e00f      	b.n	80018ca <StartTaskReceiveData+0x3a>
				num[num_index] = rx_buffer[num_index + 1];
 80018aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018b4:	497a      	ldr	r1, [pc, #488]	; (8001aa0 <StartTaskReceiveData+0x210>)
 80018b6:	5c8a      	ldrb	r2, [r1, r2]
 80018b8:	3328      	adds	r3, #40	; 0x28
 80018ba:	443b      	add	r3, r7
 80018bc:	f803 2c20 	strb.w	r2, [r3, #-32]
				num_index++;
 80018c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c4:	3301      	adds	r3, #1
 80018c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			while (rx_buffer[num_index] != '\0') {
 80018ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ce:	4a74      	ldr	r2, [pc, #464]	; (8001aa0 <StartTaskReceiveData+0x210>)
 80018d0:	5cd3      	ldrb	r3, [r2, r3]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1e9      	bne.n	80018aa <StartTaskReceiveData+0x1a>
			}
			switch (rx_buffer[0]) {
 80018d6:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <StartTaskReceiveData+0x210>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	3b63      	subs	r3, #99	; 0x63
 80018dc:	2b13      	cmp	r3, #19
 80018de:	f200 80d5 	bhi.w	8001a8c <StartTaskReceiveData+0x1fc>
 80018e2:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <StartTaskReceiveData+0x58>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	080019c9 	.word	0x080019c9
 80018ec:	08001a69 	.word	0x08001a69
 80018f0:	08001a8d 	.word	0x08001a8d
 80018f4:	080019fb 	.word	0x080019fb
 80018f8:	08001a8d 	.word	0x08001a8d
 80018fc:	08001995 	.word	0x08001995
 8001900:	08001a4b 	.word	0x08001a4b
 8001904:	08001a8d 	.word	0x08001a8d
 8001908:	08001a8d 	.word	0x08001a8d
 800190c:	08001a8d 	.word	0x08001a8d
 8001910:	08001a8d 	.word	0x08001a8d
 8001914:	08001a8d 	.word	0x08001a8d
 8001918:	08001a8d 	.word	0x08001a8d
 800191c:	08001a2d 	.word	0x08001a2d
 8001920:	08001a8d 	.word	0x08001a8d
 8001924:	08001a87 	.word	0x08001a87
 8001928:	08001a8d 	.word	0x08001a8d
 800192c:	08001939 	.word	0x08001939
 8001930:	08001a8d 	.word	0x08001a8d
 8001934:	08001971 	.word	0x08001971
			case 't': {
				temp_set = atof(num);
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	4618      	mov	r0, r3
 800193e:	f005 feed 	bl	800771c <atof>
 8001942:	ec53 2b10 	vmov	r2, r3, d0
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f95d 	bl	8000c08 <__aeabi_d2f>
 800194e:	4603      	mov	r3, r0
 8001950:	4a54      	ldr	r2, [pc, #336]	; (8001aa4 <StartTaskReceiveData+0x214>)
 8001952:	6013      	str	r3, [r2, #0]
				last_error_pres = 0;
 8001954:	4b54      	ldr	r3, [pc, #336]	; (8001aa8 <StartTaskReceiveData+0x218>)
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
				integrated_error_pres = 0;
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <StartTaskReceiveData+0x21c>)
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
				timerPID_pres = HAL_GetTick();
 8001964:	f000 fcf8 	bl	8002358 <HAL_GetTick>
 8001968:	4603      	mov	r3, r0
 800196a:	4a51      	ldr	r2, [pc, #324]	; (8001ab0 <StartTaskReceiveData+0x220>)
 800196c:	6013      	str	r3, [r2, #0]
				break;
 800196e:	e08d      	b.n	8001a8c <StartTaskReceiveData+0x1fc>
			}
			case 'v': {
				flag_speed = 1;
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <StartTaskReceiveData+0x224>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
				speed_set = atof(num);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4618      	mov	r0, r3
 800197c:	f005 fece 	bl	800771c <atof>
 8001980:	ec53 2b10 	vmov	r2, r3, d0
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f93e 	bl	8000c08 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	4a4a      	ldr	r2, [pc, #296]	; (8001ab8 <StartTaskReceiveData+0x228>)
 8001990:	6013      	str	r3, [r2, #0]
				break;
 8001992:	e07b      	b.n	8001a8c <StartTaskReceiveData+0x1fc>
			}
			case 'h': //heater control
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, atoi(num)); //green
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4618      	mov	r0, r3
 800199a:	f005 fec2 	bl	8007722 <atoi>
 800199e:	4603      	mov	r3, r0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a8:	4844      	ldr	r0, [pc, #272]	; (8001abc <StartTaskReceiveData+0x22c>)
 80019aa:	f001 ffd1 	bl	8003950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin,
						atoi(num));
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 feb5 	bl	8007722 <atoi>
 80019b8:	4603      	mov	r3, r0
				HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin,
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c2:	483f      	ldr	r0, [pc, #252]	; (8001ac0 <StartTaskReceiveData+0x230>)
 80019c4:	f001 ffc4 	bl	8003950 <HAL_GPIO_WritePin>
			}
			case 'c': //frequency converter control
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, atoi(num)); //red
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	4618      	mov	r0, r3
 80019ce:	f005 fea8 	bl	8007722 <atoi>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019dc:	4837      	ldr	r0, [pc, #220]	; (8001abc <StartTaskReceiveData+0x22c>)
 80019de:	f001 ffb7 	bl	8003950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin, atoi(num));
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4618      	mov	r0, r3
 80019e8:	f005 fe9b 	bl	8007722 <atoi>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	2102      	movs	r1, #2
 80019f4:	4831      	ldr	r0, [pc, #196]	; (8001abc <StartTaskReceiveData+0x22c>)
 80019f6:	f001 ffab 	bl	8003950 <HAL_GPIO_WritePin>
			}
			case 'f': //fan control
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, atoi(num)); //yellow
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 fe8f 	bl	8007722 <atoi>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a0e:	482b      	ldr	r0, [pc, #172]	; (8001abc <StartTaskReceiveData+0x22c>)
 8001a10:	f001 ff9e 	bl	8003950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin, atoi(num));
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f005 fe82 	bl	8007722 <atoi>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	2108      	movs	r1, #8
 8001a26:	4825      	ldr	r0, [pc, #148]	; (8001abc <StartTaskReceiveData+0x22c>)
 8001a28:	f001 ff92 	bl	8003950 <HAL_GPIO_WritePin>
			}
			case 'p': {
				PID_TEMP.Kp = atof(num);
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	4618      	mov	r0, r3
 8001a32:	f005 fe73 	bl	800771c <atof>
 8001a36:	ec53 2b10 	vmov	r2, r3, d0
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8e3 	bl	8000c08 <__aeabi_d2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <StartTaskReceiveData+0x234>)
 8001a46:	6013      	str	r3, [r2, #0]
				break;
 8001a48:	e020      	b.n	8001a8c <StartTaskReceiveData+0x1fc>
			}
			case 'i': //
			{
				PID_TEMP.Ki = atof(num);
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f005 fe64 	bl	800771c <atof>
 8001a54:	ec53 2b10 	vmov	r2, r3, d0
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8d4 	bl	8000c08 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <StartTaskReceiveData+0x234>)
 8001a64:	6053      	str	r3, [r2, #4]
				break;
 8001a66:	e011      	b.n	8001a8c <StartTaskReceiveData+0x1fc>
			}
			case 'd': //
			{
				PID_TEMP.Kd = atof(num);
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f005 fe55 	bl	800771c <atof>
 8001a72:	ec53 2b10 	vmov	r2, r3, d0
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f8c5 	bl	8000c08 <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <StartTaskReceiveData+0x234>)
 8001a82:	6093      	str	r3, [r2, #8]
				break;
 8001a84:	e002      	b.n	8001a8c <StartTaskReceiveData+0x1fc>
			}
			case 'r': {
				request = 1;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <StartTaskReceiveData+0x238>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
			}
			}
			flag_value = 0;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <StartTaskReceiveData+0x20c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
		}

		osDelay(500);
 8001a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a96:	f004 fc18 	bl	80062ca <osDelay>
		if (flag_value) {
 8001a9a:	e6fd      	b.n	8001898 <StartTaskReceiveData+0x8>
 8001a9c:	20000604 	.word	0x20000604
 8001aa0:	2000064c 	.word	0x2000064c
 8001aa4:	2000060c 	.word	0x2000060c
 8001aa8:	20000204 	.word	0x20000204
 8001aac:	20000208 	.word	0x20000208
 8001ab0:	20000200 	.word	0x20000200
 8001ab4:	20000605 	.word	0x20000605
 8001ab8:	20000610 	.word	0x20000610
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000606 	.word	0x20000606

08001acc <StartTaskHeater>:
 * @brief Function implementing the TaskHeater thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskHeater */
void StartTaskHeater(void const *argument) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskHeater */
	/* Infinite loop */
	for (;;) {
		if (HAL_GPIO_ReadPin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin)
 8001ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad8:	4841      	ldr	r0, [pc, #260]	; (8001be0 <StartTaskHeater+0x114>)
 8001ada:	f001 ff21 	bl	8003920 <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f7      	beq.n	8001ad4 <StartTaskHeater+0x8>
				&& HAL_GPIO_ReadPin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin)) {
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	483f      	ldr	r0, [pc, #252]	; (8001be4 <StartTaskHeater+0x118>)
 8001ae8:	f001 ff1a 	bl	8003920 <HAL_GPIO_ReadPin>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <StartTaskHeater+0x8>
			if (!HAL_GPIO_ReadPin(Thermostat_GPIO_Port, Thermostat_Pin)) {
 8001af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af6:	483a      	ldr	r0, [pc, #232]	; (8001be0 <StartTaskHeater+0x114>)
 8001af8:	f001 ff12 	bl	8003920 <HAL_GPIO_ReadPin>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d16a      	bne.n	8001bd8 <StartTaskHeater+0x10c>
				if (flag_adc) {
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <StartTaskHeater+0x11c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d061      	beq.n	8001bce <StartTaskHeater+0x102>
					if (flag_avg) {
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <StartTaskHeater+0x120>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <StartTaskHeater+0x68>
						temp = (float) adc_average * coeff_temp;
 8001b12:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <StartTaskHeater+0x124>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <StartTaskHeater+0x128>)
 8001b28:	edc3 7a00 	vstr	s15, [r3]
						flag_avg = 0;
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <StartTaskHeater+0x120>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e00c      	b.n	8001b4e <StartTaskHeater+0x82>
					} else {
						temp = (float) adc_value * coeff_temp;
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <StartTaskHeater+0x12c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b40:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <StartTaskHeater+0x128>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]
					}
					if (abs(temp - temp_set) > 2) {
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <StartTaskHeater+0x128>)
 8001b50:	ed93 7a00 	vldr	s14, [r3]
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <StartTaskHeater+0x130>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b62:	ee17 3a90 	vmov	r3, s15
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bfb8      	it	lt
 8001b6a:	425b      	neglt	r3, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	dd26      	ble.n	8001bbe <StartTaskHeater+0xf2>
						pwm_temp = PID_Calc(PID_TEMP, temp, temp_set);
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <StartTaskHeater+0x128>)
 8001b72:	ed93 6a00 	vldr	s12, [r3]
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <StartTaskHeater+0x130>)
 8001b78:	edd3 5a00 	vldr	s11, [r3]
 8001b7c:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <StartTaskHeater+0x134>)
 8001b7e:	edd3 6a00 	vldr	s13, [r3]
 8001b82:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b86:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b8a:	eeb0 2a65 	vmov.f32	s4, s11
 8001b8e:	eef0 1a46 	vmov.f32	s3, s12
 8001b92:	eeb0 0a66 	vmov.f32	s0, s13
 8001b96:	eef0 0a47 	vmov.f32	s1, s14
 8001b9a:	eeb0 1a67 	vmov.f32	s2, s15
 8001b9e:	f7ff fa37 	bl	8001010 <PID_Calc>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <StartTaskHeater+0x138>)
 8001ba8:	801a      	strh	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_temp);
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <StartTaskHeater+0x138>)
 8001bac:	881a      	ldrh	r2, [r3, #0]
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <StartTaskHeater+0x13c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c
						osDelay(1000);
 8001bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb8:	f004 fb87 	bl	80062ca <osDelay>
 8001bbc:	e003      	b.n	8001bc6 <StartTaskHeater+0xfa>
					} else {
						osDelay(60000);
 8001bbe:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001bc2:	f004 fb82 	bl	80062ca <osDelay>
					}
					flag_adc = 0;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <StartTaskHeater+0x11c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e782      	b.n	8001ad4 <StartTaskHeater+0x8>
				} else {
					osDelay(1000);
 8001bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd2:	f004 fb7a 	bl	80062ca <osDelay>
 8001bd6:	e77d      	b.n	8001ad4 <StartTaskHeater+0x8>
				}

			} else {
				osDelay(300000);
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <StartTaskHeater+0x140>)
 8001bda:	f004 fb76 	bl	80062ca <osDelay>
		if (HAL_GPIO_ReadPin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin)
 8001bde:	e779      	b.n	8001ad4 <StartTaskHeater+0x8>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	20000603 	.word	0x20000603
 8001bec:	20000602 	.word	0x20000602
 8001bf0:	200005fc 	.word	0x200005fc
 8001bf4:	20000608 	.word	0x20000608
 8001bf8:	200005f0 	.word	0x200005f0
 8001bfc:	2000060c 	.word	0x2000060c
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000614 	.word	0x20000614
 8001c08:	20000554 	.word	0x20000554
 8001c0c:	000493e0 	.word	0x000493e0

08001c10 <StartTaskFan>:
 * @brief Function implementing the TaskFan thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskFan */
void StartTaskFan(void const *argument) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskFan */
	/* Infinite loop */
	for (;;) {
		if (HAL_GPIO_ReadPin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin)) {
 8001c18:	2108      	movs	r1, #8
 8001c1a:	481f      	ldr	r0, [pc, #124]	; (8001c98 <StartTaskFan+0x88>)
 8001c1c:	f001 fe80 	bl	8003920 <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d02e      	beq.n	8001c84 <StartTaskFan+0x74>
			if (!HAL_GPIO_ReadPin(Relay_GPIO_Port, Relay_Pin)
 8001c26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c2a:	481c      	ldr	r0, [pc, #112]	; (8001c9c <StartTaskFan+0x8c>)
 8001c2c:	f001 fe78 	bl	8003920 <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d126      	bne.n	8001c84 <StartTaskFan+0x74>
					&& !HAL_GPIO_ReadPin(FC_Failure_GPIO_Port,
 8001c36:	2110      	movs	r1, #16
 8001c38:	4817      	ldr	r0, [pc, #92]	; (8001c98 <StartTaskFan+0x88>)
 8001c3a:	f001 fe71 	bl	8003920 <HAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11f      	bne.n	8001c84 <StartTaskFan+0x74>
							FC_Failure_Pin)) {
				if (flag_speed) {
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <StartTaskFan+0x90>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01b      	beq.n	8001c84 <StartTaskFan+0x74>
					pwm_speed = (uint32_t) (speed_set * coeff_speed);
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <StartTaskFan+0x94>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc89 	bl	8000568 <__aeabi_f2d>
 8001c56:	a30e      	add	r3, pc, #56	; (adr r3, 8001c90 <StartTaskFan+0x80>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fcdc 	bl	8000618 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffae 	bl	8000bc8 <__aeabi_d2uiz>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <StartTaskFan+0x98>)
 8001c72:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_speed);
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <StartTaskFan+0x98>)
 8001c76:	881a      	ldrh	r2, [r3, #0]
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <StartTaskFan+0x9c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
					flag_speed = 0;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <StartTaskFan+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		osDelay(5000);
 8001c84:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c88:	f004 fb1f 	bl	80062ca <osDelay>
		if (HAL_GPIO_ReadPin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin)) {
 8001c8c:	e7c4      	b.n	8001c18 <StartTaskFan+0x8>
 8001c8e:	bf00      	nop
 8001c90:	9999999a 	.word	0x9999999a
 8001c94:	3fc99999 	.word	0x3fc99999
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	20000605 	.word	0x20000605
 8001ca4:	20000610 	.word	0x20000610
 8001ca8:	20000616 	.word	0x20000616
 8001cac:	20000554 	.word	0x20000554

08001cb0 <StartTaskSendData>:
 * @brief Function implementing the TaskSendData thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskSendData */
void StartTaskSendData(void const *argument) {
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af04      	add	r7, sp, #16
 8001cb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskSendData */
	/* Infinite loop */
	for (;;) {
		if (request) {
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <StartTaskSendData+0x88>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d036      	beq.n	8001d2e <StartTaskSendData+0x7e>
			uint8_t state_heater = HAL_GPIO_ReadPin(Thermostat_GPIO_Port,
 8001cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc4:	481d      	ldr	r0, [pc, #116]	; (8001d3c <StartTaskSendData+0x8c>)
 8001cc6:	f001 fe2b 	bl	8003920 <HAL_GPIO_ReadPin>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73fb      	strb	r3, [r7, #15]
			Thermostat_Pin);
			uint8_t state_fan = HAL_GPIO_ReadPin(Relay_GPIO_Port, Relay_Pin);
 8001cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd2:	481a      	ldr	r0, [pc, #104]	; (8001d3c <StartTaskSendData+0x8c>)
 8001cd4:	f001 fe24 	bl	8003920 <HAL_GPIO_ReadPin>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73bb      	strb	r3, [r7, #14]
			uint8_t state_fc = HAL_GPIO_ReadPin(FC_Failure_GPIO_Port,
 8001cdc:	2110      	movs	r1, #16
 8001cde:	4818      	ldr	r0, [pc, #96]	; (8001d40 <StartTaskSendData+0x90>)
 8001ce0:	f001 fe1e 	bl	8003920 <HAL_GPIO_ReadPin>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	737b      	strb	r3, [r7, #13]
			FC_Failure_Pin);

			sprintf(Txdata, "%.1f %d %d %d %d\n", temp, pwm_temp, state_heater,
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <StartTaskSendData+0x94>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc3b 	bl	8000568 <__aeabi_f2d>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4914      	ldr	r1, [pc, #80]	; (8001d48 <StartTaskSendData+0x98>)
 8001cf8:	8809      	ldrh	r1, [r1, #0]
 8001cfa:	460d      	mov	r5, r1
 8001cfc:	7bf9      	ldrb	r1, [r7, #15]
 8001cfe:	7bb8      	ldrb	r0, [r7, #14]
 8001d00:	7b7c      	ldrb	r4, [r7, #13]
 8001d02:	9403      	str	r4, [sp, #12]
 8001d04:	9002      	str	r0, [sp, #8]
 8001d06:	9101      	str	r1, [sp, #4]
 8001d08:	9500      	str	r5, [sp, #0]
 8001d0a:	4910      	ldr	r1, [pc, #64]	; (8001d4c <StartTaskSendData+0x9c>)
 8001d0c:	4810      	ldr	r0, [pc, #64]	; (8001d50 <StartTaskSendData+0xa0>)
 8001d0e:	f007 f8c9 	bl	8008ea4 <siprintf>
					state_fan, state_fc);
			HAL_UART_Transmit(&huart6, (uint8_t*) Txdata, strlen(Txdata),
 8001d12:	480f      	ldr	r0, [pc, #60]	; (8001d50 <StartTaskSendData+0xa0>)
 8001d14:	f7fe fabc 	bl	8000290 <strlen>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	490b      	ldr	r1, [pc, #44]	; (8001d50 <StartTaskSendData+0xa0>)
 8001d22:	480c      	ldr	r0, [pc, #48]	; (8001d54 <StartTaskSendData+0xa4>)
 8001d24:	f003 fa3b 	bl	800519e <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			request = 0;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <StartTaskSendData+0x88>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1000);
 8001d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d32:	f004 faca 	bl	80062ca <osDelay>
		if (request) {
 8001d36:	e7bf      	b.n	8001cb8 <StartTaskSendData+0x8>
 8001d38:	20000606 	.word	0x20000606
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	20000608 	.word	0x20000608
 8001d48:	20000614 	.word	0x20000614
 8001d4c:	0800bc0c 	.word	0x0800bc0c
 8001d50:	20000618 	.word	0x20000618
 8001d54:	2000059c 	.word	0x2000059c

08001d58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	b672      	cpsid	i
}
 8001d5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d60:	e7fe      	b.n	8001d60 <Error_Handler+0x8>
	...

08001d64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_MspInit+0x54>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_MspInit+0x54>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_MspInit+0x54>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_MspInit+0x54>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_MspInit+0x54>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_MspInit+0x54>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	210f      	movs	r1, #15
 8001da6:	f06f 0001 	mvn.w	r0, #1
 8001daa:	f000 ffd4 	bl	8002d56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_ADC_MspInit+0xf0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d161      	bne.n	8001ea2 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <HAL_ADC_MspInit+0xf4>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_ADC_MspInit+0xf4>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_ADC_MspInit+0xf4>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_ADC_MspInit+0xf4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a2b      	ldr	r2, [pc, #172]	; (8001eb0 <HAL_ADC_MspInit+0xf4>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_ADC_MspInit+0xf4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_Temp_Pin;
 8001e16:	2320      	movs	r3, #32
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Temp_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4822      	ldr	r0, [pc, #136]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e2a:	f001 fbcd 	bl	80035c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e2e:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e30:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_ADC_MspInit+0x100>)
 8001e32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e34:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e70:	2204      	movs	r2, #4
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e76:	2203      	movs	r2, #3
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e86:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e88:	f000 ff9c 	bl	8002dc4 <HAL_DMA_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8001e92:	f7ff ff61 	bl	8001d58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	; 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40012000 	.word	0x40012000
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	200004f4 	.word	0x200004f4
 8001ebc:	40026410 	.word	0x40026410

08001ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <HAL_TIM_Base_MspInit+0x3c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10d      	bne.n	8001eee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_TIM_Base_MspInit+0x40>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <HAL_TIM_Base_MspInit+0x40>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_TIM_Base_MspInit+0x40>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40023800 	.word	0x40023800

08001f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <HAL_TIM_MspPostInit+0x68>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d11e      	bne.n	8001f64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_TIM_MspPostInit+0x6c>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <HAL_TIM_MspPostInit+0x6c>)
 8001f30:	f043 0310 	orr.w	r3, r3, #16
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_TIM_MspPostInit+0x6c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_Heater_Pin|PWM_Fan_Pin;
 8001f42:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <HAL_TIM_MspPostInit+0x70>)
 8001f60:	f001 fb32 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40021000 	.word	0x40021000

08001f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_UART_MspInit+0x94>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d133      	bne.n	8002002 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fa4:	f043 0320 	orr.w	r3, r3, #32
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_UART_MspInit+0x98>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	4809      	ldr	r0, [pc, #36]	; (8002014 <HAL_UART_MspInit+0x9c>)
 8001fee:	f001 faeb 	bl	80035c8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2105      	movs	r1, #5
 8001ff6:	2047      	movs	r0, #71	; 0x47
 8001ff8:	f000 fead 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ffc:	2047      	movs	r0, #71	; 0x47
 8001ffe:	f000 fec6 	bl	8002d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40011400 	.word	0x40011400
 8002010:	40023800 	.word	0x40023800
 8002014:	40020800 	.word	0x40020800

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800201c:	e7fe      	b.n	800201c <NMI_Handler+0x4>

0800201e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <HardFault_Handler+0x4>

08002024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <MemManage_Handler+0x4>

0800202a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <BusFault_Handler+0x4>

08002030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <UsageFault_Handler+0x4>

08002036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002048:	f000 f972 	bl	8002330 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800204c:	f004 feec 	bl	8006e28 <xTaskGetSchedulerState>
 8002050:	4603      	mov	r3, r0
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002056:	f005 f927 	bl	80072a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <DMA2_Stream0_IRQHandler+0x10>)
 8002066:	f001 f845 	bl	80030f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200004f4 	.word	0x200004f4

08002074 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <USART6_IRQHandler+0x10>)
 800207a:	f003 f953 	bl	8005324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000059c 	.word	0x2000059c

08002088 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return 1;
 800208c:	2301      	movs	r3, #1
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_kill>:

int _kill(int pid, int sig)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020a2:	f007 f81d 	bl	80090e0 <__errno>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2216      	movs	r2, #22
 80020aa:	601a      	str	r2, [r3, #0]
  return -1;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_exit>:

void _exit (int status)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ffe7 	bl	8002098 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ca:	e7fe      	b.n	80020ca <_exit+0x12>

080020cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e00a      	b.n	80020f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020de:	f3af 8000 	nop.w
 80020e2:	4601      	mov	r1, r0
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf0      	blt.n	80020de <_read+0x12>
  }

  return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e009      	b.n	800212c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	60ba      	str	r2, [r7, #8]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	dbf1      	blt.n	8002118 <_write+0x12>
  }
  return len;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <_close>:

int _close(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002166:	605a      	str	r2, [r3, #4]
  return 0;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <_isatty>:

int _isatty(int file)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <_sbrk+0x5c>)
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <_sbrk+0x60>)
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <_sbrk+0x64>)
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <_sbrk+0x68>)
 80021c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d207      	bcs.n	80021e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d8:	f006 ff82 	bl	80090e0 <__errno>
 80021dc:	4603      	mov	r3, r0
 80021de:	220c      	movs	r2, #12
 80021e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	e009      	b.n	80021fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <_sbrk+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	4a05      	ldr	r2, [pc, #20]	; (800220c <_sbrk+0x64>)
 80021f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20030000 	.word	0x20030000
 8002208:	00000400 	.word	0x00000400
 800220c:	2000066c 	.word	0x2000066c
 8002210:	20004518 	.word	0x20004518

08002214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <SystemInit+0x20>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <SystemInit+0x20>)
 8002220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002270 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800223e:	490e      	ldr	r1, [pc, #56]	; (8002278 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002254:	4c0b      	ldr	r4, [pc, #44]	; (8002284 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002262:	f7ff ffd7 	bl	8002214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002266:	f006 ff41 	bl	80090ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226a:	f7ff f82f 	bl	80012cc <main>
  bx  lr    
 800226e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002270:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002278:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800227c:	0800c084 	.word	0x0800c084
  ldr r2, =_sbss
 8002280:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002284:	20004514 	.word	0x20004514

08002288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC_IRQHandler>
	...

0800228c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_Init+0x40>)
 8002296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_Init+0x40>)
 80022a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_Init+0x40>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f000 fd43 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ba:	200f      	movs	r0, #15
 80022bc:	f000 f808 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c0:	f7ff fd50 	bl	8001d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023c00 	.word	0x40023c00

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x54>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fd5b 	bl	8002daa <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f000 fd23 	bl	8002d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_InitTick+0x5c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000000c 	.word	0x2000000c
 8002328:	20000014 	.word	0x20000014
 800232c:	20000010 	.word	0x20000010

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000014 	.word	0x20000014
 8002354:	20000670 	.word	0x20000670

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000670 	.word	0x20000670

08002370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e033      	b.n	80023ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fd14 	bl	8001dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b6:	f023 0302 	bic.w	r3, r3, #2
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa6e 	bl	80028a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
 80023de:	e001      	b.n	80023e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Start_DMA+0x1e>
 8002412:	2302      	movs	r3, #2
 8002414:	e0e9      	b.n	80025ea <HAL_ADC_Start_DMA+0x1f2>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d018      	beq.n	800245e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800243c:	4b6d      	ldr	r3, [pc, #436]	; (80025f4 <HAL_ADC_Start_DMA+0x1fc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6d      	ldr	r2, [pc, #436]	; (80025f8 <HAL_ADC_Start_DMA+0x200>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0c9a      	lsrs	r2, r3, #18
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002450:	e002      	b.n	8002458 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	3b01      	subs	r3, #1
 8002456:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f9      	bne.n	8002452 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246c:	d107      	bne.n	800247e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800247c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 80a1 	bne.w	80025d0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024cc:	d106      	bne.n	80024dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f023 0206 	bic.w	r2, r3, #6
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
 80024da:	e002      	b.n	80024e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_ADC_Start_DMA+0x204>)
 80024ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	4a43      	ldr	r2, [pc, #268]	; (8002600 <HAL_ADC_Start_DMA+0x208>)
 80024f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	4a42      	ldr	r2, [pc, #264]	; (8002604 <HAL_ADC_Start_DMA+0x20c>)
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	4a41      	ldr	r2, [pc, #260]	; (8002608 <HAL_ADC_Start_DMA+0x210>)
 8002504:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800250e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800251e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800252e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	334c      	adds	r3, #76	; 0x4c
 800253a:	4619      	mov	r1, r3
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f000 fcee 	bl	8002f20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	2b00      	cmp	r3, #0
 800254e:	d12a      	bne.n	80025a6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2d      	ldr	r2, [pc, #180]	; (800260c <HAL_ADC_Start_DMA+0x214>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d015      	beq.n	8002586 <HAL_ADC_Start_DMA+0x18e>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2c      	ldr	r2, [pc, #176]	; (8002610 <HAL_ADC_Start_DMA+0x218>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d105      	bne.n	8002570 <HAL_ADC_Start_DMA+0x178>
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_ADC_Start_DMA+0x204>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a27      	ldr	r2, [pc, #156]	; (8002614 <HAL_ADC_Start_DMA+0x21c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d136      	bne.n	80025e8 <HAL_ADC_Start_DMA+0x1f0>
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <HAL_ADC_Start_DMA+0x204>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	d130      	bne.n	80025e8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d129      	bne.n	80025e8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e020      	b.n	80025e8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_ADC_Start_DMA+0x214>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d11b      	bne.n	80025e8 <HAL_ADC_Start_DMA+0x1f0>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d114      	bne.n	80025e8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	e00b      	b.n	80025e8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f043 0210 	orr.w	r2, r3, #16
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	40012300 	.word	0x40012300
 8002600:	08002a9d 	.word	0x08002a9d
 8002604:	08002b57 	.word	0x08002b57
 8002608:	08002b73 	.word	0x08002b73
 800260c:	40012000 	.word	0x40012000
 8002610:	40012100 	.word	0x40012100
 8002614:	40012200 	.word	0x40012200

08002618 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1c>
 8002658:	2302      	movs	r3, #2
 800265a:	e113      	b.n	8002884 <HAL_ADC_ConfigChannel+0x244>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b09      	cmp	r3, #9
 800266a:	d925      	bls.n	80026b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68d9      	ldr	r1, [r3, #12]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	3b1e      	subs	r3, #30
 8002682:	2207      	movs	r2, #7
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43da      	mvns	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	400a      	ands	r2, r1
 8002690:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	4603      	mov	r3, r0
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4403      	add	r3, r0
 80026aa:	3b1e      	subs	r3, #30
 80026ac:	409a      	lsls	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	e022      	b.n	80026fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	2207      	movs	r2, #7
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	400a      	ands	r2, r1
 80026da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6919      	ldr	r1, [r3, #16]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	4618      	mov	r0, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4403      	add	r3, r0
 80026f4:	409a      	lsls	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b06      	cmp	r3, #6
 8002704:	d824      	bhi.n	8002750 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	3b05      	subs	r3, #5
 8002718:	221f      	movs	r2, #31
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	400a      	ands	r2, r1
 8002726:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b05      	subs	r3, #5
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
 800274e:	e04c      	b.n	80027ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d824      	bhi.n	80027a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3b23      	subs	r3, #35	; 0x23
 800276a:	221f      	movs	r2, #31
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43da      	mvns	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	400a      	ands	r2, r1
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3b23      	subs	r3, #35	; 0x23
 8002794:	fa00 f203 	lsl.w	r2, r0, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
 80027a0:	e023      	b.n	80027ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	3b41      	subs	r3, #65	; 0x41
 80027b4:	221f      	movs	r2, #31
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	400a      	ands	r2, r1
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4618      	mov	r0, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	3b41      	subs	r3, #65	; 0x41
 80027de:	fa00 f203 	lsl.w	r2, r0, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ea:	4b29      	ldr	r3, [pc, #164]	; (8002890 <HAL_ADC_ConfigChannel+0x250>)
 80027ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a28      	ldr	r2, [pc, #160]	; (8002894 <HAL_ADC_ConfigChannel+0x254>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d10f      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1d8>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b12      	cmp	r3, #18
 80027fe:	d10b      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <HAL_ADC_ConfigChannel+0x254>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d12b      	bne.n	800287a <HAL_ADC_ConfigChannel+0x23a>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <HAL_ADC_ConfigChannel+0x258>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d003      	beq.n	8002834 <HAL_ADC_ConfigChannel+0x1f4>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b11      	cmp	r3, #17
 8002832:	d122      	bne.n	800287a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_ADC_ConfigChannel+0x258>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d111      	bne.n	800287a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_ADC_ConfigChannel+0x25c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <HAL_ADC_ConfigChannel+0x260>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	0c9a      	lsrs	r2, r3, #18
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800286c:	e002      	b.n	8002874 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	3b01      	subs	r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f9      	bne.n	800286e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40012300 	.word	0x40012300
 8002894:	40012000 	.word	0x40012000
 8002898:	10000012 	.word	0x10000012
 800289c:	2000000c 	.word	0x2000000c
 80028a0:	431bde83 	.word	0x431bde83

080028a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ac:	4b79      	ldr	r3, [pc, #484]	; (8002a94 <ADC_Init+0x1f0>)
 80028ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	021a      	lsls	r2, r3, #8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <ADC_Init+0x1f4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d022      	beq.n	8002982 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800294a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800296c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	e00f      	b.n	80029a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002990:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0202 	bic.w	r2, r2, #2
 80029b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7e1b      	ldrb	r3, [r3, #24]
 80029bc:	005a      	lsls	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01b      	beq.n	8002a08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	3b01      	subs	r3, #1
 80029fc:	035a      	lsls	r2, r3, #13
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	e007      	b.n	8002a18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	051a      	lsls	r2, r3, #20
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6899      	ldr	r1, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a5a:	025a      	lsls	r2, r3, #9
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6899      	ldr	r1, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	029a      	lsls	r2, r3, #10
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40012300 	.word	0x40012300
 8002a98:	0f000001 	.word	0x0f000001

08002a9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d13c      	bne.n	8002b30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d12b      	bne.n	8002b28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d127      	bne.n	8002b28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d119      	bne.n	8002b28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0220 	bic.w	r2, r2, #32
 8002b02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7fe fb3f 	bl	80011ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b2e:	e00e      	b.n	8002b4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff fd75 	bl	800262c <HAL_ADC_ErrorCallback>
}
 8002b42:	e004      	b.n	8002b4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff fd57 	bl	8002618 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2240      	movs	r2, #64	; 0x40
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7ff fd4a 	bl	800262c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd2:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	60d3      	str	r3, [r2, #12]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <__NVIC_GetPriorityGrouping+0x18>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 0307 	and.w	r3, r3, #7
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db0b      	blt.n	8002c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	4907      	ldr	r1, [pc, #28]	; (8002c3c <__NVIC_EnableIRQ+0x38>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db0a      	blt.n	8002c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	490c      	ldr	r1, [pc, #48]	; (8002c8c <__NVIC_SetPriority+0x4c>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	0112      	lsls	r2, r2, #4
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	440b      	add	r3, r1
 8002c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c68:	e00a      	b.n	8002c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4908      	ldr	r1, [pc, #32]	; (8002c90 <__NVIC_SetPriority+0x50>)
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	3b04      	subs	r3, #4
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	761a      	strb	r2, [r3, #24]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	; 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f1c3 0307 	rsb	r3, r3, #7
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	bf28      	it	cs
 8002cb2:	2304      	movcs	r3, #4
 8002cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d902      	bls.n	8002cc4 <NVIC_EncodePriority+0x30>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3b03      	subs	r3, #3
 8002cc2:	e000      	b.n	8002cc6 <NVIC_EncodePriority+0x32>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43d9      	mvns	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	4313      	orrs	r3, r2
         );
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3724      	adds	r7, #36	; 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d0c:	d301      	bcc.n	8002d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00f      	b.n	8002d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <SysTick_Config+0x40>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f7ff ff8e 	bl	8002c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <SysTick_Config+0x40>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2a:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <SysTick_Config+0x40>)
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	e000e010 	.word	0xe000e010

08002d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff29 	bl	8002ba0 <__NVIC_SetPriorityGrouping>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d68:	f7ff ff3e 	bl	8002be8 <__NVIC_GetPriorityGrouping>
 8002d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	6978      	ldr	r0, [r7, #20]
 8002d74:	f7ff ff8e 	bl	8002c94 <NVIC_EncodePriority>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff5d 	bl	8002c40 <__NVIC_SetPriority>
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff31 	bl	8002c04 <__NVIC_EnableIRQ>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ffa2 	bl	8002cfc <SysTick_Config>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff fac2 	bl	8002358 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e099      	b.n	8002f14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e00:	e00f      	b.n	8002e22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e02:	f7ff faa9 	bl	8002358 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d908      	bls.n	8002e22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2203      	movs	r2, #3
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e078      	b.n	8002f14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e8      	bne.n	8002e02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <HAL_DMA_Init+0x158>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d107      	bne.n	8002e8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	4313      	orrs	r3, r2
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 0307 	bic.w	r3, r3, #7
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d117      	bne.n	8002ee6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fb01 	bl	80034d0 <DMA_CheckFifoParam>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e016      	b.n	8002f14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fab8 	bl	8003464 <DMA_CalcBaseAndBitshift>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	223f      	movs	r2, #63	; 0x3f
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	f010803f 	.word	0xf010803f

08002f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_DMA_Start_IT+0x26>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e040      	b.n	8002fc8 <HAL_DMA_Start_IT+0xa8>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d12f      	bne.n	8002fba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fa4a 	bl	8003408 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	223f      	movs	r2, #63	; 0x3f
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0216 	orr.w	r2, r2, #22
 8002f8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0208 	orr.w	r2, r2, #8
 8002fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e005      	b.n	8002fc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fde:	f7ff f9bb 	bl	8002358 <HAL_GetTick>
 8002fe2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d008      	beq.n	8003002 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e052      	b.n	80030a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0216 	bic.w	r2, r2, #22
 8003010:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003020:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d103      	bne.n	8003032 <HAL_DMA_Abort+0x62>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0208 	bic.w	r2, r2, #8
 8003040:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003052:	e013      	b.n	800307c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003054:	f7ff f980 	bl	8002358 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b05      	cmp	r3, #5
 8003060:	d90c      	bls.n	800307c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2203      	movs	r2, #3
 800306c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e015      	b.n	80030a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e4      	bne.n	8003054 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	223f      	movs	r2, #63	; 0x3f
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d004      	beq.n	80030ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00c      	b.n	80030e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2205      	movs	r2, #5
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003100:	4b8e      	ldr	r3, [pc, #568]	; (800333c <HAL_DMA_IRQHandler+0x248>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a8e      	ldr	r2, [pc, #568]	; (8003340 <HAL_DMA_IRQHandler+0x24c>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0a9b      	lsrs	r3, r3, #10
 800310c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2208      	movs	r2, #8
 8003120:	409a      	lsls	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01a      	beq.n	8003160 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0204 	bic.w	r2, r2, #4
 8003146:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	2208      	movs	r2, #8
 800314e:	409a      	lsls	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	2201      	movs	r2, #1
 8003166:	409a      	lsls	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	2201      	movs	r2, #1
 8003184:	409a      	lsls	r2, r3
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f043 0202 	orr.w	r2, r3, #2
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	2204      	movs	r2, #4
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d012      	beq.n	80031cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	2204      	movs	r2, #4
 80031ba:	409a      	lsls	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	2210      	movs	r2, #16
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d043      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d03c      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	2210      	movs	r2, #16
 80031f0:	409a      	lsls	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d018      	beq.n	8003236 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d108      	bne.n	8003224 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d024      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
 8003222:	e01f      	b.n	8003264 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
 8003234:	e016      	b.n	8003264 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0208 	bic.w	r2, r2, #8
 8003252:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	2220      	movs	r2, #32
 800326a:	409a      	lsls	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 808f 	beq.w	8003394 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8087 	beq.w	8003394 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2220      	movs	r2, #32
 800328c:	409a      	lsls	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b05      	cmp	r3, #5
 800329c:	d136      	bne.n	800330c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0216 	bic.w	r2, r2, #22
 80032ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <HAL_DMA_IRQHandler+0x1da>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0208 	bic.w	r2, r2, #8
 80032dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	223f      	movs	r2, #63	; 0x3f
 80032e4:	409a      	lsls	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d07e      	beq.n	8003400 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
        }
        return;
 800330a:	e079      	b.n	8003400 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01d      	beq.n	8003356 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10d      	bne.n	8003344 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	2b00      	cmp	r3, #0
 800332e:	d031      	beq.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
 8003338:	e02c      	b.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
 800333a:	bf00      	nop
 800333c:	2000000c 	.word	0x2000000c
 8003340:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d023      	beq.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
 8003354:	e01e      	b.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10f      	bne.n	8003384 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0210 	bic.w	r2, r2, #16
 8003372:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	2b00      	cmp	r3, #0
 800339a:	d032      	beq.n	8003402 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2205      	movs	r2, #5
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	3301      	adds	r3, #1
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d307      	bcc.n	80033dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f2      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x2cc>
 80033da:	e000      	b.n	80033de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
 80033fe:	e000      	b.n	8003402 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003400:	bf00      	nop
    }
  }
}
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003424:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d108      	bne.n	8003448 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003446:	e007      	b.n	8003458 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3b10      	subs	r3, #16
 8003474:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800347e:	4a13      	ldr	r2, [pc, #76]	; (80034cc <DMA_CalcBaseAndBitshift+0x68>)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d909      	bls.n	80034a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	1d1a      	adds	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	659a      	str	r2, [r3, #88]	; 0x58
 80034a4:	e007      	b.n	80034b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	aaaaaaab 	.word	0xaaaaaaab
 80034cc:	0800bc40 	.word	0x0800bc40

080034d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d11f      	bne.n	800352a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d856      	bhi.n	800359e <DMA_CheckFifoParam+0xce>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <DMA_CheckFifoParam+0x28>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	08003509 	.word	0x08003509
 80034fc:	0800351b 	.word	0x0800351b
 8003500:	08003509 	.word	0x08003509
 8003504:	0800359f 	.word	0x0800359f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d046      	beq.n	80035a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003518:	e043      	b.n	80035a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003522:	d140      	bne.n	80035a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003528:	e03d      	b.n	80035a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003532:	d121      	bne.n	8003578 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d837      	bhi.n	80035aa <DMA_CheckFifoParam+0xda>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <DMA_CheckFifoParam+0x70>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003551 	.word	0x08003551
 8003544:	08003557 	.word	0x08003557
 8003548:	08003551 	.word	0x08003551
 800354c:	08003569 	.word	0x08003569
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      break;
 8003554:	e030      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d025      	beq.n	80035ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003566:	e022      	b.n	80035ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003570:	d11f      	bne.n	80035b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003576:	e01c      	b.n	80035b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d903      	bls.n	8003586 <DMA_CheckFifoParam+0xb6>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d003      	beq.n	800358c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003584:	e018      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
      break;
 800358a:	e015      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00e      	beq.n	80035b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      break;
 800359c:	e00b      	b.n	80035b6 <DMA_CheckFifoParam+0xe6>
      break;
 800359e:	bf00      	nop
 80035a0:	e00a      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035a2:	bf00      	nop
 80035a4:	e008      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035a6:	bf00      	nop
 80035a8:	e006      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035aa:	bf00      	nop
 80035ac:	e004      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035ae:	bf00      	nop
 80035b0:	e002      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <DMA_CheckFifoParam+0xe8>
      break;
 80035b6:	bf00      	nop
    }
  } 
  
  return status; 
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop

080035c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e177      	b.n	80038d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035e4:	2201      	movs	r2, #1
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	f040 8166 	bne.w	80038ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d005      	beq.n	800361a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003616:	2b02      	cmp	r3, #2
 8003618:	d130      	bne.n	800367c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	2203      	movs	r2, #3
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003650:	2201      	movs	r2, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 0201 	and.w	r2, r3, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b03      	cmp	r3, #3
 8003686:	d017      	beq.n	80036b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2203      	movs	r2, #3
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d123      	bne.n	800370c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	08da      	lsrs	r2, r3, #3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3208      	adds	r2, #8
 80036cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	220f      	movs	r2, #15
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	08da      	lsrs	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3208      	adds	r2, #8
 8003706:	69b9      	ldr	r1, [r7, #24]
 8003708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0203 	and.w	r2, r3, #3
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80c0 	beq.w	80038ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b66      	ldr	r3, [pc, #408]	; (80038ec <HAL_GPIO_Init+0x324>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4a65      	ldr	r2, [pc, #404]	; (80038ec <HAL_GPIO_Init+0x324>)
 8003758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800375c:	6453      	str	r3, [r2, #68]	; 0x44
 800375e:	4b63      	ldr	r3, [pc, #396]	; (80038ec <HAL_GPIO_Init+0x324>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800376a:	4a61      	ldr	r2, [pc, #388]	; (80038f0 <HAL_GPIO_Init+0x328>)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	3302      	adds	r3, #2
 8003772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	220f      	movs	r2, #15
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <HAL_GPIO_Init+0x32c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d037      	beq.n	8003806 <HAL_GPIO_Init+0x23e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a57      	ldr	r2, [pc, #348]	; (80038f8 <HAL_GPIO_Init+0x330>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d031      	beq.n	8003802 <HAL_GPIO_Init+0x23a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a56      	ldr	r2, [pc, #344]	; (80038fc <HAL_GPIO_Init+0x334>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d02b      	beq.n	80037fe <HAL_GPIO_Init+0x236>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a55      	ldr	r2, [pc, #340]	; (8003900 <HAL_GPIO_Init+0x338>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d025      	beq.n	80037fa <HAL_GPIO_Init+0x232>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a54      	ldr	r2, [pc, #336]	; (8003904 <HAL_GPIO_Init+0x33c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01f      	beq.n	80037f6 <HAL_GPIO_Init+0x22e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a53      	ldr	r2, [pc, #332]	; (8003908 <HAL_GPIO_Init+0x340>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d019      	beq.n	80037f2 <HAL_GPIO_Init+0x22a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a52      	ldr	r2, [pc, #328]	; (800390c <HAL_GPIO_Init+0x344>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_GPIO_Init+0x226>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a51      	ldr	r2, [pc, #324]	; (8003910 <HAL_GPIO_Init+0x348>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00d      	beq.n	80037ea <HAL_GPIO_Init+0x222>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a50      	ldr	r2, [pc, #320]	; (8003914 <HAL_GPIO_Init+0x34c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <HAL_GPIO_Init+0x21e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a4f      	ldr	r2, [pc, #316]	; (8003918 <HAL_GPIO_Init+0x350>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_GPIO_Init+0x21a>
 80037de:	2309      	movs	r3, #9
 80037e0:	e012      	b.n	8003808 <HAL_GPIO_Init+0x240>
 80037e2:	230a      	movs	r3, #10
 80037e4:	e010      	b.n	8003808 <HAL_GPIO_Init+0x240>
 80037e6:	2308      	movs	r3, #8
 80037e8:	e00e      	b.n	8003808 <HAL_GPIO_Init+0x240>
 80037ea:	2307      	movs	r3, #7
 80037ec:	e00c      	b.n	8003808 <HAL_GPIO_Init+0x240>
 80037ee:	2306      	movs	r3, #6
 80037f0:	e00a      	b.n	8003808 <HAL_GPIO_Init+0x240>
 80037f2:	2305      	movs	r3, #5
 80037f4:	e008      	b.n	8003808 <HAL_GPIO_Init+0x240>
 80037f6:	2304      	movs	r3, #4
 80037f8:	e006      	b.n	8003808 <HAL_GPIO_Init+0x240>
 80037fa:	2303      	movs	r3, #3
 80037fc:	e004      	b.n	8003808 <HAL_GPIO_Init+0x240>
 80037fe:	2302      	movs	r3, #2
 8003800:	e002      	b.n	8003808 <HAL_GPIO_Init+0x240>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_GPIO_Init+0x240>
 8003806:	2300      	movs	r3, #0
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	f002 0203 	and.w	r2, r2, #3
 800380e:	0092      	lsls	r2, r2, #2
 8003810:	4093      	lsls	r3, r2
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003818:	4935      	ldr	r1, [pc, #212]	; (80038f0 <HAL_GPIO_Init+0x328>)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	3302      	adds	r3, #2
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003826:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_GPIO_Init+0x354>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384a:	4a34      	ldr	r2, [pc, #208]	; (800391c <HAL_GPIO_Init+0x354>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003850:	4b32      	ldr	r3, [pc, #200]	; (800391c <HAL_GPIO_Init+0x354>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003874:	4a29      	ldr	r2, [pc, #164]	; (800391c <HAL_GPIO_Init+0x354>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800387a:	4b28      	ldr	r3, [pc, #160]	; (800391c <HAL_GPIO_Init+0x354>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800389e:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_GPIO_Init+0x354>)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <HAL_GPIO_Init+0x354>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <HAL_GPIO_Init+0x354>)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3301      	adds	r3, #1
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	f67f ae84 	bls.w	80035e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40013800 	.word	0x40013800
 80038f4:	40020000 	.word	0x40020000
 80038f8:	40020400 	.word	0x40020400
 80038fc:	40020800 	.word	0x40020800
 8003900:	40020c00 	.word	0x40020c00
 8003904:	40021000 	.word	0x40021000
 8003908:	40021400 	.word	0x40021400
 800390c:	40021800 	.word	0x40021800
 8003910:	40021c00 	.word	0x40021c00
 8003914:	40022000 	.word	0x40022000
 8003918:	40022400 	.word	0x40022400
 800391c:	40013c00 	.word	0x40013c00

08003920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
 800393c:	e001      	b.n	8003942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800396c:	e003      	b.n	8003976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_PWREx_EnableOverDrive+0x90>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <HAL_PWREx_EnableOverDrive+0x90>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_PWREx_EnableOverDrive+0x90>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x94>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b0:	f7fe fcd2 	bl	8002358 <HAL_GetTick>
 80039b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039b6:	e009      	b.n	80039cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b8:	f7fe fcce 	bl	8002358 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c6:	d901      	bls.n	80039cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e01f      	b.n	8003a0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x98>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d1ee      	bne.n	80039b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e0:	f7fe fcba 	bl	8002358 <HAL_GetTick>
 80039e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039e6:	e009      	b.n	80039fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039e8:	f7fe fcb6 	bl	8002358 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f6:	d901      	bls.n	80039fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e007      	b.n	8003a0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x98>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a08:	d1ee      	bne.n	80039e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	420e0040 	.word	0x420e0040
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	420e0044 	.word	0x420e0044

08003a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e267      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d075      	beq.n	8003b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a42:	4b88      	ldr	r3, [pc, #544]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d00c      	beq.n	8003a68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4e:	4b85      	ldr	r3, [pc, #532]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d112      	bne.n	8003a80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5a:	4b82      	ldr	r3, [pc, #520]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a66:	d10b      	bne.n	8003a80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	4b7e      	ldr	r3, [pc, #504]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d05b      	beq.n	8003b2c <HAL_RCC_OscConfig+0x108>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d157      	bne.n	8003b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e242      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a88:	d106      	bne.n	8003a98 <HAL_RCC_OscConfig+0x74>
 8003a8a:	4b76      	ldr	r3, [pc, #472]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a75      	ldr	r2, [pc, #468]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e01d      	b.n	8003ad4 <HAL_RCC_OscConfig+0xb0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0x98>
 8003aa2:	4b70      	ldr	r3, [pc, #448]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6f      	ldr	r2, [pc, #444]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b6d      	ldr	r3, [pc, #436]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6c      	ldr	r2, [pc, #432]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0xb0>
 8003abc:	4b69      	ldr	r3, [pc, #420]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a68      	ldr	r2, [pc, #416]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b66      	ldr	r3, [pc, #408]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a65      	ldr	r2, [pc, #404]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fe fc3c 	bl	8002358 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fe fc38 	bl	8002358 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e207      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b5b      	ldr	r3, [pc, #364]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xc0>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe fc28 	bl	8002358 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fc24 	bl	8002358 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e1f3      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1e:	4b51      	ldr	r3, [pc, #324]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0xe8>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d063      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d11c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b52:	4b44      	ldr	r3, [pc, #272]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d116      	bne.n	8003b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_RCC_OscConfig+0x152>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d001      	beq.n	8003b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e1c7      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b76:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4937      	ldr	r1, [pc, #220]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8a:	e03a      	b.n	8003c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d020      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b94:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <HAL_RCC_OscConfig+0x244>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9a:	f7fe fbdd 	bl	8002358 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba2:	f7fe fbd9 	bl	8002358 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1a8      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb4:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc0:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4925      	ldr	r1, [pc, #148]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]
 8003bd4:	e015      	b.n	8003c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_OscConfig+0x244>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fbbc 	bl	8002358 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be4:	f7fe fbb8 	bl	8002358 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e187      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d036      	beq.n	8003c7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_RCC_OscConfig+0x248>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7fe fb9c 	bl	8002358 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c24:	f7fe fb98 	bl	8002358 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e167      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_OscConfig+0x240>)
 8003c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x200>
 8003c42:	e01b      	b.n	8003c7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <HAL_RCC_OscConfig+0x248>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fb85 	bl	8002358 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	e00e      	b.n	8003c70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c52:	f7fe fb81 	bl	8002358 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d907      	bls.n	8003c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e150      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
 8003c64:	40023800 	.word	0x40023800
 8003c68:	42470000 	.word	0x42470000
 8003c6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ea      	bne.n	8003c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8097 	beq.w	8003db8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8e:	4b81      	ldr	r3, [pc, #516]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10f      	bne.n	8003cba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	4b7d      	ldr	r3, [pc, #500]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a7c      	ldr	r2, [pc, #496]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b7a      	ldr	r3, [pc, #488]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cba:	4b77      	ldr	r3, [pc, #476]	; (8003e98 <HAL_RCC_OscConfig+0x474>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d118      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc6:	4b74      	ldr	r3, [pc, #464]	; (8003e98 <HAL_RCC_OscConfig+0x474>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a73      	ldr	r2, [pc, #460]	; (8003e98 <HAL_RCC_OscConfig+0x474>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe fb41 	bl	8002358 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cda:	f7fe fb3d 	bl	8002358 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e10c      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cec:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <HAL_RCC_OscConfig+0x474>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x2ea>
 8003d00:	4b64      	ldr	r3, [pc, #400]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a63      	ldr	r2, [pc, #396]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	e01c      	b.n	8003d48 <HAL_RCC_OscConfig+0x324>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b05      	cmp	r3, #5
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x30c>
 8003d16:	4b5f      	ldr	r3, [pc, #380]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a5e      	ldr	r2, [pc, #376]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	f043 0304 	orr.w	r3, r3, #4
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	4b5c      	ldr	r3, [pc, #368]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a5b      	ldr	r2, [pc, #364]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCC_OscConfig+0x324>
 8003d30:	4b58      	ldr	r3, [pc, #352]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a57      	ldr	r2, [pc, #348]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3c:	4b55      	ldr	r3, [pc, #340]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	4a54      	ldr	r2, [pc, #336]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d42:	f023 0304 	bic.w	r3, r3, #4
 8003d46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d015      	beq.n	8003d7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7fe fb02 	bl	8002358 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fe fafe 	bl	8002358 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e0cb      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ee      	beq.n	8003d58 <HAL_RCC_OscConfig+0x334>
 8003d7a:	e014      	b.n	8003da6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fe faec 	bl	8002358 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d84:	f7fe fae8 	bl	8002358 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0b5      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ee      	bne.n	8003d84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	4a38      	ldr	r2, [pc, #224]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80a1 	beq.w	8003f04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc2:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d05c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d141      	bne.n	8003e5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <HAL_RCC_OscConfig+0x478>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fabc 	bl	8002358 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fe fab8 	bl	8002358 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e087      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	491b      	ldr	r1, [pc, #108]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x478>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e32:	f7fe fa91 	bl	8002358 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3a:	f7fe fa8d 	bl	8002358 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e05c      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x416>
 8003e58:	e054      	b.n	8003f04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCC_OscConfig+0x478>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e60:	f7fe fa7a 	bl	8002358 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe fa76 	bl	8002358 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e045      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x444>
 8003e86:	e03d      	b.n	8003f04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e038      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40007000 	.word	0x40007000
 8003e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_RCC_OscConfig+0x4ec>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d028      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d121      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d11a      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d111      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800

08003f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0cc      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f28:	4b68      	ldr	r3, [pc, #416]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d90c      	bls.n	8003f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b65      	ldr	r3, [pc, #404]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0b8      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f68:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4a58      	ldr	r2, [pc, #352]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f80:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a52      	ldr	r2, [pc, #328]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f8c:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	494d      	ldr	r1, [pc, #308]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d044      	beq.n	8004034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d119      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07f      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd2:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e06f      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e067      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ff2:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f023 0203 	bic.w	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4934      	ldr	r1, [pc, #208]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004004:	f7fe f9a8 	bl	8002358 <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	e00a      	b.n	8004022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800400c:	f7fe f9a4 	bl	8002358 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f241 3288 	movw	r2, #5000	; 0x1388
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e04f      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 020c 	and.w	r2, r3, #12
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	429a      	cmp	r2, r3
 8004032:	d1eb      	bne.n	800400c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d20c      	bcs.n	800405c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b20      	ldr	r3, [pc, #128]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e032      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4916      	ldr	r1, [pc, #88]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	490e      	ldr	r1, [pc, #56]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800409a:	f000 f821 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 800409e:	4602      	mov	r2, r0
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	490a      	ldr	r1, [pc, #40]	; (80040d4 <HAL_RCC_ClockConfig+0x1c0>)
 80040ac:	5ccb      	ldrb	r3, [r1, r3]
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe f908 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023c00 	.word	0x40023c00
 80040d0:	40023800 	.word	0x40023800
 80040d4:	0800bc28 	.word	0x0800bc28
 80040d8:	2000000c 	.word	0x2000000c
 80040dc:	20000010 	.word	0x20000010

080040e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e4:	b094      	sub	sp, #80	; 0x50
 80040e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	647b      	str	r3, [r7, #68]	; 0x44
 80040ec:	2300      	movs	r3, #0
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f0:	2300      	movs	r3, #0
 80040f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f8:	4b79      	ldr	r3, [pc, #484]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b08      	cmp	r3, #8
 8004102:	d00d      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x40>
 8004104:	2b08      	cmp	r3, #8
 8004106:	f200 80e1 	bhi.w	80042cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x34>
 800410e:	2b04      	cmp	r3, #4
 8004110:	d003      	beq.n	800411a <HAL_RCC_GetSysClockFreq+0x3a>
 8004112:	e0db      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004116:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004118:	e0db      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800411a:	4b73      	ldr	r3, [pc, #460]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800411c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800411e:	e0d8      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004120:	4b6f      	ldr	r3, [pc, #444]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004128:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800412a:	4b6d      	ldr	r3, [pc, #436]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d063      	beq.n	80041fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004136:	4b6a      	ldr	r3, [pc, #424]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	099b      	lsrs	r3, r3, #6
 800413c:	2200      	movs	r2, #0
 800413e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004140:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
 800414a:	2300      	movs	r3, #0
 800414c:	637b      	str	r3, [r7, #52]	; 0x34
 800414e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004152:	4622      	mov	r2, r4
 8004154:	462b      	mov	r3, r5
 8004156:	f04f 0000 	mov.w	r0, #0
 800415a:	f04f 0100 	mov.w	r1, #0
 800415e:	0159      	lsls	r1, r3, #5
 8004160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004164:	0150      	lsls	r0, r2, #5
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4621      	mov	r1, r4
 800416c:	1a51      	subs	r1, r2, r1
 800416e:	6139      	str	r1, [r7, #16]
 8004170:	4629      	mov	r1, r5
 8004172:	eb63 0301 	sbc.w	r3, r3, r1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004184:	4659      	mov	r1, fp
 8004186:	018b      	lsls	r3, r1, #6
 8004188:	4651      	mov	r1, sl
 800418a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800418e:	4651      	mov	r1, sl
 8004190:	018a      	lsls	r2, r1, #6
 8004192:	4651      	mov	r1, sl
 8004194:	ebb2 0801 	subs.w	r8, r2, r1
 8004198:	4659      	mov	r1, fp
 800419a:	eb63 0901 	sbc.w	r9, r3, r1
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041b2:	4690      	mov	r8, r2
 80041b4:	4699      	mov	r9, r3
 80041b6:	4623      	mov	r3, r4
 80041b8:	eb18 0303 	adds.w	r3, r8, r3
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	462b      	mov	r3, r5
 80041c0:	eb49 0303 	adc.w	r3, r9, r3
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041d2:	4629      	mov	r1, r5
 80041d4:	024b      	lsls	r3, r1, #9
 80041d6:	4621      	mov	r1, r4
 80041d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041dc:	4621      	mov	r1, r4
 80041de:	024a      	lsls	r2, r1, #9
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e6:	2200      	movs	r2, #0
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041f0:	f7fc fd5a 	bl	8000ca8 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4613      	mov	r3, r2
 80041fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041fc:	e058      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fe:	4b38      	ldr	r3, [pc, #224]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	099b      	lsrs	r3, r3, #6
 8004204:	2200      	movs	r2, #0
 8004206:	4618      	mov	r0, r3
 8004208:	4611      	mov	r1, r2
 800420a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800420e:	623b      	str	r3, [r7, #32]
 8004210:	2300      	movs	r3, #0
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
 8004214:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	f04f 0000 	mov.w	r0, #0
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	0159      	lsls	r1, r3, #5
 8004226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800422a:	0150      	lsls	r0, r2, #5
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4641      	mov	r1, r8
 8004232:	ebb2 0a01 	subs.w	sl, r2, r1
 8004236:	4649      	mov	r1, r9
 8004238:	eb63 0b01 	sbc.w	fp, r3, r1
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004248:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800424c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004250:	ebb2 040a 	subs.w	r4, r2, sl
 8004254:	eb63 050b 	sbc.w	r5, r3, fp
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	00eb      	lsls	r3, r5, #3
 8004262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004266:	00e2      	lsls	r2, r4, #3
 8004268:	4614      	mov	r4, r2
 800426a:	461d      	mov	r5, r3
 800426c:	4643      	mov	r3, r8
 800426e:	18e3      	adds	r3, r4, r3
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	464b      	mov	r3, r9
 8004274:	eb45 0303 	adc.w	r3, r5, r3
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004286:	4629      	mov	r1, r5
 8004288:	028b      	lsls	r3, r1, #10
 800428a:	4621      	mov	r1, r4
 800428c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004290:	4621      	mov	r1, r4
 8004292:	028a      	lsls	r2, r1, #10
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429a:	2200      	movs	r2, #0
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	61fa      	str	r2, [r7, #28]
 80042a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a4:	f7fc fd00 	bl	8000ca8 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3750      	adds	r7, #80	; 0x50
 80042d8:	46bd      	mov	sp, r7
 80042da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	007a1200 	.word	0x007a1200

080042ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	2000000c 	.word	0x2000000c

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004308:	f7ff fff0 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4903      	ldr	r1, [pc, #12]	; (8004328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40023800 	.word	0x40023800
 8004328:	0800bc38 	.word	0x0800bc38

0800432c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004330:	f7ff ffdc 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0b5b      	lsrs	r3, r3, #13
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	0800bc38 	.word	0x0800bc38

08004354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e041      	b.n	80043ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fd fda0 	bl	8001ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f000 fad8 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e041      	b.n	8004488 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f839 	bl	8004490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3304      	adds	r3, #4
 800442e:	4619      	mov	r1, r3
 8004430:	4610      	mov	r0, r2
 8004432:	f000 fa89 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_TIM_PWM_Start+0x24>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e022      	b.n	800450e <HAL_TIM_PWM_Start+0x6a>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d109      	bne.n	80044e2 <HAL_TIM_PWM_Start+0x3e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	e015      	b.n	800450e <HAL_TIM_PWM_Start+0x6a>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d109      	bne.n	80044fc <HAL_TIM_PWM_Start+0x58>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e008      	b.n	800450e <HAL_TIM_PWM_Start+0x6a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e07c      	b.n	8004610 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Start+0x82>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004524:	e013      	b.n	800454e <HAL_TIM_PWM_Start+0xaa>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start+0x92>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004534:	e00b      	b.n	800454e <HAL_TIM_PWM_Start+0xaa>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0xa2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004544:	e003      	b.n	800454e <HAL_TIM_PWM_Start+0xaa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fce0 	bl	8004f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2d      	ldr	r2, [pc, #180]	; (8004618 <HAL_TIM_PWM_Start+0x174>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIM_PWM_Start+0xcc>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2c      	ldr	r2, [pc, #176]	; (800461c <HAL_TIM_PWM_Start+0x178>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_TIM_PWM_Start+0xd0>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_TIM_PWM_Start+0xd2>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a22      	ldr	r2, [pc, #136]	; (8004618 <HAL_TIM_PWM_Start+0x174>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_TIM_PWM_Start+0x136>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d01d      	beq.n	80045da <HAL_TIM_PWM_Start+0x136>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <HAL_TIM_PWM_Start+0x17c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_TIM_PWM_Start+0x136>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_TIM_PWM_Start+0x180>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_TIM_PWM_Start+0x136>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <HAL_TIM_PWM_Start+0x184>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_TIM_PWM_Start+0x136>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a16      	ldr	r2, [pc, #88]	; (800461c <HAL_TIM_PWM_Start+0x178>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_TIM_PWM_Start+0x136>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_TIM_PWM_Start+0x188>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIM_PWM_Start+0x136>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a16      	ldr	r2, [pc, #88]	; (8004630 <HAL_TIM_PWM_Start+0x18c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d111      	bne.n	80045fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d010      	beq.n	800460e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fc:	e007      	b.n	800460e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40010000 	.word	0x40010000
 800461c:	40010400 	.word	0x40010400
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40014000 	.word	0x40014000
 8004630:	40001800 	.word	0x40001800

08004634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800464e:	2302      	movs	r3, #2
 8004650:	e0ae      	b.n	80047b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	f200 809f 	bhi.w	80047a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004662:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	0800469d 	.word	0x0800469d
 800466c:	080047a1 	.word	0x080047a1
 8004670:	080047a1 	.word	0x080047a1
 8004674:	080047a1 	.word	0x080047a1
 8004678:	080046dd 	.word	0x080046dd
 800467c:	080047a1 	.word	0x080047a1
 8004680:	080047a1 	.word	0x080047a1
 8004684:	080047a1 	.word	0x080047a1
 8004688:	0800471f 	.word	0x0800471f
 800468c:	080047a1 	.word	0x080047a1
 8004690:	080047a1 	.word	0x080047a1
 8004694:	080047a1 	.word	0x080047a1
 8004698:	0800475f 	.word	0x0800475f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f9f0 	bl	8004a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	619a      	str	r2, [r3, #24]
      break;
 80046da:	e064      	b.n	80047a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa40 	bl	8004b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	619a      	str	r2, [r3, #24]
      break;
 800471c:	e043      	b.n	80047a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fa95 	bl	8004c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0208 	orr.w	r2, r2, #8
 8004738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0204 	bic.w	r2, r2, #4
 8004748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69d9      	ldr	r1, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	61da      	str	r2, [r3, #28]
      break;
 800475c:	e023      	b.n	80047a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fae9 	bl	8004d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	021a      	lsls	r2, r3, #8
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	61da      	str	r2, [r3, #28]
      break;
 800479e:	e002      	b.n	80047a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
      break;
 80047a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIM_ConfigClockSource+0x1c>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e0b4      	b.n	800493e <HAL_TIM_ConfigClockSource+0x186>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480c:	d03e      	beq.n	800488c <HAL_TIM_ConfigClockSource+0xd4>
 800480e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004812:	f200 8087 	bhi.w	8004924 <HAL_TIM_ConfigClockSource+0x16c>
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481a:	f000 8086 	beq.w	800492a <HAL_TIM_ConfigClockSource+0x172>
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004822:	d87f      	bhi.n	8004924 <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b70      	cmp	r3, #112	; 0x70
 8004826:	d01a      	beq.n	800485e <HAL_TIM_ConfigClockSource+0xa6>
 8004828:	2b70      	cmp	r3, #112	; 0x70
 800482a:	d87b      	bhi.n	8004924 <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b60      	cmp	r3, #96	; 0x60
 800482e:	d050      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004830:	2b60      	cmp	r3, #96	; 0x60
 8004832:	d877      	bhi.n	8004924 <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b50      	cmp	r3, #80	; 0x50
 8004836:	d03c      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004838:	2b50      	cmp	r3, #80	; 0x50
 800483a:	d873      	bhi.n	8004924 <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d058      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d86f      	bhi.n	8004924 <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b30      	cmp	r3, #48	; 0x30
 8004846:	d064      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x15a>
 8004848:	2b30      	cmp	r3, #48	; 0x30
 800484a:	d86b      	bhi.n	8004924 <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b20      	cmp	r3, #32
 800484e:	d060      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	2b20      	cmp	r3, #32
 8004852:	d867      	bhi.n	8004924 <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d05c      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x15a>
 8004858:	2b10      	cmp	r3, #16
 800485a:	d05a      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x15a>
 800485c:	e062      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6899      	ldr	r1, [r3, #8]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f000 fb35 	bl	8004edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	609a      	str	r2, [r3, #8]
      break;
 800488a:	e04f      	b.n	800492c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6899      	ldr	r1, [r3, #8]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f000 fb1e 	bl	8004edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ae:	609a      	str	r2, [r3, #8]
      break;
 80048b0:	e03c      	b.n	800492c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	461a      	mov	r2, r3
 80048c0:	f000 fa92 	bl	8004de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2150      	movs	r1, #80	; 0x50
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 faeb 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 80048d0:	e02c      	b.n	800492c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	461a      	mov	r2, r3
 80048e0:	f000 fab1 	bl	8004e46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2160      	movs	r1, #96	; 0x60
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fadb 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 80048f0:	e01c      	b.n	800492c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 fa72 	bl	8004de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2140      	movs	r1, #64	; 0x40
 800490a:	4618      	mov	r0, r3
 800490c:	f000 facb 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004910:	e00c      	b.n	800492c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f000 fac2 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004922:	e003      	b.n	800492c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
      break;
 8004928:	e000      	b.n	800492c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800492a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800493c:	7bfb      	ldrb	r3, [r7, #15]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a40      	ldr	r2, [pc, #256]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004966:	d00f      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3d      	ldr	r2, [pc, #244]	; (8004a60 <TIM_Base_SetConfig+0x118>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00b      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <TIM_Base_SetConfig+0x11c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3b      	ldr	r2, [pc, #236]	; (8004a68 <TIM_Base_SetConfig+0x120>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3a      	ldr	r2, [pc, #232]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d108      	bne.n	800499a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2f      	ldr	r2, [pc, #188]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d02b      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a8:	d027      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <TIM_Base_SetConfig+0x118>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d023      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <TIM_Base_SetConfig+0x11c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01f      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <TIM_Base_SetConfig+0x120>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01b      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d017      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <TIM_Base_SetConfig+0x128>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <TIM_Base_SetConfig+0x12c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <TIM_Base_SetConfig+0x130>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <TIM_Base_SetConfig+0x134>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <TIM_Base_SetConfig+0x138>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <TIM_Base_SetConfig+0x13c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d108      	bne.n	8004a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_Base_SetConfig+0xf8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d103      	bne.n	8004a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	615a      	str	r2, [r3, #20]
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40010000 	.word	0x40010000
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800
 8004a7c:	40001800 	.word	0x40001800
 8004a80:	40001c00 	.word	0x40001c00
 8004a84:	40002000 	.word	0x40002000

08004a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f023 0201 	bic.w	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0303 	bic.w	r3, r3, #3
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 0302 	bic.w	r3, r3, #2
 8004ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a20      	ldr	r2, [pc, #128]	; (8004b60 <TIM_OC1_SetConfig+0xd8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_OC1_SetConfig+0x64>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a1f      	ldr	r2, [pc, #124]	; (8004b64 <TIM_OC1_SetConfig+0xdc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d10c      	bne.n	8004b06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0308 	bic.w	r3, r3, #8
 8004af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <TIM_OC1_SetConfig+0xd8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_OC1_SetConfig+0x8e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <TIM_OC1_SetConfig+0xdc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d111      	bne.n	8004b3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	621a      	str	r2, [r3, #32]
}
 8004b54:	bf00      	nop
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40010000 	.word	0x40010000
 8004b64:	40010400 	.word	0x40010400

08004b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0320 	bic.w	r3, r3, #32
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a22      	ldr	r2, [pc, #136]	; (8004c4c <TIM_OC2_SetConfig+0xe4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_OC2_SetConfig+0x68>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <TIM_OC2_SetConfig+0xe8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10d      	bne.n	8004bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <TIM_OC2_SetConfig+0xe4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_OC2_SetConfig+0x94>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a16      	ldr	r2, [pc, #88]	; (8004c50 <TIM_OC2_SetConfig+0xe8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d113      	bne.n	8004c24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010000 	.word	0x40010000
 8004c50:	40010400 	.word	0x40010400

08004c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <TIM_OC3_SetConfig+0xe0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_OC3_SetConfig+0x66>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a20      	ldr	r2, [pc, #128]	; (8004d38 <TIM_OC3_SetConfig+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10d      	bne.n	8004cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC3_SetConfig+0xe0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_OC3_SetConfig+0x92>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC3_SetConfig+0xe4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d113      	bne.n	8004d0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	621a      	str	r2, [r3, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	031b      	lsls	r3, r3, #12
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <TIM_OC4_SetConfig+0xa4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_OC4_SetConfig+0x68>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <TIM_OC4_SetConfig+0xa8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d109      	bne.n	8004db8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40010400 	.word	0x40010400

08004de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 030a 	bic.w	r3, r3, #10
 8004e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f023 0210 	bic.w	r2, r3, #16
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f043 0307 	orr.w	r3, r3, #7
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2201      	movs	r2, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	fa01 f303 	lsl.w	r3, r1, r3
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e05a      	b.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d022      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d01d      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d018      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00e      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d009      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d004      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a15      	ldr	r2, [pc, #84]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d10c      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4313      	orrs	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40010400 	.word	0x40010400
 8005058:	40014000 	.word	0x40014000
 800505c:	40001800 	.word	0x40001800

08005060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005078:	2302      	movs	r3, #2
 800507a:	e03d      	b.n	80050f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e03f      	b.n	8005196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc ff24 	bl	8001f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	; 0x24
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fddf 	bl	8005d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800515c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800516c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800517c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b08a      	sub	sp, #40	; 0x28
 80051a2:	af02      	add	r7, sp, #8
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	603b      	str	r3, [r7, #0]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d17c      	bne.n	80052b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_UART_Transmit+0x2c>
 80051c4:	88fb      	ldrh	r3, [r7, #6]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e075      	b.n	80052ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_UART_Transmit+0x3e>
 80051d8:	2302      	movs	r3, #2
 80051da:	e06e      	b.n	80052ba <HAL_UART_Transmit+0x11c>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2221      	movs	r2, #33	; 0x21
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f2:	f7fd f8b1 	bl	8002358 <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	88fa      	ldrh	r2, [r7, #6]
 8005202:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520c:	d108      	bne.n	8005220 <HAL_UART_Transmit+0x82>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d104      	bne.n	8005220 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	e003      	b.n	8005228 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005230:	e02a      	b.n	8005288 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	2180      	movs	r1, #128	; 0x80
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fb1f 	bl	8005880 <UART_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e036      	b.n	80052ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	3302      	adds	r3, #2
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	e007      	b.n	800527a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	781a      	ldrb	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	3301      	adds	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1cf      	bne.n	8005232 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2200      	movs	r2, #0
 800529a:	2140      	movs	r1, #64	; 0x40
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 faef 	bl	8005880 <UART_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e006      	b.n	80052ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e000      	b.n	80052ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
  }
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	4613      	mov	r3, r2
 80052ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d11d      	bne.n	8005318 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_UART_Receive_IT+0x26>
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e016      	b.n	800531a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Receive_IT+0x38>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e00f      	b.n	800531a <HAL_UART_Receive_IT+0x58>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	461a      	mov	r2, r3
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fb24 	bl	800595c <UART_Start_Receive_IT>
 8005314:	4603      	mov	r3, r0
 8005316:	e000      	b.n	800531a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b0ba      	sub	sp, #232	; 0xe8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800534a:	2300      	movs	r3, #0
 800534c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005350:	2300      	movs	r3, #0
 8005352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10f      	bne.n	800538a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d009      	beq.n	800538a <HAL_UART_IRQHandler+0x66>
 8005376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fc07 	bl	8005b96 <UART_Receive_IT>
      return;
 8005388:	e256      	b.n	8005838 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800538a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80de 	beq.w	8005550 <HAL_UART_IRQHandler+0x22c>
 8005394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80d1 	beq.w	8005550 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_UART_IRQHandler+0xae>
 80053ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_UART_IRQHandler+0xd2>
 80053de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f043 0202 	orr.w	r2, r3, #2
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <HAL_UART_IRQHandler+0xf6>
 8005402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0204 	orr.w	r2, r3, #4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d011      	beq.n	800544a <HAL_UART_IRQHandler+0x126>
 8005426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d105      	bne.n	800543e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0208 	orr.w	r2, r3, #8
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 81ed 	beq.w	800582e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_UART_IRQHandler+0x14e>
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fb92 	bl	8005b96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b40      	cmp	r3, #64	; 0x40
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <HAL_UART_IRQHandler+0x17a>
 8005496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d04f      	beq.n	800553e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa9a 	bl	80059d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d141      	bne.n	8005536 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3314      	adds	r3, #20
 80054da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1d9      	bne.n	80054b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	2b00      	cmp	r3, #0
 8005504:	d013      	beq.n	800552e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	4a7d      	ldr	r2, [pc, #500]	; (8005700 <HAL_UART_IRQHandler+0x3dc>)
 800550c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd fdcc 	bl	80030b0 <HAL_DMA_Abort_IT>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d016      	beq.n	800554c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005528:	4610      	mov	r0, r2
 800552a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552c:	e00e      	b.n	800554c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f990 	bl	8005854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	e00a      	b.n	800554c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f98c 	bl	8005854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	e006      	b.n	800554c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f988 	bl	8005854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800554a:	e170      	b.n	800582e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	bf00      	nop
    return;
 800554e:	e16e      	b.n	800582e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005554:	2b01      	cmp	r3, #1
 8005556:	f040 814a 	bne.w	80057ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8143 	beq.w	80057ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 813c 	beq.w	80057ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	f040 80b4 	bne.w	8005704 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8140 	beq.w	8005832 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ba:	429a      	cmp	r2, r3
 80055bc:	f080 8139 	bcs.w	8005832 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d2:	f000 8088 	beq.w	80056e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005602:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800560e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800561a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1d9      	bne.n	80055d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3314      	adds	r3, #20
 8005642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005646:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800564a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800564e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e1      	bne.n	8005622 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3314      	adds	r3, #20
 8005664:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800566e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005682:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005684:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005688:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e3      	bne.n	800565e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80056ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e3      	bne.n	80056a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fd fc75 	bl	8002fd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8b6 	bl	8005868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056fc:	e099      	b.n	8005832 <HAL_UART_IRQHandler+0x50e>
 80056fe:	bf00      	nop
 8005700:	08005a9f 	.word	0x08005a9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800570c:	b29b      	uxth	r3, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 808b 	beq.w	8005836 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8086 	beq.w	8005836 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	330c      	adds	r3, #12
 800574a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800574e:	647a      	str	r2, [r7, #68]	; 0x44
 8005750:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800575c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e3      	bne.n	800572a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	623b      	str	r3, [r7, #32]
   return(result);
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3314      	adds	r3, #20
 8005782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005786:	633a      	str	r2, [r7, #48]	; 0x30
 8005788:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800578c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e3      	bne.n	8005762 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0310 	bic.w	r3, r3, #16
 80057be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057cc:	61fa      	str	r2, [r7, #28]
 80057ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	69b9      	ldr	r1, [r7, #24]
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	617b      	str	r3, [r7, #20]
   return(result);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e3      	bne.n	80057a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f83e 	bl	8005868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057ec:	e023      	b.n	8005836 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_UART_IRQHandler+0x4ea>
 80057fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f95d 	bl	8005ac6 <UART_Transmit_IT>
    return;
 800580c:	e014      	b.n	8005838 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00e      	beq.n	8005838 <HAL_UART_IRQHandler+0x514>
 800581a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f99d 	bl	8005b66 <UART_EndTransmit_IT>
    return;
 800582c:	e004      	b.n	8005838 <HAL_UART_IRQHandler+0x514>
    return;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <HAL_UART_IRQHandler+0x514>
      return;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <HAL_UART_IRQHandler+0x514>
      return;
 8005836:	bf00      	nop
  }
}
 8005838:	37e8      	adds	r7, #232	; 0xe8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop

08005840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b090      	sub	sp, #64	; 0x40
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005890:	e050      	b.n	8005934 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005898:	d04c      	beq.n	8005934 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800589a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80058a0:	f7fc fd5a 	bl	8002358 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d241      	bcs.n	8005934 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058d0:	637a      	str	r2, [r7, #52]	; 0x34
 80058d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e5      	bne.n	80058b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3314      	adds	r3, #20
 80058ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	613b      	str	r3, [r7, #16]
   return(result);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3314      	adds	r3, #20
 8005902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005904:	623a      	str	r2, [r7, #32]
 8005906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	69f9      	ldr	r1, [r7, #28]
 800590a:	6a3a      	ldr	r2, [r7, #32]
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	61bb      	str	r3, [r7, #24]
   return(result);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e5      	bne.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e00f      	b.n	8005954 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	429a      	cmp	r2, r3
 8005950:	d09f      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3740      	adds	r7, #64	; 0x40
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2222      	movs	r2, #34	; 0x22
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695a      	ldr	r2, [r3, #20]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0220 	orr.w	r2, r2, #32
 80059c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b095      	sub	sp, #84	; 0x54
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a00:	643a      	str	r2, [r7, #64]	; 0x40
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e5      	bne.n	80059e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3314      	adds	r3, #20
 8005a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e5      	bne.n	8005a14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d119      	bne.n	8005a84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f023 0310 	bic.w	r3, r3, #16
 8005a66:	647b      	str	r3, [r7, #68]	; 0x44
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a70:	61ba      	str	r2, [r7, #24]
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6979      	ldr	r1, [r7, #20]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e5      	bne.n	8005a50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a92:	bf00      	nop
 8005a94:	3754      	adds	r7, #84	; 0x54
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff fecb 	bl	8005854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b21      	cmp	r3, #33	; 0x21
 8005ad8:	d13e      	bne.n	8005b58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae2:	d114      	bne.n	8005b0e <UART_Transmit_IT+0x48>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d110      	bne.n	8005b0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	1c9a      	adds	r2, r3, #2
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]
 8005b0c:	e008      	b.n	8005b20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	1c59      	adds	r1, r3, #1
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6211      	str	r1, [r2, #32]
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10f      	bne.n	8005b54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e000      	b.n	8005b5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b58:	2302      	movs	r3, #2
  }
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fe5a 	bl	8005840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b08c      	sub	sp, #48	; 0x30
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b22      	cmp	r3, #34	; 0x22
 8005ba8:	f040 80ab 	bne.w	8005d02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb4:	d117      	bne.n	8005be6 <UART_Receive_IT+0x50>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d113      	bne.n	8005be6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	1c9a      	adds	r2, r3, #2
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	629a      	str	r2, [r3, #40]	; 0x28
 8005be4:	e026      	b.n	8005c34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf8:	d007      	beq.n	8005c0a <UART_Receive_IT+0x74>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <UART_Receive_IT+0x82>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e008      	b.n	8005c2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4619      	mov	r1, r3
 8005c42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d15a      	bne.n	8005cfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0220 	bic.w	r2, r2, #32
 8005c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d135      	bne.n	8005cf4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f023 0310 	bic.w	r3, r3, #16
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cae:	623a      	str	r2, [r7, #32]
 8005cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	69f9      	ldr	r1, [r7, #28]
 8005cb4:	6a3a      	ldr	r2, [r7, #32]
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e5      	bne.n	8005c8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b10      	cmp	r3, #16
 8005cce:	d10a      	bne.n	8005ce6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fdbb 	bl	8005868 <HAL_UARTEx_RxEventCallback>
 8005cf2:	e002      	b.n	8005cfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fb fa9b 	bl	8001230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e002      	b.n	8005d04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e000      	b.n	8005d04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d02:	2302      	movs	r3, #2
  }
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3730      	adds	r7, #48	; 0x30
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d10:	b0c0      	sub	sp, #256	; 0x100
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	68d9      	ldr	r1, [r3, #12]
 8005d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	ea40 0301 	orr.w	r3, r0, r1
 8005d34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d64:	f021 010c 	bic.w	r1, r1, #12
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d72:	430b      	orrs	r3, r1
 8005d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d86:	6999      	ldr	r1, [r3, #24]
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	ea40 0301 	orr.w	r3, r0, r1
 8005d92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b8f      	ldr	r3, [pc, #572]	; (8005fd8 <UART_SetConfig+0x2cc>)
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d005      	beq.n	8005dac <UART_SetConfig+0xa0>
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4b8d      	ldr	r3, [pc, #564]	; (8005fdc <UART_SetConfig+0x2d0>)
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d104      	bne.n	8005db6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dac:	f7fe fabe 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 8005db0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005db4:	e003      	b.n	8005dbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005db6:	f7fe faa5 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8005dba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc8:	f040 810c 	bne.w	8005fe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005dde:	4622      	mov	r2, r4
 8005de0:	462b      	mov	r3, r5
 8005de2:	1891      	adds	r1, r2, r2
 8005de4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005de6:	415b      	adcs	r3, r3
 8005de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dee:	4621      	mov	r1, r4
 8005df0:	eb12 0801 	adds.w	r8, r2, r1
 8005df4:	4629      	mov	r1, r5
 8005df6:	eb43 0901 	adc.w	r9, r3, r1
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e0e:	4690      	mov	r8, r2
 8005e10:	4699      	mov	r9, r3
 8005e12:	4623      	mov	r3, r4
 8005e14:	eb18 0303 	adds.w	r3, r8, r3
 8005e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e1c:	462b      	mov	r3, r5
 8005e1e:	eb49 0303 	adc.w	r3, r9, r3
 8005e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	18db      	adds	r3, r3, r3
 8005e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005e40:	4613      	mov	r3, r2
 8005e42:	eb42 0303 	adc.w	r3, r2, r3
 8005e46:	657b      	str	r3, [r7, #84]	; 0x54
 8005e48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e50:	f7fa ff2a 	bl	8000ca8 <__aeabi_uldivmod>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4b61      	ldr	r3, [pc, #388]	; (8005fe0 <UART_SetConfig+0x2d4>)
 8005e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	011c      	lsls	r4, r3, #4
 8005e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e74:	4642      	mov	r2, r8
 8005e76:	464b      	mov	r3, r9
 8005e78:	1891      	adds	r1, r2, r2
 8005e7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e7c:	415b      	adcs	r3, r3
 8005e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e84:	4641      	mov	r1, r8
 8005e86:	eb12 0a01 	adds.w	sl, r2, r1
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	eb43 0b01 	adc.w	fp, r3, r1
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ea4:	4692      	mov	sl, r2
 8005ea6:	469b      	mov	fp, r3
 8005ea8:	4643      	mov	r3, r8
 8005eaa:	eb1a 0303 	adds.w	r3, sl, r3
 8005eae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	eb4b 0303 	adc.w	r3, fp, r3
 8005eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ec8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ecc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	18db      	adds	r3, r3, r3
 8005ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	eb42 0303 	adc.w	r3, r2, r3
 8005edc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ee6:	f7fa fedf 	bl	8000ca8 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4b3b      	ldr	r3, [pc, #236]	; (8005fe0 <UART_SetConfig+0x2d4>)
 8005ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	2264      	movs	r2, #100	; 0x64
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	1acb      	subs	r3, r1, r3
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f06:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <UART_SetConfig+0x2d4>)
 8005f08:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f14:	441c      	add	r4, r3
 8005f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f28:	4642      	mov	r2, r8
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	1891      	adds	r1, r2, r2
 8005f2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f30:	415b      	adcs	r3, r3
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f38:	4641      	mov	r1, r8
 8005f3a:	1851      	adds	r1, r2, r1
 8005f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8005f3e:	4649      	mov	r1, r9
 8005f40:	414b      	adcs	r3, r1
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f50:	4659      	mov	r1, fp
 8005f52:	00cb      	lsls	r3, r1, #3
 8005f54:	4651      	mov	r1, sl
 8005f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5a:	4651      	mov	r1, sl
 8005f5c:	00ca      	lsls	r2, r1, #3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	4642      	mov	r2, r8
 8005f66:	189b      	adds	r3, r3, r2
 8005f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	460a      	mov	r2, r1
 8005f70:	eb42 0303 	adc.w	r3, r2, r3
 8005f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	18db      	adds	r3, r3, r3
 8005f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f92:	4613      	mov	r3, r2
 8005f94:	eb42 0303 	adc.w	r3, r2, r3
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fa2:	f7fa fe81 	bl	8000ca8 <__aeabi_uldivmod>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <UART_SetConfig+0x2d4>)
 8005fac:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	2164      	movs	r1, #100	; 0x64
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	3332      	adds	r3, #50	; 0x32
 8005fbe:	4a08      	ldr	r2, [pc, #32]	; (8005fe0 <UART_SetConfig+0x2d4>)
 8005fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	f003 0207 	and.w	r2, r3, #7
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4422      	add	r2, r4
 8005fd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fd4:	e106      	b.n	80061e4 <UART_SetConfig+0x4d8>
 8005fd6:	bf00      	nop
 8005fd8:	40011000 	.word	0x40011000
 8005fdc:	40011400 	.word	0x40011400
 8005fe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	464b      	mov	r3, r9
 8005ffa:	1891      	adds	r1, r2, r2
 8005ffc:	6239      	str	r1, [r7, #32]
 8005ffe:	415b      	adcs	r3, r3
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
 8006002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006006:	4641      	mov	r1, r8
 8006008:	1854      	adds	r4, r2, r1
 800600a:	4649      	mov	r1, r9
 800600c:	eb43 0501 	adc.w	r5, r3, r1
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	00eb      	lsls	r3, r5, #3
 800601a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800601e:	00e2      	lsls	r2, r4, #3
 8006020:	4614      	mov	r4, r2
 8006022:	461d      	mov	r5, r3
 8006024:	4643      	mov	r3, r8
 8006026:	18e3      	adds	r3, r4, r3
 8006028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800602c:	464b      	mov	r3, r9
 800602e:	eb45 0303 	adc.w	r3, r5, r3
 8006032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006052:	4629      	mov	r1, r5
 8006054:	008b      	lsls	r3, r1, #2
 8006056:	4621      	mov	r1, r4
 8006058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800605c:	4621      	mov	r1, r4
 800605e:	008a      	lsls	r2, r1, #2
 8006060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006064:	f7fa fe20 	bl	8000ca8 <__aeabi_uldivmod>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	4b60      	ldr	r3, [pc, #384]	; (80061f0 <UART_SetConfig+0x4e4>)
 800606e:	fba3 2302 	umull	r2, r3, r3, r2
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	011c      	lsls	r4, r3, #4
 8006076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800607a:	2200      	movs	r2, #0
 800607c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006088:	4642      	mov	r2, r8
 800608a:	464b      	mov	r3, r9
 800608c:	1891      	adds	r1, r2, r2
 800608e:	61b9      	str	r1, [r7, #24]
 8006090:	415b      	adcs	r3, r3
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006098:	4641      	mov	r1, r8
 800609a:	1851      	adds	r1, r2, r1
 800609c:	6139      	str	r1, [r7, #16]
 800609e:	4649      	mov	r1, r9
 80060a0:	414b      	adcs	r3, r1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060b0:	4659      	mov	r1, fp
 80060b2:	00cb      	lsls	r3, r1, #3
 80060b4:	4651      	mov	r1, sl
 80060b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ba:	4651      	mov	r1, sl
 80060bc:	00ca      	lsls	r2, r1, #3
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	4642      	mov	r2, r8
 80060c6:	189b      	adds	r3, r3, r2
 80060c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060cc:	464b      	mov	r3, r9
 80060ce:	460a      	mov	r2, r1
 80060d0:	eb42 0303 	adc.w	r3, r2, r3
 80060d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80060e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060f0:	4649      	mov	r1, r9
 80060f2:	008b      	lsls	r3, r1, #2
 80060f4:	4641      	mov	r1, r8
 80060f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060fa:	4641      	mov	r1, r8
 80060fc:	008a      	lsls	r2, r1, #2
 80060fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006102:	f7fa fdd1 	bl	8000ca8 <__aeabi_uldivmod>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4611      	mov	r1, r2
 800610c:	4b38      	ldr	r3, [pc, #224]	; (80061f0 <UART_SetConfig+0x4e4>)
 800610e:	fba3 2301 	umull	r2, r3, r3, r1
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	2264      	movs	r2, #100	; 0x64
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	1acb      	subs	r3, r1, r3
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	3332      	adds	r3, #50	; 0x32
 8006120:	4a33      	ldr	r2, [pc, #204]	; (80061f0 <UART_SetConfig+0x4e4>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612c:	441c      	add	r4, r3
 800612e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006132:	2200      	movs	r2, #0
 8006134:	673b      	str	r3, [r7, #112]	; 0x70
 8006136:	677a      	str	r2, [r7, #116]	; 0x74
 8006138:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800613c:	4642      	mov	r2, r8
 800613e:	464b      	mov	r3, r9
 8006140:	1891      	adds	r1, r2, r2
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	415b      	adcs	r3, r3
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800614c:	4641      	mov	r1, r8
 800614e:	1851      	adds	r1, r2, r1
 8006150:	6039      	str	r1, [r7, #0]
 8006152:	4649      	mov	r1, r9
 8006154:	414b      	adcs	r3, r1
 8006156:	607b      	str	r3, [r7, #4]
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006164:	4659      	mov	r1, fp
 8006166:	00cb      	lsls	r3, r1, #3
 8006168:	4651      	mov	r1, sl
 800616a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800616e:	4651      	mov	r1, sl
 8006170:	00ca      	lsls	r2, r1, #3
 8006172:	4610      	mov	r0, r2
 8006174:	4619      	mov	r1, r3
 8006176:	4603      	mov	r3, r0
 8006178:	4642      	mov	r2, r8
 800617a:	189b      	adds	r3, r3, r2
 800617c:	66bb      	str	r3, [r7, #104]	; 0x68
 800617e:	464b      	mov	r3, r9
 8006180:	460a      	mov	r2, r1
 8006182:	eb42 0303 	adc.w	r3, r2, r3
 8006186:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	663b      	str	r3, [r7, #96]	; 0x60
 8006192:	667a      	str	r2, [r7, #100]	; 0x64
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061a0:	4649      	mov	r1, r9
 80061a2:	008b      	lsls	r3, r1, #2
 80061a4:	4641      	mov	r1, r8
 80061a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061aa:	4641      	mov	r1, r8
 80061ac:	008a      	lsls	r2, r1, #2
 80061ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061b2:	f7fa fd79 	bl	8000ca8 <__aeabi_uldivmod>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4b0d      	ldr	r3, [pc, #52]	; (80061f0 <UART_SetConfig+0x4e4>)
 80061bc:	fba3 1302 	umull	r1, r3, r3, r2
 80061c0:	095b      	lsrs	r3, r3, #5
 80061c2:	2164      	movs	r1, #100	; 0x64
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	3332      	adds	r3, #50	; 0x32
 80061ce:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <UART_SetConfig+0x4e4>)
 80061d0:	fba2 2303 	umull	r2, r3, r2, r3
 80061d4:	095b      	lsrs	r3, r3, #5
 80061d6:	f003 020f 	and.w	r2, r3, #15
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4422      	add	r2, r4
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061ea:	46bd      	mov	sp, r7
 80061ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f0:	51eb851f 	.word	0x51eb851f

080061f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	4603      	mov	r3, r0
 80061fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006206:	2b84      	cmp	r3, #132	; 0x84
 8006208:	d005      	beq.n	8006216 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800620a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	3303      	adds	r3, #3
 8006214:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006216:	68fb      	ldr	r3, [r7, #12]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006228:	f000 faf6 	bl	8006818 <vTaskStartScheduler>
  
  return osOK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	bd80      	pop	{r7, pc}

08006232 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006232:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006234:	b089      	sub	sp, #36	; 0x24
 8006236:	af04      	add	r7, sp, #16
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d020      	beq.n	8006286 <osThreadCreate+0x54>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01c      	beq.n	8006286 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685c      	ldr	r4, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691e      	ldr	r6, [r3, #16]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff ffc8 	bl	80061f4 <makeFreeRtosPriority>
 8006264:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800626e:	9202      	str	r2, [sp, #8]
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	9100      	str	r1, [sp, #0]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	4632      	mov	r2, r6
 8006278:	4629      	mov	r1, r5
 800627a:	4620      	mov	r0, r4
 800627c:	f000 f8ed 	bl	800645a <xTaskCreateStatic>
 8006280:	4603      	mov	r3, r0
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e01c      	b.n	80062c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685c      	ldr	r4, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006292:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff ffaa 	bl	80061f4 <makeFreeRtosPriority>
 80062a0:	4602      	mov	r2, r0
 80062a2:	f107 030c 	add.w	r3, r7, #12
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	9200      	str	r2, [sp, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	4632      	mov	r2, r6
 80062ae:	4629      	mov	r1, r5
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 f92f 	bl	8006514 <xTaskCreate>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d001      	beq.n	80062c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062c0:	68fb      	ldr	r3, [r7, #12]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <osDelay+0x16>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	e000      	b.n	80062e2 <osDelay+0x18>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fa64 	bl	80067b0 <vTaskDelay>
  
  return osOK;
 80062e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f103 0208 	add.w	r2, r3, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f04f 32ff 	mov.w	r2, #4294967295
 800630a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f103 0208 	add.w	r2, r3, #8
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f103 0208 	add.w	r2, r3, #8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d103      	bne.n	80063b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	e00c      	b.n	80063ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3308      	adds	r3, #8
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	e002      	b.n	80063c2 <vListInsert+0x2e>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d2f6      	bcs.n	80063bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
}
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6892      	ldr	r2, [r2, #8]
 800641c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6852      	ldr	r2, [r2, #4]
 8006426:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	429a      	cmp	r2, r3
 8006430:	d103      	bne.n	800643a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	1e5a      	subs	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800645a:	b580      	push	{r7, lr}
 800645c:	b08e      	sub	sp, #56	; 0x38
 800645e:	af04      	add	r7, sp, #16
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <xTaskCreateStatic+0x46>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	61fb      	str	r3, [r7, #28]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064a0:	23a0      	movs	r3, #160	; 0xa0
 80064a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2ba0      	cmp	r3, #160	; 0xa0
 80064a8:	d00a      	beq.n	80064c0 <xTaskCreateStatic+0x66>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	61bb      	str	r3, [r7, #24]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01e      	beq.n	8006506 <xTaskCreateStatic+0xac>
 80064c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01b      	beq.n	8006506 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064e0:	2300      	movs	r3, #0
 80064e2:	9303      	str	r3, [sp, #12]
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	9302      	str	r3, [sp, #8]
 80064e8:	f107 0314 	add.w	r3, r7, #20
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f851 	bl	80065a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006500:	f000 f8ec 	bl	80066dc <prvAddNewTaskToReadyList>
 8006504:	e001      	b.n	800650a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800650a:	697b      	ldr	r3, [r7, #20]
	}
 800650c:	4618      	mov	r0, r3
 800650e:	3728      	adds	r7, #40	; 0x28
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08c      	sub	sp, #48	; 0x30
 8006518:	af04      	add	r7, sp, #16
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	4613      	mov	r3, r2
 8006522:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4618      	mov	r0, r3
 800652a:	f000 ff0d 	bl	8007348 <pvPortMalloc>
 800652e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00e      	beq.n	8006554 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006536:	20a0      	movs	r0, #160	; 0xa0
 8006538:	f000 ff06 	bl	8007348 <pvPortMalloc>
 800653c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	631a      	str	r2, [r3, #48]	; 0x30
 800654a:	e005      	b.n	8006558 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800654c:	6978      	ldr	r0, [r7, #20]
 800654e:	f000 ffc7 	bl	80074e0 <vPortFree>
 8006552:	e001      	b.n	8006558 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006554:	2300      	movs	r3, #0
 8006556:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d017      	beq.n	800658e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006566:	88fa      	ldrh	r2, [r7, #6]
 8006568:	2300      	movs	r3, #0
 800656a:	9303      	str	r3, [sp, #12]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	9302      	str	r3, [sp, #8]
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	9301      	str	r3, [sp, #4]
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f80f 	bl	80065a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006582:	69f8      	ldr	r0, [r7, #28]
 8006584:	f000 f8aa 	bl	80066dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006588:	2301      	movs	r3, #1
 800658a:	61bb      	str	r3, [r7, #24]
 800658c:	e002      	b.n	8006594 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800658e:	f04f 33ff 	mov.w	r3, #4294967295
 8006592:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006594:	69bb      	ldr	r3, [r7, #24]
	}
 8006596:	4618      	mov	r0, r3
 8006598:	3720      	adds	r7, #32
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065b8:	3b01      	subs	r3, #1
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f023 0307 	bic.w	r3, r3, #7
 80065c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	617b      	str	r3, [r7, #20]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01f      	beq.n	800662e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ee:	2300      	movs	r3, #0
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	e012      	b.n	800661a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	7819      	ldrb	r1, [r3, #0]
 80065fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	3334      	adds	r3, #52	; 0x34
 8006604:	460a      	mov	r2, r1
 8006606:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d006      	beq.n	8006622 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	3301      	adds	r3, #1
 8006618:	61fb      	str	r3, [r7, #28]
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	2b0f      	cmp	r3, #15
 800661e:	d9e9      	bls.n	80065f4 <prvInitialiseNewTask+0x54>
 8006620:	e000      	b.n	8006624 <prvInitialiseNewTask+0x84>
			{
				break;
 8006622:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800662c:	e003      	b.n	8006636 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	2b06      	cmp	r3, #6
 800663a:	d901      	bls.n	8006640 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800663c:	2306      	movs	r3, #6
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006644:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800664a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	2200      	movs	r2, #0
 8006650:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	3304      	adds	r3, #4
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fe6b 	bl	8006332 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	3318      	adds	r3, #24
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fe66 	bl	8006332 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	f1c3 0207 	rsb	r2, r3, #7
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800667a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	2200      	movs	r2, #0
 8006688:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	334c      	adds	r3, #76	; 0x4c
 8006690:	224c      	movs	r2, #76	; 0x4c
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f002 fc68 	bl	8008f6a <memset>
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	4a0c      	ldr	r2, [pc, #48]	; (80066d0 <prvInitialiseNewTask+0x130>)
 800669e:	651a      	str	r2, [r3, #80]	; 0x50
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	4a0c      	ldr	r2, [pc, #48]	; (80066d4 <prvInitialiseNewTask+0x134>)
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	4a0b      	ldr	r2, [pc, #44]	; (80066d8 <prvInitialiseNewTask+0x138>)
 80066aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	69b8      	ldr	r0, [r7, #24]
 80066b2:	f000 fc3d 	bl	8006f30 <pxPortInitialiseStack>
 80066b6:	4602      	mov	r2, r0
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066c8:	bf00      	nop
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	200043c8 	.word	0x200043c8
 80066d4:	20004430 	.word	0x20004430
 80066d8:	20004498 	.word	0x20004498

080066dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066e4:	f000 fd4e 	bl	8007184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066e8:	4b2a      	ldr	r3, [pc, #168]	; (8006794 <prvAddNewTaskToReadyList+0xb8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	4a29      	ldr	r2, [pc, #164]	; (8006794 <prvAddNewTaskToReadyList+0xb8>)
 80066f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066f2:	4b29      	ldr	r3, [pc, #164]	; (8006798 <prvAddNewTaskToReadyList+0xbc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066fa:	4a27      	ldr	r2, [pc, #156]	; (8006798 <prvAddNewTaskToReadyList+0xbc>)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006700:	4b24      	ldr	r3, [pc, #144]	; (8006794 <prvAddNewTaskToReadyList+0xb8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d110      	bne.n	800672a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006708:	f000 facc 	bl	8006ca4 <prvInitialiseTaskLists>
 800670c:	e00d      	b.n	800672a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800670e:	4b23      	ldr	r3, [pc, #140]	; (800679c <prvAddNewTaskToReadyList+0xc0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006716:	4b20      	ldr	r3, [pc, #128]	; (8006798 <prvAddNewTaskToReadyList+0xbc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	429a      	cmp	r2, r3
 8006722:	d802      	bhi.n	800672a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006724:	4a1c      	ldr	r2, [pc, #112]	; (8006798 <prvAddNewTaskToReadyList+0xbc>)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800672a:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <prvAddNewTaskToReadyList+0xc4>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3301      	adds	r3, #1
 8006730:	4a1b      	ldr	r2, [pc, #108]	; (80067a0 <prvAddNewTaskToReadyList+0xc4>)
 8006732:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	2201      	movs	r2, #1
 800673a:	409a      	lsls	r2, r3
 800673c:	4b19      	ldr	r3, [pc, #100]	; (80067a4 <prvAddNewTaskToReadyList+0xc8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4313      	orrs	r3, r2
 8006742:	4a18      	ldr	r2, [pc, #96]	; (80067a4 <prvAddNewTaskToReadyList+0xc8>)
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <prvAddNewTaskToReadyList+0xcc>)
 8006754:	441a      	add	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3304      	adds	r3, #4
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f7ff fdf5 	bl	800634c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006762:	f000 fd3f 	bl	80071e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <prvAddNewTaskToReadyList+0xc0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00e      	beq.n	800678c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <prvAddNewTaskToReadyList+0xbc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	429a      	cmp	r2, r3
 800677a:	d207      	bcs.n	800678c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <prvAddNewTaskToReadyList+0xd0>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000774 	.word	0x20000774
 8006798:	20000674 	.word	0x20000674
 800679c:	20000780 	.word	0x20000780
 80067a0:	20000790 	.word	0x20000790
 80067a4:	2000077c 	.word	0x2000077c
 80067a8:	20000678 	.word	0x20000678
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d017      	beq.n	80067f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067c2:	4b13      	ldr	r3, [pc, #76]	; (8006810 <vTaskDelay+0x60>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <vTaskDelay+0x30>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	60bb      	str	r3, [r7, #8]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067e0:	f000 f884 	bl	80068ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067e4:	2100      	movs	r1, #0
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fb3c 	bl	8006e64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067ec:	f000 f88c 	bl	8006908 <xTaskResumeAll>
 80067f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d107      	bne.n	8006808 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <vTaskDelay+0x64>)
 80067fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	2000079c 	.word	0x2000079c
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006826:	463a      	mov	r2, r7
 8006828:	1d39      	adds	r1, r7, #4
 800682a:	f107 0308 	add.w	r3, r7, #8
 800682e:	4618      	mov	r0, r3
 8006830:	f7fa fca2 	bl	8001178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	9202      	str	r2, [sp, #8]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	2300      	movs	r3, #0
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	460a      	mov	r2, r1
 8006846:	4921      	ldr	r1, [pc, #132]	; (80068cc <vTaskStartScheduler+0xb4>)
 8006848:	4821      	ldr	r0, [pc, #132]	; (80068d0 <vTaskStartScheduler+0xb8>)
 800684a:	f7ff fe06 	bl	800645a <xTaskCreateStatic>
 800684e:	4603      	mov	r3, r0
 8006850:	4a20      	ldr	r2, [pc, #128]	; (80068d4 <vTaskStartScheduler+0xbc>)
 8006852:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <vTaskStartScheduler+0xbc>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e001      	b.n	8006866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d11b      	bne.n	80068a4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	613b      	str	r3, [r7, #16]
}
 800687e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006880:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <vTaskStartScheduler+0xc0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	334c      	adds	r3, #76	; 0x4c
 8006886:	4a15      	ldr	r2, [pc, #84]	; (80068dc <vTaskStartScheduler+0xc4>)
 8006888:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <vTaskStartScheduler+0xc8>)
 800688c:	f04f 32ff 	mov.w	r2, #4294967295
 8006890:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006892:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <vTaskStartScheduler+0xcc>)
 8006894:	2201      	movs	r2, #1
 8006896:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006898:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <vTaskStartScheduler+0xd0>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800689e:	f000 fbcf 	bl	8007040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068a2:	e00e      	b.n	80068c2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d10a      	bne.n	80068c2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60fb      	str	r3, [r7, #12]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <vTaskStartScheduler+0xa8>
}
 80068c2:	bf00      	nop
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	0800bc20 	.word	0x0800bc20
 80068d0:	08006c75 	.word	0x08006c75
 80068d4:	20000798 	.word	0x20000798
 80068d8:	20000674 	.word	0x20000674
 80068dc:	200001e0 	.word	0x200001e0
 80068e0:	20000794 	.word	0x20000794
 80068e4:	20000780 	.word	0x20000780
 80068e8:	20000778 	.word	0x20000778

080068ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068f0:	4b04      	ldr	r3, [pc, #16]	; (8006904 <vTaskSuspendAll+0x18>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3301      	adds	r3, #1
 80068f6:	4a03      	ldr	r2, [pc, #12]	; (8006904 <vTaskSuspendAll+0x18>)
 80068f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068fa:	bf00      	nop
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	2000079c 	.word	0x2000079c

08006908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006916:	4b41      	ldr	r3, [pc, #260]	; (8006a1c <xTaskResumeAll+0x114>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10a      	bne.n	8006934 <xTaskResumeAll+0x2c>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	603b      	str	r3, [r7, #0]
}
 8006930:	bf00      	nop
 8006932:	e7fe      	b.n	8006932 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006934:	f000 fc26 	bl	8007184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006938:	4b38      	ldr	r3, [pc, #224]	; (8006a1c <xTaskResumeAll+0x114>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3b01      	subs	r3, #1
 800693e:	4a37      	ldr	r2, [pc, #220]	; (8006a1c <xTaskResumeAll+0x114>)
 8006940:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006942:	4b36      	ldr	r3, [pc, #216]	; (8006a1c <xTaskResumeAll+0x114>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d161      	bne.n	8006a0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800694a:	4b35      	ldr	r3, [pc, #212]	; (8006a20 <xTaskResumeAll+0x118>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d05d      	beq.n	8006a0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006952:	e02e      	b.n	80069b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006954:	4b33      	ldr	r3, [pc, #204]	; (8006a24 <xTaskResumeAll+0x11c>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3318      	adds	r3, #24
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fd50 	bl	8006406 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3304      	adds	r3, #4
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff fd4b 	bl	8006406 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	2201      	movs	r2, #1
 8006976:	409a      	lsls	r2, r3
 8006978:	4b2b      	ldr	r3, [pc, #172]	; (8006a28 <xTaskResumeAll+0x120>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4313      	orrs	r3, r2
 800697e:	4a2a      	ldr	r2, [pc, #168]	; (8006a28 <xTaskResumeAll+0x120>)
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4a27      	ldr	r2, [pc, #156]	; (8006a2c <xTaskResumeAll+0x124>)
 8006990:	441a      	add	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3304      	adds	r3, #4
 8006996:	4619      	mov	r1, r3
 8006998:	4610      	mov	r0, r2
 800699a:	f7ff fcd7 	bl	800634c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a2:	4b23      	ldr	r3, [pc, #140]	; (8006a30 <xTaskResumeAll+0x128>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d302      	bcc.n	80069b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069ac:	4b21      	ldr	r3, [pc, #132]	; (8006a34 <xTaskResumeAll+0x12c>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069b2:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <xTaskResumeAll+0x11c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1cc      	bne.n	8006954 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069c0:	f000 fa12 	bl	8006de8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069c4:	4b1c      	ldr	r3, [pc, #112]	; (8006a38 <xTaskResumeAll+0x130>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d010      	beq.n	80069f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069d0:	f000 f836 	bl	8006a40 <xTaskIncrementTick>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80069da:	4b16      	ldr	r3, [pc, #88]	; (8006a34 <xTaskResumeAll+0x12c>)
 80069dc:	2201      	movs	r2, #1
 80069de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1f1      	bne.n	80069d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80069ec:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <xTaskResumeAll+0x130>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <xTaskResumeAll+0x12c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069fa:	2301      	movs	r3, #1
 80069fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <xTaskResumeAll+0x134>)
 8006a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a0e:	f000 fbe9 	bl	80071e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006a12:	68bb      	ldr	r3, [r7, #8]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	2000079c 	.word	0x2000079c
 8006a20:	20000774 	.word	0x20000774
 8006a24:	20000734 	.word	0x20000734
 8006a28:	2000077c 	.word	0x2000077c
 8006a2c:	20000678 	.word	0x20000678
 8006a30:	20000674 	.word	0x20000674
 8006a34:	20000788 	.word	0x20000788
 8006a38:	20000784 	.word	0x20000784
 8006a3c:	e000ed04 	.word	0xe000ed04

08006a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a4a:	4b4e      	ldr	r3, [pc, #312]	; (8006b84 <xTaskIncrementTick+0x144>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f040 808e 	bne.w	8006b70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a54:	4b4c      	ldr	r3, [pc, #304]	; (8006b88 <xTaskIncrementTick+0x148>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a5c:	4a4a      	ldr	r2, [pc, #296]	; (8006b88 <xTaskIncrementTick+0x148>)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d120      	bne.n	8006aaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a68:	4b48      	ldr	r3, [pc, #288]	; (8006b8c <xTaskIncrementTick+0x14c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	603b      	str	r3, [r7, #0]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xTaskIncrementTick+0x46>
 8006a88:	4b40      	ldr	r3, [pc, #256]	; (8006b8c <xTaskIncrementTick+0x14c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	4b40      	ldr	r3, [pc, #256]	; (8006b90 <xTaskIncrementTick+0x150>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a3e      	ldr	r2, [pc, #248]	; (8006b8c <xTaskIncrementTick+0x14c>)
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	4a3e      	ldr	r2, [pc, #248]	; (8006b90 <xTaskIncrementTick+0x150>)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	4b3d      	ldr	r3, [pc, #244]	; (8006b94 <xTaskIncrementTick+0x154>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	4a3c      	ldr	r2, [pc, #240]	; (8006b94 <xTaskIncrementTick+0x154>)
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	f000 f99f 	bl	8006de8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006aaa:	4b3b      	ldr	r3, [pc, #236]	; (8006b98 <xTaskIncrementTick+0x158>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d348      	bcc.n	8006b46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ab4:	4b35      	ldr	r3, [pc, #212]	; (8006b8c <xTaskIncrementTick+0x14c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d104      	bne.n	8006ac8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006abe:	4b36      	ldr	r3, [pc, #216]	; (8006b98 <xTaskIncrementTick+0x158>)
 8006ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac4:	601a      	str	r2, [r3, #0]
					break;
 8006ac6:	e03e      	b.n	8006b46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac8:	4b30      	ldr	r3, [pc, #192]	; (8006b8c <xTaskIncrementTick+0x14c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d203      	bcs.n	8006ae8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ae0:	4a2d      	ldr	r2, [pc, #180]	; (8006b98 <xTaskIncrementTick+0x158>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ae6:	e02e      	b.n	8006b46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff fc8a 	bl	8006406 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d004      	beq.n	8006b04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	3318      	adds	r3, #24
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff fc81 	bl	8006406 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	2201      	movs	r2, #1
 8006b0a:	409a      	lsls	r2, r3
 8006b0c:	4b23      	ldr	r3, [pc, #140]	; (8006b9c <xTaskIncrementTick+0x15c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <xTaskIncrementTick+0x15c>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4a1f      	ldr	r2, [pc, #124]	; (8006ba0 <xTaskIncrementTick+0x160>)
 8006b24:	441a      	add	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f7ff fc0d 	bl	800634c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b36:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <xTaskIncrementTick+0x164>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d3b9      	bcc.n	8006ab4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b44:	e7b6      	b.n	8006ab4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b46:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <xTaskIncrementTick+0x164>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4c:	4914      	ldr	r1, [pc, #80]	; (8006ba0 <xTaskIncrementTick+0x160>)
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d901      	bls.n	8006b62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b62:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <xTaskIncrementTick+0x168>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e004      	b.n	8006b7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <xTaskIncrementTick+0x16c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4a0d      	ldr	r2, [pc, #52]	; (8006bac <xTaskIncrementTick+0x16c>)
 8006b78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b7a:	697b      	ldr	r3, [r7, #20]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	2000079c 	.word	0x2000079c
 8006b88:	20000778 	.word	0x20000778
 8006b8c:	2000072c 	.word	0x2000072c
 8006b90:	20000730 	.word	0x20000730
 8006b94:	2000078c 	.word	0x2000078c
 8006b98:	20000794 	.word	0x20000794
 8006b9c:	2000077c 	.word	0x2000077c
 8006ba0:	20000678 	.word	0x20000678
 8006ba4:	20000674 	.word	0x20000674
 8006ba8:	20000788 	.word	0x20000788
 8006bac:	20000784 	.word	0x20000784

08006bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bb6:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <vTaskSwitchContext+0xac>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bbe:	4b28      	ldr	r3, [pc, #160]	; (8006c60 <vTaskSwitchContext+0xb0>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bc4:	e044      	b.n	8006c50 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006bc6:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <vTaskSwitchContext+0xb0>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bcc:	4b25      	ldr	r3, [pc, #148]	; (8006c64 <vTaskSwitchContext+0xb4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	fab3 f383 	clz	r3, r3
 8006bd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	f1c3 031f 	rsb	r3, r3, #31
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	4921      	ldr	r1, [pc, #132]	; (8006c68 <vTaskSwitchContext+0xb8>)
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	607b      	str	r3, [r7, #4]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <vTaskSwitchContext+0x5a>
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <vTaskSwitchContext+0xb8>)
 8006c18:	4413      	add	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d104      	bne.n	8006c3c <vTaskSwitchContext+0x8c>
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	605a      	str	r2, [r3, #4]
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <vTaskSwitchContext+0xbc>)
 8006c44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <vTaskSwitchContext+0xbc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	334c      	adds	r3, #76	; 0x4c
 8006c4c:	4a08      	ldr	r2, [pc, #32]	; (8006c70 <vTaskSwitchContext+0xc0>)
 8006c4e:	6013      	str	r3, [r2, #0]
}
 8006c50:	bf00      	nop
 8006c52:	371c      	adds	r7, #28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	2000079c 	.word	0x2000079c
 8006c60:	20000788 	.word	0x20000788
 8006c64:	2000077c 	.word	0x2000077c
 8006c68:	20000678 	.word	0x20000678
 8006c6c:	20000674 	.word	0x20000674
 8006c70:	200001e0 	.word	0x200001e0

08006c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c7c:	f000 f852 	bl	8006d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c80:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <prvIdleTask+0x28>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d9f9      	bls.n	8006c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <prvIdleTask+0x2c>)
 8006c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c98:	e7f0      	b.n	8006c7c <prvIdleTask+0x8>
 8006c9a:	bf00      	nop
 8006c9c:	20000678 	.word	0x20000678
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006caa:	2300      	movs	r3, #0
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	e00c      	b.n	8006cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <prvInitialiseTaskLists+0x60>)
 8006cbc:	4413      	add	r3, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fb17 	bl	80062f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	607b      	str	r3, [r7, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b06      	cmp	r3, #6
 8006cce:	d9ef      	bls.n	8006cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cd0:	480d      	ldr	r0, [pc, #52]	; (8006d08 <prvInitialiseTaskLists+0x64>)
 8006cd2:	f7ff fb0e 	bl	80062f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cd6:	480d      	ldr	r0, [pc, #52]	; (8006d0c <prvInitialiseTaskLists+0x68>)
 8006cd8:	f7ff fb0b 	bl	80062f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cdc:	480c      	ldr	r0, [pc, #48]	; (8006d10 <prvInitialiseTaskLists+0x6c>)
 8006cde:	f7ff fb08 	bl	80062f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ce2:	480c      	ldr	r0, [pc, #48]	; (8006d14 <prvInitialiseTaskLists+0x70>)
 8006ce4:	f7ff fb05 	bl	80062f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ce8:	480b      	ldr	r0, [pc, #44]	; (8006d18 <prvInitialiseTaskLists+0x74>)
 8006cea:	f7ff fb02 	bl	80062f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <prvInitialiseTaskLists+0x78>)
 8006cf0:	4a05      	ldr	r2, [pc, #20]	; (8006d08 <prvInitialiseTaskLists+0x64>)
 8006cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cf4:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <prvInitialiseTaskLists+0x7c>)
 8006cf6:	4a05      	ldr	r2, [pc, #20]	; (8006d0c <prvInitialiseTaskLists+0x68>)
 8006cf8:	601a      	str	r2, [r3, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000678 	.word	0x20000678
 8006d08:	20000704 	.word	0x20000704
 8006d0c:	20000718 	.word	0x20000718
 8006d10:	20000734 	.word	0x20000734
 8006d14:	20000748 	.word	0x20000748
 8006d18:	20000760 	.word	0x20000760
 8006d1c:	2000072c 	.word	0x2000072c
 8006d20:	20000730 	.word	0x20000730

08006d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d2a:	e019      	b.n	8006d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d2c:	f000 fa2a 	bl	8007184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d30:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <prvCheckTasksWaitingTermination+0x50>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fb62 	bl	8006406 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <prvCheckTasksWaitingTermination+0x54>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	4a0b      	ldr	r2, [pc, #44]	; (8006d78 <prvCheckTasksWaitingTermination+0x54>)
 8006d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <prvCheckTasksWaitingTermination+0x58>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <prvCheckTasksWaitingTermination+0x58>)
 8006d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d56:	f000 fa45 	bl	80071e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f810 	bl	8006d80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <prvCheckTasksWaitingTermination+0x58>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e1      	bne.n	8006d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000748 	.word	0x20000748
 8006d78:	20000774 	.word	0x20000774
 8006d7c:	2000075c 	.word	0x2000075c

08006d80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	334c      	adds	r3, #76	; 0x4c
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f002 f91b 	bl	8008fc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d108      	bne.n	8006dae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fb9d 	bl	80074e0 <vPortFree>
				vPortFree( pxTCB );
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fb9a 	bl	80074e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dac:	e018      	b.n	8006de0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d103      	bne.n	8006dc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fb91 	bl	80074e0 <vPortFree>
	}
 8006dbe:	e00f      	b.n	8006de0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d00a      	beq.n	8006de0 <prvDeleteTCB+0x60>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60fb      	str	r3, [r7, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	e7fe      	b.n	8006dde <prvDeleteTCB+0x5e>
	}
 8006de0:	bf00      	nop
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dee:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <prvResetNextTaskUnblockTime+0x38>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006df8:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <prvResetNextTaskUnblockTime+0x3c>)
 8006dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e00:	e008      	b.n	8006e14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <prvResetNextTaskUnblockTime+0x38>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4a04      	ldr	r2, [pc, #16]	; (8006e24 <prvResetNextTaskUnblockTime+0x3c>)
 8006e12:	6013      	str	r3, [r2, #0]
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	2000072c 	.word	0x2000072c
 8006e24:	20000794 	.word	0x20000794

08006e28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e2e:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <xTaskGetSchedulerState+0x34>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d102      	bne.n	8006e3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e36:	2301      	movs	r3, #1
 8006e38:	607b      	str	r3, [r7, #4]
 8006e3a:	e008      	b.n	8006e4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e3c:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <xTaskGetSchedulerState+0x38>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d102      	bne.n	8006e4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e44:	2302      	movs	r3, #2
 8006e46:	607b      	str	r3, [r7, #4]
 8006e48:	e001      	b.n	8006e4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e4e:	687b      	ldr	r3, [r7, #4]
	}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20000780 	.word	0x20000780
 8006e60:	2000079c 	.word	0x2000079c

08006e64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e6e:	4b29      	ldr	r3, [pc, #164]	; (8006f14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e74:	4b28      	ldr	r3, [pc, #160]	; (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fac3 	bl	8006406 <uxListRemove>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e86:	4b24      	ldr	r3, [pc, #144]	; (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	43da      	mvns	r2, r3
 8006e94:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea4:	d10a      	bne.n	8006ebc <prvAddCurrentTaskToDelayedList+0x58>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eac:	4b1a      	ldr	r3, [pc, #104]	; (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	481a      	ldr	r0, [pc, #104]	; (8006f20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006eb6:	f7ff fa49 	bl	800634c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006eba:	e026      	b.n	8006f0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ec4:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d209      	bcs.n	8006ee8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ed4:	4b13      	ldr	r3, [pc, #76]	; (8006f24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7ff fa57 	bl	8006394 <vListInsert>
}
 8006ee6:	e010      	b.n	8006f0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	f7ff fa4d 	bl	8006394 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006efa:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d202      	bcs.n	8006f0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f04:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6013      	str	r3, [r2, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000778 	.word	0x20000778
 8006f18:	20000674 	.word	0x20000674
 8006f1c:	2000077c 	.word	0x2000077c
 8006f20:	20000760 	.word	0x20000760
 8006f24:	20000730 	.word	0x20000730
 8006f28:	2000072c 	.word	0x2000072c
 8006f2c:	20000794 	.word	0x20000794

08006f30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3b04      	subs	r3, #4
 8006f40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3b04      	subs	r3, #4
 8006f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f023 0201 	bic.w	r2, r3, #1
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3b04      	subs	r3, #4
 8006f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f60:	4a0c      	ldr	r2, [pc, #48]	; (8006f94 <pxPortInitialiseStack+0x64>)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3b14      	subs	r3, #20
 8006f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3b04      	subs	r3, #4
 8006f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f06f 0202 	mvn.w	r2, #2
 8006f7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3b20      	subs	r3, #32
 8006f84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	08006f99 	.word	0x08006f99

08006f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fa2:	4b12      	ldr	r3, [pc, #72]	; (8006fec <prvTaskExitError+0x54>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006faa:	d00a      	beq.n	8006fc2 <prvTaskExitError+0x2a>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	60fb      	str	r3, [r7, #12]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <prvTaskExitError+0x28>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	60bb      	str	r3, [r7, #8]
}
 8006fd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fd6:	bf00      	nop
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0fc      	beq.n	8006fd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	20000018 	.word	0x20000018

08006ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <pxCurrentTCBConst2>)
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	f380 8809 	msr	PSP, r0
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f380 8811 	msr	BASEPRI, r0
 800700a:	4770      	bx	lr
 800700c:	f3af 8000 	nop.w

08007010 <pxCurrentTCBConst2>:
 8007010:	20000674 	.word	0x20000674
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop

08007018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007018:	4808      	ldr	r0, [pc, #32]	; (800703c <prvPortStartFirstTask+0x24>)
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f380 8808 	msr	MSP, r0
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8814 	msr	CONTROL, r0
 800702a:	b662      	cpsie	i
 800702c:	b661      	cpsie	f
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	df00      	svc	0
 8007038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800703a:	bf00      	nop
 800703c:	e000ed08 	.word	0xe000ed08

08007040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007046:	4b46      	ldr	r3, [pc, #280]	; (8007160 <xPortStartScheduler+0x120>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a46      	ldr	r2, [pc, #280]	; (8007164 <xPortStartScheduler+0x124>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10a      	bne.n	8007066 <xPortStartScheduler+0x26>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	613b      	str	r3, [r7, #16]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007066:	4b3e      	ldr	r3, [pc, #248]	; (8007160 <xPortStartScheduler+0x120>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a3f      	ldr	r2, [pc, #252]	; (8007168 <xPortStartScheduler+0x128>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10a      	bne.n	8007086 <xPortStartScheduler+0x46>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	60fb      	str	r3, [r7, #12]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007086:	4b39      	ldr	r3, [pc, #228]	; (800716c <xPortStartScheduler+0x12c>)
 8007088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	22ff      	movs	r2, #255	; 0xff
 8007096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	4b31      	ldr	r3, [pc, #196]	; (8007170 <xPortStartScheduler+0x130>)
 80070ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070ae:	4b31      	ldr	r3, [pc, #196]	; (8007174 <xPortStartScheduler+0x134>)
 80070b0:	2207      	movs	r2, #7
 80070b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070b4:	e009      	b.n	80070ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80070b6:	4b2f      	ldr	r3, [pc, #188]	; (8007174 <xPortStartScheduler+0x134>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	4a2d      	ldr	r2, [pc, #180]	; (8007174 <xPortStartScheduler+0x134>)
 80070be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d0ef      	beq.n	80070b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070d6:	4b27      	ldr	r3, [pc, #156]	; (8007174 <xPortStartScheduler+0x134>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1c3 0307 	rsb	r3, r3, #7
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d00a      	beq.n	80070f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60bb      	str	r3, [r7, #8]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070f8:	4b1e      	ldr	r3, [pc, #120]	; (8007174 <xPortStartScheduler+0x134>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	4a1d      	ldr	r2, [pc, #116]	; (8007174 <xPortStartScheduler+0x134>)
 8007100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007102:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <xPortStartScheduler+0x134>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800710a:	4a1a      	ldr	r2, [pc, #104]	; (8007174 <xPortStartScheduler+0x134>)
 800710c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	b2da      	uxtb	r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007116:	4b18      	ldr	r3, [pc, #96]	; (8007178 <xPortStartScheduler+0x138>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a17      	ldr	r2, [pc, #92]	; (8007178 <xPortStartScheduler+0x138>)
 800711c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <xPortStartScheduler+0x138>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a14      	ldr	r2, [pc, #80]	; (8007178 <xPortStartScheduler+0x138>)
 8007128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800712c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800712e:	f000 f8dd 	bl	80072ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <xPortStartScheduler+0x13c>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007138:	f000 f8fc 	bl	8007334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800713c:	4b10      	ldr	r3, [pc, #64]	; (8007180 <xPortStartScheduler+0x140>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a0f      	ldr	r2, [pc, #60]	; (8007180 <xPortStartScheduler+0x140>)
 8007142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007148:	f7ff ff66 	bl	8007018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800714c:	f7ff fd30 	bl	8006bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8007150:	f7ff ff22 	bl	8006f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	e000ed00 	.word	0xe000ed00
 8007164:	410fc271 	.word	0x410fc271
 8007168:	410fc270 	.word	0x410fc270
 800716c:	e000e400 	.word	0xe000e400
 8007170:	200007a0 	.word	0x200007a0
 8007174:	200007a4 	.word	0x200007a4
 8007178:	e000ed20 	.word	0xe000ed20
 800717c:	20000018 	.word	0x20000018
 8007180:	e000ef34 	.word	0xe000ef34

08007184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	607b      	str	r3, [r7, #4]
}
 800719c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800719e:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <vPortEnterCritical+0x58>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	4a0d      	ldr	r2, [pc, #52]	; (80071dc <vPortEnterCritical+0x58>)
 80071a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071a8:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <vPortEnterCritical+0x58>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10f      	bne.n	80071d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <vPortEnterCritical+0x5c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	603b      	str	r3, [r7, #0]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <vPortEnterCritical+0x4a>
	}
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000018 	.word	0x20000018
 80071e0:	e000ed04 	.word	0xe000ed04

080071e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ea:	4b12      	ldr	r3, [pc, #72]	; (8007234 <vPortExitCritical+0x50>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <vPortExitCritical+0x24>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	607b      	str	r3, [r7, #4]
}
 8007204:	bf00      	nop
 8007206:	e7fe      	b.n	8007206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007208:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <vPortExitCritical+0x50>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3b01      	subs	r3, #1
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <vPortExitCritical+0x50>)
 8007210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007212:	4b08      	ldr	r3, [pc, #32]	; (8007234 <vPortExitCritical+0x50>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d105      	bne.n	8007226 <vPortExitCritical+0x42>
 800721a:	2300      	movs	r3, #0
 800721c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000018 	.word	0x20000018
	...

08007240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007240:	f3ef 8009 	mrs	r0, PSP
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	4b15      	ldr	r3, [pc, #84]	; (80072a0 <pxCurrentTCBConst>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	f01e 0f10 	tst.w	lr, #16
 8007250:	bf08      	it	eq
 8007252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	6010      	str	r0, [r2, #0]
 800725c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007264:	f380 8811 	msr	BASEPRI, r0
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f7ff fc9e 	bl	8006bb0 <vTaskSwitchContext>
 8007274:	f04f 0000 	mov.w	r0, #0
 8007278:	f380 8811 	msr	BASEPRI, r0
 800727c:	bc09      	pop	{r0, r3}
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	6808      	ldr	r0, [r1, #0]
 8007282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007286:	f01e 0f10 	tst.w	lr, #16
 800728a:	bf08      	it	eq
 800728c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007290:	f380 8809 	msr	PSP, r0
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst>:
 80072a0:	20000674 	.word	0x20000674
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	607b      	str	r3, [r7, #4]
}
 80072c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072c2:	f7ff fbbd 	bl	8006a40 <xTaskIncrementTick>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072cc:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <xPortSysTickHandler+0x40>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f383 8811 	msr	BASEPRI, r3
}
 80072de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <vPortSetupTimerInterrupt+0x34>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072f6:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <vPortSetupTimerInterrupt+0x38>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <vPortSetupTimerInterrupt+0x3c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a0a      	ldr	r2, [pc, #40]	; (800732c <vPortSetupTimerInterrupt+0x40>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	099b      	lsrs	r3, r3, #6
 8007308:	4a09      	ldr	r2, [pc, #36]	; (8007330 <vPortSetupTimerInterrupt+0x44>)
 800730a:	3b01      	subs	r3, #1
 800730c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800730e:	4b04      	ldr	r3, [pc, #16]	; (8007320 <vPortSetupTimerInterrupt+0x34>)
 8007310:	2207      	movs	r2, #7
 8007312:	601a      	str	r2, [r3, #0]
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	e000e010 	.word	0xe000e010
 8007324:	e000e018 	.word	0xe000e018
 8007328:	2000000c 	.word	0x2000000c
 800732c:	10624dd3 	.word	0x10624dd3
 8007330:	e000e014 	.word	0xe000e014

08007334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007344 <vPortEnableVFP+0x10>
 8007338:	6801      	ldr	r1, [r0, #0]
 800733a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800733e:	6001      	str	r1, [r0, #0]
 8007340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007342:	bf00      	nop
 8007344:	e000ed88 	.word	0xe000ed88

08007348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08a      	sub	sp, #40	; 0x28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007354:	f7ff faca 	bl	80068ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007358:	4b5b      	ldr	r3, [pc, #364]	; (80074c8 <pvPortMalloc+0x180>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007360:	f000 f920 	bl	80075a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007364:	4b59      	ldr	r3, [pc, #356]	; (80074cc <pvPortMalloc+0x184>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4013      	ands	r3, r2
 800736c:	2b00      	cmp	r3, #0
 800736e:	f040 8093 	bne.w	8007498 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01d      	beq.n	80073b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007378:	2208      	movs	r2, #8
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4413      	add	r3, r2
 800737e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	2b00      	cmp	r3, #0
 8007388:	d014      	beq.n	80073b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f023 0307 	bic.w	r3, r3, #7
 8007390:	3308      	adds	r3, #8
 8007392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <pvPortMalloc+0x6c>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	617b      	str	r3, [r7, #20]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d06e      	beq.n	8007498 <pvPortMalloc+0x150>
 80073ba:	4b45      	ldr	r3, [pc, #276]	; (80074d0 <pvPortMalloc+0x188>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d869      	bhi.n	8007498 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073c4:	4b43      	ldr	r3, [pc, #268]	; (80074d4 <pvPortMalloc+0x18c>)
 80073c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073c8:	4b42      	ldr	r3, [pc, #264]	; (80074d4 <pvPortMalloc+0x18c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ce:	e004      	b.n	80073da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d903      	bls.n	80073ec <pvPortMalloc+0xa4>
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f1      	bne.n	80073d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073ec:	4b36      	ldr	r3, [pc, #216]	; (80074c8 <pvPortMalloc+0x180>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d050      	beq.n	8007498 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2208      	movs	r2, #8
 80073fc:	4413      	add	r3, r2
 80073fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	2308      	movs	r3, #8
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	429a      	cmp	r2, r3
 8007416:	d91f      	bls.n	8007458 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <pvPortMalloc+0xf8>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	613b      	str	r3, [r7, #16]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	1ad2      	subs	r2, r2, r3
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007452:	69b8      	ldr	r0, [r7, #24]
 8007454:	f000 f908 	bl	8007668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007458:	4b1d      	ldr	r3, [pc, #116]	; (80074d0 <pvPortMalloc+0x188>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <pvPortMalloc+0x188>)
 8007464:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007466:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <pvPortMalloc+0x188>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b1b      	ldr	r3, [pc, #108]	; (80074d8 <pvPortMalloc+0x190>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d203      	bcs.n	800747a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007472:	4b17      	ldr	r3, [pc, #92]	; (80074d0 <pvPortMalloc+0x188>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <pvPortMalloc+0x190>)
 8007478:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	4b13      	ldr	r3, [pc, #76]	; (80074cc <pvPortMalloc+0x184>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	431a      	orrs	r2, r3
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800748e:	4b13      	ldr	r3, [pc, #76]	; (80074dc <pvPortMalloc+0x194>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3301      	adds	r3, #1
 8007494:	4a11      	ldr	r2, [pc, #68]	; (80074dc <pvPortMalloc+0x194>)
 8007496:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007498:	f7ff fa36 	bl	8006908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <pvPortMalloc+0x174>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	60fb      	str	r3, [r7, #12]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <pvPortMalloc+0x172>
	return pvReturn;
 80074bc:	69fb      	ldr	r3, [r7, #28]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3728      	adds	r7, #40	; 0x28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200043b0 	.word	0x200043b0
 80074cc:	200043c4 	.word	0x200043c4
 80074d0:	200043b4 	.word	0x200043b4
 80074d4:	200043a8 	.word	0x200043a8
 80074d8:	200043b8 	.word	0x200043b8
 80074dc:	200043bc 	.word	0x200043bc

080074e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d04d      	beq.n	800758e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074f2:	2308      	movs	r3, #8
 80074f4:	425b      	negs	r3, r3
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4413      	add	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	4b24      	ldr	r3, [pc, #144]	; (8007598 <vPortFree+0xb8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <vPortFree+0x44>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <vPortFree+0x62>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <vPortFree+0xb8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4013      	ands	r3, r2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01e      	beq.n	800758e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d11a      	bne.n	800758e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <vPortFree+0xb8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	43db      	mvns	r3, r3
 8007562:	401a      	ands	r2, r3
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007568:	f7ff f9c0 	bl	80068ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	4b0a      	ldr	r3, [pc, #40]	; (800759c <vPortFree+0xbc>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4413      	add	r3, r2
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <vPortFree+0xbc>)
 8007578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800757a:	6938      	ldr	r0, [r7, #16]
 800757c:	f000 f874 	bl	8007668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <vPortFree+0xc0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3301      	adds	r3, #1
 8007586:	4a06      	ldr	r2, [pc, #24]	; (80075a0 <vPortFree+0xc0>)
 8007588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800758a:	f7ff f9bd 	bl	8006908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800758e:	bf00      	nop
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	200043c4 	.word	0x200043c4
 800759c:	200043b4 	.word	0x200043b4
 80075a0:	200043c0 	.word	0x200043c0

080075a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075b0:	4b27      	ldr	r3, [pc, #156]	; (8007650 <prvHeapInit+0xac>)
 80075b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00c      	beq.n	80075d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3307      	adds	r3, #7
 80075c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <prvHeapInit+0xac>)
 80075d4:	4413      	add	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075dc:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <prvHeapInit+0xb0>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <prvHeapInit+0xb0>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075f0:	2208      	movs	r2, #8
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0307 	bic.w	r3, r3, #7
 80075fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4a15      	ldr	r2, [pc, #84]	; (8007658 <prvHeapInit+0xb4>)
 8007604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <prvHeapInit+0xb4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800760e:	4b12      	ldr	r3, [pc, #72]	; (8007658 <prvHeapInit+0xb4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007624:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <prvHeapInit+0xb4>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	4a0a      	ldr	r2, [pc, #40]	; (800765c <prvHeapInit+0xb8>)
 8007632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <prvHeapInit+0xbc>)
 800763a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800763c:	4b09      	ldr	r3, [pc, #36]	; (8007664 <prvHeapInit+0xc0>)
 800763e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	200007a8 	.word	0x200007a8
 8007654:	200043a8 	.word	0x200043a8
 8007658:	200043b0 	.word	0x200043b0
 800765c:	200043b8 	.word	0x200043b8
 8007660:	200043b4 	.word	0x200043b4
 8007664:	200043c4 	.word	0x200043c4

08007668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007670:	4b28      	ldr	r3, [pc, #160]	; (8007714 <prvInsertBlockIntoFreeList+0xac>)
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	e002      	b.n	800767c <prvInsertBlockIntoFreeList+0x14>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	429a      	cmp	r2, r3
 8007684:	d8f7      	bhi.n	8007676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	d108      	bne.n	80076aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	441a      	add	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d118      	bne.n	80076f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4b15      	ldr	r3, [pc, #84]	; (8007718 <prvInsertBlockIntoFreeList+0xb0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d00d      	beq.n	80076e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	441a      	add	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	e008      	b.n	80076f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076e6:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <prvInsertBlockIntoFreeList+0xb0>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e003      	b.n	80076f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d002      	beq.n	8007706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	200043a8 	.word	0x200043a8
 8007718:	200043b0 	.word	0x200043b0

0800771c <atof>:
 800771c:	2100      	movs	r1, #0
 800771e:	f000 be13 	b.w	8008348 <strtod>

08007722 <atoi>:
 8007722:	220a      	movs	r2, #10
 8007724:	2100      	movs	r1, #0
 8007726:	f000 be9d 	b.w	8008464 <strtol>

0800772a <sulp>:
 800772a:	b570      	push	{r4, r5, r6, lr}
 800772c:	4604      	mov	r4, r0
 800772e:	460d      	mov	r5, r1
 8007730:	ec45 4b10 	vmov	d0, r4, r5
 8007734:	4616      	mov	r6, r2
 8007736:	f003 fb67 	bl	800ae08 <__ulp>
 800773a:	ec51 0b10 	vmov	r0, r1, d0
 800773e:	b17e      	cbz	r6, 8007760 <sulp+0x36>
 8007740:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007744:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007748:	2b00      	cmp	r3, #0
 800774a:	dd09      	ble.n	8007760 <sulp+0x36>
 800774c:	051b      	lsls	r3, r3, #20
 800774e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007752:	2400      	movs	r4, #0
 8007754:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007758:	4622      	mov	r2, r4
 800775a:	462b      	mov	r3, r5
 800775c:	f7f8 ff5c 	bl	8000618 <__aeabi_dmul>
 8007760:	bd70      	pop	{r4, r5, r6, pc}
 8007762:	0000      	movs	r0, r0
 8007764:	0000      	movs	r0, r0
	...

08007768 <_strtod_l>:
 8007768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	ed2d 8b02 	vpush	{d8}
 8007770:	b09b      	sub	sp, #108	; 0x6c
 8007772:	4604      	mov	r4, r0
 8007774:	9213      	str	r2, [sp, #76]	; 0x4c
 8007776:	2200      	movs	r2, #0
 8007778:	9216      	str	r2, [sp, #88]	; 0x58
 800777a:	460d      	mov	r5, r1
 800777c:	f04f 0800 	mov.w	r8, #0
 8007780:	f04f 0900 	mov.w	r9, #0
 8007784:	460a      	mov	r2, r1
 8007786:	9215      	str	r2, [sp, #84]	; 0x54
 8007788:	7811      	ldrb	r1, [r2, #0]
 800778a:	292b      	cmp	r1, #43	; 0x2b
 800778c:	d04c      	beq.n	8007828 <_strtod_l+0xc0>
 800778e:	d83a      	bhi.n	8007806 <_strtod_l+0x9e>
 8007790:	290d      	cmp	r1, #13
 8007792:	d834      	bhi.n	80077fe <_strtod_l+0x96>
 8007794:	2908      	cmp	r1, #8
 8007796:	d834      	bhi.n	8007802 <_strtod_l+0x9a>
 8007798:	2900      	cmp	r1, #0
 800779a:	d03d      	beq.n	8007818 <_strtod_l+0xb0>
 800779c:	2200      	movs	r2, #0
 800779e:	920a      	str	r2, [sp, #40]	; 0x28
 80077a0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80077a2:	7832      	ldrb	r2, [r6, #0]
 80077a4:	2a30      	cmp	r2, #48	; 0x30
 80077a6:	f040 80b4 	bne.w	8007912 <_strtod_l+0x1aa>
 80077aa:	7872      	ldrb	r2, [r6, #1]
 80077ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80077b0:	2a58      	cmp	r2, #88	; 0x58
 80077b2:	d170      	bne.n	8007896 <_strtod_l+0x12e>
 80077b4:	9302      	str	r3, [sp, #8]
 80077b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	ab16      	add	r3, sp, #88	; 0x58
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	4a8e      	ldr	r2, [pc, #568]	; (80079f8 <_strtod_l+0x290>)
 80077c0:	ab17      	add	r3, sp, #92	; 0x5c
 80077c2:	a915      	add	r1, sp, #84	; 0x54
 80077c4:	4620      	mov	r0, r4
 80077c6:	f002 fbfd 	bl	8009fc4 <__gethex>
 80077ca:	f010 070f 	ands.w	r7, r0, #15
 80077ce:	4605      	mov	r5, r0
 80077d0:	d005      	beq.n	80077de <_strtod_l+0x76>
 80077d2:	2f06      	cmp	r7, #6
 80077d4:	d12a      	bne.n	800782c <_strtod_l+0xc4>
 80077d6:	3601      	adds	r6, #1
 80077d8:	2300      	movs	r3, #0
 80077da:	9615      	str	r6, [sp, #84]	; 0x54
 80077dc:	930a      	str	r3, [sp, #40]	; 0x28
 80077de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f040 857f 	bne.w	80082e4 <_strtod_l+0xb7c>
 80077e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e8:	b1db      	cbz	r3, 8007822 <_strtod_l+0xba>
 80077ea:	4642      	mov	r2, r8
 80077ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077f0:	ec43 2b10 	vmov	d0, r2, r3
 80077f4:	b01b      	add	sp, #108	; 0x6c
 80077f6:	ecbd 8b02 	vpop	{d8}
 80077fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fe:	2920      	cmp	r1, #32
 8007800:	d1cc      	bne.n	800779c <_strtod_l+0x34>
 8007802:	3201      	adds	r2, #1
 8007804:	e7bf      	b.n	8007786 <_strtod_l+0x1e>
 8007806:	292d      	cmp	r1, #45	; 0x2d
 8007808:	d1c8      	bne.n	800779c <_strtod_l+0x34>
 800780a:	2101      	movs	r1, #1
 800780c:	910a      	str	r1, [sp, #40]	; 0x28
 800780e:	1c51      	adds	r1, r2, #1
 8007810:	9115      	str	r1, [sp, #84]	; 0x54
 8007812:	7852      	ldrb	r2, [r2, #1]
 8007814:	2a00      	cmp	r2, #0
 8007816:	d1c3      	bne.n	80077a0 <_strtod_l+0x38>
 8007818:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800781a:	9515      	str	r5, [sp, #84]	; 0x54
 800781c:	2b00      	cmp	r3, #0
 800781e:	f040 855f 	bne.w	80082e0 <_strtod_l+0xb78>
 8007822:	4642      	mov	r2, r8
 8007824:	464b      	mov	r3, r9
 8007826:	e7e3      	b.n	80077f0 <_strtod_l+0x88>
 8007828:	2100      	movs	r1, #0
 800782a:	e7ef      	b.n	800780c <_strtod_l+0xa4>
 800782c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800782e:	b13a      	cbz	r2, 8007840 <_strtod_l+0xd8>
 8007830:	2135      	movs	r1, #53	; 0x35
 8007832:	a818      	add	r0, sp, #96	; 0x60
 8007834:	f003 fbe5 	bl	800b002 <__copybits>
 8007838:	9916      	ldr	r1, [sp, #88]	; 0x58
 800783a:	4620      	mov	r0, r4
 800783c:	f002 ffb8 	bl	800a7b0 <_Bfree>
 8007840:	3f01      	subs	r7, #1
 8007842:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007844:	2f04      	cmp	r7, #4
 8007846:	d806      	bhi.n	8007856 <_strtod_l+0xee>
 8007848:	e8df f007 	tbb	[pc, r7]
 800784c:	201d0314 	.word	0x201d0314
 8007850:	14          	.byte	0x14
 8007851:	00          	.byte	0x00
 8007852:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007856:	05e9      	lsls	r1, r5, #23
 8007858:	bf48      	it	mi
 800785a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800785e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007862:	0d1b      	lsrs	r3, r3, #20
 8007864:	051b      	lsls	r3, r3, #20
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1b9      	bne.n	80077de <_strtod_l+0x76>
 800786a:	f001 fc39 	bl	80090e0 <__errno>
 800786e:	2322      	movs	r3, #34	; 0x22
 8007870:	6003      	str	r3, [r0, #0]
 8007872:	e7b4      	b.n	80077de <_strtod_l+0x76>
 8007874:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007878:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800787c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007880:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007884:	e7e7      	b.n	8007856 <_strtod_l+0xee>
 8007886:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007a00 <_strtod_l+0x298>
 800788a:	e7e4      	b.n	8007856 <_strtod_l+0xee>
 800788c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007890:	f04f 38ff 	mov.w	r8, #4294967295
 8007894:	e7df      	b.n	8007856 <_strtod_l+0xee>
 8007896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	9215      	str	r2, [sp, #84]	; 0x54
 800789c:	785b      	ldrb	r3, [r3, #1]
 800789e:	2b30      	cmp	r3, #48	; 0x30
 80078a0:	d0f9      	beq.n	8007896 <_strtod_l+0x12e>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d09b      	beq.n	80077de <_strtod_l+0x76>
 80078a6:	2301      	movs	r3, #1
 80078a8:	f04f 0a00 	mov.w	sl, #0
 80078ac:	9304      	str	r3, [sp, #16]
 80078ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80078b6:	46d3      	mov	fp, sl
 80078b8:	220a      	movs	r2, #10
 80078ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 80078bc:	7806      	ldrb	r6, [r0, #0]
 80078be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80078c2:	b2d9      	uxtb	r1, r3
 80078c4:	2909      	cmp	r1, #9
 80078c6:	d926      	bls.n	8007916 <_strtod_l+0x1ae>
 80078c8:	494c      	ldr	r1, [pc, #304]	; (80079fc <_strtod_l+0x294>)
 80078ca:	2201      	movs	r2, #1
 80078cc:	f001 fb55 	bl	8008f7a <strncmp>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d030      	beq.n	8007936 <_strtod_l+0x1ce>
 80078d4:	2000      	movs	r0, #0
 80078d6:	4632      	mov	r2, r6
 80078d8:	9005      	str	r0, [sp, #20]
 80078da:	465e      	mov	r6, fp
 80078dc:	4603      	mov	r3, r0
 80078de:	2a65      	cmp	r2, #101	; 0x65
 80078e0:	d001      	beq.n	80078e6 <_strtod_l+0x17e>
 80078e2:	2a45      	cmp	r2, #69	; 0x45
 80078e4:	d113      	bne.n	800790e <_strtod_l+0x1a6>
 80078e6:	b91e      	cbnz	r6, 80078f0 <_strtod_l+0x188>
 80078e8:	9a04      	ldr	r2, [sp, #16]
 80078ea:	4302      	orrs	r2, r0
 80078ec:	d094      	beq.n	8007818 <_strtod_l+0xb0>
 80078ee:	2600      	movs	r6, #0
 80078f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80078f2:	1c6a      	adds	r2, r5, #1
 80078f4:	9215      	str	r2, [sp, #84]	; 0x54
 80078f6:	786a      	ldrb	r2, [r5, #1]
 80078f8:	2a2b      	cmp	r2, #43	; 0x2b
 80078fa:	d074      	beq.n	80079e6 <_strtod_l+0x27e>
 80078fc:	2a2d      	cmp	r2, #45	; 0x2d
 80078fe:	d078      	beq.n	80079f2 <_strtod_l+0x28a>
 8007900:	f04f 0c00 	mov.w	ip, #0
 8007904:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007908:	2909      	cmp	r1, #9
 800790a:	d97f      	bls.n	8007a0c <_strtod_l+0x2a4>
 800790c:	9515      	str	r5, [sp, #84]	; 0x54
 800790e:	2700      	movs	r7, #0
 8007910:	e09e      	b.n	8007a50 <_strtod_l+0x2e8>
 8007912:	2300      	movs	r3, #0
 8007914:	e7c8      	b.n	80078a8 <_strtod_l+0x140>
 8007916:	f1bb 0f08 	cmp.w	fp, #8
 800791a:	bfd8      	it	le
 800791c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800791e:	f100 0001 	add.w	r0, r0, #1
 8007922:	bfda      	itte	le
 8007924:	fb02 3301 	mlale	r3, r2, r1, r3
 8007928:	9309      	strle	r3, [sp, #36]	; 0x24
 800792a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800792e:	f10b 0b01 	add.w	fp, fp, #1
 8007932:	9015      	str	r0, [sp, #84]	; 0x54
 8007934:	e7c1      	b.n	80078ba <_strtod_l+0x152>
 8007936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	9215      	str	r2, [sp, #84]	; 0x54
 800793c:	785a      	ldrb	r2, [r3, #1]
 800793e:	f1bb 0f00 	cmp.w	fp, #0
 8007942:	d037      	beq.n	80079b4 <_strtod_l+0x24c>
 8007944:	9005      	str	r0, [sp, #20]
 8007946:	465e      	mov	r6, fp
 8007948:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800794c:	2b09      	cmp	r3, #9
 800794e:	d912      	bls.n	8007976 <_strtod_l+0x20e>
 8007950:	2301      	movs	r3, #1
 8007952:	e7c4      	b.n	80078de <_strtod_l+0x176>
 8007954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	9215      	str	r2, [sp, #84]	; 0x54
 800795a:	785a      	ldrb	r2, [r3, #1]
 800795c:	3001      	adds	r0, #1
 800795e:	2a30      	cmp	r2, #48	; 0x30
 8007960:	d0f8      	beq.n	8007954 <_strtod_l+0x1ec>
 8007962:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007966:	2b08      	cmp	r3, #8
 8007968:	f200 84c1 	bhi.w	80082ee <_strtod_l+0xb86>
 800796c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800796e:	9005      	str	r0, [sp, #20]
 8007970:	2000      	movs	r0, #0
 8007972:	930b      	str	r3, [sp, #44]	; 0x2c
 8007974:	4606      	mov	r6, r0
 8007976:	3a30      	subs	r2, #48	; 0x30
 8007978:	f100 0301 	add.w	r3, r0, #1
 800797c:	d014      	beq.n	80079a8 <_strtod_l+0x240>
 800797e:	9905      	ldr	r1, [sp, #20]
 8007980:	4419      	add	r1, r3
 8007982:	9105      	str	r1, [sp, #20]
 8007984:	4633      	mov	r3, r6
 8007986:	eb00 0c06 	add.w	ip, r0, r6
 800798a:	210a      	movs	r1, #10
 800798c:	4563      	cmp	r3, ip
 800798e:	d113      	bne.n	80079b8 <_strtod_l+0x250>
 8007990:	1833      	adds	r3, r6, r0
 8007992:	2b08      	cmp	r3, #8
 8007994:	f106 0601 	add.w	r6, r6, #1
 8007998:	4406      	add	r6, r0
 800799a:	dc1a      	bgt.n	80079d2 <_strtod_l+0x26a>
 800799c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800799e:	230a      	movs	r3, #10
 80079a0:	fb03 2301 	mla	r3, r3, r1, r2
 80079a4:	9309      	str	r3, [sp, #36]	; 0x24
 80079a6:	2300      	movs	r3, #0
 80079a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079aa:	1c51      	adds	r1, r2, #1
 80079ac:	9115      	str	r1, [sp, #84]	; 0x54
 80079ae:	7852      	ldrb	r2, [r2, #1]
 80079b0:	4618      	mov	r0, r3
 80079b2:	e7c9      	b.n	8007948 <_strtod_l+0x1e0>
 80079b4:	4658      	mov	r0, fp
 80079b6:	e7d2      	b.n	800795e <_strtod_l+0x1f6>
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	f103 0301 	add.w	r3, r3, #1
 80079be:	dc03      	bgt.n	80079c8 <_strtod_l+0x260>
 80079c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80079c2:	434f      	muls	r7, r1
 80079c4:	9709      	str	r7, [sp, #36]	; 0x24
 80079c6:	e7e1      	b.n	800798c <_strtod_l+0x224>
 80079c8:	2b10      	cmp	r3, #16
 80079ca:	bfd8      	it	le
 80079cc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80079d0:	e7dc      	b.n	800798c <_strtod_l+0x224>
 80079d2:	2e10      	cmp	r6, #16
 80079d4:	bfdc      	itt	le
 80079d6:	230a      	movle	r3, #10
 80079d8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80079dc:	e7e3      	b.n	80079a6 <_strtod_l+0x23e>
 80079de:	2300      	movs	r3, #0
 80079e0:	9305      	str	r3, [sp, #20]
 80079e2:	2301      	movs	r3, #1
 80079e4:	e780      	b.n	80078e8 <_strtod_l+0x180>
 80079e6:	f04f 0c00 	mov.w	ip, #0
 80079ea:	1caa      	adds	r2, r5, #2
 80079ec:	9215      	str	r2, [sp, #84]	; 0x54
 80079ee:	78aa      	ldrb	r2, [r5, #2]
 80079f0:	e788      	b.n	8007904 <_strtod_l+0x19c>
 80079f2:	f04f 0c01 	mov.w	ip, #1
 80079f6:	e7f8      	b.n	80079ea <_strtod_l+0x282>
 80079f8:	0800bc4c 	.word	0x0800bc4c
 80079fc:	0800bc48 	.word	0x0800bc48
 8007a00:	7ff00000 	.word	0x7ff00000
 8007a04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a06:	1c51      	adds	r1, r2, #1
 8007a08:	9115      	str	r1, [sp, #84]	; 0x54
 8007a0a:	7852      	ldrb	r2, [r2, #1]
 8007a0c:	2a30      	cmp	r2, #48	; 0x30
 8007a0e:	d0f9      	beq.n	8007a04 <_strtod_l+0x29c>
 8007a10:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007a14:	2908      	cmp	r1, #8
 8007a16:	f63f af7a 	bhi.w	800790e <_strtod_l+0x1a6>
 8007a1a:	3a30      	subs	r2, #48	; 0x30
 8007a1c:	9208      	str	r2, [sp, #32]
 8007a1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a20:	920c      	str	r2, [sp, #48]	; 0x30
 8007a22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a24:	1c57      	adds	r7, r2, #1
 8007a26:	9715      	str	r7, [sp, #84]	; 0x54
 8007a28:	7852      	ldrb	r2, [r2, #1]
 8007a2a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007a2e:	f1be 0f09 	cmp.w	lr, #9
 8007a32:	d938      	bls.n	8007aa6 <_strtod_l+0x33e>
 8007a34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a36:	1a7f      	subs	r7, r7, r1
 8007a38:	2f08      	cmp	r7, #8
 8007a3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007a3e:	dc03      	bgt.n	8007a48 <_strtod_l+0x2e0>
 8007a40:	9908      	ldr	r1, [sp, #32]
 8007a42:	428f      	cmp	r7, r1
 8007a44:	bfa8      	it	ge
 8007a46:	460f      	movge	r7, r1
 8007a48:	f1bc 0f00 	cmp.w	ip, #0
 8007a4c:	d000      	beq.n	8007a50 <_strtod_l+0x2e8>
 8007a4e:	427f      	negs	r7, r7
 8007a50:	2e00      	cmp	r6, #0
 8007a52:	d14f      	bne.n	8007af4 <_strtod_l+0x38c>
 8007a54:	9904      	ldr	r1, [sp, #16]
 8007a56:	4301      	orrs	r1, r0
 8007a58:	f47f aec1 	bne.w	80077de <_strtod_l+0x76>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f47f aedb 	bne.w	8007818 <_strtod_l+0xb0>
 8007a62:	2a69      	cmp	r2, #105	; 0x69
 8007a64:	d029      	beq.n	8007aba <_strtod_l+0x352>
 8007a66:	dc26      	bgt.n	8007ab6 <_strtod_l+0x34e>
 8007a68:	2a49      	cmp	r2, #73	; 0x49
 8007a6a:	d026      	beq.n	8007aba <_strtod_l+0x352>
 8007a6c:	2a4e      	cmp	r2, #78	; 0x4e
 8007a6e:	f47f aed3 	bne.w	8007818 <_strtod_l+0xb0>
 8007a72:	499b      	ldr	r1, [pc, #620]	; (8007ce0 <_strtod_l+0x578>)
 8007a74:	a815      	add	r0, sp, #84	; 0x54
 8007a76:	f002 fce5 	bl	800a444 <__match>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	f43f aecc 	beq.w	8007818 <_strtod_l+0xb0>
 8007a80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b28      	cmp	r3, #40	; 0x28
 8007a86:	d12f      	bne.n	8007ae8 <_strtod_l+0x380>
 8007a88:	4996      	ldr	r1, [pc, #600]	; (8007ce4 <_strtod_l+0x57c>)
 8007a8a:	aa18      	add	r2, sp, #96	; 0x60
 8007a8c:	a815      	add	r0, sp, #84	; 0x54
 8007a8e:	f002 fced 	bl	800a46c <__hexnan>
 8007a92:	2805      	cmp	r0, #5
 8007a94:	d128      	bne.n	8007ae8 <_strtod_l+0x380>
 8007a96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007aa0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007aa4:	e69b      	b.n	80077de <_strtod_l+0x76>
 8007aa6:	9f08      	ldr	r7, [sp, #32]
 8007aa8:	210a      	movs	r1, #10
 8007aaa:	fb01 2107 	mla	r1, r1, r7, r2
 8007aae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007ab2:	9208      	str	r2, [sp, #32]
 8007ab4:	e7b5      	b.n	8007a22 <_strtod_l+0x2ba>
 8007ab6:	2a6e      	cmp	r2, #110	; 0x6e
 8007ab8:	e7d9      	b.n	8007a6e <_strtod_l+0x306>
 8007aba:	498b      	ldr	r1, [pc, #556]	; (8007ce8 <_strtod_l+0x580>)
 8007abc:	a815      	add	r0, sp, #84	; 0x54
 8007abe:	f002 fcc1 	bl	800a444 <__match>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	f43f aea8 	beq.w	8007818 <_strtod_l+0xb0>
 8007ac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aca:	4988      	ldr	r1, [pc, #544]	; (8007cec <_strtod_l+0x584>)
 8007acc:	3b01      	subs	r3, #1
 8007ace:	a815      	add	r0, sp, #84	; 0x54
 8007ad0:	9315      	str	r3, [sp, #84]	; 0x54
 8007ad2:	f002 fcb7 	bl	800a444 <__match>
 8007ad6:	b910      	cbnz	r0, 8007ade <_strtod_l+0x376>
 8007ad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ada:	3301      	adds	r3, #1
 8007adc:	9315      	str	r3, [sp, #84]	; 0x54
 8007ade:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007cfc <_strtod_l+0x594>
 8007ae2:	f04f 0800 	mov.w	r8, #0
 8007ae6:	e67a      	b.n	80077de <_strtod_l+0x76>
 8007ae8:	4881      	ldr	r0, [pc, #516]	; (8007cf0 <_strtod_l+0x588>)
 8007aea:	f001 fb35 	bl	8009158 <nan>
 8007aee:	ec59 8b10 	vmov	r8, r9, d0
 8007af2:	e674      	b.n	80077de <_strtod_l+0x76>
 8007af4:	9b05      	ldr	r3, [sp, #20]
 8007af6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007af8:	1afb      	subs	r3, r7, r3
 8007afa:	f1bb 0f00 	cmp.w	fp, #0
 8007afe:	bf08      	it	eq
 8007b00:	46b3      	moveq	fp, r6
 8007b02:	2e10      	cmp	r6, #16
 8007b04:	9308      	str	r3, [sp, #32]
 8007b06:	4635      	mov	r5, r6
 8007b08:	bfa8      	it	ge
 8007b0a:	2510      	movge	r5, #16
 8007b0c:	f7f8 fd0a 	bl	8000524 <__aeabi_ui2d>
 8007b10:	2e09      	cmp	r6, #9
 8007b12:	4680      	mov	r8, r0
 8007b14:	4689      	mov	r9, r1
 8007b16:	dd13      	ble.n	8007b40 <_strtod_l+0x3d8>
 8007b18:	4b76      	ldr	r3, [pc, #472]	; (8007cf4 <_strtod_l+0x58c>)
 8007b1a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b22:	f7f8 fd79 	bl	8000618 <__aeabi_dmul>
 8007b26:	4680      	mov	r8, r0
 8007b28:	4650      	mov	r0, sl
 8007b2a:	4689      	mov	r9, r1
 8007b2c:	f7f8 fcfa 	bl	8000524 <__aeabi_ui2d>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4640      	mov	r0, r8
 8007b36:	4649      	mov	r1, r9
 8007b38:	f7f8 fbb8 	bl	80002ac <__adddf3>
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	4689      	mov	r9, r1
 8007b40:	2e0f      	cmp	r6, #15
 8007b42:	dc38      	bgt.n	8007bb6 <_strtod_l+0x44e>
 8007b44:	9b08      	ldr	r3, [sp, #32]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f43f ae49 	beq.w	80077de <_strtod_l+0x76>
 8007b4c:	dd24      	ble.n	8007b98 <_strtod_l+0x430>
 8007b4e:	2b16      	cmp	r3, #22
 8007b50:	dc0b      	bgt.n	8007b6a <_strtod_l+0x402>
 8007b52:	4968      	ldr	r1, [pc, #416]	; (8007cf4 <_strtod_l+0x58c>)
 8007b54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	464b      	mov	r3, r9
 8007b60:	f7f8 fd5a 	bl	8000618 <__aeabi_dmul>
 8007b64:	4680      	mov	r8, r0
 8007b66:	4689      	mov	r9, r1
 8007b68:	e639      	b.n	80077de <_strtod_l+0x76>
 8007b6a:	9a08      	ldr	r2, [sp, #32]
 8007b6c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007b70:	4293      	cmp	r3, r2
 8007b72:	db20      	blt.n	8007bb6 <_strtod_l+0x44e>
 8007b74:	4c5f      	ldr	r4, [pc, #380]	; (8007cf4 <_strtod_l+0x58c>)
 8007b76:	f1c6 060f 	rsb	r6, r6, #15
 8007b7a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007b7e:	4642      	mov	r2, r8
 8007b80:	464b      	mov	r3, r9
 8007b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b86:	f7f8 fd47 	bl	8000618 <__aeabi_dmul>
 8007b8a:	9b08      	ldr	r3, [sp, #32]
 8007b8c:	1b9e      	subs	r6, r3, r6
 8007b8e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007b92:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b96:	e7e3      	b.n	8007b60 <_strtod_l+0x3f8>
 8007b98:	9b08      	ldr	r3, [sp, #32]
 8007b9a:	3316      	adds	r3, #22
 8007b9c:	db0b      	blt.n	8007bb6 <_strtod_l+0x44e>
 8007b9e:	9b05      	ldr	r3, [sp, #20]
 8007ba0:	1bdf      	subs	r7, r3, r7
 8007ba2:	4b54      	ldr	r3, [pc, #336]	; (8007cf4 <_strtod_l+0x58c>)
 8007ba4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bac:	4640      	mov	r0, r8
 8007bae:	4649      	mov	r1, r9
 8007bb0:	f7f8 fe5c 	bl	800086c <__aeabi_ddiv>
 8007bb4:	e7d6      	b.n	8007b64 <_strtod_l+0x3fc>
 8007bb6:	9b08      	ldr	r3, [sp, #32]
 8007bb8:	1b75      	subs	r5, r6, r5
 8007bba:	441d      	add	r5, r3
 8007bbc:	2d00      	cmp	r5, #0
 8007bbe:	dd70      	ble.n	8007ca2 <_strtod_l+0x53a>
 8007bc0:	f015 030f 	ands.w	r3, r5, #15
 8007bc4:	d00a      	beq.n	8007bdc <_strtod_l+0x474>
 8007bc6:	494b      	ldr	r1, [pc, #300]	; (8007cf4 <_strtod_l+0x58c>)
 8007bc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bcc:	4642      	mov	r2, r8
 8007bce:	464b      	mov	r3, r9
 8007bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd4:	f7f8 fd20 	bl	8000618 <__aeabi_dmul>
 8007bd8:	4680      	mov	r8, r0
 8007bda:	4689      	mov	r9, r1
 8007bdc:	f035 050f 	bics.w	r5, r5, #15
 8007be0:	d04d      	beq.n	8007c7e <_strtod_l+0x516>
 8007be2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007be6:	dd22      	ble.n	8007c2e <_strtod_l+0x4c6>
 8007be8:	2500      	movs	r5, #0
 8007bea:	46ab      	mov	fp, r5
 8007bec:	9509      	str	r5, [sp, #36]	; 0x24
 8007bee:	9505      	str	r5, [sp, #20]
 8007bf0:	2322      	movs	r3, #34	; 0x22
 8007bf2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007cfc <_strtod_l+0x594>
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	f04f 0800 	mov.w	r8, #0
 8007bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f43f aded 	beq.w	80077de <_strtod_l+0x76>
 8007c04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007c06:	4620      	mov	r0, r4
 8007c08:	f002 fdd2 	bl	800a7b0 <_Bfree>
 8007c0c:	9905      	ldr	r1, [sp, #20]
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f002 fdce 	bl	800a7b0 <_Bfree>
 8007c14:	4659      	mov	r1, fp
 8007c16:	4620      	mov	r0, r4
 8007c18:	f002 fdca 	bl	800a7b0 <_Bfree>
 8007c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f002 fdc6 	bl	800a7b0 <_Bfree>
 8007c24:	4629      	mov	r1, r5
 8007c26:	4620      	mov	r0, r4
 8007c28:	f002 fdc2 	bl	800a7b0 <_Bfree>
 8007c2c:	e5d7      	b.n	80077de <_strtod_l+0x76>
 8007c2e:	4b32      	ldr	r3, [pc, #200]	; (8007cf8 <_strtod_l+0x590>)
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	2300      	movs	r3, #0
 8007c34:	112d      	asrs	r5, r5, #4
 8007c36:	4640      	mov	r0, r8
 8007c38:	4649      	mov	r1, r9
 8007c3a:	469a      	mov	sl, r3
 8007c3c:	2d01      	cmp	r5, #1
 8007c3e:	dc21      	bgt.n	8007c84 <_strtod_l+0x51c>
 8007c40:	b10b      	cbz	r3, 8007c46 <_strtod_l+0x4de>
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	492c      	ldr	r1, [pc, #176]	; (8007cf8 <_strtod_l+0x590>)
 8007c48:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007c4c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c58:	f7f8 fcde 	bl	8000618 <__aeabi_dmul>
 8007c5c:	4b27      	ldr	r3, [pc, #156]	; (8007cfc <_strtod_l+0x594>)
 8007c5e:	460a      	mov	r2, r1
 8007c60:	400b      	ands	r3, r1
 8007c62:	4927      	ldr	r1, [pc, #156]	; (8007d00 <_strtod_l+0x598>)
 8007c64:	428b      	cmp	r3, r1
 8007c66:	4680      	mov	r8, r0
 8007c68:	d8be      	bhi.n	8007be8 <_strtod_l+0x480>
 8007c6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c6e:	428b      	cmp	r3, r1
 8007c70:	bf86      	itte	hi
 8007c72:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007d04 <_strtod_l+0x59c>
 8007c76:	f04f 38ff 	movhi.w	r8, #4294967295
 8007c7a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	e07b      	b.n	8007d7c <_strtod_l+0x614>
 8007c84:	07ea      	lsls	r2, r5, #31
 8007c86:	d505      	bpl.n	8007c94 <_strtod_l+0x52c>
 8007c88:	9b04      	ldr	r3, [sp, #16]
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	f7f8 fcc3 	bl	8000618 <__aeabi_dmul>
 8007c92:	2301      	movs	r3, #1
 8007c94:	9a04      	ldr	r2, [sp, #16]
 8007c96:	3208      	adds	r2, #8
 8007c98:	f10a 0a01 	add.w	sl, sl, #1
 8007c9c:	106d      	asrs	r5, r5, #1
 8007c9e:	9204      	str	r2, [sp, #16]
 8007ca0:	e7cc      	b.n	8007c3c <_strtod_l+0x4d4>
 8007ca2:	d0ec      	beq.n	8007c7e <_strtod_l+0x516>
 8007ca4:	426d      	negs	r5, r5
 8007ca6:	f015 020f 	ands.w	r2, r5, #15
 8007caa:	d00a      	beq.n	8007cc2 <_strtod_l+0x55a>
 8007cac:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <_strtod_l+0x58c>)
 8007cae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	f7f8 fdd7 	bl	800086c <__aeabi_ddiv>
 8007cbe:	4680      	mov	r8, r0
 8007cc0:	4689      	mov	r9, r1
 8007cc2:	112d      	asrs	r5, r5, #4
 8007cc4:	d0db      	beq.n	8007c7e <_strtod_l+0x516>
 8007cc6:	2d1f      	cmp	r5, #31
 8007cc8:	dd1e      	ble.n	8007d08 <_strtod_l+0x5a0>
 8007cca:	2500      	movs	r5, #0
 8007ccc:	46ab      	mov	fp, r5
 8007cce:	9509      	str	r5, [sp, #36]	; 0x24
 8007cd0:	9505      	str	r5, [sp, #20]
 8007cd2:	2322      	movs	r3, #34	; 0x22
 8007cd4:	f04f 0800 	mov.w	r8, #0
 8007cd8:	f04f 0900 	mov.w	r9, #0
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	e78d      	b.n	8007bfc <_strtod_l+0x494>
 8007ce0:	0800bdae 	.word	0x0800bdae
 8007ce4:	0800bc60 	.word	0x0800bc60
 8007ce8:	0800bda6 	.word	0x0800bda6
 8007cec:	0800bde0 	.word	0x0800bde0
 8007cf0:	0800c070 	.word	0x0800c070
 8007cf4:	0800bf50 	.word	0x0800bf50
 8007cf8:	0800bf28 	.word	0x0800bf28
 8007cfc:	7ff00000 	.word	0x7ff00000
 8007d00:	7ca00000 	.word	0x7ca00000
 8007d04:	7fefffff 	.word	0x7fefffff
 8007d08:	f015 0310 	ands.w	r3, r5, #16
 8007d0c:	bf18      	it	ne
 8007d0e:	236a      	movne	r3, #106	; 0x6a
 8007d10:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80080b4 <_strtod_l+0x94c>
 8007d14:	9304      	str	r3, [sp, #16]
 8007d16:	4640      	mov	r0, r8
 8007d18:	4649      	mov	r1, r9
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	07ea      	lsls	r2, r5, #31
 8007d1e:	d504      	bpl.n	8007d2a <_strtod_l+0x5c2>
 8007d20:	e9da 2300 	ldrd	r2, r3, [sl]
 8007d24:	f7f8 fc78 	bl	8000618 <__aeabi_dmul>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	106d      	asrs	r5, r5, #1
 8007d2c:	f10a 0a08 	add.w	sl, sl, #8
 8007d30:	d1f4      	bne.n	8007d1c <_strtod_l+0x5b4>
 8007d32:	b10b      	cbz	r3, 8007d38 <_strtod_l+0x5d0>
 8007d34:	4680      	mov	r8, r0
 8007d36:	4689      	mov	r9, r1
 8007d38:	9b04      	ldr	r3, [sp, #16]
 8007d3a:	b1bb      	cbz	r3, 8007d6c <_strtod_l+0x604>
 8007d3c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007d40:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	4649      	mov	r1, r9
 8007d48:	dd10      	ble.n	8007d6c <_strtod_l+0x604>
 8007d4a:	2b1f      	cmp	r3, #31
 8007d4c:	f340 811e 	ble.w	8007f8c <_strtod_l+0x824>
 8007d50:	2b34      	cmp	r3, #52	; 0x34
 8007d52:	bfde      	ittt	le
 8007d54:	f04f 33ff 	movle.w	r3, #4294967295
 8007d58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007d5c:	4093      	lslle	r3, r2
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	bfcc      	ite	gt
 8007d64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007d68:	ea03 0901 	andle.w	r9, r3, r1
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	f7f8 feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d1a6      	bne.n	8007cca <_strtod_l+0x562>
 8007d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d82:	4633      	mov	r3, r6
 8007d84:	465a      	mov	r2, fp
 8007d86:	4620      	mov	r0, r4
 8007d88:	f002 fd7a 	bl	800a880 <__s2b>
 8007d8c:	9009      	str	r0, [sp, #36]	; 0x24
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f43f af2a 	beq.w	8007be8 <_strtod_l+0x480>
 8007d94:	9a08      	ldr	r2, [sp, #32]
 8007d96:	9b05      	ldr	r3, [sp, #20]
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	eba3 0307 	sub.w	r3, r3, r7
 8007d9e:	bfa8      	it	ge
 8007da0:	2300      	movge	r3, #0
 8007da2:	930c      	str	r3, [sp, #48]	; 0x30
 8007da4:	2500      	movs	r5, #0
 8007da6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007daa:	9312      	str	r3, [sp, #72]	; 0x48
 8007dac:	46ab      	mov	fp, r5
 8007dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db0:	4620      	mov	r0, r4
 8007db2:	6859      	ldr	r1, [r3, #4]
 8007db4:	f002 fcbc 	bl	800a730 <_Balloc>
 8007db8:	9005      	str	r0, [sp, #20]
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	f43f af18 	beq.w	8007bf0 <_strtod_l+0x488>
 8007dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc2:	691a      	ldr	r2, [r3, #16]
 8007dc4:	3202      	adds	r2, #2
 8007dc6:	f103 010c 	add.w	r1, r3, #12
 8007dca:	0092      	lsls	r2, r2, #2
 8007dcc:	300c      	adds	r0, #12
 8007dce:	f001 f9b3 	bl	8009138 <memcpy>
 8007dd2:	ec49 8b10 	vmov	d0, r8, r9
 8007dd6:	aa18      	add	r2, sp, #96	; 0x60
 8007dd8:	a917      	add	r1, sp, #92	; 0x5c
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f003 f884 	bl	800aee8 <__d2b>
 8007de0:	ec49 8b18 	vmov	d8, r8, r9
 8007de4:	9016      	str	r0, [sp, #88]	; 0x58
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f af02 	beq.w	8007bf0 <_strtod_l+0x488>
 8007dec:	2101      	movs	r1, #1
 8007dee:	4620      	mov	r0, r4
 8007df0:	f002 fdde 	bl	800a9b0 <__i2b>
 8007df4:	4683      	mov	fp, r0
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f43f aefa 	beq.w	8007bf0 <_strtod_l+0x488>
 8007dfc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007dfe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e00:	2e00      	cmp	r6, #0
 8007e02:	bfab      	itete	ge
 8007e04:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007e06:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007e08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007e0a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007e0e:	bfac      	ite	ge
 8007e10:	eb06 0a03 	addge.w	sl, r6, r3
 8007e14:	1b9f      	sublt	r7, r3, r6
 8007e16:	9b04      	ldr	r3, [sp, #16]
 8007e18:	1af6      	subs	r6, r6, r3
 8007e1a:	4416      	add	r6, r2
 8007e1c:	4ba0      	ldr	r3, [pc, #640]	; (80080a0 <_strtod_l+0x938>)
 8007e1e:	3e01      	subs	r6, #1
 8007e20:	429e      	cmp	r6, r3
 8007e22:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e26:	f280 80c4 	bge.w	8007fb2 <_strtod_l+0x84a>
 8007e2a:	1b9b      	subs	r3, r3, r6
 8007e2c:	2b1f      	cmp	r3, #31
 8007e2e:	eba2 0203 	sub.w	r2, r2, r3
 8007e32:	f04f 0101 	mov.w	r1, #1
 8007e36:	f300 80b0 	bgt.w	8007f9a <_strtod_l+0x832>
 8007e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3e:	930e      	str	r3, [sp, #56]	; 0x38
 8007e40:	2300      	movs	r3, #0
 8007e42:	930d      	str	r3, [sp, #52]	; 0x34
 8007e44:	eb0a 0602 	add.w	r6, sl, r2
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	45b2      	cmp	sl, r6
 8007e4c:	4417      	add	r7, r2
 8007e4e:	441f      	add	r7, r3
 8007e50:	4653      	mov	r3, sl
 8007e52:	bfa8      	it	ge
 8007e54:	4633      	movge	r3, r6
 8007e56:	42bb      	cmp	r3, r7
 8007e58:	bfa8      	it	ge
 8007e5a:	463b      	movge	r3, r7
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bfc2      	ittt	gt
 8007e60:	1af6      	subgt	r6, r6, r3
 8007e62:	1aff      	subgt	r7, r7, r3
 8007e64:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	dd17      	ble.n	8007e9e <_strtod_l+0x736>
 8007e6e:	4659      	mov	r1, fp
 8007e70:	461a      	mov	r2, r3
 8007e72:	4620      	mov	r0, r4
 8007e74:	f002 fe5c 	bl	800ab30 <__pow5mult>
 8007e78:	4683      	mov	fp, r0
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	f43f aeb8 	beq.w	8007bf0 <_strtod_l+0x488>
 8007e80:	4601      	mov	r1, r0
 8007e82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e84:	4620      	mov	r0, r4
 8007e86:	f002 fda9 	bl	800a9dc <__multiply>
 8007e8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f43f aeaf 	beq.w	8007bf0 <_strtod_l+0x488>
 8007e92:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e94:	4620      	mov	r0, r4
 8007e96:	f002 fc8b 	bl	800a7b0 <_Bfree>
 8007e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e9c:	9316      	str	r3, [sp, #88]	; 0x58
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	f300 808c 	bgt.w	8007fbc <_strtod_l+0x854>
 8007ea4:	9b08      	ldr	r3, [sp, #32]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dd08      	ble.n	8007ebc <_strtod_l+0x754>
 8007eaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007eac:	9905      	ldr	r1, [sp, #20]
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f002 fe3e 	bl	800ab30 <__pow5mult>
 8007eb4:	9005      	str	r0, [sp, #20]
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f43f ae9a 	beq.w	8007bf0 <_strtod_l+0x488>
 8007ebc:	2f00      	cmp	r7, #0
 8007ebe:	dd08      	ble.n	8007ed2 <_strtod_l+0x76a>
 8007ec0:	9905      	ldr	r1, [sp, #20]
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f002 fe8d 	bl	800abe4 <__lshift>
 8007eca:	9005      	str	r0, [sp, #20]
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	f43f ae8f 	beq.w	8007bf0 <_strtod_l+0x488>
 8007ed2:	f1ba 0f00 	cmp.w	sl, #0
 8007ed6:	dd08      	ble.n	8007eea <_strtod_l+0x782>
 8007ed8:	4659      	mov	r1, fp
 8007eda:	4652      	mov	r2, sl
 8007edc:	4620      	mov	r0, r4
 8007ede:	f002 fe81 	bl	800abe4 <__lshift>
 8007ee2:	4683      	mov	fp, r0
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f43f ae83 	beq.w	8007bf0 <_strtod_l+0x488>
 8007eea:	9a05      	ldr	r2, [sp, #20]
 8007eec:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f002 ff00 	bl	800acf4 <__mdiff>
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f43f ae7a 	beq.w	8007bf0 <_strtod_l+0x488>
 8007efc:	68c3      	ldr	r3, [r0, #12]
 8007efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f00:	2300      	movs	r3, #0
 8007f02:	60c3      	str	r3, [r0, #12]
 8007f04:	4659      	mov	r1, fp
 8007f06:	f002 fed9 	bl	800acbc <__mcmp>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	da60      	bge.n	8007fd0 <_strtod_l+0x868>
 8007f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f10:	ea53 0308 	orrs.w	r3, r3, r8
 8007f14:	f040 8084 	bne.w	8008020 <_strtod_l+0x8b8>
 8007f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d17f      	bne.n	8008020 <_strtod_l+0x8b8>
 8007f20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f24:	0d1b      	lsrs	r3, r3, #20
 8007f26:	051b      	lsls	r3, r3, #20
 8007f28:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f2c:	d978      	bls.n	8008020 <_strtod_l+0x8b8>
 8007f2e:	696b      	ldr	r3, [r5, #20]
 8007f30:	b913      	cbnz	r3, 8007f38 <_strtod_l+0x7d0>
 8007f32:	692b      	ldr	r3, [r5, #16]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	dd73      	ble.n	8008020 <_strtod_l+0x8b8>
 8007f38:	4629      	mov	r1, r5
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f002 fe51 	bl	800abe4 <__lshift>
 8007f42:	4659      	mov	r1, fp
 8007f44:	4605      	mov	r5, r0
 8007f46:	f002 feb9 	bl	800acbc <__mcmp>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	dd68      	ble.n	8008020 <_strtod_l+0x8b8>
 8007f4e:	9904      	ldr	r1, [sp, #16]
 8007f50:	4a54      	ldr	r2, [pc, #336]	; (80080a4 <_strtod_l+0x93c>)
 8007f52:	464b      	mov	r3, r9
 8007f54:	2900      	cmp	r1, #0
 8007f56:	f000 8084 	beq.w	8008062 <_strtod_l+0x8fa>
 8007f5a:	ea02 0109 	and.w	r1, r2, r9
 8007f5e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f62:	dc7e      	bgt.n	8008062 <_strtod_l+0x8fa>
 8007f64:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f68:	f77f aeb3 	ble.w	8007cd2 <_strtod_l+0x56a>
 8007f6c:	4b4e      	ldr	r3, [pc, #312]	; (80080a8 <_strtod_l+0x940>)
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	2200      	movs	r2, #0
 8007f74:	f7f8 fb50 	bl	8000618 <__aeabi_dmul>
 8007f78:	4b4a      	ldr	r3, [pc, #296]	; (80080a4 <_strtod_l+0x93c>)
 8007f7a:	400b      	ands	r3, r1
 8007f7c:	4680      	mov	r8, r0
 8007f7e:	4689      	mov	r9, r1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f47f ae3f 	bne.w	8007c04 <_strtod_l+0x49c>
 8007f86:	2322      	movs	r3, #34	; 0x22
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	e63b      	b.n	8007c04 <_strtod_l+0x49c>
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	ea03 0808 	and.w	r8, r3, r8
 8007f98:	e6e8      	b.n	8007d6c <_strtod_l+0x604>
 8007f9a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007f9e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007fa2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007fa6:	36e2      	adds	r6, #226	; 0xe2
 8007fa8:	fa01 f306 	lsl.w	r3, r1, r6
 8007fac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007fb0:	e748      	b.n	8007e44 <_strtod_l+0x6dc>
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007fba:	e743      	b.n	8007e44 <_strtod_l+0x6dc>
 8007fbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f002 fe0f 	bl	800abe4 <__lshift>
 8007fc6:	9016      	str	r0, [sp, #88]	; 0x58
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	f47f af6b 	bne.w	8007ea4 <_strtod_l+0x73c>
 8007fce:	e60f      	b.n	8007bf0 <_strtod_l+0x488>
 8007fd0:	46ca      	mov	sl, r9
 8007fd2:	d171      	bne.n	80080b8 <_strtod_l+0x950>
 8007fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fda:	b352      	cbz	r2, 8008032 <_strtod_l+0x8ca>
 8007fdc:	4a33      	ldr	r2, [pc, #204]	; (80080ac <_strtod_l+0x944>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d12a      	bne.n	8008038 <_strtod_l+0x8d0>
 8007fe2:	9b04      	ldr	r3, [sp, #16]
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	b1fb      	cbz	r3, 8008028 <_strtod_l+0x8c0>
 8007fe8:	4b2e      	ldr	r3, [pc, #184]	; (80080a4 <_strtod_l+0x93c>)
 8007fea:	ea09 0303 	and.w	r3, r9, r3
 8007fee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff6:	d81a      	bhi.n	800802e <_strtod_l+0x8c6>
 8007ff8:	0d1b      	lsrs	r3, r3, #20
 8007ffa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8008002:	4299      	cmp	r1, r3
 8008004:	d118      	bne.n	8008038 <_strtod_l+0x8d0>
 8008006:	4b2a      	ldr	r3, [pc, #168]	; (80080b0 <_strtod_l+0x948>)
 8008008:	459a      	cmp	sl, r3
 800800a:	d102      	bne.n	8008012 <_strtod_l+0x8aa>
 800800c:	3101      	adds	r1, #1
 800800e:	f43f adef 	beq.w	8007bf0 <_strtod_l+0x488>
 8008012:	4b24      	ldr	r3, [pc, #144]	; (80080a4 <_strtod_l+0x93c>)
 8008014:	ea0a 0303 	and.w	r3, sl, r3
 8008018:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800801c:	f04f 0800 	mov.w	r8, #0
 8008020:	9b04      	ldr	r3, [sp, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1a2      	bne.n	8007f6c <_strtod_l+0x804>
 8008026:	e5ed      	b.n	8007c04 <_strtod_l+0x49c>
 8008028:	f04f 33ff 	mov.w	r3, #4294967295
 800802c:	e7e9      	b.n	8008002 <_strtod_l+0x89a>
 800802e:	4613      	mov	r3, r2
 8008030:	e7e7      	b.n	8008002 <_strtod_l+0x89a>
 8008032:	ea53 0308 	orrs.w	r3, r3, r8
 8008036:	d08a      	beq.n	8007f4e <_strtod_l+0x7e6>
 8008038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800803a:	b1e3      	cbz	r3, 8008076 <_strtod_l+0x90e>
 800803c:	ea13 0f0a 	tst.w	r3, sl
 8008040:	d0ee      	beq.n	8008020 <_strtod_l+0x8b8>
 8008042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008044:	9a04      	ldr	r2, [sp, #16]
 8008046:	4640      	mov	r0, r8
 8008048:	4649      	mov	r1, r9
 800804a:	b1c3      	cbz	r3, 800807e <_strtod_l+0x916>
 800804c:	f7ff fb6d 	bl	800772a <sulp>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	ec51 0b18 	vmov	r0, r1, d8
 8008058:	f7f8 f928 	bl	80002ac <__adddf3>
 800805c:	4680      	mov	r8, r0
 800805e:	4689      	mov	r9, r1
 8008060:	e7de      	b.n	8008020 <_strtod_l+0x8b8>
 8008062:	4013      	ands	r3, r2
 8008064:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008068:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800806c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008070:	f04f 38ff 	mov.w	r8, #4294967295
 8008074:	e7d4      	b.n	8008020 <_strtod_l+0x8b8>
 8008076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008078:	ea13 0f08 	tst.w	r3, r8
 800807c:	e7e0      	b.n	8008040 <_strtod_l+0x8d8>
 800807e:	f7ff fb54 	bl	800772a <sulp>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	ec51 0b18 	vmov	r0, r1, d8
 800808a:	f7f8 f90d 	bl	80002a8 <__aeabi_dsub>
 800808e:	2200      	movs	r2, #0
 8008090:	2300      	movs	r3, #0
 8008092:	4680      	mov	r8, r0
 8008094:	4689      	mov	r9, r1
 8008096:	f7f8 fd27 	bl	8000ae8 <__aeabi_dcmpeq>
 800809a:	2800      	cmp	r0, #0
 800809c:	d0c0      	beq.n	8008020 <_strtod_l+0x8b8>
 800809e:	e618      	b.n	8007cd2 <_strtod_l+0x56a>
 80080a0:	fffffc02 	.word	0xfffffc02
 80080a4:	7ff00000 	.word	0x7ff00000
 80080a8:	39500000 	.word	0x39500000
 80080ac:	000fffff 	.word	0x000fffff
 80080b0:	7fefffff 	.word	0x7fefffff
 80080b4:	0800bc78 	.word	0x0800bc78
 80080b8:	4659      	mov	r1, fp
 80080ba:	4628      	mov	r0, r5
 80080bc:	f002 ff6e 	bl	800af9c <__ratio>
 80080c0:	ec57 6b10 	vmov	r6, r7, d0
 80080c4:	ee10 0a10 	vmov	r0, s0
 80080c8:	2200      	movs	r2, #0
 80080ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 fd1e 	bl	8000b10 <__aeabi_dcmple>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d071      	beq.n	80081bc <_strtod_l+0xa54>
 80080d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d17c      	bne.n	80081d8 <_strtod_l+0xa70>
 80080de:	f1b8 0f00 	cmp.w	r8, #0
 80080e2:	d15a      	bne.n	800819a <_strtod_l+0xa32>
 80080e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d15d      	bne.n	80081a8 <_strtod_l+0xa40>
 80080ec:	4b90      	ldr	r3, [pc, #576]	; (8008330 <_strtod_l+0xbc8>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 fd02 	bl	8000afc <__aeabi_dcmplt>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d15c      	bne.n	80081b6 <_strtod_l+0xa4e>
 80080fc:	4630      	mov	r0, r6
 80080fe:	4639      	mov	r1, r7
 8008100:	4b8c      	ldr	r3, [pc, #560]	; (8008334 <_strtod_l+0xbcc>)
 8008102:	2200      	movs	r2, #0
 8008104:	f7f8 fa88 	bl	8000618 <__aeabi_dmul>
 8008108:	4606      	mov	r6, r0
 800810a:	460f      	mov	r7, r1
 800810c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008110:	9606      	str	r6, [sp, #24]
 8008112:	9307      	str	r3, [sp, #28]
 8008114:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008118:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800811c:	4b86      	ldr	r3, [pc, #536]	; (8008338 <_strtod_l+0xbd0>)
 800811e:	ea0a 0303 	and.w	r3, sl, r3
 8008122:	930d      	str	r3, [sp, #52]	; 0x34
 8008124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008126:	4b85      	ldr	r3, [pc, #532]	; (800833c <_strtod_l+0xbd4>)
 8008128:	429a      	cmp	r2, r3
 800812a:	f040 8090 	bne.w	800824e <_strtod_l+0xae6>
 800812e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008132:	ec49 8b10 	vmov	d0, r8, r9
 8008136:	f002 fe67 	bl	800ae08 <__ulp>
 800813a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800813e:	ec51 0b10 	vmov	r0, r1, d0
 8008142:	f7f8 fa69 	bl	8000618 <__aeabi_dmul>
 8008146:	4642      	mov	r2, r8
 8008148:	464b      	mov	r3, r9
 800814a:	f7f8 f8af 	bl	80002ac <__adddf3>
 800814e:	460b      	mov	r3, r1
 8008150:	4979      	ldr	r1, [pc, #484]	; (8008338 <_strtod_l+0xbd0>)
 8008152:	4a7b      	ldr	r2, [pc, #492]	; (8008340 <_strtod_l+0xbd8>)
 8008154:	4019      	ands	r1, r3
 8008156:	4291      	cmp	r1, r2
 8008158:	4680      	mov	r8, r0
 800815a:	d944      	bls.n	80081e6 <_strtod_l+0xa7e>
 800815c:	ee18 2a90 	vmov	r2, s17
 8008160:	4b78      	ldr	r3, [pc, #480]	; (8008344 <_strtod_l+0xbdc>)
 8008162:	429a      	cmp	r2, r3
 8008164:	d104      	bne.n	8008170 <_strtod_l+0xa08>
 8008166:	ee18 3a10 	vmov	r3, s16
 800816a:	3301      	adds	r3, #1
 800816c:	f43f ad40 	beq.w	8007bf0 <_strtod_l+0x488>
 8008170:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008344 <_strtod_l+0xbdc>
 8008174:	f04f 38ff 	mov.w	r8, #4294967295
 8008178:	9916      	ldr	r1, [sp, #88]	; 0x58
 800817a:	4620      	mov	r0, r4
 800817c:	f002 fb18 	bl	800a7b0 <_Bfree>
 8008180:	9905      	ldr	r1, [sp, #20]
 8008182:	4620      	mov	r0, r4
 8008184:	f002 fb14 	bl	800a7b0 <_Bfree>
 8008188:	4659      	mov	r1, fp
 800818a:	4620      	mov	r0, r4
 800818c:	f002 fb10 	bl	800a7b0 <_Bfree>
 8008190:	4629      	mov	r1, r5
 8008192:	4620      	mov	r0, r4
 8008194:	f002 fb0c 	bl	800a7b0 <_Bfree>
 8008198:	e609      	b.n	8007dae <_strtod_l+0x646>
 800819a:	f1b8 0f01 	cmp.w	r8, #1
 800819e:	d103      	bne.n	80081a8 <_strtod_l+0xa40>
 80081a0:	f1b9 0f00 	cmp.w	r9, #0
 80081a4:	f43f ad95 	beq.w	8007cd2 <_strtod_l+0x56a>
 80081a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008300 <_strtod_l+0xb98>
 80081ac:	4f60      	ldr	r7, [pc, #384]	; (8008330 <_strtod_l+0xbc8>)
 80081ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081b2:	2600      	movs	r6, #0
 80081b4:	e7ae      	b.n	8008114 <_strtod_l+0x9ac>
 80081b6:	4f5f      	ldr	r7, [pc, #380]	; (8008334 <_strtod_l+0xbcc>)
 80081b8:	2600      	movs	r6, #0
 80081ba:	e7a7      	b.n	800810c <_strtod_l+0x9a4>
 80081bc:	4b5d      	ldr	r3, [pc, #372]	; (8008334 <_strtod_l+0xbcc>)
 80081be:	4630      	mov	r0, r6
 80081c0:	4639      	mov	r1, r7
 80081c2:	2200      	movs	r2, #0
 80081c4:	f7f8 fa28 	bl	8000618 <__aeabi_dmul>
 80081c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ca:	4606      	mov	r6, r0
 80081cc:	460f      	mov	r7, r1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d09c      	beq.n	800810c <_strtod_l+0x9a4>
 80081d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80081d6:	e79d      	b.n	8008114 <_strtod_l+0x9ac>
 80081d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008308 <_strtod_l+0xba0>
 80081dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081e0:	ec57 6b17 	vmov	r6, r7, d7
 80081e4:	e796      	b.n	8008114 <_strtod_l+0x9ac>
 80081e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	46ca      	mov	sl, r9
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1c2      	bne.n	8008178 <_strtod_l+0xa10>
 80081f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081f8:	0d1b      	lsrs	r3, r3, #20
 80081fa:	051b      	lsls	r3, r3, #20
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d1bb      	bne.n	8008178 <_strtod_l+0xa10>
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 fd68 	bl	8000cd8 <__aeabi_d2lz>
 8008208:	f7f8 f9d8 	bl	80005bc <__aeabi_l2d>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f8 f848 	bl	80002a8 <__aeabi_dsub>
 8008218:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800821a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800821e:	ea43 0308 	orr.w	r3, r3, r8
 8008222:	4313      	orrs	r3, r2
 8008224:	4606      	mov	r6, r0
 8008226:	460f      	mov	r7, r1
 8008228:	d054      	beq.n	80082d4 <_strtod_l+0xb6c>
 800822a:	a339      	add	r3, pc, #228	; (adr r3, 8008310 <_strtod_l+0xba8>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 fc64 	bl	8000afc <__aeabi_dcmplt>
 8008234:	2800      	cmp	r0, #0
 8008236:	f47f ace5 	bne.w	8007c04 <_strtod_l+0x49c>
 800823a:	a337      	add	r3, pc, #220	; (adr r3, 8008318 <_strtod_l+0xbb0>)
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	f7f8 fc78 	bl	8000b38 <__aeabi_dcmpgt>
 8008248:	2800      	cmp	r0, #0
 800824a:	d095      	beq.n	8008178 <_strtod_l+0xa10>
 800824c:	e4da      	b.n	8007c04 <_strtod_l+0x49c>
 800824e:	9b04      	ldr	r3, [sp, #16]
 8008250:	b333      	cbz	r3, 80082a0 <_strtod_l+0xb38>
 8008252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008254:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008258:	d822      	bhi.n	80082a0 <_strtod_l+0xb38>
 800825a:	a331      	add	r3, pc, #196	; (adr r3, 8008320 <_strtod_l+0xbb8>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	4630      	mov	r0, r6
 8008262:	4639      	mov	r1, r7
 8008264:	f7f8 fc54 	bl	8000b10 <__aeabi_dcmple>
 8008268:	b1a0      	cbz	r0, 8008294 <_strtod_l+0xb2c>
 800826a:	4639      	mov	r1, r7
 800826c:	4630      	mov	r0, r6
 800826e:	f7f8 fcab 	bl	8000bc8 <__aeabi_d2uiz>
 8008272:	2801      	cmp	r0, #1
 8008274:	bf38      	it	cc
 8008276:	2001      	movcc	r0, #1
 8008278:	f7f8 f954 	bl	8000524 <__aeabi_ui2d>
 800827c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800827e:	4606      	mov	r6, r0
 8008280:	460f      	mov	r7, r1
 8008282:	bb23      	cbnz	r3, 80082ce <_strtod_l+0xb66>
 8008284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008288:	9010      	str	r0, [sp, #64]	; 0x40
 800828a:	9311      	str	r3, [sp, #68]	; 0x44
 800828c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008290:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008298:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800829c:	1a9b      	subs	r3, r3, r2
 800829e:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80082a4:	eeb0 0a48 	vmov.f32	s0, s16
 80082a8:	eef0 0a68 	vmov.f32	s1, s17
 80082ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80082b0:	f002 fdaa 	bl	800ae08 <__ulp>
 80082b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80082b8:	ec53 2b10 	vmov	r2, r3, d0
 80082bc:	f7f8 f9ac 	bl	8000618 <__aeabi_dmul>
 80082c0:	ec53 2b18 	vmov	r2, r3, d8
 80082c4:	f7f7 fff2 	bl	80002ac <__adddf3>
 80082c8:	4680      	mov	r8, r0
 80082ca:	4689      	mov	r9, r1
 80082cc:	e78d      	b.n	80081ea <_strtod_l+0xa82>
 80082ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80082d2:	e7db      	b.n	800828c <_strtod_l+0xb24>
 80082d4:	a314      	add	r3, pc, #80	; (adr r3, 8008328 <_strtod_l+0xbc0>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f7f8 fc0f 	bl	8000afc <__aeabi_dcmplt>
 80082de:	e7b3      	b.n	8008248 <_strtod_l+0xae0>
 80082e0:	2300      	movs	r3, #0
 80082e2:	930a      	str	r3, [sp, #40]	; 0x28
 80082e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	f7ff ba7c 	b.w	80077e6 <_strtod_l+0x7e>
 80082ee:	2a65      	cmp	r2, #101	; 0x65
 80082f0:	f43f ab75 	beq.w	80079de <_strtod_l+0x276>
 80082f4:	2a45      	cmp	r2, #69	; 0x45
 80082f6:	f43f ab72 	beq.w	80079de <_strtod_l+0x276>
 80082fa:	2301      	movs	r3, #1
 80082fc:	f7ff bbaa 	b.w	8007a54 <_strtod_l+0x2ec>
 8008300:	00000000 	.word	0x00000000
 8008304:	bff00000 	.word	0xbff00000
 8008308:	00000000 	.word	0x00000000
 800830c:	3ff00000 	.word	0x3ff00000
 8008310:	94a03595 	.word	0x94a03595
 8008314:	3fdfffff 	.word	0x3fdfffff
 8008318:	35afe535 	.word	0x35afe535
 800831c:	3fe00000 	.word	0x3fe00000
 8008320:	ffc00000 	.word	0xffc00000
 8008324:	41dfffff 	.word	0x41dfffff
 8008328:	94a03595 	.word	0x94a03595
 800832c:	3fcfffff 	.word	0x3fcfffff
 8008330:	3ff00000 	.word	0x3ff00000
 8008334:	3fe00000 	.word	0x3fe00000
 8008338:	7ff00000 	.word	0x7ff00000
 800833c:	7fe00000 	.word	0x7fe00000
 8008340:	7c9fffff 	.word	0x7c9fffff
 8008344:	7fefffff 	.word	0x7fefffff

08008348 <strtod>:
 8008348:	460a      	mov	r2, r1
 800834a:	4601      	mov	r1, r0
 800834c:	4802      	ldr	r0, [pc, #8]	; (8008358 <strtod+0x10>)
 800834e:	4b03      	ldr	r3, [pc, #12]	; (800835c <strtod+0x14>)
 8008350:	6800      	ldr	r0, [r0, #0]
 8008352:	f7ff ba09 	b.w	8007768 <_strtod_l>
 8008356:	bf00      	nop
 8008358:	200001e0 	.word	0x200001e0
 800835c:	20000028 	.word	0x20000028

08008360 <_strtol_l.constprop.0>:
 8008360:	2b01      	cmp	r3, #1
 8008362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008366:	d001      	beq.n	800836c <_strtol_l.constprop.0+0xc>
 8008368:	2b24      	cmp	r3, #36	; 0x24
 800836a:	d906      	bls.n	800837a <_strtol_l.constprop.0+0x1a>
 800836c:	f000 feb8 	bl	80090e0 <__errno>
 8008370:	2316      	movs	r3, #22
 8008372:	6003      	str	r3, [r0, #0]
 8008374:	2000      	movs	r0, #0
 8008376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008460 <_strtol_l.constprop.0+0x100>
 800837e:	460d      	mov	r5, r1
 8008380:	462e      	mov	r6, r5
 8008382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008386:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800838a:	f017 0708 	ands.w	r7, r7, #8
 800838e:	d1f7      	bne.n	8008380 <_strtol_l.constprop.0+0x20>
 8008390:	2c2d      	cmp	r4, #45	; 0x2d
 8008392:	d132      	bne.n	80083fa <_strtol_l.constprop.0+0x9a>
 8008394:	782c      	ldrb	r4, [r5, #0]
 8008396:	2701      	movs	r7, #1
 8008398:	1cb5      	adds	r5, r6, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d05b      	beq.n	8008456 <_strtol_l.constprop.0+0xf6>
 800839e:	2b10      	cmp	r3, #16
 80083a0:	d109      	bne.n	80083b6 <_strtol_l.constprop.0+0x56>
 80083a2:	2c30      	cmp	r4, #48	; 0x30
 80083a4:	d107      	bne.n	80083b6 <_strtol_l.constprop.0+0x56>
 80083a6:	782c      	ldrb	r4, [r5, #0]
 80083a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80083ac:	2c58      	cmp	r4, #88	; 0x58
 80083ae:	d14d      	bne.n	800844c <_strtol_l.constprop.0+0xec>
 80083b0:	786c      	ldrb	r4, [r5, #1]
 80083b2:	2310      	movs	r3, #16
 80083b4:	3502      	adds	r5, #2
 80083b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80083ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80083be:	f04f 0e00 	mov.w	lr, #0
 80083c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80083c6:	4676      	mov	r6, lr
 80083c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80083cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80083d0:	f1bc 0f09 	cmp.w	ip, #9
 80083d4:	d816      	bhi.n	8008404 <_strtol_l.constprop.0+0xa4>
 80083d6:	4664      	mov	r4, ip
 80083d8:	42a3      	cmp	r3, r4
 80083da:	dd24      	ble.n	8008426 <_strtol_l.constprop.0+0xc6>
 80083dc:	f1be 3fff 	cmp.w	lr, #4294967295
 80083e0:	d008      	beq.n	80083f4 <_strtol_l.constprop.0+0x94>
 80083e2:	45b1      	cmp	r9, r6
 80083e4:	d31c      	bcc.n	8008420 <_strtol_l.constprop.0+0xc0>
 80083e6:	d101      	bne.n	80083ec <_strtol_l.constprop.0+0x8c>
 80083e8:	45a2      	cmp	sl, r4
 80083ea:	db19      	blt.n	8008420 <_strtol_l.constprop.0+0xc0>
 80083ec:	fb06 4603 	mla	r6, r6, r3, r4
 80083f0:	f04f 0e01 	mov.w	lr, #1
 80083f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083f8:	e7e8      	b.n	80083cc <_strtol_l.constprop.0+0x6c>
 80083fa:	2c2b      	cmp	r4, #43	; 0x2b
 80083fc:	bf04      	itt	eq
 80083fe:	782c      	ldrbeq	r4, [r5, #0]
 8008400:	1cb5      	addeq	r5, r6, #2
 8008402:	e7ca      	b.n	800839a <_strtol_l.constprop.0+0x3a>
 8008404:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008408:	f1bc 0f19 	cmp.w	ip, #25
 800840c:	d801      	bhi.n	8008412 <_strtol_l.constprop.0+0xb2>
 800840e:	3c37      	subs	r4, #55	; 0x37
 8008410:	e7e2      	b.n	80083d8 <_strtol_l.constprop.0+0x78>
 8008412:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008416:	f1bc 0f19 	cmp.w	ip, #25
 800841a:	d804      	bhi.n	8008426 <_strtol_l.constprop.0+0xc6>
 800841c:	3c57      	subs	r4, #87	; 0x57
 800841e:	e7db      	b.n	80083d8 <_strtol_l.constprop.0+0x78>
 8008420:	f04f 3eff 	mov.w	lr, #4294967295
 8008424:	e7e6      	b.n	80083f4 <_strtol_l.constprop.0+0x94>
 8008426:	f1be 3fff 	cmp.w	lr, #4294967295
 800842a:	d105      	bne.n	8008438 <_strtol_l.constprop.0+0xd8>
 800842c:	2322      	movs	r3, #34	; 0x22
 800842e:	6003      	str	r3, [r0, #0]
 8008430:	4646      	mov	r6, r8
 8008432:	b942      	cbnz	r2, 8008446 <_strtol_l.constprop.0+0xe6>
 8008434:	4630      	mov	r0, r6
 8008436:	e79e      	b.n	8008376 <_strtol_l.constprop.0+0x16>
 8008438:	b107      	cbz	r7, 800843c <_strtol_l.constprop.0+0xdc>
 800843a:	4276      	negs	r6, r6
 800843c:	2a00      	cmp	r2, #0
 800843e:	d0f9      	beq.n	8008434 <_strtol_l.constprop.0+0xd4>
 8008440:	f1be 0f00 	cmp.w	lr, #0
 8008444:	d000      	beq.n	8008448 <_strtol_l.constprop.0+0xe8>
 8008446:	1e69      	subs	r1, r5, #1
 8008448:	6011      	str	r1, [r2, #0]
 800844a:	e7f3      	b.n	8008434 <_strtol_l.constprop.0+0xd4>
 800844c:	2430      	movs	r4, #48	; 0x30
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1b1      	bne.n	80083b6 <_strtol_l.constprop.0+0x56>
 8008452:	2308      	movs	r3, #8
 8008454:	e7af      	b.n	80083b6 <_strtol_l.constprop.0+0x56>
 8008456:	2c30      	cmp	r4, #48	; 0x30
 8008458:	d0a5      	beq.n	80083a6 <_strtol_l.constprop.0+0x46>
 800845a:	230a      	movs	r3, #10
 800845c:	e7ab      	b.n	80083b6 <_strtol_l.constprop.0+0x56>
 800845e:	bf00      	nop
 8008460:	0800bca1 	.word	0x0800bca1

08008464 <strtol>:
 8008464:	4613      	mov	r3, r2
 8008466:	460a      	mov	r2, r1
 8008468:	4601      	mov	r1, r0
 800846a:	4802      	ldr	r0, [pc, #8]	; (8008474 <strtol+0x10>)
 800846c:	6800      	ldr	r0, [r0, #0]
 800846e:	f7ff bf77 	b.w	8008360 <_strtol_l.constprop.0>
 8008472:	bf00      	nop
 8008474:	200001e0 	.word	0x200001e0

08008478 <__cvt>:
 8008478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	ec55 4b10 	vmov	r4, r5, d0
 8008480:	2d00      	cmp	r5, #0
 8008482:	460e      	mov	r6, r1
 8008484:	4619      	mov	r1, r3
 8008486:	462b      	mov	r3, r5
 8008488:	bfbb      	ittet	lt
 800848a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800848e:	461d      	movlt	r5, r3
 8008490:	2300      	movge	r3, #0
 8008492:	232d      	movlt	r3, #45	; 0x2d
 8008494:	700b      	strb	r3, [r1, #0]
 8008496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008498:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800849c:	4691      	mov	r9, r2
 800849e:	f023 0820 	bic.w	r8, r3, #32
 80084a2:	bfbc      	itt	lt
 80084a4:	4622      	movlt	r2, r4
 80084a6:	4614      	movlt	r4, r2
 80084a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084ac:	d005      	beq.n	80084ba <__cvt+0x42>
 80084ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80084b2:	d100      	bne.n	80084b6 <__cvt+0x3e>
 80084b4:	3601      	adds	r6, #1
 80084b6:	2102      	movs	r1, #2
 80084b8:	e000      	b.n	80084bc <__cvt+0x44>
 80084ba:	2103      	movs	r1, #3
 80084bc:	ab03      	add	r3, sp, #12
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	ab02      	add	r3, sp, #8
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	ec45 4b10 	vmov	d0, r4, r5
 80084c8:	4653      	mov	r3, sl
 80084ca:	4632      	mov	r2, r6
 80084cc:	f000 fed4 	bl	8009278 <_dtoa_r>
 80084d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084d4:	4607      	mov	r7, r0
 80084d6:	d102      	bne.n	80084de <__cvt+0x66>
 80084d8:	f019 0f01 	tst.w	r9, #1
 80084dc:	d022      	beq.n	8008524 <__cvt+0xac>
 80084de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084e2:	eb07 0906 	add.w	r9, r7, r6
 80084e6:	d110      	bne.n	800850a <__cvt+0x92>
 80084e8:	783b      	ldrb	r3, [r7, #0]
 80084ea:	2b30      	cmp	r3, #48	; 0x30
 80084ec:	d10a      	bne.n	8008504 <__cvt+0x8c>
 80084ee:	2200      	movs	r2, #0
 80084f0:	2300      	movs	r3, #0
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7f8 faf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80084fa:	b918      	cbnz	r0, 8008504 <__cvt+0x8c>
 80084fc:	f1c6 0601 	rsb	r6, r6, #1
 8008500:	f8ca 6000 	str.w	r6, [sl]
 8008504:	f8da 3000 	ldr.w	r3, [sl]
 8008508:	4499      	add	r9, r3
 800850a:	2200      	movs	r2, #0
 800850c:	2300      	movs	r3, #0
 800850e:	4620      	mov	r0, r4
 8008510:	4629      	mov	r1, r5
 8008512:	f7f8 fae9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008516:	b108      	cbz	r0, 800851c <__cvt+0xa4>
 8008518:	f8cd 900c 	str.w	r9, [sp, #12]
 800851c:	2230      	movs	r2, #48	; 0x30
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	454b      	cmp	r3, r9
 8008522:	d307      	bcc.n	8008534 <__cvt+0xbc>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008528:	1bdb      	subs	r3, r3, r7
 800852a:	4638      	mov	r0, r7
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	b004      	add	sp, #16
 8008530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008534:	1c59      	adds	r1, r3, #1
 8008536:	9103      	str	r1, [sp, #12]
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e7f0      	b.n	800851e <__cvt+0xa6>

0800853c <__exponent>:
 800853c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800853e:	4603      	mov	r3, r0
 8008540:	2900      	cmp	r1, #0
 8008542:	bfb8      	it	lt
 8008544:	4249      	neglt	r1, r1
 8008546:	f803 2b02 	strb.w	r2, [r3], #2
 800854a:	bfb4      	ite	lt
 800854c:	222d      	movlt	r2, #45	; 0x2d
 800854e:	222b      	movge	r2, #43	; 0x2b
 8008550:	2909      	cmp	r1, #9
 8008552:	7042      	strb	r2, [r0, #1]
 8008554:	dd2a      	ble.n	80085ac <__exponent+0x70>
 8008556:	f10d 0207 	add.w	r2, sp, #7
 800855a:	4617      	mov	r7, r2
 800855c:	260a      	movs	r6, #10
 800855e:	4694      	mov	ip, r2
 8008560:	fb91 f5f6 	sdiv	r5, r1, r6
 8008564:	fb06 1415 	mls	r4, r6, r5, r1
 8008568:	3430      	adds	r4, #48	; 0x30
 800856a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800856e:	460c      	mov	r4, r1
 8008570:	2c63      	cmp	r4, #99	; 0x63
 8008572:	f102 32ff 	add.w	r2, r2, #4294967295
 8008576:	4629      	mov	r1, r5
 8008578:	dcf1      	bgt.n	800855e <__exponent+0x22>
 800857a:	3130      	adds	r1, #48	; 0x30
 800857c:	f1ac 0402 	sub.w	r4, ip, #2
 8008580:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008584:	1c41      	adds	r1, r0, #1
 8008586:	4622      	mov	r2, r4
 8008588:	42ba      	cmp	r2, r7
 800858a:	d30a      	bcc.n	80085a2 <__exponent+0x66>
 800858c:	f10d 0209 	add.w	r2, sp, #9
 8008590:	eba2 020c 	sub.w	r2, r2, ip
 8008594:	42bc      	cmp	r4, r7
 8008596:	bf88      	it	hi
 8008598:	2200      	movhi	r2, #0
 800859a:	4413      	add	r3, r2
 800859c:	1a18      	subs	r0, r3, r0
 800859e:	b003      	add	sp, #12
 80085a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80085a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80085aa:	e7ed      	b.n	8008588 <__exponent+0x4c>
 80085ac:	2330      	movs	r3, #48	; 0x30
 80085ae:	3130      	adds	r1, #48	; 0x30
 80085b0:	7083      	strb	r3, [r0, #2]
 80085b2:	70c1      	strb	r1, [r0, #3]
 80085b4:	1d03      	adds	r3, r0, #4
 80085b6:	e7f1      	b.n	800859c <__exponent+0x60>

080085b8 <_printf_float>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	ed2d 8b02 	vpush	{d8}
 80085c0:	b08d      	sub	sp, #52	; 0x34
 80085c2:	460c      	mov	r4, r1
 80085c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085c8:	4616      	mov	r6, r2
 80085ca:	461f      	mov	r7, r3
 80085cc:	4605      	mov	r5, r0
 80085ce:	f000 fce7 	bl	8008fa0 <_localeconv_r>
 80085d2:	f8d0 a000 	ldr.w	sl, [r0]
 80085d6:	4650      	mov	r0, sl
 80085d8:	f7f7 fe5a 	bl	8000290 <strlen>
 80085dc:	2300      	movs	r3, #0
 80085de:	930a      	str	r3, [sp, #40]	; 0x28
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	9305      	str	r3, [sp, #20]
 80085e4:	f8d8 3000 	ldr.w	r3, [r8]
 80085e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085ec:	3307      	adds	r3, #7
 80085ee:	f023 0307 	bic.w	r3, r3, #7
 80085f2:	f103 0208 	add.w	r2, r3, #8
 80085f6:	f8c8 2000 	str.w	r2, [r8]
 80085fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008602:	9307      	str	r3, [sp, #28]
 8008604:	f8cd 8018 	str.w	r8, [sp, #24]
 8008608:	ee08 0a10 	vmov	s16, r0
 800860c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008614:	4b9e      	ldr	r3, [pc, #632]	; (8008890 <_printf_float+0x2d8>)
 8008616:	f04f 32ff 	mov.w	r2, #4294967295
 800861a:	f7f8 fa97 	bl	8000b4c <__aeabi_dcmpun>
 800861e:	bb88      	cbnz	r0, 8008684 <_printf_float+0xcc>
 8008620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008624:	4b9a      	ldr	r3, [pc, #616]	; (8008890 <_printf_float+0x2d8>)
 8008626:	f04f 32ff 	mov.w	r2, #4294967295
 800862a:	f7f8 fa71 	bl	8000b10 <__aeabi_dcmple>
 800862e:	bb48      	cbnz	r0, 8008684 <_printf_float+0xcc>
 8008630:	2200      	movs	r2, #0
 8008632:	2300      	movs	r3, #0
 8008634:	4640      	mov	r0, r8
 8008636:	4649      	mov	r1, r9
 8008638:	f7f8 fa60 	bl	8000afc <__aeabi_dcmplt>
 800863c:	b110      	cbz	r0, 8008644 <_printf_float+0x8c>
 800863e:	232d      	movs	r3, #45	; 0x2d
 8008640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008644:	4a93      	ldr	r2, [pc, #588]	; (8008894 <_printf_float+0x2dc>)
 8008646:	4b94      	ldr	r3, [pc, #592]	; (8008898 <_printf_float+0x2e0>)
 8008648:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800864c:	bf94      	ite	ls
 800864e:	4690      	movls	r8, r2
 8008650:	4698      	movhi	r8, r3
 8008652:	2303      	movs	r3, #3
 8008654:	6123      	str	r3, [r4, #16]
 8008656:	9b05      	ldr	r3, [sp, #20]
 8008658:	f023 0304 	bic.w	r3, r3, #4
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	f04f 0900 	mov.w	r9, #0
 8008662:	9700      	str	r7, [sp, #0]
 8008664:	4633      	mov	r3, r6
 8008666:	aa0b      	add	r2, sp, #44	; 0x2c
 8008668:	4621      	mov	r1, r4
 800866a:	4628      	mov	r0, r5
 800866c:	f000 f9da 	bl	8008a24 <_printf_common>
 8008670:	3001      	adds	r0, #1
 8008672:	f040 8090 	bne.w	8008796 <_printf_float+0x1de>
 8008676:	f04f 30ff 	mov.w	r0, #4294967295
 800867a:	b00d      	add	sp, #52	; 0x34
 800867c:	ecbd 8b02 	vpop	{d8}
 8008680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008684:	4642      	mov	r2, r8
 8008686:	464b      	mov	r3, r9
 8008688:	4640      	mov	r0, r8
 800868a:	4649      	mov	r1, r9
 800868c:	f7f8 fa5e 	bl	8000b4c <__aeabi_dcmpun>
 8008690:	b140      	cbz	r0, 80086a4 <_printf_float+0xec>
 8008692:	464b      	mov	r3, r9
 8008694:	2b00      	cmp	r3, #0
 8008696:	bfbc      	itt	lt
 8008698:	232d      	movlt	r3, #45	; 0x2d
 800869a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800869e:	4a7f      	ldr	r2, [pc, #508]	; (800889c <_printf_float+0x2e4>)
 80086a0:	4b7f      	ldr	r3, [pc, #508]	; (80088a0 <_printf_float+0x2e8>)
 80086a2:	e7d1      	b.n	8008648 <_printf_float+0x90>
 80086a4:	6863      	ldr	r3, [r4, #4]
 80086a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80086aa:	9206      	str	r2, [sp, #24]
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	d13f      	bne.n	8008730 <_printf_float+0x178>
 80086b0:	2306      	movs	r3, #6
 80086b2:	6063      	str	r3, [r4, #4]
 80086b4:	9b05      	ldr	r3, [sp, #20]
 80086b6:	6861      	ldr	r1, [r4, #4]
 80086b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80086bc:	2300      	movs	r3, #0
 80086be:	9303      	str	r3, [sp, #12]
 80086c0:	ab0a      	add	r3, sp, #40	; 0x28
 80086c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80086c6:	ab09      	add	r3, sp, #36	; 0x24
 80086c8:	ec49 8b10 	vmov	d0, r8, r9
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	6022      	str	r2, [r4, #0]
 80086d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80086d4:	4628      	mov	r0, r5
 80086d6:	f7ff fecf 	bl	8008478 <__cvt>
 80086da:	9b06      	ldr	r3, [sp, #24]
 80086dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086de:	2b47      	cmp	r3, #71	; 0x47
 80086e0:	4680      	mov	r8, r0
 80086e2:	d108      	bne.n	80086f6 <_printf_float+0x13e>
 80086e4:	1cc8      	adds	r0, r1, #3
 80086e6:	db02      	blt.n	80086ee <_printf_float+0x136>
 80086e8:	6863      	ldr	r3, [r4, #4]
 80086ea:	4299      	cmp	r1, r3
 80086ec:	dd41      	ble.n	8008772 <_printf_float+0x1ba>
 80086ee:	f1ab 0302 	sub.w	r3, fp, #2
 80086f2:	fa5f fb83 	uxtb.w	fp, r3
 80086f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086fa:	d820      	bhi.n	800873e <_printf_float+0x186>
 80086fc:	3901      	subs	r1, #1
 80086fe:	465a      	mov	r2, fp
 8008700:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008704:	9109      	str	r1, [sp, #36]	; 0x24
 8008706:	f7ff ff19 	bl	800853c <__exponent>
 800870a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800870c:	1813      	adds	r3, r2, r0
 800870e:	2a01      	cmp	r2, #1
 8008710:	4681      	mov	r9, r0
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	dc02      	bgt.n	800871c <_printf_float+0x164>
 8008716:	6822      	ldr	r2, [r4, #0]
 8008718:	07d2      	lsls	r2, r2, #31
 800871a:	d501      	bpl.n	8008720 <_printf_float+0x168>
 800871c:	3301      	adds	r3, #1
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008724:	2b00      	cmp	r3, #0
 8008726:	d09c      	beq.n	8008662 <_printf_float+0xaa>
 8008728:	232d      	movs	r3, #45	; 0x2d
 800872a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800872e:	e798      	b.n	8008662 <_printf_float+0xaa>
 8008730:	9a06      	ldr	r2, [sp, #24]
 8008732:	2a47      	cmp	r2, #71	; 0x47
 8008734:	d1be      	bne.n	80086b4 <_printf_float+0xfc>
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1bc      	bne.n	80086b4 <_printf_float+0xfc>
 800873a:	2301      	movs	r3, #1
 800873c:	e7b9      	b.n	80086b2 <_printf_float+0xfa>
 800873e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008742:	d118      	bne.n	8008776 <_printf_float+0x1be>
 8008744:	2900      	cmp	r1, #0
 8008746:	6863      	ldr	r3, [r4, #4]
 8008748:	dd0b      	ble.n	8008762 <_printf_float+0x1aa>
 800874a:	6121      	str	r1, [r4, #16]
 800874c:	b913      	cbnz	r3, 8008754 <_printf_float+0x19c>
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	07d0      	lsls	r0, r2, #31
 8008752:	d502      	bpl.n	800875a <_printf_float+0x1a2>
 8008754:	3301      	adds	r3, #1
 8008756:	440b      	add	r3, r1
 8008758:	6123      	str	r3, [r4, #16]
 800875a:	65a1      	str	r1, [r4, #88]	; 0x58
 800875c:	f04f 0900 	mov.w	r9, #0
 8008760:	e7de      	b.n	8008720 <_printf_float+0x168>
 8008762:	b913      	cbnz	r3, 800876a <_printf_float+0x1b2>
 8008764:	6822      	ldr	r2, [r4, #0]
 8008766:	07d2      	lsls	r2, r2, #31
 8008768:	d501      	bpl.n	800876e <_printf_float+0x1b6>
 800876a:	3302      	adds	r3, #2
 800876c:	e7f4      	b.n	8008758 <_printf_float+0x1a0>
 800876e:	2301      	movs	r3, #1
 8008770:	e7f2      	b.n	8008758 <_printf_float+0x1a0>
 8008772:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008778:	4299      	cmp	r1, r3
 800877a:	db05      	blt.n	8008788 <_printf_float+0x1d0>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	6121      	str	r1, [r4, #16]
 8008780:	07d8      	lsls	r0, r3, #31
 8008782:	d5ea      	bpl.n	800875a <_printf_float+0x1a2>
 8008784:	1c4b      	adds	r3, r1, #1
 8008786:	e7e7      	b.n	8008758 <_printf_float+0x1a0>
 8008788:	2900      	cmp	r1, #0
 800878a:	bfd4      	ite	le
 800878c:	f1c1 0202 	rsble	r2, r1, #2
 8008790:	2201      	movgt	r2, #1
 8008792:	4413      	add	r3, r2
 8008794:	e7e0      	b.n	8008758 <_printf_float+0x1a0>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	055a      	lsls	r2, r3, #21
 800879a:	d407      	bmi.n	80087ac <_printf_float+0x1f4>
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	4642      	mov	r2, r8
 80087a0:	4631      	mov	r1, r6
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b8      	blx	r7
 80087a6:	3001      	adds	r0, #1
 80087a8:	d12c      	bne.n	8008804 <_printf_float+0x24c>
 80087aa:	e764      	b.n	8008676 <_printf_float+0xbe>
 80087ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087b0:	f240 80e0 	bls.w	8008974 <_printf_float+0x3bc>
 80087b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087b8:	2200      	movs	r2, #0
 80087ba:	2300      	movs	r3, #0
 80087bc:	f7f8 f994 	bl	8000ae8 <__aeabi_dcmpeq>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d034      	beq.n	800882e <_printf_float+0x276>
 80087c4:	4a37      	ldr	r2, [pc, #220]	; (80088a4 <_printf_float+0x2ec>)
 80087c6:	2301      	movs	r3, #1
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b8      	blx	r7
 80087ce:	3001      	adds	r0, #1
 80087d0:	f43f af51 	beq.w	8008676 <_printf_float+0xbe>
 80087d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087d8:	429a      	cmp	r2, r3
 80087da:	db02      	blt.n	80087e2 <_printf_float+0x22a>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	07d8      	lsls	r0, r3, #31
 80087e0:	d510      	bpl.n	8008804 <_printf_float+0x24c>
 80087e2:	ee18 3a10 	vmov	r3, s16
 80087e6:	4652      	mov	r2, sl
 80087e8:	4631      	mov	r1, r6
 80087ea:	4628      	mov	r0, r5
 80087ec:	47b8      	blx	r7
 80087ee:	3001      	adds	r0, #1
 80087f0:	f43f af41 	beq.w	8008676 <_printf_float+0xbe>
 80087f4:	f04f 0800 	mov.w	r8, #0
 80087f8:	f104 091a 	add.w	r9, r4, #26
 80087fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087fe:	3b01      	subs	r3, #1
 8008800:	4543      	cmp	r3, r8
 8008802:	dc09      	bgt.n	8008818 <_printf_float+0x260>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	079b      	lsls	r3, r3, #30
 8008808:	f100 8107 	bmi.w	8008a1a <_printf_float+0x462>
 800880c:	68e0      	ldr	r0, [r4, #12]
 800880e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008810:	4298      	cmp	r0, r3
 8008812:	bfb8      	it	lt
 8008814:	4618      	movlt	r0, r3
 8008816:	e730      	b.n	800867a <_printf_float+0xc2>
 8008818:	2301      	movs	r3, #1
 800881a:	464a      	mov	r2, r9
 800881c:	4631      	mov	r1, r6
 800881e:	4628      	mov	r0, r5
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	f43f af27 	beq.w	8008676 <_printf_float+0xbe>
 8008828:	f108 0801 	add.w	r8, r8, #1
 800882c:	e7e6      	b.n	80087fc <_printf_float+0x244>
 800882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc39      	bgt.n	80088a8 <_printf_float+0x2f0>
 8008834:	4a1b      	ldr	r2, [pc, #108]	; (80088a4 <_printf_float+0x2ec>)
 8008836:	2301      	movs	r3, #1
 8008838:	4631      	mov	r1, r6
 800883a:	4628      	mov	r0, r5
 800883c:	47b8      	blx	r7
 800883e:	3001      	adds	r0, #1
 8008840:	f43f af19 	beq.w	8008676 <_printf_float+0xbe>
 8008844:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008848:	4313      	orrs	r3, r2
 800884a:	d102      	bne.n	8008852 <_printf_float+0x29a>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	07d9      	lsls	r1, r3, #31
 8008850:	d5d8      	bpl.n	8008804 <_printf_float+0x24c>
 8008852:	ee18 3a10 	vmov	r3, s16
 8008856:	4652      	mov	r2, sl
 8008858:	4631      	mov	r1, r6
 800885a:	4628      	mov	r0, r5
 800885c:	47b8      	blx	r7
 800885e:	3001      	adds	r0, #1
 8008860:	f43f af09 	beq.w	8008676 <_printf_float+0xbe>
 8008864:	f04f 0900 	mov.w	r9, #0
 8008868:	f104 0a1a 	add.w	sl, r4, #26
 800886c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886e:	425b      	negs	r3, r3
 8008870:	454b      	cmp	r3, r9
 8008872:	dc01      	bgt.n	8008878 <_printf_float+0x2c0>
 8008874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008876:	e792      	b.n	800879e <_printf_float+0x1e6>
 8008878:	2301      	movs	r3, #1
 800887a:	4652      	mov	r2, sl
 800887c:	4631      	mov	r1, r6
 800887e:	4628      	mov	r0, r5
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	f43f aef7 	beq.w	8008676 <_printf_float+0xbe>
 8008888:	f109 0901 	add.w	r9, r9, #1
 800888c:	e7ee      	b.n	800886c <_printf_float+0x2b4>
 800888e:	bf00      	nop
 8008890:	7fefffff 	.word	0x7fefffff
 8008894:	0800bda1 	.word	0x0800bda1
 8008898:	0800bda5 	.word	0x0800bda5
 800889c:	0800bda9 	.word	0x0800bda9
 80088a0:	0800bdad 	.word	0x0800bdad
 80088a4:	0800bdb1 	.word	0x0800bdb1
 80088a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088ac:	429a      	cmp	r2, r3
 80088ae:	bfa8      	it	ge
 80088b0:	461a      	movge	r2, r3
 80088b2:	2a00      	cmp	r2, #0
 80088b4:	4691      	mov	r9, r2
 80088b6:	dc37      	bgt.n	8008928 <_printf_float+0x370>
 80088b8:	f04f 0b00 	mov.w	fp, #0
 80088bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088c0:	f104 021a 	add.w	r2, r4, #26
 80088c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088c6:	9305      	str	r3, [sp, #20]
 80088c8:	eba3 0309 	sub.w	r3, r3, r9
 80088cc:	455b      	cmp	r3, fp
 80088ce:	dc33      	bgt.n	8008938 <_printf_float+0x380>
 80088d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088d4:	429a      	cmp	r2, r3
 80088d6:	db3b      	blt.n	8008950 <_printf_float+0x398>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	07da      	lsls	r2, r3, #31
 80088dc:	d438      	bmi.n	8008950 <_printf_float+0x398>
 80088de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80088e2:	eba2 0903 	sub.w	r9, r2, r3
 80088e6:	9b05      	ldr	r3, [sp, #20]
 80088e8:	1ad2      	subs	r2, r2, r3
 80088ea:	4591      	cmp	r9, r2
 80088ec:	bfa8      	it	ge
 80088ee:	4691      	movge	r9, r2
 80088f0:	f1b9 0f00 	cmp.w	r9, #0
 80088f4:	dc35      	bgt.n	8008962 <_printf_float+0x3aa>
 80088f6:	f04f 0800 	mov.w	r8, #0
 80088fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088fe:	f104 0a1a 	add.w	sl, r4, #26
 8008902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008906:	1a9b      	subs	r3, r3, r2
 8008908:	eba3 0309 	sub.w	r3, r3, r9
 800890c:	4543      	cmp	r3, r8
 800890e:	f77f af79 	ble.w	8008804 <_printf_float+0x24c>
 8008912:	2301      	movs	r3, #1
 8008914:	4652      	mov	r2, sl
 8008916:	4631      	mov	r1, r6
 8008918:	4628      	mov	r0, r5
 800891a:	47b8      	blx	r7
 800891c:	3001      	adds	r0, #1
 800891e:	f43f aeaa 	beq.w	8008676 <_printf_float+0xbe>
 8008922:	f108 0801 	add.w	r8, r8, #1
 8008926:	e7ec      	b.n	8008902 <_printf_float+0x34a>
 8008928:	4613      	mov	r3, r2
 800892a:	4631      	mov	r1, r6
 800892c:	4642      	mov	r2, r8
 800892e:	4628      	mov	r0, r5
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	d1c0      	bne.n	80088b8 <_printf_float+0x300>
 8008936:	e69e      	b.n	8008676 <_printf_float+0xbe>
 8008938:	2301      	movs	r3, #1
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	9205      	str	r2, [sp, #20]
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	f43f ae97 	beq.w	8008676 <_printf_float+0xbe>
 8008948:	9a05      	ldr	r2, [sp, #20]
 800894a:	f10b 0b01 	add.w	fp, fp, #1
 800894e:	e7b9      	b.n	80088c4 <_printf_float+0x30c>
 8008950:	ee18 3a10 	vmov	r3, s16
 8008954:	4652      	mov	r2, sl
 8008956:	4631      	mov	r1, r6
 8008958:	4628      	mov	r0, r5
 800895a:	47b8      	blx	r7
 800895c:	3001      	adds	r0, #1
 800895e:	d1be      	bne.n	80088de <_printf_float+0x326>
 8008960:	e689      	b.n	8008676 <_printf_float+0xbe>
 8008962:	9a05      	ldr	r2, [sp, #20]
 8008964:	464b      	mov	r3, r9
 8008966:	4442      	add	r2, r8
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	d1c1      	bne.n	80088f6 <_printf_float+0x33e>
 8008972:	e680      	b.n	8008676 <_printf_float+0xbe>
 8008974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008976:	2a01      	cmp	r2, #1
 8008978:	dc01      	bgt.n	800897e <_printf_float+0x3c6>
 800897a:	07db      	lsls	r3, r3, #31
 800897c:	d53a      	bpl.n	80089f4 <_printf_float+0x43c>
 800897e:	2301      	movs	r3, #1
 8008980:	4642      	mov	r2, r8
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f ae74 	beq.w	8008676 <_printf_float+0xbe>
 800898e:	ee18 3a10 	vmov	r3, s16
 8008992:	4652      	mov	r2, sl
 8008994:	4631      	mov	r1, r6
 8008996:	4628      	mov	r0, r5
 8008998:	47b8      	blx	r7
 800899a:	3001      	adds	r0, #1
 800899c:	f43f ae6b 	beq.w	8008676 <_printf_float+0xbe>
 80089a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089a4:	2200      	movs	r2, #0
 80089a6:	2300      	movs	r3, #0
 80089a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80089ac:	f7f8 f89c 	bl	8000ae8 <__aeabi_dcmpeq>
 80089b0:	b9d8      	cbnz	r0, 80089ea <_printf_float+0x432>
 80089b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80089b6:	f108 0201 	add.w	r2, r8, #1
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	d10e      	bne.n	80089e2 <_printf_float+0x42a>
 80089c4:	e657      	b.n	8008676 <_printf_float+0xbe>
 80089c6:	2301      	movs	r3, #1
 80089c8:	4652      	mov	r2, sl
 80089ca:	4631      	mov	r1, r6
 80089cc:	4628      	mov	r0, r5
 80089ce:	47b8      	blx	r7
 80089d0:	3001      	adds	r0, #1
 80089d2:	f43f ae50 	beq.w	8008676 <_printf_float+0xbe>
 80089d6:	f108 0801 	add.w	r8, r8, #1
 80089da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089dc:	3b01      	subs	r3, #1
 80089de:	4543      	cmp	r3, r8
 80089e0:	dcf1      	bgt.n	80089c6 <_printf_float+0x40e>
 80089e2:	464b      	mov	r3, r9
 80089e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089e8:	e6da      	b.n	80087a0 <_printf_float+0x1e8>
 80089ea:	f04f 0800 	mov.w	r8, #0
 80089ee:	f104 0a1a 	add.w	sl, r4, #26
 80089f2:	e7f2      	b.n	80089da <_printf_float+0x422>
 80089f4:	2301      	movs	r3, #1
 80089f6:	4642      	mov	r2, r8
 80089f8:	e7df      	b.n	80089ba <_printf_float+0x402>
 80089fa:	2301      	movs	r3, #1
 80089fc:	464a      	mov	r2, r9
 80089fe:	4631      	mov	r1, r6
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	3001      	adds	r0, #1
 8008a06:	f43f ae36 	beq.w	8008676 <_printf_float+0xbe>
 8008a0a:	f108 0801 	add.w	r8, r8, #1
 8008a0e:	68e3      	ldr	r3, [r4, #12]
 8008a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a12:	1a5b      	subs	r3, r3, r1
 8008a14:	4543      	cmp	r3, r8
 8008a16:	dcf0      	bgt.n	80089fa <_printf_float+0x442>
 8008a18:	e6f8      	b.n	800880c <_printf_float+0x254>
 8008a1a:	f04f 0800 	mov.w	r8, #0
 8008a1e:	f104 0919 	add.w	r9, r4, #25
 8008a22:	e7f4      	b.n	8008a0e <_printf_float+0x456>

08008a24 <_printf_common>:
 8008a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a28:	4616      	mov	r6, r2
 8008a2a:	4699      	mov	r9, r3
 8008a2c:	688a      	ldr	r2, [r1, #8]
 8008a2e:	690b      	ldr	r3, [r1, #16]
 8008a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	bfb8      	it	lt
 8008a38:	4613      	movlt	r3, r2
 8008a3a:	6033      	str	r3, [r6, #0]
 8008a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a40:	4607      	mov	r7, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	b10a      	cbz	r2, 8008a4a <_printf_common+0x26>
 8008a46:	3301      	adds	r3, #1
 8008a48:	6033      	str	r3, [r6, #0]
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	0699      	lsls	r1, r3, #26
 8008a4e:	bf42      	ittt	mi
 8008a50:	6833      	ldrmi	r3, [r6, #0]
 8008a52:	3302      	addmi	r3, #2
 8008a54:	6033      	strmi	r3, [r6, #0]
 8008a56:	6825      	ldr	r5, [r4, #0]
 8008a58:	f015 0506 	ands.w	r5, r5, #6
 8008a5c:	d106      	bne.n	8008a6c <_printf_common+0x48>
 8008a5e:	f104 0a19 	add.w	sl, r4, #25
 8008a62:	68e3      	ldr	r3, [r4, #12]
 8008a64:	6832      	ldr	r2, [r6, #0]
 8008a66:	1a9b      	subs	r3, r3, r2
 8008a68:	42ab      	cmp	r3, r5
 8008a6a:	dc26      	bgt.n	8008aba <_printf_common+0x96>
 8008a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a70:	1e13      	subs	r3, r2, #0
 8008a72:	6822      	ldr	r2, [r4, #0]
 8008a74:	bf18      	it	ne
 8008a76:	2301      	movne	r3, #1
 8008a78:	0692      	lsls	r2, r2, #26
 8008a7a:	d42b      	bmi.n	8008ad4 <_printf_common+0xb0>
 8008a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a80:	4649      	mov	r1, r9
 8008a82:	4638      	mov	r0, r7
 8008a84:	47c0      	blx	r8
 8008a86:	3001      	adds	r0, #1
 8008a88:	d01e      	beq.n	8008ac8 <_printf_common+0xa4>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	6922      	ldr	r2, [r4, #16]
 8008a8e:	f003 0306 	and.w	r3, r3, #6
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	bf02      	ittt	eq
 8008a96:	68e5      	ldreq	r5, [r4, #12]
 8008a98:	6833      	ldreq	r3, [r6, #0]
 8008a9a:	1aed      	subeq	r5, r5, r3
 8008a9c:	68a3      	ldr	r3, [r4, #8]
 8008a9e:	bf0c      	ite	eq
 8008aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aa4:	2500      	movne	r5, #0
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	bfc4      	itt	gt
 8008aaa:	1a9b      	subgt	r3, r3, r2
 8008aac:	18ed      	addgt	r5, r5, r3
 8008aae:	2600      	movs	r6, #0
 8008ab0:	341a      	adds	r4, #26
 8008ab2:	42b5      	cmp	r5, r6
 8008ab4:	d11a      	bne.n	8008aec <_printf_common+0xc8>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e008      	b.n	8008acc <_printf_common+0xa8>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4652      	mov	r2, sl
 8008abe:	4649      	mov	r1, r9
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	47c0      	blx	r8
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d103      	bne.n	8008ad0 <_printf_common+0xac>
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	e7c6      	b.n	8008a62 <_printf_common+0x3e>
 8008ad4:	18e1      	adds	r1, r4, r3
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	2030      	movs	r0, #48	; 0x30
 8008ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ade:	4422      	add	r2, r4
 8008ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ae8:	3302      	adds	r3, #2
 8008aea:	e7c7      	b.n	8008a7c <_printf_common+0x58>
 8008aec:	2301      	movs	r3, #1
 8008aee:	4622      	mov	r2, r4
 8008af0:	4649      	mov	r1, r9
 8008af2:	4638      	mov	r0, r7
 8008af4:	47c0      	blx	r8
 8008af6:	3001      	adds	r0, #1
 8008af8:	d0e6      	beq.n	8008ac8 <_printf_common+0xa4>
 8008afa:	3601      	adds	r6, #1
 8008afc:	e7d9      	b.n	8008ab2 <_printf_common+0x8e>
	...

08008b00 <_printf_i>:
 8008b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b04:	7e0f      	ldrb	r7, [r1, #24]
 8008b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b08:	2f78      	cmp	r7, #120	; 0x78
 8008b0a:	4691      	mov	r9, r2
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	460c      	mov	r4, r1
 8008b10:	469a      	mov	sl, r3
 8008b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b16:	d807      	bhi.n	8008b28 <_printf_i+0x28>
 8008b18:	2f62      	cmp	r7, #98	; 0x62
 8008b1a:	d80a      	bhi.n	8008b32 <_printf_i+0x32>
 8008b1c:	2f00      	cmp	r7, #0
 8008b1e:	f000 80d4 	beq.w	8008cca <_printf_i+0x1ca>
 8008b22:	2f58      	cmp	r7, #88	; 0x58
 8008b24:	f000 80c0 	beq.w	8008ca8 <_printf_i+0x1a8>
 8008b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b30:	e03a      	b.n	8008ba8 <_printf_i+0xa8>
 8008b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b36:	2b15      	cmp	r3, #21
 8008b38:	d8f6      	bhi.n	8008b28 <_printf_i+0x28>
 8008b3a:	a101      	add	r1, pc, #4	; (adr r1, 8008b40 <_printf_i+0x40>)
 8008b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b40:	08008b99 	.word	0x08008b99
 8008b44:	08008bad 	.word	0x08008bad
 8008b48:	08008b29 	.word	0x08008b29
 8008b4c:	08008b29 	.word	0x08008b29
 8008b50:	08008b29 	.word	0x08008b29
 8008b54:	08008b29 	.word	0x08008b29
 8008b58:	08008bad 	.word	0x08008bad
 8008b5c:	08008b29 	.word	0x08008b29
 8008b60:	08008b29 	.word	0x08008b29
 8008b64:	08008b29 	.word	0x08008b29
 8008b68:	08008b29 	.word	0x08008b29
 8008b6c:	08008cb1 	.word	0x08008cb1
 8008b70:	08008bd9 	.word	0x08008bd9
 8008b74:	08008c6b 	.word	0x08008c6b
 8008b78:	08008b29 	.word	0x08008b29
 8008b7c:	08008b29 	.word	0x08008b29
 8008b80:	08008cd3 	.word	0x08008cd3
 8008b84:	08008b29 	.word	0x08008b29
 8008b88:	08008bd9 	.word	0x08008bd9
 8008b8c:	08008b29 	.word	0x08008b29
 8008b90:	08008b29 	.word	0x08008b29
 8008b94:	08008c73 	.word	0x08008c73
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	1d1a      	adds	r2, r3, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	602a      	str	r2, [r5, #0]
 8008ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e09f      	b.n	8008cec <_printf_i+0x1ec>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	682b      	ldr	r3, [r5, #0]
 8008bb0:	0607      	lsls	r7, r0, #24
 8008bb2:	f103 0104 	add.w	r1, r3, #4
 8008bb6:	6029      	str	r1, [r5, #0]
 8008bb8:	d501      	bpl.n	8008bbe <_printf_i+0xbe>
 8008bba:	681e      	ldr	r6, [r3, #0]
 8008bbc:	e003      	b.n	8008bc6 <_printf_i+0xc6>
 8008bbe:	0646      	lsls	r6, r0, #25
 8008bc0:	d5fb      	bpl.n	8008bba <_printf_i+0xba>
 8008bc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008bc6:	2e00      	cmp	r6, #0
 8008bc8:	da03      	bge.n	8008bd2 <_printf_i+0xd2>
 8008bca:	232d      	movs	r3, #45	; 0x2d
 8008bcc:	4276      	negs	r6, r6
 8008bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bd2:	485a      	ldr	r0, [pc, #360]	; (8008d3c <_printf_i+0x23c>)
 8008bd4:	230a      	movs	r3, #10
 8008bd6:	e012      	b.n	8008bfe <_printf_i+0xfe>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	6820      	ldr	r0, [r4, #0]
 8008bdc:	1d19      	adds	r1, r3, #4
 8008bde:	6029      	str	r1, [r5, #0]
 8008be0:	0605      	lsls	r5, r0, #24
 8008be2:	d501      	bpl.n	8008be8 <_printf_i+0xe8>
 8008be4:	681e      	ldr	r6, [r3, #0]
 8008be6:	e002      	b.n	8008bee <_printf_i+0xee>
 8008be8:	0641      	lsls	r1, r0, #25
 8008bea:	d5fb      	bpl.n	8008be4 <_printf_i+0xe4>
 8008bec:	881e      	ldrh	r6, [r3, #0]
 8008bee:	4853      	ldr	r0, [pc, #332]	; (8008d3c <_printf_i+0x23c>)
 8008bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8008bf2:	bf0c      	ite	eq
 8008bf4:	2308      	moveq	r3, #8
 8008bf6:	230a      	movne	r3, #10
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bfe:	6865      	ldr	r5, [r4, #4]
 8008c00:	60a5      	str	r5, [r4, #8]
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	bfa2      	ittt	ge
 8008c06:	6821      	ldrge	r1, [r4, #0]
 8008c08:	f021 0104 	bicge.w	r1, r1, #4
 8008c0c:	6021      	strge	r1, [r4, #0]
 8008c0e:	b90e      	cbnz	r6, 8008c14 <_printf_i+0x114>
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	d04b      	beq.n	8008cac <_printf_i+0x1ac>
 8008c14:	4615      	mov	r5, r2
 8008c16:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c1a:	fb03 6711 	mls	r7, r3, r1, r6
 8008c1e:	5dc7      	ldrb	r7, [r0, r7]
 8008c20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c24:	4637      	mov	r7, r6
 8008c26:	42bb      	cmp	r3, r7
 8008c28:	460e      	mov	r6, r1
 8008c2a:	d9f4      	bls.n	8008c16 <_printf_i+0x116>
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	d10b      	bne.n	8008c48 <_printf_i+0x148>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	07de      	lsls	r6, r3, #31
 8008c34:	d508      	bpl.n	8008c48 <_printf_i+0x148>
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	6861      	ldr	r1, [r4, #4]
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	bfde      	ittt	le
 8008c3e:	2330      	movle	r3, #48	; 0x30
 8008c40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c48:	1b52      	subs	r2, r2, r5
 8008c4a:	6122      	str	r2, [r4, #16]
 8008c4c:	f8cd a000 	str.w	sl, [sp]
 8008c50:	464b      	mov	r3, r9
 8008c52:	aa03      	add	r2, sp, #12
 8008c54:	4621      	mov	r1, r4
 8008c56:	4640      	mov	r0, r8
 8008c58:	f7ff fee4 	bl	8008a24 <_printf_common>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d14a      	bne.n	8008cf6 <_printf_i+0x1f6>
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	b004      	add	sp, #16
 8008c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	f043 0320 	orr.w	r3, r3, #32
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	4833      	ldr	r0, [pc, #204]	; (8008d40 <_printf_i+0x240>)
 8008c74:	2778      	movs	r7, #120	; 0x78
 8008c76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	6829      	ldr	r1, [r5, #0]
 8008c7e:	061f      	lsls	r7, r3, #24
 8008c80:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c84:	d402      	bmi.n	8008c8c <_printf_i+0x18c>
 8008c86:	065f      	lsls	r7, r3, #25
 8008c88:	bf48      	it	mi
 8008c8a:	b2b6      	uxthmi	r6, r6
 8008c8c:	07df      	lsls	r7, r3, #31
 8008c8e:	bf48      	it	mi
 8008c90:	f043 0320 	orrmi.w	r3, r3, #32
 8008c94:	6029      	str	r1, [r5, #0]
 8008c96:	bf48      	it	mi
 8008c98:	6023      	strmi	r3, [r4, #0]
 8008c9a:	b91e      	cbnz	r6, 8008ca4 <_printf_i+0x1a4>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	f023 0320 	bic.w	r3, r3, #32
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	e7a7      	b.n	8008bf8 <_printf_i+0xf8>
 8008ca8:	4824      	ldr	r0, [pc, #144]	; (8008d3c <_printf_i+0x23c>)
 8008caa:	e7e4      	b.n	8008c76 <_printf_i+0x176>
 8008cac:	4615      	mov	r5, r2
 8008cae:	e7bd      	b.n	8008c2c <_printf_i+0x12c>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	6826      	ldr	r6, [r4, #0]
 8008cb4:	6961      	ldr	r1, [r4, #20]
 8008cb6:	1d18      	adds	r0, r3, #4
 8008cb8:	6028      	str	r0, [r5, #0]
 8008cba:	0635      	lsls	r5, r6, #24
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	d501      	bpl.n	8008cc4 <_printf_i+0x1c4>
 8008cc0:	6019      	str	r1, [r3, #0]
 8008cc2:	e002      	b.n	8008cca <_printf_i+0x1ca>
 8008cc4:	0670      	lsls	r0, r6, #25
 8008cc6:	d5fb      	bpl.n	8008cc0 <_printf_i+0x1c0>
 8008cc8:	8019      	strh	r1, [r3, #0]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6123      	str	r3, [r4, #16]
 8008cce:	4615      	mov	r5, r2
 8008cd0:	e7bc      	b.n	8008c4c <_printf_i+0x14c>
 8008cd2:	682b      	ldr	r3, [r5, #0]
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	602a      	str	r2, [r5, #0]
 8008cd8:	681d      	ldr	r5, [r3, #0]
 8008cda:	6862      	ldr	r2, [r4, #4]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f7f7 fa86 	bl	80001f0 <memchr>
 8008ce4:	b108      	cbz	r0, 8008cea <_printf_i+0x1ea>
 8008ce6:	1b40      	subs	r0, r0, r5
 8008ce8:	6060      	str	r0, [r4, #4]
 8008cea:	6863      	ldr	r3, [r4, #4]
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf4:	e7aa      	b.n	8008c4c <_printf_i+0x14c>
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	47d0      	blx	sl
 8008d00:	3001      	adds	r0, #1
 8008d02:	d0ad      	beq.n	8008c60 <_printf_i+0x160>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	079b      	lsls	r3, r3, #30
 8008d08:	d413      	bmi.n	8008d32 <_printf_i+0x232>
 8008d0a:	68e0      	ldr	r0, [r4, #12]
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	4298      	cmp	r0, r3
 8008d10:	bfb8      	it	lt
 8008d12:	4618      	movlt	r0, r3
 8008d14:	e7a6      	b.n	8008c64 <_printf_i+0x164>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4632      	mov	r2, r6
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	47d0      	blx	sl
 8008d20:	3001      	adds	r0, #1
 8008d22:	d09d      	beq.n	8008c60 <_printf_i+0x160>
 8008d24:	3501      	adds	r5, #1
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	9903      	ldr	r1, [sp, #12]
 8008d2a:	1a5b      	subs	r3, r3, r1
 8008d2c:	42ab      	cmp	r3, r5
 8008d2e:	dcf2      	bgt.n	8008d16 <_printf_i+0x216>
 8008d30:	e7eb      	b.n	8008d0a <_printf_i+0x20a>
 8008d32:	2500      	movs	r5, #0
 8008d34:	f104 0619 	add.w	r6, r4, #25
 8008d38:	e7f5      	b.n	8008d26 <_printf_i+0x226>
 8008d3a:	bf00      	nop
 8008d3c:	0800bdb3 	.word	0x0800bdb3
 8008d40:	0800bdc4 	.word	0x0800bdc4

08008d44 <std>:
 8008d44:	2300      	movs	r3, #0
 8008d46:	b510      	push	{r4, lr}
 8008d48:	4604      	mov	r4, r0
 8008d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d52:	6083      	str	r3, [r0, #8]
 8008d54:	8181      	strh	r1, [r0, #12]
 8008d56:	6643      	str	r3, [r0, #100]	; 0x64
 8008d58:	81c2      	strh	r2, [r0, #14]
 8008d5a:	6183      	str	r3, [r0, #24]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	2208      	movs	r2, #8
 8008d60:	305c      	adds	r0, #92	; 0x5c
 8008d62:	f000 f902 	bl	8008f6a <memset>
 8008d66:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <std+0x38>)
 8008d68:	6263      	str	r3, [r4, #36]	; 0x24
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <std+0x3c>)
 8008d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <std+0x40>)
 8008d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d72:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <std+0x44>)
 8008d74:	6224      	str	r4, [r4, #32]
 8008d76:	6323      	str	r3, [r4, #48]	; 0x30
 8008d78:	bd10      	pop	{r4, pc}
 8008d7a:	bf00      	nop
 8008d7c:	08008ee5 	.word	0x08008ee5
 8008d80:	08008f07 	.word	0x08008f07
 8008d84:	08008f3f 	.word	0x08008f3f
 8008d88:	08008f63 	.word	0x08008f63

08008d8c <stdio_exit_handler>:
 8008d8c:	4a02      	ldr	r2, [pc, #8]	; (8008d98 <stdio_exit_handler+0xc>)
 8008d8e:	4903      	ldr	r1, [pc, #12]	; (8008d9c <stdio_exit_handler+0x10>)
 8008d90:	4803      	ldr	r0, [pc, #12]	; (8008da0 <stdio_exit_handler+0x14>)
 8008d92:	f000 b869 	b.w	8008e68 <_fwalk_sglue>
 8008d96:	bf00      	nop
 8008d98:	2000001c 	.word	0x2000001c
 8008d9c:	0800b461 	.word	0x0800b461
 8008da0:	20000194 	.word	0x20000194

08008da4 <cleanup_stdio>:
 8008da4:	6841      	ldr	r1, [r0, #4]
 8008da6:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <cleanup_stdio+0x34>)
 8008da8:	4299      	cmp	r1, r3
 8008daa:	b510      	push	{r4, lr}
 8008dac:	4604      	mov	r4, r0
 8008dae:	d001      	beq.n	8008db4 <cleanup_stdio+0x10>
 8008db0:	f002 fb56 	bl	800b460 <_fflush_r>
 8008db4:	68a1      	ldr	r1, [r4, #8]
 8008db6:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <cleanup_stdio+0x38>)
 8008db8:	4299      	cmp	r1, r3
 8008dba:	d002      	beq.n	8008dc2 <cleanup_stdio+0x1e>
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f002 fb4f 	bl	800b460 <_fflush_r>
 8008dc2:	68e1      	ldr	r1, [r4, #12]
 8008dc4:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <cleanup_stdio+0x3c>)
 8008dc6:	4299      	cmp	r1, r3
 8008dc8:	d004      	beq.n	8008dd4 <cleanup_stdio+0x30>
 8008dca:	4620      	mov	r0, r4
 8008dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd0:	f002 bb46 	b.w	800b460 <_fflush_r>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	bf00      	nop
 8008dd8:	200043c8 	.word	0x200043c8
 8008ddc:	20004430 	.word	0x20004430
 8008de0:	20004498 	.word	0x20004498

08008de4 <global_stdio_init.part.0>:
 8008de4:	b510      	push	{r4, lr}
 8008de6:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <global_stdio_init.part.0+0x30>)
 8008de8:	4c0b      	ldr	r4, [pc, #44]	; (8008e18 <global_stdio_init.part.0+0x34>)
 8008dea:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <global_stdio_init.part.0+0x38>)
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	4620      	mov	r0, r4
 8008df0:	2200      	movs	r2, #0
 8008df2:	2104      	movs	r1, #4
 8008df4:	f7ff ffa6 	bl	8008d44 <std>
 8008df8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	2109      	movs	r1, #9
 8008e00:	f7ff ffa0 	bl	8008d44 <std>
 8008e04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008e08:	2202      	movs	r2, #2
 8008e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e0e:	2112      	movs	r1, #18
 8008e10:	f7ff bf98 	b.w	8008d44 <std>
 8008e14:	20004500 	.word	0x20004500
 8008e18:	200043c8 	.word	0x200043c8
 8008e1c:	08008d8d 	.word	0x08008d8d

08008e20 <__sfp_lock_acquire>:
 8008e20:	4801      	ldr	r0, [pc, #4]	; (8008e28 <__sfp_lock_acquire+0x8>)
 8008e22:	f000 b987 	b.w	8009134 <__retarget_lock_acquire_recursive>
 8008e26:	bf00      	nop
 8008e28:	20004509 	.word	0x20004509

08008e2c <__sfp_lock_release>:
 8008e2c:	4801      	ldr	r0, [pc, #4]	; (8008e34 <__sfp_lock_release+0x8>)
 8008e2e:	f000 b982 	b.w	8009136 <__retarget_lock_release_recursive>
 8008e32:	bf00      	nop
 8008e34:	20004509 	.word	0x20004509

08008e38 <__sinit>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	f7ff fff0 	bl	8008e20 <__sfp_lock_acquire>
 8008e40:	6a23      	ldr	r3, [r4, #32]
 8008e42:	b11b      	cbz	r3, 8008e4c <__sinit+0x14>
 8008e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e48:	f7ff bff0 	b.w	8008e2c <__sfp_lock_release>
 8008e4c:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <__sinit+0x28>)
 8008e4e:	6223      	str	r3, [r4, #32]
 8008e50:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <__sinit+0x2c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1f5      	bne.n	8008e44 <__sinit+0xc>
 8008e58:	f7ff ffc4 	bl	8008de4 <global_stdio_init.part.0>
 8008e5c:	e7f2      	b.n	8008e44 <__sinit+0xc>
 8008e5e:	bf00      	nop
 8008e60:	08008da5 	.word	0x08008da5
 8008e64:	20004500 	.word	0x20004500

08008e68 <_fwalk_sglue>:
 8008e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	4688      	mov	r8, r1
 8008e70:	4614      	mov	r4, r2
 8008e72:	2600      	movs	r6, #0
 8008e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e78:	f1b9 0901 	subs.w	r9, r9, #1
 8008e7c:	d505      	bpl.n	8008e8a <_fwalk_sglue+0x22>
 8008e7e:	6824      	ldr	r4, [r4, #0]
 8008e80:	2c00      	cmp	r4, #0
 8008e82:	d1f7      	bne.n	8008e74 <_fwalk_sglue+0xc>
 8008e84:	4630      	mov	r0, r6
 8008e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8a:	89ab      	ldrh	r3, [r5, #12]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d907      	bls.n	8008ea0 <_fwalk_sglue+0x38>
 8008e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e94:	3301      	adds	r3, #1
 8008e96:	d003      	beq.n	8008ea0 <_fwalk_sglue+0x38>
 8008e98:	4629      	mov	r1, r5
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	47c0      	blx	r8
 8008e9e:	4306      	orrs	r6, r0
 8008ea0:	3568      	adds	r5, #104	; 0x68
 8008ea2:	e7e9      	b.n	8008e78 <_fwalk_sglue+0x10>

08008ea4 <siprintf>:
 8008ea4:	b40e      	push	{r1, r2, r3}
 8008ea6:	b500      	push	{lr}
 8008ea8:	b09c      	sub	sp, #112	; 0x70
 8008eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8008eac:	9002      	str	r0, [sp, #8]
 8008eae:	9006      	str	r0, [sp, #24]
 8008eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008eb4:	4809      	ldr	r0, [pc, #36]	; (8008edc <siprintf+0x38>)
 8008eb6:	9107      	str	r1, [sp, #28]
 8008eb8:	9104      	str	r1, [sp, #16]
 8008eba:	4909      	ldr	r1, [pc, #36]	; (8008ee0 <siprintf+0x3c>)
 8008ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec0:	9105      	str	r1, [sp, #20]
 8008ec2:	6800      	ldr	r0, [r0, #0]
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	a902      	add	r1, sp, #8
 8008ec8:	f002 f946 	bl	800b158 <_svfiprintf_r>
 8008ecc:	9b02      	ldr	r3, [sp, #8]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	b01c      	add	sp, #112	; 0x70
 8008ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ed8:	b003      	add	sp, #12
 8008eda:	4770      	bx	lr
 8008edc:	200001e0 	.word	0x200001e0
 8008ee0:	ffff0208 	.word	0xffff0208

08008ee4 <__sread>:
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eec:	f000 f8d4 	bl	8009098 <_read_r>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	bfab      	itete	ge
 8008ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ef8:	181b      	addge	r3, r3, r0
 8008efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008efe:	bfac      	ite	ge
 8008f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f02:	81a3      	strhlt	r3, [r4, #12]
 8008f04:	bd10      	pop	{r4, pc}

08008f06 <__swrite>:
 8008f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	461f      	mov	r7, r3
 8008f0c:	898b      	ldrh	r3, [r1, #12]
 8008f0e:	05db      	lsls	r3, r3, #23
 8008f10:	4605      	mov	r5, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	4616      	mov	r6, r2
 8008f16:	d505      	bpl.n	8008f24 <__swrite+0x1e>
 8008f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f000 f8a8 	bl	8009074 <_lseek_r>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	4632      	mov	r2, r6
 8008f32:	463b      	mov	r3, r7
 8008f34:	4628      	mov	r0, r5
 8008f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3a:	f000 b8bf 	b.w	80090bc <_write_r>

08008f3e <__sseek>:
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	460c      	mov	r4, r1
 8008f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f46:	f000 f895 	bl	8009074 <_lseek_r>
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	bf15      	itete	ne
 8008f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f5a:	81a3      	strheq	r3, [r4, #12]
 8008f5c:	bf18      	it	ne
 8008f5e:	81a3      	strhne	r3, [r4, #12]
 8008f60:	bd10      	pop	{r4, pc}

08008f62 <__sclose>:
 8008f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f66:	f000 b81f 	b.w	8008fa8 <_close_r>

08008f6a <memset>:
 8008f6a:	4402      	add	r2, r0
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d100      	bne.n	8008f74 <memset+0xa>
 8008f72:	4770      	bx	lr
 8008f74:	f803 1b01 	strb.w	r1, [r3], #1
 8008f78:	e7f9      	b.n	8008f6e <memset+0x4>

08008f7a <strncmp>:
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	b16a      	cbz	r2, 8008f9a <strncmp+0x20>
 8008f7e:	3901      	subs	r1, #1
 8008f80:	1884      	adds	r4, r0, r2
 8008f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f86:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d103      	bne.n	8008f96 <strncmp+0x1c>
 8008f8e:	42a0      	cmp	r0, r4
 8008f90:	d001      	beq.n	8008f96 <strncmp+0x1c>
 8008f92:	2a00      	cmp	r2, #0
 8008f94:	d1f5      	bne.n	8008f82 <strncmp+0x8>
 8008f96:	1ad0      	subs	r0, r2, r3
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	e7fc      	b.n	8008f98 <strncmp+0x1e>
	...

08008fa0 <_localeconv_r>:
 8008fa0:	4800      	ldr	r0, [pc, #0]	; (8008fa4 <_localeconv_r+0x4>)
 8008fa2:	4770      	bx	lr
 8008fa4:	20000118 	.word	0x20000118

08008fa8 <_close_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4d06      	ldr	r5, [pc, #24]	; (8008fc4 <_close_r+0x1c>)
 8008fac:	2300      	movs	r3, #0
 8008fae:	4604      	mov	r4, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	602b      	str	r3, [r5, #0]
 8008fb4:	f7f9 f8c3 	bl	800213e <_close>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_close_r+0x1a>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_close_r+0x1a>
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	20004504 	.word	0x20004504

08008fc8 <_reclaim_reent>:
 8008fc8:	4b29      	ldr	r3, [pc, #164]	; (8009070 <_reclaim_reent+0xa8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4283      	cmp	r3, r0
 8008fce:	b570      	push	{r4, r5, r6, lr}
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	d04b      	beq.n	800906c <_reclaim_reent+0xa4>
 8008fd4:	69c3      	ldr	r3, [r0, #28]
 8008fd6:	b143      	cbz	r3, 8008fea <_reclaim_reent+0x22>
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d144      	bne.n	8009068 <_reclaim_reent+0xa0>
 8008fde:	69e3      	ldr	r3, [r4, #28]
 8008fe0:	6819      	ldr	r1, [r3, #0]
 8008fe2:	b111      	cbz	r1, 8008fea <_reclaim_reent+0x22>
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 ff39 	bl	8009e5c <_free_r>
 8008fea:	6961      	ldr	r1, [r4, #20]
 8008fec:	b111      	cbz	r1, 8008ff4 <_reclaim_reent+0x2c>
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f000 ff34 	bl	8009e5c <_free_r>
 8008ff4:	69e1      	ldr	r1, [r4, #28]
 8008ff6:	b111      	cbz	r1, 8008ffe <_reclaim_reent+0x36>
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 ff2f 	bl	8009e5c <_free_r>
 8008ffe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009000:	b111      	cbz	r1, 8009008 <_reclaim_reent+0x40>
 8009002:	4620      	mov	r0, r4
 8009004:	f000 ff2a 	bl	8009e5c <_free_r>
 8009008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800900a:	b111      	cbz	r1, 8009012 <_reclaim_reent+0x4a>
 800900c:	4620      	mov	r0, r4
 800900e:	f000 ff25 	bl	8009e5c <_free_r>
 8009012:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009014:	b111      	cbz	r1, 800901c <_reclaim_reent+0x54>
 8009016:	4620      	mov	r0, r4
 8009018:	f000 ff20 	bl	8009e5c <_free_r>
 800901c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800901e:	b111      	cbz	r1, 8009026 <_reclaim_reent+0x5e>
 8009020:	4620      	mov	r0, r4
 8009022:	f000 ff1b 	bl	8009e5c <_free_r>
 8009026:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009028:	b111      	cbz	r1, 8009030 <_reclaim_reent+0x68>
 800902a:	4620      	mov	r0, r4
 800902c:	f000 ff16 	bl	8009e5c <_free_r>
 8009030:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009032:	b111      	cbz	r1, 800903a <_reclaim_reent+0x72>
 8009034:	4620      	mov	r0, r4
 8009036:	f000 ff11 	bl	8009e5c <_free_r>
 800903a:	6a23      	ldr	r3, [r4, #32]
 800903c:	b1b3      	cbz	r3, 800906c <_reclaim_reent+0xa4>
 800903e:	4620      	mov	r0, r4
 8009040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009044:	4718      	bx	r3
 8009046:	5949      	ldr	r1, [r1, r5]
 8009048:	b941      	cbnz	r1, 800905c <_reclaim_reent+0x94>
 800904a:	3504      	adds	r5, #4
 800904c:	69e3      	ldr	r3, [r4, #28]
 800904e:	2d80      	cmp	r5, #128	; 0x80
 8009050:	68d9      	ldr	r1, [r3, #12]
 8009052:	d1f8      	bne.n	8009046 <_reclaim_reent+0x7e>
 8009054:	4620      	mov	r0, r4
 8009056:	f000 ff01 	bl	8009e5c <_free_r>
 800905a:	e7c0      	b.n	8008fde <_reclaim_reent+0x16>
 800905c:	680e      	ldr	r6, [r1, #0]
 800905e:	4620      	mov	r0, r4
 8009060:	f000 fefc 	bl	8009e5c <_free_r>
 8009064:	4631      	mov	r1, r6
 8009066:	e7ef      	b.n	8009048 <_reclaim_reent+0x80>
 8009068:	2500      	movs	r5, #0
 800906a:	e7ef      	b.n	800904c <_reclaim_reent+0x84>
 800906c:	bd70      	pop	{r4, r5, r6, pc}
 800906e:	bf00      	nop
 8009070:	200001e0 	.word	0x200001e0

08009074 <_lseek_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d07      	ldr	r5, [pc, #28]	; (8009094 <_lseek_r+0x20>)
 8009078:	4604      	mov	r4, r0
 800907a:	4608      	mov	r0, r1
 800907c:	4611      	mov	r1, r2
 800907e:	2200      	movs	r2, #0
 8009080:	602a      	str	r2, [r5, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	f7f9 f882 	bl	800218c <_lseek>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_lseek_r+0x1e>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	b103      	cbz	r3, 8009092 <_lseek_r+0x1e>
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	20004504 	.word	0x20004504

08009098 <_read_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d07      	ldr	r5, [pc, #28]	; (80090b8 <_read_r+0x20>)
 800909c:	4604      	mov	r4, r0
 800909e:	4608      	mov	r0, r1
 80090a0:	4611      	mov	r1, r2
 80090a2:	2200      	movs	r2, #0
 80090a4:	602a      	str	r2, [r5, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f7f9 f810 	bl	80020cc <_read>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_read_r+0x1e>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_read_r+0x1e>
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	20004504 	.word	0x20004504

080090bc <_write_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d07      	ldr	r5, [pc, #28]	; (80090dc <_write_r+0x20>)
 80090c0:	4604      	mov	r4, r0
 80090c2:	4608      	mov	r0, r1
 80090c4:	4611      	mov	r1, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	602a      	str	r2, [r5, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	f7f9 f81b 	bl	8002106 <_write>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_write_r+0x1e>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_write_r+0x1e>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20004504 	.word	0x20004504

080090e0 <__errno>:
 80090e0:	4b01      	ldr	r3, [pc, #4]	; (80090e8 <__errno+0x8>)
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	200001e0 	.word	0x200001e0

080090ec <__libc_init_array>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	4d0d      	ldr	r5, [pc, #52]	; (8009124 <__libc_init_array+0x38>)
 80090f0:	4c0d      	ldr	r4, [pc, #52]	; (8009128 <__libc_init_array+0x3c>)
 80090f2:	1b64      	subs	r4, r4, r5
 80090f4:	10a4      	asrs	r4, r4, #2
 80090f6:	2600      	movs	r6, #0
 80090f8:	42a6      	cmp	r6, r4
 80090fa:	d109      	bne.n	8009110 <__libc_init_array+0x24>
 80090fc:	4d0b      	ldr	r5, [pc, #44]	; (800912c <__libc_init_array+0x40>)
 80090fe:	4c0c      	ldr	r4, [pc, #48]	; (8009130 <__libc_init_array+0x44>)
 8009100:	f002 fd26 	bl	800bb50 <_init>
 8009104:	1b64      	subs	r4, r4, r5
 8009106:	10a4      	asrs	r4, r4, #2
 8009108:	2600      	movs	r6, #0
 800910a:	42a6      	cmp	r6, r4
 800910c:	d105      	bne.n	800911a <__libc_init_array+0x2e>
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	f855 3b04 	ldr.w	r3, [r5], #4
 8009114:	4798      	blx	r3
 8009116:	3601      	adds	r6, #1
 8009118:	e7ee      	b.n	80090f8 <__libc_init_array+0xc>
 800911a:	f855 3b04 	ldr.w	r3, [r5], #4
 800911e:	4798      	blx	r3
 8009120:	3601      	adds	r6, #1
 8009122:	e7f2      	b.n	800910a <__libc_init_array+0x1e>
 8009124:	0800c07c 	.word	0x0800c07c
 8009128:	0800c07c 	.word	0x0800c07c
 800912c:	0800c07c 	.word	0x0800c07c
 8009130:	0800c080 	.word	0x0800c080

08009134 <__retarget_lock_acquire_recursive>:
 8009134:	4770      	bx	lr

08009136 <__retarget_lock_release_recursive>:
 8009136:	4770      	bx	lr

08009138 <memcpy>:
 8009138:	440a      	add	r2, r1
 800913a:	4291      	cmp	r1, r2
 800913c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009140:	d100      	bne.n	8009144 <memcpy+0xc>
 8009142:	4770      	bx	lr
 8009144:	b510      	push	{r4, lr}
 8009146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800914a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800914e:	4291      	cmp	r1, r2
 8009150:	d1f9      	bne.n	8009146 <memcpy+0xe>
 8009152:	bd10      	pop	{r4, pc}
 8009154:	0000      	movs	r0, r0
	...

08009158 <nan>:
 8009158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009160 <nan+0x8>
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	00000000 	.word	0x00000000
 8009164:	7ff80000 	.word	0x7ff80000

08009168 <quorem>:
 8009168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	6903      	ldr	r3, [r0, #16]
 800916e:	690c      	ldr	r4, [r1, #16]
 8009170:	42a3      	cmp	r3, r4
 8009172:	4607      	mov	r7, r0
 8009174:	db7e      	blt.n	8009274 <quorem+0x10c>
 8009176:	3c01      	subs	r4, #1
 8009178:	f101 0814 	add.w	r8, r1, #20
 800917c:	f100 0514 	add.w	r5, r0, #20
 8009180:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800918a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800918e:	3301      	adds	r3, #1
 8009190:	429a      	cmp	r2, r3
 8009192:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009196:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800919a:	fbb2 f6f3 	udiv	r6, r2, r3
 800919e:	d331      	bcc.n	8009204 <quorem+0x9c>
 80091a0:	f04f 0e00 	mov.w	lr, #0
 80091a4:	4640      	mov	r0, r8
 80091a6:	46ac      	mov	ip, r5
 80091a8:	46f2      	mov	sl, lr
 80091aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80091ae:	b293      	uxth	r3, r2
 80091b0:	fb06 e303 	mla	r3, r6, r3, lr
 80091b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091b8:	0c1a      	lsrs	r2, r3, #16
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	ebaa 0303 	sub.w	r3, sl, r3
 80091c0:	f8dc a000 	ldr.w	sl, [ip]
 80091c4:	fa13 f38a 	uxtah	r3, r3, sl
 80091c8:	fb06 220e 	mla	r2, r6, lr, r2
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	9b00      	ldr	r3, [sp, #0]
 80091d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091d4:	b292      	uxth	r2, r2
 80091d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80091da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091de:	f8bd 3000 	ldrh.w	r3, [sp]
 80091e2:	4581      	cmp	r9, r0
 80091e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091e8:	f84c 3b04 	str.w	r3, [ip], #4
 80091ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80091f0:	d2db      	bcs.n	80091aa <quorem+0x42>
 80091f2:	f855 300b 	ldr.w	r3, [r5, fp]
 80091f6:	b92b      	cbnz	r3, 8009204 <quorem+0x9c>
 80091f8:	9b01      	ldr	r3, [sp, #4]
 80091fa:	3b04      	subs	r3, #4
 80091fc:	429d      	cmp	r5, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	d32c      	bcc.n	800925c <quorem+0xf4>
 8009202:	613c      	str	r4, [r7, #16]
 8009204:	4638      	mov	r0, r7
 8009206:	f001 fd59 	bl	800acbc <__mcmp>
 800920a:	2800      	cmp	r0, #0
 800920c:	db22      	blt.n	8009254 <quorem+0xec>
 800920e:	3601      	adds	r6, #1
 8009210:	4629      	mov	r1, r5
 8009212:	2000      	movs	r0, #0
 8009214:	f858 2b04 	ldr.w	r2, [r8], #4
 8009218:	f8d1 c000 	ldr.w	ip, [r1]
 800921c:	b293      	uxth	r3, r2
 800921e:	1ac3      	subs	r3, r0, r3
 8009220:	0c12      	lsrs	r2, r2, #16
 8009222:	fa13 f38c 	uxtah	r3, r3, ip
 8009226:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800922a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800922e:	b29b      	uxth	r3, r3
 8009230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009234:	45c1      	cmp	r9, r8
 8009236:	f841 3b04 	str.w	r3, [r1], #4
 800923a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800923e:	d2e9      	bcs.n	8009214 <quorem+0xac>
 8009240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009244:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009248:	b922      	cbnz	r2, 8009254 <quorem+0xec>
 800924a:	3b04      	subs	r3, #4
 800924c:	429d      	cmp	r5, r3
 800924e:	461a      	mov	r2, r3
 8009250:	d30a      	bcc.n	8009268 <quorem+0x100>
 8009252:	613c      	str	r4, [r7, #16]
 8009254:	4630      	mov	r0, r6
 8009256:	b003      	add	sp, #12
 8009258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925c:	6812      	ldr	r2, [r2, #0]
 800925e:	3b04      	subs	r3, #4
 8009260:	2a00      	cmp	r2, #0
 8009262:	d1ce      	bne.n	8009202 <quorem+0x9a>
 8009264:	3c01      	subs	r4, #1
 8009266:	e7c9      	b.n	80091fc <quorem+0x94>
 8009268:	6812      	ldr	r2, [r2, #0]
 800926a:	3b04      	subs	r3, #4
 800926c:	2a00      	cmp	r2, #0
 800926e:	d1f0      	bne.n	8009252 <quorem+0xea>
 8009270:	3c01      	subs	r4, #1
 8009272:	e7eb      	b.n	800924c <quorem+0xe4>
 8009274:	2000      	movs	r0, #0
 8009276:	e7ee      	b.n	8009256 <quorem+0xee>

08009278 <_dtoa_r>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	ed2d 8b04 	vpush	{d8-d9}
 8009280:	69c5      	ldr	r5, [r0, #28]
 8009282:	b093      	sub	sp, #76	; 0x4c
 8009284:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009288:	ec57 6b10 	vmov	r6, r7, d0
 800928c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009290:	9107      	str	r1, [sp, #28]
 8009292:	4604      	mov	r4, r0
 8009294:	920a      	str	r2, [sp, #40]	; 0x28
 8009296:	930d      	str	r3, [sp, #52]	; 0x34
 8009298:	b975      	cbnz	r5, 80092b8 <_dtoa_r+0x40>
 800929a:	2010      	movs	r0, #16
 800929c:	f001 f982 	bl	800a5a4 <malloc>
 80092a0:	4602      	mov	r2, r0
 80092a2:	61e0      	str	r0, [r4, #28]
 80092a4:	b920      	cbnz	r0, 80092b0 <_dtoa_r+0x38>
 80092a6:	4bae      	ldr	r3, [pc, #696]	; (8009560 <_dtoa_r+0x2e8>)
 80092a8:	21ef      	movs	r1, #239	; 0xef
 80092aa:	48ae      	ldr	r0, [pc, #696]	; (8009564 <_dtoa_r+0x2ec>)
 80092ac:	f002 f92a 	bl	800b504 <__assert_func>
 80092b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092b4:	6005      	str	r5, [r0, #0]
 80092b6:	60c5      	str	r5, [r0, #12]
 80092b8:	69e3      	ldr	r3, [r4, #28]
 80092ba:	6819      	ldr	r1, [r3, #0]
 80092bc:	b151      	cbz	r1, 80092d4 <_dtoa_r+0x5c>
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	604a      	str	r2, [r1, #4]
 80092c2:	2301      	movs	r3, #1
 80092c4:	4093      	lsls	r3, r2
 80092c6:	608b      	str	r3, [r1, #8]
 80092c8:	4620      	mov	r0, r4
 80092ca:	f001 fa71 	bl	800a7b0 <_Bfree>
 80092ce:	69e3      	ldr	r3, [r4, #28]
 80092d0:	2200      	movs	r2, #0
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	1e3b      	subs	r3, r7, #0
 80092d6:	bfbb      	ittet	lt
 80092d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092dc:	9303      	strlt	r3, [sp, #12]
 80092de:	2300      	movge	r3, #0
 80092e0:	2201      	movlt	r2, #1
 80092e2:	bfac      	ite	ge
 80092e4:	f8c8 3000 	strge.w	r3, [r8]
 80092e8:	f8c8 2000 	strlt.w	r2, [r8]
 80092ec:	4b9e      	ldr	r3, [pc, #632]	; (8009568 <_dtoa_r+0x2f0>)
 80092ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80092f2:	ea33 0308 	bics.w	r3, r3, r8
 80092f6:	d11b      	bne.n	8009330 <_dtoa_r+0xb8>
 80092f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009304:	4333      	orrs	r3, r6
 8009306:	f000 8593 	beq.w	8009e30 <_dtoa_r+0xbb8>
 800930a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800930c:	b963      	cbnz	r3, 8009328 <_dtoa_r+0xb0>
 800930e:	4b97      	ldr	r3, [pc, #604]	; (800956c <_dtoa_r+0x2f4>)
 8009310:	e027      	b.n	8009362 <_dtoa_r+0xea>
 8009312:	4b97      	ldr	r3, [pc, #604]	; (8009570 <_dtoa_r+0x2f8>)
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	3308      	adds	r3, #8
 8009318:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	9800      	ldr	r0, [sp, #0]
 800931e:	b013      	add	sp, #76	; 0x4c
 8009320:	ecbd 8b04 	vpop	{d8-d9}
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	4b90      	ldr	r3, [pc, #576]	; (800956c <_dtoa_r+0x2f4>)
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	3303      	adds	r3, #3
 800932e:	e7f3      	b.n	8009318 <_dtoa_r+0xa0>
 8009330:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009334:	2200      	movs	r2, #0
 8009336:	ec51 0b17 	vmov	r0, r1, d7
 800933a:	eeb0 8a47 	vmov.f32	s16, s14
 800933e:	eef0 8a67 	vmov.f32	s17, s15
 8009342:	2300      	movs	r3, #0
 8009344:	f7f7 fbd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009348:	4681      	mov	r9, r0
 800934a:	b160      	cbz	r0, 8009366 <_dtoa_r+0xee>
 800934c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800934e:	2301      	movs	r3, #1
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 8568 	beq.w	8009e2a <_dtoa_r+0xbb2>
 800935a:	4b86      	ldr	r3, [pc, #536]	; (8009574 <_dtoa_r+0x2fc>)
 800935c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	3b01      	subs	r3, #1
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	e7da      	b.n	800931c <_dtoa_r+0xa4>
 8009366:	aa10      	add	r2, sp, #64	; 0x40
 8009368:	a911      	add	r1, sp, #68	; 0x44
 800936a:	4620      	mov	r0, r4
 800936c:	eeb0 0a48 	vmov.f32	s0, s16
 8009370:	eef0 0a68 	vmov.f32	s1, s17
 8009374:	f001 fdb8 	bl	800aee8 <__d2b>
 8009378:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800937c:	4682      	mov	sl, r0
 800937e:	2d00      	cmp	r5, #0
 8009380:	d07f      	beq.n	8009482 <_dtoa_r+0x20a>
 8009382:	ee18 3a90 	vmov	r3, s17
 8009386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800938a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800938e:	ec51 0b18 	vmov	r0, r1, d8
 8009392:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009396:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800939a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800939e:	4619      	mov	r1, r3
 80093a0:	2200      	movs	r2, #0
 80093a2:	4b75      	ldr	r3, [pc, #468]	; (8009578 <_dtoa_r+0x300>)
 80093a4:	f7f6 ff80 	bl	80002a8 <__aeabi_dsub>
 80093a8:	a367      	add	r3, pc, #412	; (adr r3, 8009548 <_dtoa_r+0x2d0>)
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	f7f7 f933 	bl	8000618 <__aeabi_dmul>
 80093b2:	a367      	add	r3, pc, #412	; (adr r3, 8009550 <_dtoa_r+0x2d8>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	f7f6 ff78 	bl	80002ac <__adddf3>
 80093bc:	4606      	mov	r6, r0
 80093be:	4628      	mov	r0, r5
 80093c0:	460f      	mov	r7, r1
 80093c2:	f7f7 f8bf 	bl	8000544 <__aeabi_i2d>
 80093c6:	a364      	add	r3, pc, #400	; (adr r3, 8009558 <_dtoa_r+0x2e0>)
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	f7f7 f924 	bl	8000618 <__aeabi_dmul>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4630      	mov	r0, r6
 80093d6:	4639      	mov	r1, r7
 80093d8:	f7f6 ff68 	bl	80002ac <__adddf3>
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	f7f7 fbca 	bl	8000b78 <__aeabi_d2iz>
 80093e4:	2200      	movs	r2, #0
 80093e6:	4683      	mov	fp, r0
 80093e8:	2300      	movs	r3, #0
 80093ea:	4630      	mov	r0, r6
 80093ec:	4639      	mov	r1, r7
 80093ee:	f7f7 fb85 	bl	8000afc <__aeabi_dcmplt>
 80093f2:	b148      	cbz	r0, 8009408 <_dtoa_r+0x190>
 80093f4:	4658      	mov	r0, fp
 80093f6:	f7f7 f8a5 	bl	8000544 <__aeabi_i2d>
 80093fa:	4632      	mov	r2, r6
 80093fc:	463b      	mov	r3, r7
 80093fe:	f7f7 fb73 	bl	8000ae8 <__aeabi_dcmpeq>
 8009402:	b908      	cbnz	r0, 8009408 <_dtoa_r+0x190>
 8009404:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009408:	f1bb 0f16 	cmp.w	fp, #22
 800940c:	d857      	bhi.n	80094be <_dtoa_r+0x246>
 800940e:	4b5b      	ldr	r3, [pc, #364]	; (800957c <_dtoa_r+0x304>)
 8009410:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	ec51 0b18 	vmov	r0, r1, d8
 800941c:	f7f7 fb6e 	bl	8000afc <__aeabi_dcmplt>
 8009420:	2800      	cmp	r0, #0
 8009422:	d04e      	beq.n	80094c2 <_dtoa_r+0x24a>
 8009424:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009428:	2300      	movs	r3, #0
 800942a:	930c      	str	r3, [sp, #48]	; 0x30
 800942c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800942e:	1b5b      	subs	r3, r3, r5
 8009430:	1e5a      	subs	r2, r3, #1
 8009432:	bf45      	ittet	mi
 8009434:	f1c3 0301 	rsbmi	r3, r3, #1
 8009438:	9305      	strmi	r3, [sp, #20]
 800943a:	2300      	movpl	r3, #0
 800943c:	2300      	movmi	r3, #0
 800943e:	9206      	str	r2, [sp, #24]
 8009440:	bf54      	ite	pl
 8009442:	9305      	strpl	r3, [sp, #20]
 8009444:	9306      	strmi	r3, [sp, #24]
 8009446:	f1bb 0f00 	cmp.w	fp, #0
 800944a:	db3c      	blt.n	80094c6 <_dtoa_r+0x24e>
 800944c:	9b06      	ldr	r3, [sp, #24]
 800944e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009452:	445b      	add	r3, fp
 8009454:	9306      	str	r3, [sp, #24]
 8009456:	2300      	movs	r3, #0
 8009458:	9308      	str	r3, [sp, #32]
 800945a:	9b07      	ldr	r3, [sp, #28]
 800945c:	2b09      	cmp	r3, #9
 800945e:	d868      	bhi.n	8009532 <_dtoa_r+0x2ba>
 8009460:	2b05      	cmp	r3, #5
 8009462:	bfc4      	itt	gt
 8009464:	3b04      	subgt	r3, #4
 8009466:	9307      	strgt	r3, [sp, #28]
 8009468:	9b07      	ldr	r3, [sp, #28]
 800946a:	f1a3 0302 	sub.w	r3, r3, #2
 800946e:	bfcc      	ite	gt
 8009470:	2500      	movgt	r5, #0
 8009472:	2501      	movle	r5, #1
 8009474:	2b03      	cmp	r3, #3
 8009476:	f200 8085 	bhi.w	8009584 <_dtoa_r+0x30c>
 800947a:	e8df f003 	tbb	[pc, r3]
 800947e:	3b2e      	.short	0x3b2e
 8009480:	5839      	.short	0x5839
 8009482:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009486:	441d      	add	r5, r3
 8009488:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800948c:	2b20      	cmp	r3, #32
 800948e:	bfc1      	itttt	gt
 8009490:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009494:	fa08 f803 	lslgt.w	r8, r8, r3
 8009498:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800949c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80094a0:	bfd6      	itet	le
 80094a2:	f1c3 0320 	rsble	r3, r3, #32
 80094a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80094aa:	fa06 f003 	lslle.w	r0, r6, r3
 80094ae:	f7f7 f839 	bl	8000524 <__aeabi_ui2d>
 80094b2:	2201      	movs	r2, #1
 80094b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80094b8:	3d01      	subs	r5, #1
 80094ba:	920e      	str	r2, [sp, #56]	; 0x38
 80094bc:	e76f      	b.n	800939e <_dtoa_r+0x126>
 80094be:	2301      	movs	r3, #1
 80094c0:	e7b3      	b.n	800942a <_dtoa_r+0x1b2>
 80094c2:	900c      	str	r0, [sp, #48]	; 0x30
 80094c4:	e7b2      	b.n	800942c <_dtoa_r+0x1b4>
 80094c6:	9b05      	ldr	r3, [sp, #20]
 80094c8:	eba3 030b 	sub.w	r3, r3, fp
 80094cc:	9305      	str	r3, [sp, #20]
 80094ce:	f1cb 0300 	rsb	r3, fp, #0
 80094d2:	9308      	str	r3, [sp, #32]
 80094d4:	2300      	movs	r3, #0
 80094d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094d8:	e7bf      	b.n	800945a <_dtoa_r+0x1e2>
 80094da:	2300      	movs	r3, #0
 80094dc:	9309      	str	r3, [sp, #36]	; 0x24
 80094de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	dc52      	bgt.n	800958a <_dtoa_r+0x312>
 80094e4:	2301      	movs	r3, #1
 80094e6:	9301      	str	r3, [sp, #4]
 80094e8:	9304      	str	r3, [sp, #16]
 80094ea:	461a      	mov	r2, r3
 80094ec:	920a      	str	r2, [sp, #40]	; 0x28
 80094ee:	e00b      	b.n	8009508 <_dtoa_r+0x290>
 80094f0:	2301      	movs	r3, #1
 80094f2:	e7f3      	b.n	80094dc <_dtoa_r+0x264>
 80094f4:	2300      	movs	r3, #0
 80094f6:	9309      	str	r3, [sp, #36]	; 0x24
 80094f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094fa:	445b      	add	r3, fp
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	3301      	adds	r3, #1
 8009500:	2b01      	cmp	r3, #1
 8009502:	9304      	str	r3, [sp, #16]
 8009504:	bfb8      	it	lt
 8009506:	2301      	movlt	r3, #1
 8009508:	69e0      	ldr	r0, [r4, #28]
 800950a:	2100      	movs	r1, #0
 800950c:	2204      	movs	r2, #4
 800950e:	f102 0614 	add.w	r6, r2, #20
 8009512:	429e      	cmp	r6, r3
 8009514:	d93d      	bls.n	8009592 <_dtoa_r+0x31a>
 8009516:	6041      	str	r1, [r0, #4]
 8009518:	4620      	mov	r0, r4
 800951a:	f001 f909 	bl	800a730 <_Balloc>
 800951e:	9000      	str	r0, [sp, #0]
 8009520:	2800      	cmp	r0, #0
 8009522:	d139      	bne.n	8009598 <_dtoa_r+0x320>
 8009524:	4b16      	ldr	r3, [pc, #88]	; (8009580 <_dtoa_r+0x308>)
 8009526:	4602      	mov	r2, r0
 8009528:	f240 11af 	movw	r1, #431	; 0x1af
 800952c:	e6bd      	b.n	80092aa <_dtoa_r+0x32>
 800952e:	2301      	movs	r3, #1
 8009530:	e7e1      	b.n	80094f6 <_dtoa_r+0x27e>
 8009532:	2501      	movs	r5, #1
 8009534:	2300      	movs	r3, #0
 8009536:	9307      	str	r3, [sp, #28]
 8009538:	9509      	str	r5, [sp, #36]	; 0x24
 800953a:	f04f 33ff 	mov.w	r3, #4294967295
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	2200      	movs	r2, #0
 8009544:	2312      	movs	r3, #18
 8009546:	e7d1      	b.n	80094ec <_dtoa_r+0x274>
 8009548:	636f4361 	.word	0x636f4361
 800954c:	3fd287a7 	.word	0x3fd287a7
 8009550:	8b60c8b3 	.word	0x8b60c8b3
 8009554:	3fc68a28 	.word	0x3fc68a28
 8009558:	509f79fb 	.word	0x509f79fb
 800955c:	3fd34413 	.word	0x3fd34413
 8009560:	0800bdea 	.word	0x0800bdea
 8009564:	0800be01 	.word	0x0800be01
 8009568:	7ff00000 	.word	0x7ff00000
 800956c:	0800bde6 	.word	0x0800bde6
 8009570:	0800bddd 	.word	0x0800bddd
 8009574:	0800bdb2 	.word	0x0800bdb2
 8009578:	3ff80000 	.word	0x3ff80000
 800957c:	0800bf50 	.word	0x0800bf50
 8009580:	0800be59 	.word	0x0800be59
 8009584:	2301      	movs	r3, #1
 8009586:	9309      	str	r3, [sp, #36]	; 0x24
 8009588:	e7d7      	b.n	800953a <_dtoa_r+0x2c2>
 800958a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	e7ba      	b.n	8009508 <_dtoa_r+0x290>
 8009592:	3101      	adds	r1, #1
 8009594:	0052      	lsls	r2, r2, #1
 8009596:	e7ba      	b.n	800950e <_dtoa_r+0x296>
 8009598:	69e3      	ldr	r3, [r4, #28]
 800959a:	9a00      	ldr	r2, [sp, #0]
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	9b04      	ldr	r3, [sp, #16]
 80095a0:	2b0e      	cmp	r3, #14
 80095a2:	f200 80a8 	bhi.w	80096f6 <_dtoa_r+0x47e>
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	f000 80a5 	beq.w	80096f6 <_dtoa_r+0x47e>
 80095ac:	f1bb 0f00 	cmp.w	fp, #0
 80095b0:	dd38      	ble.n	8009624 <_dtoa_r+0x3ac>
 80095b2:	4bc0      	ldr	r3, [pc, #768]	; (80098b4 <_dtoa_r+0x63c>)
 80095b4:	f00b 020f 	and.w	r2, fp, #15
 80095b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80095c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80095c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80095c8:	d019      	beq.n	80095fe <_dtoa_r+0x386>
 80095ca:	4bbb      	ldr	r3, [pc, #748]	; (80098b8 <_dtoa_r+0x640>)
 80095cc:	ec51 0b18 	vmov	r0, r1, d8
 80095d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095d4:	f7f7 f94a 	bl	800086c <__aeabi_ddiv>
 80095d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095dc:	f008 080f 	and.w	r8, r8, #15
 80095e0:	2503      	movs	r5, #3
 80095e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80098b8 <_dtoa_r+0x640>
 80095e6:	f1b8 0f00 	cmp.w	r8, #0
 80095ea:	d10a      	bne.n	8009602 <_dtoa_r+0x38a>
 80095ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095f0:	4632      	mov	r2, r6
 80095f2:	463b      	mov	r3, r7
 80095f4:	f7f7 f93a 	bl	800086c <__aeabi_ddiv>
 80095f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095fc:	e02b      	b.n	8009656 <_dtoa_r+0x3de>
 80095fe:	2502      	movs	r5, #2
 8009600:	e7ef      	b.n	80095e2 <_dtoa_r+0x36a>
 8009602:	f018 0f01 	tst.w	r8, #1
 8009606:	d008      	beq.n	800961a <_dtoa_r+0x3a2>
 8009608:	4630      	mov	r0, r6
 800960a:	4639      	mov	r1, r7
 800960c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009610:	f7f7 f802 	bl	8000618 <__aeabi_dmul>
 8009614:	3501      	adds	r5, #1
 8009616:	4606      	mov	r6, r0
 8009618:	460f      	mov	r7, r1
 800961a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800961e:	f109 0908 	add.w	r9, r9, #8
 8009622:	e7e0      	b.n	80095e6 <_dtoa_r+0x36e>
 8009624:	f000 809f 	beq.w	8009766 <_dtoa_r+0x4ee>
 8009628:	f1cb 0600 	rsb	r6, fp, #0
 800962c:	4ba1      	ldr	r3, [pc, #644]	; (80098b4 <_dtoa_r+0x63c>)
 800962e:	4fa2      	ldr	r7, [pc, #648]	; (80098b8 <_dtoa_r+0x640>)
 8009630:	f006 020f 	and.w	r2, r6, #15
 8009634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	ec51 0b18 	vmov	r0, r1, d8
 8009640:	f7f6 ffea 	bl	8000618 <__aeabi_dmul>
 8009644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009648:	1136      	asrs	r6, r6, #4
 800964a:	2300      	movs	r3, #0
 800964c:	2502      	movs	r5, #2
 800964e:	2e00      	cmp	r6, #0
 8009650:	d17e      	bne.n	8009750 <_dtoa_r+0x4d8>
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1d0      	bne.n	80095f8 <_dtoa_r+0x380>
 8009656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009658:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 8084 	beq.w	800976a <_dtoa_r+0x4f2>
 8009662:	4b96      	ldr	r3, [pc, #600]	; (80098bc <_dtoa_r+0x644>)
 8009664:	2200      	movs	r2, #0
 8009666:	4640      	mov	r0, r8
 8009668:	4649      	mov	r1, r9
 800966a:	f7f7 fa47 	bl	8000afc <__aeabi_dcmplt>
 800966e:	2800      	cmp	r0, #0
 8009670:	d07b      	beq.n	800976a <_dtoa_r+0x4f2>
 8009672:	9b04      	ldr	r3, [sp, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d078      	beq.n	800976a <_dtoa_r+0x4f2>
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	dd39      	ble.n	80096f2 <_dtoa_r+0x47a>
 800967e:	4b90      	ldr	r3, [pc, #576]	; (80098c0 <_dtoa_r+0x648>)
 8009680:	2200      	movs	r2, #0
 8009682:	4640      	mov	r0, r8
 8009684:	4649      	mov	r1, r9
 8009686:	f7f6 ffc7 	bl	8000618 <__aeabi_dmul>
 800968a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800968e:	9e01      	ldr	r6, [sp, #4]
 8009690:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009694:	3501      	adds	r5, #1
 8009696:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800969a:	4628      	mov	r0, r5
 800969c:	f7f6 ff52 	bl	8000544 <__aeabi_i2d>
 80096a0:	4642      	mov	r2, r8
 80096a2:	464b      	mov	r3, r9
 80096a4:	f7f6 ffb8 	bl	8000618 <__aeabi_dmul>
 80096a8:	4b86      	ldr	r3, [pc, #536]	; (80098c4 <_dtoa_r+0x64c>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	f7f6 fdfe 	bl	80002ac <__adddf3>
 80096b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80096b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	2e00      	cmp	r6, #0
 80096bc:	d158      	bne.n	8009770 <_dtoa_r+0x4f8>
 80096be:	4b82      	ldr	r3, [pc, #520]	; (80098c8 <_dtoa_r+0x650>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	4640      	mov	r0, r8
 80096c4:	4649      	mov	r1, r9
 80096c6:	f7f6 fdef 	bl	80002a8 <__aeabi_dsub>
 80096ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ce:	4680      	mov	r8, r0
 80096d0:	4689      	mov	r9, r1
 80096d2:	f7f7 fa31 	bl	8000b38 <__aeabi_dcmpgt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f040 8296 	bne.w	8009c08 <_dtoa_r+0x990>
 80096dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80096e0:	4640      	mov	r0, r8
 80096e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096e6:	4649      	mov	r1, r9
 80096e8:	f7f7 fa08 	bl	8000afc <__aeabi_dcmplt>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f040 8289 	bne.w	8009c04 <_dtoa_r+0x98c>
 80096f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80096f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f2c0 814e 	blt.w	800999a <_dtoa_r+0x722>
 80096fe:	f1bb 0f0e 	cmp.w	fp, #14
 8009702:	f300 814a 	bgt.w	800999a <_dtoa_r+0x722>
 8009706:	4b6b      	ldr	r3, [pc, #428]	; (80098b4 <_dtoa_r+0x63c>)
 8009708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800970c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009712:	2b00      	cmp	r3, #0
 8009714:	f280 80dc 	bge.w	80098d0 <_dtoa_r+0x658>
 8009718:	9b04      	ldr	r3, [sp, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f300 80d8 	bgt.w	80098d0 <_dtoa_r+0x658>
 8009720:	f040 826f 	bne.w	8009c02 <_dtoa_r+0x98a>
 8009724:	4b68      	ldr	r3, [pc, #416]	; (80098c8 <_dtoa_r+0x650>)
 8009726:	2200      	movs	r2, #0
 8009728:	4640      	mov	r0, r8
 800972a:	4649      	mov	r1, r9
 800972c:	f7f6 ff74 	bl	8000618 <__aeabi_dmul>
 8009730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009734:	f7f7 f9f6 	bl	8000b24 <__aeabi_dcmpge>
 8009738:	9e04      	ldr	r6, [sp, #16]
 800973a:	4637      	mov	r7, r6
 800973c:	2800      	cmp	r0, #0
 800973e:	f040 8245 	bne.w	8009bcc <_dtoa_r+0x954>
 8009742:	9d00      	ldr	r5, [sp, #0]
 8009744:	2331      	movs	r3, #49	; 0x31
 8009746:	f805 3b01 	strb.w	r3, [r5], #1
 800974a:	f10b 0b01 	add.w	fp, fp, #1
 800974e:	e241      	b.n	8009bd4 <_dtoa_r+0x95c>
 8009750:	07f2      	lsls	r2, r6, #31
 8009752:	d505      	bpl.n	8009760 <_dtoa_r+0x4e8>
 8009754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009758:	f7f6 ff5e 	bl	8000618 <__aeabi_dmul>
 800975c:	3501      	adds	r5, #1
 800975e:	2301      	movs	r3, #1
 8009760:	1076      	asrs	r6, r6, #1
 8009762:	3708      	adds	r7, #8
 8009764:	e773      	b.n	800964e <_dtoa_r+0x3d6>
 8009766:	2502      	movs	r5, #2
 8009768:	e775      	b.n	8009656 <_dtoa_r+0x3de>
 800976a:	9e04      	ldr	r6, [sp, #16]
 800976c:	465f      	mov	r7, fp
 800976e:	e792      	b.n	8009696 <_dtoa_r+0x41e>
 8009770:	9900      	ldr	r1, [sp, #0]
 8009772:	4b50      	ldr	r3, [pc, #320]	; (80098b4 <_dtoa_r+0x63c>)
 8009774:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009778:	4431      	add	r1, r6
 800977a:	9102      	str	r1, [sp, #8]
 800977c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800977e:	eeb0 9a47 	vmov.f32	s18, s14
 8009782:	eef0 9a67 	vmov.f32	s19, s15
 8009786:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800978a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800978e:	2900      	cmp	r1, #0
 8009790:	d044      	beq.n	800981c <_dtoa_r+0x5a4>
 8009792:	494e      	ldr	r1, [pc, #312]	; (80098cc <_dtoa_r+0x654>)
 8009794:	2000      	movs	r0, #0
 8009796:	f7f7 f869 	bl	800086c <__aeabi_ddiv>
 800979a:	ec53 2b19 	vmov	r2, r3, d9
 800979e:	f7f6 fd83 	bl	80002a8 <__aeabi_dsub>
 80097a2:	9d00      	ldr	r5, [sp, #0]
 80097a4:	ec41 0b19 	vmov	d9, r0, r1
 80097a8:	4649      	mov	r1, r9
 80097aa:	4640      	mov	r0, r8
 80097ac:	f7f7 f9e4 	bl	8000b78 <__aeabi_d2iz>
 80097b0:	4606      	mov	r6, r0
 80097b2:	f7f6 fec7 	bl	8000544 <__aeabi_i2d>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4640      	mov	r0, r8
 80097bc:	4649      	mov	r1, r9
 80097be:	f7f6 fd73 	bl	80002a8 <__aeabi_dsub>
 80097c2:	3630      	adds	r6, #48	; 0x30
 80097c4:	f805 6b01 	strb.w	r6, [r5], #1
 80097c8:	ec53 2b19 	vmov	r2, r3, d9
 80097cc:	4680      	mov	r8, r0
 80097ce:	4689      	mov	r9, r1
 80097d0:	f7f7 f994 	bl	8000afc <__aeabi_dcmplt>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d164      	bne.n	80098a2 <_dtoa_r+0x62a>
 80097d8:	4642      	mov	r2, r8
 80097da:	464b      	mov	r3, r9
 80097dc:	4937      	ldr	r1, [pc, #220]	; (80098bc <_dtoa_r+0x644>)
 80097de:	2000      	movs	r0, #0
 80097e0:	f7f6 fd62 	bl	80002a8 <__aeabi_dsub>
 80097e4:	ec53 2b19 	vmov	r2, r3, d9
 80097e8:	f7f7 f988 	bl	8000afc <__aeabi_dcmplt>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	f040 80b6 	bne.w	800995e <_dtoa_r+0x6e6>
 80097f2:	9b02      	ldr	r3, [sp, #8]
 80097f4:	429d      	cmp	r5, r3
 80097f6:	f43f af7c 	beq.w	80096f2 <_dtoa_r+0x47a>
 80097fa:	4b31      	ldr	r3, [pc, #196]	; (80098c0 <_dtoa_r+0x648>)
 80097fc:	ec51 0b19 	vmov	r0, r1, d9
 8009800:	2200      	movs	r2, #0
 8009802:	f7f6 ff09 	bl	8000618 <__aeabi_dmul>
 8009806:	4b2e      	ldr	r3, [pc, #184]	; (80098c0 <_dtoa_r+0x648>)
 8009808:	ec41 0b19 	vmov	d9, r0, r1
 800980c:	2200      	movs	r2, #0
 800980e:	4640      	mov	r0, r8
 8009810:	4649      	mov	r1, r9
 8009812:	f7f6 ff01 	bl	8000618 <__aeabi_dmul>
 8009816:	4680      	mov	r8, r0
 8009818:	4689      	mov	r9, r1
 800981a:	e7c5      	b.n	80097a8 <_dtoa_r+0x530>
 800981c:	ec51 0b17 	vmov	r0, r1, d7
 8009820:	f7f6 fefa 	bl	8000618 <__aeabi_dmul>
 8009824:	9b02      	ldr	r3, [sp, #8]
 8009826:	9d00      	ldr	r5, [sp, #0]
 8009828:	930f      	str	r3, [sp, #60]	; 0x3c
 800982a:	ec41 0b19 	vmov	d9, r0, r1
 800982e:	4649      	mov	r1, r9
 8009830:	4640      	mov	r0, r8
 8009832:	f7f7 f9a1 	bl	8000b78 <__aeabi_d2iz>
 8009836:	4606      	mov	r6, r0
 8009838:	f7f6 fe84 	bl	8000544 <__aeabi_i2d>
 800983c:	3630      	adds	r6, #48	; 0x30
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4640      	mov	r0, r8
 8009844:	4649      	mov	r1, r9
 8009846:	f7f6 fd2f 	bl	80002a8 <__aeabi_dsub>
 800984a:	f805 6b01 	strb.w	r6, [r5], #1
 800984e:	9b02      	ldr	r3, [sp, #8]
 8009850:	429d      	cmp	r5, r3
 8009852:	4680      	mov	r8, r0
 8009854:	4689      	mov	r9, r1
 8009856:	f04f 0200 	mov.w	r2, #0
 800985a:	d124      	bne.n	80098a6 <_dtoa_r+0x62e>
 800985c:	4b1b      	ldr	r3, [pc, #108]	; (80098cc <_dtoa_r+0x654>)
 800985e:	ec51 0b19 	vmov	r0, r1, d9
 8009862:	f7f6 fd23 	bl	80002ac <__adddf3>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	4640      	mov	r0, r8
 800986c:	4649      	mov	r1, r9
 800986e:	f7f7 f963 	bl	8000b38 <__aeabi_dcmpgt>
 8009872:	2800      	cmp	r0, #0
 8009874:	d173      	bne.n	800995e <_dtoa_r+0x6e6>
 8009876:	ec53 2b19 	vmov	r2, r3, d9
 800987a:	4914      	ldr	r1, [pc, #80]	; (80098cc <_dtoa_r+0x654>)
 800987c:	2000      	movs	r0, #0
 800987e:	f7f6 fd13 	bl	80002a8 <__aeabi_dsub>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4640      	mov	r0, r8
 8009888:	4649      	mov	r1, r9
 800988a:	f7f7 f937 	bl	8000afc <__aeabi_dcmplt>
 800988e:	2800      	cmp	r0, #0
 8009890:	f43f af2f 	beq.w	80096f2 <_dtoa_r+0x47a>
 8009894:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009896:	1e6b      	subs	r3, r5, #1
 8009898:	930f      	str	r3, [sp, #60]	; 0x3c
 800989a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800989e:	2b30      	cmp	r3, #48	; 0x30
 80098a0:	d0f8      	beq.n	8009894 <_dtoa_r+0x61c>
 80098a2:	46bb      	mov	fp, r7
 80098a4:	e04a      	b.n	800993c <_dtoa_r+0x6c4>
 80098a6:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <_dtoa_r+0x648>)
 80098a8:	f7f6 feb6 	bl	8000618 <__aeabi_dmul>
 80098ac:	4680      	mov	r8, r0
 80098ae:	4689      	mov	r9, r1
 80098b0:	e7bd      	b.n	800982e <_dtoa_r+0x5b6>
 80098b2:	bf00      	nop
 80098b4:	0800bf50 	.word	0x0800bf50
 80098b8:	0800bf28 	.word	0x0800bf28
 80098bc:	3ff00000 	.word	0x3ff00000
 80098c0:	40240000 	.word	0x40240000
 80098c4:	401c0000 	.word	0x401c0000
 80098c8:	40140000 	.word	0x40140000
 80098cc:	3fe00000 	.word	0x3fe00000
 80098d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098d4:	9d00      	ldr	r5, [sp, #0]
 80098d6:	4642      	mov	r2, r8
 80098d8:	464b      	mov	r3, r9
 80098da:	4630      	mov	r0, r6
 80098dc:	4639      	mov	r1, r7
 80098de:	f7f6 ffc5 	bl	800086c <__aeabi_ddiv>
 80098e2:	f7f7 f949 	bl	8000b78 <__aeabi_d2iz>
 80098e6:	9001      	str	r0, [sp, #4]
 80098e8:	f7f6 fe2c 	bl	8000544 <__aeabi_i2d>
 80098ec:	4642      	mov	r2, r8
 80098ee:	464b      	mov	r3, r9
 80098f0:	f7f6 fe92 	bl	8000618 <__aeabi_dmul>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4630      	mov	r0, r6
 80098fa:	4639      	mov	r1, r7
 80098fc:	f7f6 fcd4 	bl	80002a8 <__aeabi_dsub>
 8009900:	9e01      	ldr	r6, [sp, #4]
 8009902:	9f04      	ldr	r7, [sp, #16]
 8009904:	3630      	adds	r6, #48	; 0x30
 8009906:	f805 6b01 	strb.w	r6, [r5], #1
 800990a:	9e00      	ldr	r6, [sp, #0]
 800990c:	1bae      	subs	r6, r5, r6
 800990e:	42b7      	cmp	r7, r6
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	d134      	bne.n	8009980 <_dtoa_r+0x708>
 8009916:	f7f6 fcc9 	bl	80002ac <__adddf3>
 800991a:	4642      	mov	r2, r8
 800991c:	464b      	mov	r3, r9
 800991e:	4606      	mov	r6, r0
 8009920:	460f      	mov	r7, r1
 8009922:	f7f7 f909 	bl	8000b38 <__aeabi_dcmpgt>
 8009926:	b9c8      	cbnz	r0, 800995c <_dtoa_r+0x6e4>
 8009928:	4642      	mov	r2, r8
 800992a:	464b      	mov	r3, r9
 800992c:	4630      	mov	r0, r6
 800992e:	4639      	mov	r1, r7
 8009930:	f7f7 f8da 	bl	8000ae8 <__aeabi_dcmpeq>
 8009934:	b110      	cbz	r0, 800993c <_dtoa_r+0x6c4>
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	07db      	lsls	r3, r3, #31
 800993a:	d40f      	bmi.n	800995c <_dtoa_r+0x6e4>
 800993c:	4651      	mov	r1, sl
 800993e:	4620      	mov	r0, r4
 8009940:	f000 ff36 	bl	800a7b0 <_Bfree>
 8009944:	2300      	movs	r3, #0
 8009946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009948:	702b      	strb	r3, [r5, #0]
 800994a:	f10b 0301 	add.w	r3, fp, #1
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009952:	2b00      	cmp	r3, #0
 8009954:	f43f ace2 	beq.w	800931c <_dtoa_r+0xa4>
 8009958:	601d      	str	r5, [r3, #0]
 800995a:	e4df      	b.n	800931c <_dtoa_r+0xa4>
 800995c:	465f      	mov	r7, fp
 800995e:	462b      	mov	r3, r5
 8009960:	461d      	mov	r5, r3
 8009962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009966:	2a39      	cmp	r2, #57	; 0x39
 8009968:	d106      	bne.n	8009978 <_dtoa_r+0x700>
 800996a:	9a00      	ldr	r2, [sp, #0]
 800996c:	429a      	cmp	r2, r3
 800996e:	d1f7      	bne.n	8009960 <_dtoa_r+0x6e8>
 8009970:	9900      	ldr	r1, [sp, #0]
 8009972:	2230      	movs	r2, #48	; 0x30
 8009974:	3701      	adds	r7, #1
 8009976:	700a      	strb	r2, [r1, #0]
 8009978:	781a      	ldrb	r2, [r3, #0]
 800997a:	3201      	adds	r2, #1
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	e790      	b.n	80098a2 <_dtoa_r+0x62a>
 8009980:	4ba3      	ldr	r3, [pc, #652]	; (8009c10 <_dtoa_r+0x998>)
 8009982:	2200      	movs	r2, #0
 8009984:	f7f6 fe48 	bl	8000618 <__aeabi_dmul>
 8009988:	2200      	movs	r2, #0
 800998a:	2300      	movs	r3, #0
 800998c:	4606      	mov	r6, r0
 800998e:	460f      	mov	r7, r1
 8009990:	f7f7 f8aa 	bl	8000ae8 <__aeabi_dcmpeq>
 8009994:	2800      	cmp	r0, #0
 8009996:	d09e      	beq.n	80098d6 <_dtoa_r+0x65e>
 8009998:	e7d0      	b.n	800993c <_dtoa_r+0x6c4>
 800999a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800999c:	2a00      	cmp	r2, #0
 800999e:	f000 80ca 	beq.w	8009b36 <_dtoa_r+0x8be>
 80099a2:	9a07      	ldr	r2, [sp, #28]
 80099a4:	2a01      	cmp	r2, #1
 80099a6:	f300 80ad 	bgt.w	8009b04 <_dtoa_r+0x88c>
 80099aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099ac:	2a00      	cmp	r2, #0
 80099ae:	f000 80a5 	beq.w	8009afc <_dtoa_r+0x884>
 80099b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80099b6:	9e08      	ldr	r6, [sp, #32]
 80099b8:	9d05      	ldr	r5, [sp, #20]
 80099ba:	9a05      	ldr	r2, [sp, #20]
 80099bc:	441a      	add	r2, r3
 80099be:	9205      	str	r2, [sp, #20]
 80099c0:	9a06      	ldr	r2, [sp, #24]
 80099c2:	2101      	movs	r1, #1
 80099c4:	441a      	add	r2, r3
 80099c6:	4620      	mov	r0, r4
 80099c8:	9206      	str	r2, [sp, #24]
 80099ca:	f000 fff1 	bl	800a9b0 <__i2b>
 80099ce:	4607      	mov	r7, r0
 80099d0:	b165      	cbz	r5, 80099ec <_dtoa_r+0x774>
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dd09      	ble.n	80099ec <_dtoa_r+0x774>
 80099d8:	42ab      	cmp	r3, r5
 80099da:	9a05      	ldr	r2, [sp, #20]
 80099dc:	bfa8      	it	ge
 80099de:	462b      	movge	r3, r5
 80099e0:	1ad2      	subs	r2, r2, r3
 80099e2:	9205      	str	r2, [sp, #20]
 80099e4:	9a06      	ldr	r2, [sp, #24]
 80099e6:	1aed      	subs	r5, r5, r3
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	9306      	str	r3, [sp, #24]
 80099ec:	9b08      	ldr	r3, [sp, #32]
 80099ee:	b1f3      	cbz	r3, 8009a2e <_dtoa_r+0x7b6>
 80099f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 80a3 	beq.w	8009b3e <_dtoa_r+0x8c6>
 80099f8:	2e00      	cmp	r6, #0
 80099fa:	dd10      	ble.n	8009a1e <_dtoa_r+0x7a6>
 80099fc:	4639      	mov	r1, r7
 80099fe:	4632      	mov	r2, r6
 8009a00:	4620      	mov	r0, r4
 8009a02:	f001 f895 	bl	800ab30 <__pow5mult>
 8009a06:	4652      	mov	r2, sl
 8009a08:	4601      	mov	r1, r0
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 ffe5 	bl	800a9dc <__multiply>
 8009a12:	4651      	mov	r1, sl
 8009a14:	4680      	mov	r8, r0
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 feca 	bl	800a7b0 <_Bfree>
 8009a1c:	46c2      	mov	sl, r8
 8009a1e:	9b08      	ldr	r3, [sp, #32]
 8009a20:	1b9a      	subs	r2, r3, r6
 8009a22:	d004      	beq.n	8009a2e <_dtoa_r+0x7b6>
 8009a24:	4651      	mov	r1, sl
 8009a26:	4620      	mov	r0, r4
 8009a28:	f001 f882 	bl	800ab30 <__pow5mult>
 8009a2c:	4682      	mov	sl, r0
 8009a2e:	2101      	movs	r1, #1
 8009a30:	4620      	mov	r0, r4
 8009a32:	f000 ffbd 	bl	800a9b0 <__i2b>
 8009a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	f340 8081 	ble.w	8009b42 <_dtoa_r+0x8ca>
 8009a40:	461a      	mov	r2, r3
 8009a42:	4601      	mov	r1, r0
 8009a44:	4620      	mov	r0, r4
 8009a46:	f001 f873 	bl	800ab30 <__pow5mult>
 8009a4a:	9b07      	ldr	r3, [sp, #28]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	4606      	mov	r6, r0
 8009a50:	dd7a      	ble.n	8009b48 <_dtoa_r+0x8d0>
 8009a52:	f04f 0800 	mov.w	r8, #0
 8009a56:	6933      	ldr	r3, [r6, #16]
 8009a58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a5c:	6918      	ldr	r0, [r3, #16]
 8009a5e:	f000 ff59 	bl	800a914 <__hi0bits>
 8009a62:	f1c0 0020 	rsb	r0, r0, #32
 8009a66:	9b06      	ldr	r3, [sp, #24]
 8009a68:	4418      	add	r0, r3
 8009a6a:	f010 001f 	ands.w	r0, r0, #31
 8009a6e:	f000 8094 	beq.w	8009b9a <_dtoa_r+0x922>
 8009a72:	f1c0 0320 	rsb	r3, r0, #32
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	f340 8085 	ble.w	8009b86 <_dtoa_r+0x90e>
 8009a7c:	9b05      	ldr	r3, [sp, #20]
 8009a7e:	f1c0 001c 	rsb	r0, r0, #28
 8009a82:	4403      	add	r3, r0
 8009a84:	9305      	str	r3, [sp, #20]
 8009a86:	9b06      	ldr	r3, [sp, #24]
 8009a88:	4403      	add	r3, r0
 8009a8a:	4405      	add	r5, r0
 8009a8c:	9306      	str	r3, [sp, #24]
 8009a8e:	9b05      	ldr	r3, [sp, #20]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dd05      	ble.n	8009aa0 <_dtoa_r+0x828>
 8009a94:	4651      	mov	r1, sl
 8009a96:	461a      	mov	r2, r3
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f001 f8a3 	bl	800abe4 <__lshift>
 8009a9e:	4682      	mov	sl, r0
 8009aa0:	9b06      	ldr	r3, [sp, #24]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	dd05      	ble.n	8009ab2 <_dtoa_r+0x83a>
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f001 f89a 	bl	800abe4 <__lshift>
 8009ab0:	4606      	mov	r6, r0
 8009ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d072      	beq.n	8009b9e <_dtoa_r+0x926>
 8009ab8:	4631      	mov	r1, r6
 8009aba:	4650      	mov	r0, sl
 8009abc:	f001 f8fe 	bl	800acbc <__mcmp>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	da6c      	bge.n	8009b9e <_dtoa_r+0x926>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4651      	mov	r1, sl
 8009ac8:	220a      	movs	r2, #10
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 fe92 	bl	800a7f4 <__multadd>
 8009ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 81b0 	beq.w	8009e3e <_dtoa_r+0xbc6>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	220a      	movs	r2, #10
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 fe85 	bl	800a7f4 <__multadd>
 8009aea:	9b01      	ldr	r3, [sp, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	4607      	mov	r7, r0
 8009af0:	f300 8096 	bgt.w	8009c20 <_dtoa_r+0x9a8>
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	dc59      	bgt.n	8009bae <_dtoa_r+0x936>
 8009afa:	e091      	b.n	8009c20 <_dtoa_r+0x9a8>
 8009afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b02:	e758      	b.n	80099b6 <_dtoa_r+0x73e>
 8009b04:	9b04      	ldr	r3, [sp, #16]
 8009b06:	1e5e      	subs	r6, r3, #1
 8009b08:	9b08      	ldr	r3, [sp, #32]
 8009b0a:	42b3      	cmp	r3, r6
 8009b0c:	bfbf      	itttt	lt
 8009b0e:	9b08      	ldrlt	r3, [sp, #32]
 8009b10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009b12:	9608      	strlt	r6, [sp, #32]
 8009b14:	1af3      	sublt	r3, r6, r3
 8009b16:	bfb4      	ite	lt
 8009b18:	18d2      	addlt	r2, r2, r3
 8009b1a:	1b9e      	subge	r6, r3, r6
 8009b1c:	9b04      	ldr	r3, [sp, #16]
 8009b1e:	bfbc      	itt	lt
 8009b20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009b22:	2600      	movlt	r6, #0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfb7      	itett	lt
 8009b28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009b2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009b30:	1a9d      	sublt	r5, r3, r2
 8009b32:	2300      	movlt	r3, #0
 8009b34:	e741      	b.n	80099ba <_dtoa_r+0x742>
 8009b36:	9e08      	ldr	r6, [sp, #32]
 8009b38:	9d05      	ldr	r5, [sp, #20]
 8009b3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b3c:	e748      	b.n	80099d0 <_dtoa_r+0x758>
 8009b3e:	9a08      	ldr	r2, [sp, #32]
 8009b40:	e770      	b.n	8009a24 <_dtoa_r+0x7ac>
 8009b42:	9b07      	ldr	r3, [sp, #28]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	dc19      	bgt.n	8009b7c <_dtoa_r+0x904>
 8009b48:	9b02      	ldr	r3, [sp, #8]
 8009b4a:	b9bb      	cbnz	r3, 8009b7c <_dtoa_r+0x904>
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b52:	b99b      	cbnz	r3, 8009b7c <_dtoa_r+0x904>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b5a:	0d1b      	lsrs	r3, r3, #20
 8009b5c:	051b      	lsls	r3, r3, #20
 8009b5e:	b183      	cbz	r3, 8009b82 <_dtoa_r+0x90a>
 8009b60:	9b05      	ldr	r3, [sp, #20]
 8009b62:	3301      	adds	r3, #1
 8009b64:	9305      	str	r3, [sp, #20]
 8009b66:	9b06      	ldr	r3, [sp, #24]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	9306      	str	r3, [sp, #24]
 8009b6c:	f04f 0801 	mov.w	r8, #1
 8009b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f47f af6f 	bne.w	8009a56 <_dtoa_r+0x7de>
 8009b78:	2001      	movs	r0, #1
 8009b7a:	e774      	b.n	8009a66 <_dtoa_r+0x7ee>
 8009b7c:	f04f 0800 	mov.w	r8, #0
 8009b80:	e7f6      	b.n	8009b70 <_dtoa_r+0x8f8>
 8009b82:	4698      	mov	r8, r3
 8009b84:	e7f4      	b.n	8009b70 <_dtoa_r+0x8f8>
 8009b86:	d082      	beq.n	8009a8e <_dtoa_r+0x816>
 8009b88:	9a05      	ldr	r2, [sp, #20]
 8009b8a:	331c      	adds	r3, #28
 8009b8c:	441a      	add	r2, r3
 8009b8e:	9205      	str	r2, [sp, #20]
 8009b90:	9a06      	ldr	r2, [sp, #24]
 8009b92:	441a      	add	r2, r3
 8009b94:	441d      	add	r5, r3
 8009b96:	9206      	str	r2, [sp, #24]
 8009b98:	e779      	b.n	8009a8e <_dtoa_r+0x816>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	e7f4      	b.n	8009b88 <_dtoa_r+0x910>
 8009b9e:	9b04      	ldr	r3, [sp, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dc37      	bgt.n	8009c14 <_dtoa_r+0x99c>
 8009ba4:	9b07      	ldr	r3, [sp, #28]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	dd34      	ble.n	8009c14 <_dtoa_r+0x99c>
 8009baa:	9b04      	ldr	r3, [sp, #16]
 8009bac:	9301      	str	r3, [sp, #4]
 8009bae:	9b01      	ldr	r3, [sp, #4]
 8009bb0:	b963      	cbnz	r3, 8009bcc <_dtoa_r+0x954>
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	2205      	movs	r2, #5
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f000 fe1c 	bl	800a7f4 <__multadd>
 8009bbc:	4601      	mov	r1, r0
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	f001 f87b 	bl	800acbc <__mcmp>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f73f adbb 	bgt.w	8009742 <_dtoa_r+0x4ca>
 8009bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bce:	9d00      	ldr	r5, [sp, #0]
 8009bd0:	ea6f 0b03 	mvn.w	fp, r3
 8009bd4:	f04f 0800 	mov.w	r8, #0
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fde8 	bl	800a7b0 <_Bfree>
 8009be0:	2f00      	cmp	r7, #0
 8009be2:	f43f aeab 	beq.w	800993c <_dtoa_r+0x6c4>
 8009be6:	f1b8 0f00 	cmp.w	r8, #0
 8009bea:	d005      	beq.n	8009bf8 <_dtoa_r+0x980>
 8009bec:	45b8      	cmp	r8, r7
 8009bee:	d003      	beq.n	8009bf8 <_dtoa_r+0x980>
 8009bf0:	4641      	mov	r1, r8
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 fddc 	bl	800a7b0 <_Bfree>
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f000 fdd8 	bl	800a7b0 <_Bfree>
 8009c00:	e69c      	b.n	800993c <_dtoa_r+0x6c4>
 8009c02:	2600      	movs	r6, #0
 8009c04:	4637      	mov	r7, r6
 8009c06:	e7e1      	b.n	8009bcc <_dtoa_r+0x954>
 8009c08:	46bb      	mov	fp, r7
 8009c0a:	4637      	mov	r7, r6
 8009c0c:	e599      	b.n	8009742 <_dtoa_r+0x4ca>
 8009c0e:	bf00      	nop
 8009c10:	40240000 	.word	0x40240000
 8009c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 80c8 	beq.w	8009dac <_dtoa_r+0xb34>
 8009c1c:	9b04      	ldr	r3, [sp, #16]
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	dd05      	ble.n	8009c30 <_dtoa_r+0x9b8>
 8009c24:	4639      	mov	r1, r7
 8009c26:	462a      	mov	r2, r5
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 ffdb 	bl	800abe4 <__lshift>
 8009c2e:	4607      	mov	r7, r0
 8009c30:	f1b8 0f00 	cmp.w	r8, #0
 8009c34:	d05b      	beq.n	8009cee <_dtoa_r+0xa76>
 8009c36:	6879      	ldr	r1, [r7, #4]
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f000 fd79 	bl	800a730 <_Balloc>
 8009c3e:	4605      	mov	r5, r0
 8009c40:	b928      	cbnz	r0, 8009c4e <_dtoa_r+0x9d6>
 8009c42:	4b83      	ldr	r3, [pc, #524]	; (8009e50 <_dtoa_r+0xbd8>)
 8009c44:	4602      	mov	r2, r0
 8009c46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009c4a:	f7ff bb2e 	b.w	80092aa <_dtoa_r+0x32>
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	3202      	adds	r2, #2
 8009c52:	0092      	lsls	r2, r2, #2
 8009c54:	f107 010c 	add.w	r1, r7, #12
 8009c58:	300c      	adds	r0, #12
 8009c5a:	f7ff fa6d 	bl	8009138 <memcpy>
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4629      	mov	r1, r5
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 ffbe 	bl	800abe4 <__lshift>
 8009c68:	9b00      	ldr	r3, [sp, #0]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c72:	4413      	add	r3, r2
 8009c74:	9308      	str	r3, [sp, #32]
 8009c76:	9b02      	ldr	r3, [sp, #8]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	46b8      	mov	r8, r7
 8009c7e:	9306      	str	r3, [sp, #24]
 8009c80:	4607      	mov	r7, r0
 8009c82:	9b04      	ldr	r3, [sp, #16]
 8009c84:	4631      	mov	r1, r6
 8009c86:	3b01      	subs	r3, #1
 8009c88:	4650      	mov	r0, sl
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	f7ff fa6c 	bl	8009168 <quorem>
 8009c90:	4641      	mov	r1, r8
 8009c92:	9002      	str	r0, [sp, #8]
 8009c94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c98:	4650      	mov	r0, sl
 8009c9a:	f001 f80f 	bl	800acbc <__mcmp>
 8009c9e:	463a      	mov	r2, r7
 8009ca0:	9005      	str	r0, [sp, #20]
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f001 f825 	bl	800acf4 <__mdiff>
 8009caa:	68c2      	ldr	r2, [r0, #12]
 8009cac:	4605      	mov	r5, r0
 8009cae:	bb02      	cbnz	r2, 8009cf2 <_dtoa_r+0xa7a>
 8009cb0:	4601      	mov	r1, r0
 8009cb2:	4650      	mov	r0, sl
 8009cb4:	f001 f802 	bl	800acbc <__mcmp>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	4629      	mov	r1, r5
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8009cc0:	f000 fd76 	bl	800a7b0 <_Bfree>
 8009cc4:	9b07      	ldr	r3, [sp, #28]
 8009cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc8:	9d04      	ldr	r5, [sp, #16]
 8009cca:	ea43 0102 	orr.w	r1, r3, r2
 8009cce:	9b06      	ldr	r3, [sp, #24]
 8009cd0:	4319      	orrs	r1, r3
 8009cd2:	d110      	bne.n	8009cf6 <_dtoa_r+0xa7e>
 8009cd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009cd8:	d029      	beq.n	8009d2e <_dtoa_r+0xab6>
 8009cda:	9b05      	ldr	r3, [sp, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	dd02      	ble.n	8009ce6 <_dtoa_r+0xa6e>
 8009ce0:	9b02      	ldr	r3, [sp, #8]
 8009ce2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	f883 9000 	strb.w	r9, [r3]
 8009cec:	e774      	b.n	8009bd8 <_dtoa_r+0x960>
 8009cee:	4638      	mov	r0, r7
 8009cf0:	e7ba      	b.n	8009c68 <_dtoa_r+0x9f0>
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	e7e1      	b.n	8009cba <_dtoa_r+0xa42>
 8009cf6:	9b05      	ldr	r3, [sp, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	db04      	blt.n	8009d06 <_dtoa_r+0xa8e>
 8009cfc:	9907      	ldr	r1, [sp, #28]
 8009cfe:	430b      	orrs	r3, r1
 8009d00:	9906      	ldr	r1, [sp, #24]
 8009d02:	430b      	orrs	r3, r1
 8009d04:	d120      	bne.n	8009d48 <_dtoa_r+0xad0>
 8009d06:	2a00      	cmp	r2, #0
 8009d08:	dded      	ble.n	8009ce6 <_dtoa_r+0xa6e>
 8009d0a:	4651      	mov	r1, sl
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f000 ff68 	bl	800abe4 <__lshift>
 8009d14:	4631      	mov	r1, r6
 8009d16:	4682      	mov	sl, r0
 8009d18:	f000 ffd0 	bl	800acbc <__mcmp>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	dc03      	bgt.n	8009d28 <_dtoa_r+0xab0>
 8009d20:	d1e1      	bne.n	8009ce6 <_dtoa_r+0xa6e>
 8009d22:	f019 0f01 	tst.w	r9, #1
 8009d26:	d0de      	beq.n	8009ce6 <_dtoa_r+0xa6e>
 8009d28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d2c:	d1d8      	bne.n	8009ce0 <_dtoa_r+0xa68>
 8009d2e:	9a01      	ldr	r2, [sp, #4]
 8009d30:	2339      	movs	r3, #57	; 0x39
 8009d32:	7013      	strb	r3, [r2, #0]
 8009d34:	462b      	mov	r3, r5
 8009d36:	461d      	mov	r5, r3
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d3e:	2a39      	cmp	r2, #57	; 0x39
 8009d40:	d06c      	beq.n	8009e1c <_dtoa_r+0xba4>
 8009d42:	3201      	adds	r2, #1
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	e747      	b.n	8009bd8 <_dtoa_r+0x960>
 8009d48:	2a00      	cmp	r2, #0
 8009d4a:	dd07      	ble.n	8009d5c <_dtoa_r+0xae4>
 8009d4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d50:	d0ed      	beq.n	8009d2e <_dtoa_r+0xab6>
 8009d52:	9a01      	ldr	r2, [sp, #4]
 8009d54:	f109 0301 	add.w	r3, r9, #1
 8009d58:	7013      	strb	r3, [r2, #0]
 8009d5a:	e73d      	b.n	8009bd8 <_dtoa_r+0x960>
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	9a08      	ldr	r2, [sp, #32]
 8009d60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d043      	beq.n	8009df0 <_dtoa_r+0xb78>
 8009d68:	4651      	mov	r1, sl
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	220a      	movs	r2, #10
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 fd40 	bl	800a7f4 <__multadd>
 8009d74:	45b8      	cmp	r8, r7
 8009d76:	4682      	mov	sl, r0
 8009d78:	f04f 0300 	mov.w	r3, #0
 8009d7c:	f04f 020a 	mov.w	r2, #10
 8009d80:	4641      	mov	r1, r8
 8009d82:	4620      	mov	r0, r4
 8009d84:	d107      	bne.n	8009d96 <_dtoa_r+0xb1e>
 8009d86:	f000 fd35 	bl	800a7f4 <__multadd>
 8009d8a:	4680      	mov	r8, r0
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	9b04      	ldr	r3, [sp, #16]
 8009d90:	3301      	adds	r3, #1
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	e775      	b.n	8009c82 <_dtoa_r+0xa0a>
 8009d96:	f000 fd2d 	bl	800a7f4 <__multadd>
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	2300      	movs	r3, #0
 8009da0:	220a      	movs	r2, #10
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 fd26 	bl	800a7f4 <__multadd>
 8009da8:	4607      	mov	r7, r0
 8009daa:	e7f0      	b.n	8009d8e <_dtoa_r+0xb16>
 8009dac:	9b04      	ldr	r3, [sp, #16]
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	9d00      	ldr	r5, [sp, #0]
 8009db2:	4631      	mov	r1, r6
 8009db4:	4650      	mov	r0, sl
 8009db6:	f7ff f9d7 	bl	8009168 <quorem>
 8009dba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	f805 9b01 	strb.w	r9, [r5], #1
 8009dc4:	1aea      	subs	r2, r5, r3
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	dd07      	ble.n	8009ddc <_dtoa_r+0xb64>
 8009dcc:	4651      	mov	r1, sl
 8009dce:	2300      	movs	r3, #0
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f000 fd0e 	bl	800a7f4 <__multadd>
 8009dd8:	4682      	mov	sl, r0
 8009dda:	e7ea      	b.n	8009db2 <_dtoa_r+0xb3a>
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfc8      	it	gt
 8009de2:	461d      	movgt	r5, r3
 8009de4:	9b00      	ldr	r3, [sp, #0]
 8009de6:	bfd8      	it	le
 8009de8:	2501      	movle	r5, #1
 8009dea:	441d      	add	r5, r3
 8009dec:	f04f 0800 	mov.w	r8, #0
 8009df0:	4651      	mov	r1, sl
 8009df2:	2201      	movs	r2, #1
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fef5 	bl	800abe4 <__lshift>
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	f000 ff5d 	bl	800acbc <__mcmp>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	dc96      	bgt.n	8009d34 <_dtoa_r+0xabc>
 8009e06:	d102      	bne.n	8009e0e <_dtoa_r+0xb96>
 8009e08:	f019 0f01 	tst.w	r9, #1
 8009e0c:	d192      	bne.n	8009d34 <_dtoa_r+0xabc>
 8009e0e:	462b      	mov	r3, r5
 8009e10:	461d      	mov	r5, r3
 8009e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e16:	2a30      	cmp	r2, #48	; 0x30
 8009e18:	d0fa      	beq.n	8009e10 <_dtoa_r+0xb98>
 8009e1a:	e6dd      	b.n	8009bd8 <_dtoa_r+0x960>
 8009e1c:	9a00      	ldr	r2, [sp, #0]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d189      	bne.n	8009d36 <_dtoa_r+0xabe>
 8009e22:	f10b 0b01 	add.w	fp, fp, #1
 8009e26:	2331      	movs	r3, #49	; 0x31
 8009e28:	e796      	b.n	8009d58 <_dtoa_r+0xae0>
 8009e2a:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <_dtoa_r+0xbdc>)
 8009e2c:	f7ff ba99 	b.w	8009362 <_dtoa_r+0xea>
 8009e30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f47f aa6d 	bne.w	8009312 <_dtoa_r+0x9a>
 8009e38:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <_dtoa_r+0xbe0>)
 8009e3a:	f7ff ba92 	b.w	8009362 <_dtoa_r+0xea>
 8009e3e:	9b01      	ldr	r3, [sp, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	dcb5      	bgt.n	8009db0 <_dtoa_r+0xb38>
 8009e44:	9b07      	ldr	r3, [sp, #28]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	f73f aeb1 	bgt.w	8009bae <_dtoa_r+0x936>
 8009e4c:	e7b0      	b.n	8009db0 <_dtoa_r+0xb38>
 8009e4e:	bf00      	nop
 8009e50:	0800be59 	.word	0x0800be59
 8009e54:	0800bdb1 	.word	0x0800bdb1
 8009e58:	0800bddd 	.word	0x0800bddd

08009e5c <_free_r>:
 8009e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	d044      	beq.n	8009eec <_free_r+0x90>
 8009e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e66:	9001      	str	r0, [sp, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f1a1 0404 	sub.w	r4, r1, #4
 8009e6e:	bfb8      	it	lt
 8009e70:	18e4      	addlt	r4, r4, r3
 8009e72:	f000 fc51 	bl	800a718 <__malloc_lock>
 8009e76:	4a1e      	ldr	r2, [pc, #120]	; (8009ef0 <_free_r+0x94>)
 8009e78:	9801      	ldr	r0, [sp, #4]
 8009e7a:	6813      	ldr	r3, [r2, #0]
 8009e7c:	b933      	cbnz	r3, 8009e8c <_free_r+0x30>
 8009e7e:	6063      	str	r3, [r4, #4]
 8009e80:	6014      	str	r4, [r2, #0]
 8009e82:	b003      	add	sp, #12
 8009e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e88:	f000 bc4c 	b.w	800a724 <__malloc_unlock>
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	d908      	bls.n	8009ea2 <_free_r+0x46>
 8009e90:	6825      	ldr	r5, [r4, #0]
 8009e92:	1961      	adds	r1, r4, r5
 8009e94:	428b      	cmp	r3, r1
 8009e96:	bf01      	itttt	eq
 8009e98:	6819      	ldreq	r1, [r3, #0]
 8009e9a:	685b      	ldreq	r3, [r3, #4]
 8009e9c:	1949      	addeq	r1, r1, r5
 8009e9e:	6021      	streq	r1, [r4, #0]
 8009ea0:	e7ed      	b.n	8009e7e <_free_r+0x22>
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	b10b      	cbz	r3, 8009eac <_free_r+0x50>
 8009ea8:	42a3      	cmp	r3, r4
 8009eaa:	d9fa      	bls.n	8009ea2 <_free_r+0x46>
 8009eac:	6811      	ldr	r1, [r2, #0]
 8009eae:	1855      	adds	r5, r2, r1
 8009eb0:	42a5      	cmp	r5, r4
 8009eb2:	d10b      	bne.n	8009ecc <_free_r+0x70>
 8009eb4:	6824      	ldr	r4, [r4, #0]
 8009eb6:	4421      	add	r1, r4
 8009eb8:	1854      	adds	r4, r2, r1
 8009eba:	42a3      	cmp	r3, r4
 8009ebc:	6011      	str	r1, [r2, #0]
 8009ebe:	d1e0      	bne.n	8009e82 <_free_r+0x26>
 8009ec0:	681c      	ldr	r4, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	6053      	str	r3, [r2, #4]
 8009ec6:	440c      	add	r4, r1
 8009ec8:	6014      	str	r4, [r2, #0]
 8009eca:	e7da      	b.n	8009e82 <_free_r+0x26>
 8009ecc:	d902      	bls.n	8009ed4 <_free_r+0x78>
 8009ece:	230c      	movs	r3, #12
 8009ed0:	6003      	str	r3, [r0, #0]
 8009ed2:	e7d6      	b.n	8009e82 <_free_r+0x26>
 8009ed4:	6825      	ldr	r5, [r4, #0]
 8009ed6:	1961      	adds	r1, r4, r5
 8009ed8:	428b      	cmp	r3, r1
 8009eda:	bf04      	itt	eq
 8009edc:	6819      	ldreq	r1, [r3, #0]
 8009ede:	685b      	ldreq	r3, [r3, #4]
 8009ee0:	6063      	str	r3, [r4, #4]
 8009ee2:	bf04      	itt	eq
 8009ee4:	1949      	addeq	r1, r1, r5
 8009ee6:	6021      	streq	r1, [r4, #0]
 8009ee8:	6054      	str	r4, [r2, #4]
 8009eea:	e7ca      	b.n	8009e82 <_free_r+0x26>
 8009eec:	b003      	add	sp, #12
 8009eee:	bd30      	pop	{r4, r5, pc}
 8009ef0:	2000450c 	.word	0x2000450c

08009ef4 <rshift>:
 8009ef4:	6903      	ldr	r3, [r0, #16]
 8009ef6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009efe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f02:	f100 0414 	add.w	r4, r0, #20
 8009f06:	dd45      	ble.n	8009f94 <rshift+0xa0>
 8009f08:	f011 011f 	ands.w	r1, r1, #31
 8009f0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f14:	d10c      	bne.n	8009f30 <rshift+0x3c>
 8009f16:	f100 0710 	add.w	r7, r0, #16
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	42b1      	cmp	r1, r6
 8009f1e:	d334      	bcc.n	8009f8a <rshift+0x96>
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	1eea      	subs	r2, r5, #3
 8009f26:	4296      	cmp	r6, r2
 8009f28:	bf38      	it	cc
 8009f2a:	2300      	movcc	r3, #0
 8009f2c:	4423      	add	r3, r4
 8009f2e:	e015      	b.n	8009f5c <rshift+0x68>
 8009f30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f34:	f1c1 0820 	rsb	r8, r1, #32
 8009f38:	40cf      	lsrs	r7, r1
 8009f3a:	f105 0e04 	add.w	lr, r5, #4
 8009f3e:	46a1      	mov	r9, r4
 8009f40:	4576      	cmp	r6, lr
 8009f42:	46f4      	mov	ip, lr
 8009f44:	d815      	bhi.n	8009f72 <rshift+0x7e>
 8009f46:	1a9a      	subs	r2, r3, r2
 8009f48:	0092      	lsls	r2, r2, #2
 8009f4a:	3a04      	subs	r2, #4
 8009f4c:	3501      	adds	r5, #1
 8009f4e:	42ae      	cmp	r6, r5
 8009f50:	bf38      	it	cc
 8009f52:	2200      	movcc	r2, #0
 8009f54:	18a3      	adds	r3, r4, r2
 8009f56:	50a7      	str	r7, [r4, r2]
 8009f58:	b107      	cbz	r7, 8009f5c <rshift+0x68>
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	1b1a      	subs	r2, r3, r4
 8009f5e:	42a3      	cmp	r3, r4
 8009f60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f64:	bf08      	it	eq
 8009f66:	2300      	moveq	r3, #0
 8009f68:	6102      	str	r2, [r0, #16]
 8009f6a:	bf08      	it	eq
 8009f6c:	6143      	streq	r3, [r0, #20]
 8009f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f72:	f8dc c000 	ldr.w	ip, [ip]
 8009f76:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f7a:	ea4c 0707 	orr.w	r7, ip, r7
 8009f7e:	f849 7b04 	str.w	r7, [r9], #4
 8009f82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f86:	40cf      	lsrs	r7, r1
 8009f88:	e7da      	b.n	8009f40 <rshift+0x4c>
 8009f8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f92:	e7c3      	b.n	8009f1c <rshift+0x28>
 8009f94:	4623      	mov	r3, r4
 8009f96:	e7e1      	b.n	8009f5c <rshift+0x68>

08009f98 <__hexdig_fun>:
 8009f98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f9c:	2b09      	cmp	r3, #9
 8009f9e:	d802      	bhi.n	8009fa6 <__hexdig_fun+0xe>
 8009fa0:	3820      	subs	r0, #32
 8009fa2:	b2c0      	uxtb	r0, r0
 8009fa4:	4770      	bx	lr
 8009fa6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009faa:	2b05      	cmp	r3, #5
 8009fac:	d801      	bhi.n	8009fb2 <__hexdig_fun+0x1a>
 8009fae:	3847      	subs	r0, #71	; 0x47
 8009fb0:	e7f7      	b.n	8009fa2 <__hexdig_fun+0xa>
 8009fb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009fb6:	2b05      	cmp	r3, #5
 8009fb8:	d801      	bhi.n	8009fbe <__hexdig_fun+0x26>
 8009fba:	3827      	subs	r0, #39	; 0x27
 8009fbc:	e7f1      	b.n	8009fa2 <__hexdig_fun+0xa>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	4770      	bx	lr
	...

08009fc4 <__gethex>:
 8009fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc8:	4617      	mov	r7, r2
 8009fca:	680a      	ldr	r2, [r1, #0]
 8009fcc:	b085      	sub	sp, #20
 8009fce:	f102 0b02 	add.w	fp, r2, #2
 8009fd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009fd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009fda:	4681      	mov	r9, r0
 8009fdc:	468a      	mov	sl, r1
 8009fde:	9302      	str	r3, [sp, #8]
 8009fe0:	32fe      	adds	r2, #254	; 0xfe
 8009fe2:	eb02 030b 	add.w	r3, r2, fp
 8009fe6:	46d8      	mov	r8, fp
 8009fe8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	2830      	cmp	r0, #48	; 0x30
 8009ff0:	d0f7      	beq.n	8009fe2 <__gethex+0x1e>
 8009ff2:	f7ff ffd1 	bl	8009f98 <__hexdig_fun>
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d138      	bne.n	800a06e <__gethex+0xaa>
 8009ffc:	49a7      	ldr	r1, [pc, #668]	; (800a29c <__gethex+0x2d8>)
 8009ffe:	2201      	movs	r2, #1
 800a000:	4640      	mov	r0, r8
 800a002:	f7fe ffba 	bl	8008f7a <strncmp>
 800a006:	4606      	mov	r6, r0
 800a008:	2800      	cmp	r0, #0
 800a00a:	d169      	bne.n	800a0e0 <__gethex+0x11c>
 800a00c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a010:	465d      	mov	r5, fp
 800a012:	f7ff ffc1 	bl	8009f98 <__hexdig_fun>
 800a016:	2800      	cmp	r0, #0
 800a018:	d064      	beq.n	800a0e4 <__gethex+0x120>
 800a01a:	465a      	mov	r2, fp
 800a01c:	7810      	ldrb	r0, [r2, #0]
 800a01e:	2830      	cmp	r0, #48	; 0x30
 800a020:	4690      	mov	r8, r2
 800a022:	f102 0201 	add.w	r2, r2, #1
 800a026:	d0f9      	beq.n	800a01c <__gethex+0x58>
 800a028:	f7ff ffb6 	bl	8009f98 <__hexdig_fun>
 800a02c:	2301      	movs	r3, #1
 800a02e:	fab0 f480 	clz	r4, r0
 800a032:	0964      	lsrs	r4, r4, #5
 800a034:	465e      	mov	r6, fp
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	4642      	mov	r2, r8
 800a03a:	4615      	mov	r5, r2
 800a03c:	3201      	adds	r2, #1
 800a03e:	7828      	ldrb	r0, [r5, #0]
 800a040:	f7ff ffaa 	bl	8009f98 <__hexdig_fun>
 800a044:	2800      	cmp	r0, #0
 800a046:	d1f8      	bne.n	800a03a <__gethex+0x76>
 800a048:	4994      	ldr	r1, [pc, #592]	; (800a29c <__gethex+0x2d8>)
 800a04a:	2201      	movs	r2, #1
 800a04c:	4628      	mov	r0, r5
 800a04e:	f7fe ff94 	bl	8008f7a <strncmp>
 800a052:	b978      	cbnz	r0, 800a074 <__gethex+0xb0>
 800a054:	b946      	cbnz	r6, 800a068 <__gethex+0xa4>
 800a056:	1c6e      	adds	r6, r5, #1
 800a058:	4632      	mov	r2, r6
 800a05a:	4615      	mov	r5, r2
 800a05c:	3201      	adds	r2, #1
 800a05e:	7828      	ldrb	r0, [r5, #0]
 800a060:	f7ff ff9a 	bl	8009f98 <__hexdig_fun>
 800a064:	2800      	cmp	r0, #0
 800a066:	d1f8      	bne.n	800a05a <__gethex+0x96>
 800a068:	1b73      	subs	r3, r6, r5
 800a06a:	009e      	lsls	r6, r3, #2
 800a06c:	e004      	b.n	800a078 <__gethex+0xb4>
 800a06e:	2400      	movs	r4, #0
 800a070:	4626      	mov	r6, r4
 800a072:	e7e1      	b.n	800a038 <__gethex+0x74>
 800a074:	2e00      	cmp	r6, #0
 800a076:	d1f7      	bne.n	800a068 <__gethex+0xa4>
 800a078:	782b      	ldrb	r3, [r5, #0]
 800a07a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a07e:	2b50      	cmp	r3, #80	; 0x50
 800a080:	d13d      	bne.n	800a0fe <__gethex+0x13a>
 800a082:	786b      	ldrb	r3, [r5, #1]
 800a084:	2b2b      	cmp	r3, #43	; 0x2b
 800a086:	d02f      	beq.n	800a0e8 <__gethex+0x124>
 800a088:	2b2d      	cmp	r3, #45	; 0x2d
 800a08a:	d031      	beq.n	800a0f0 <__gethex+0x12c>
 800a08c:	1c69      	adds	r1, r5, #1
 800a08e:	f04f 0b00 	mov.w	fp, #0
 800a092:	7808      	ldrb	r0, [r1, #0]
 800a094:	f7ff ff80 	bl	8009f98 <__hexdig_fun>
 800a098:	1e42      	subs	r2, r0, #1
 800a09a:	b2d2      	uxtb	r2, r2
 800a09c:	2a18      	cmp	r2, #24
 800a09e:	d82e      	bhi.n	800a0fe <__gethex+0x13a>
 800a0a0:	f1a0 0210 	sub.w	r2, r0, #16
 800a0a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0a8:	f7ff ff76 	bl	8009f98 <__hexdig_fun>
 800a0ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800a0b0:	fa5f fc8c 	uxtb.w	ip, ip
 800a0b4:	f1bc 0f18 	cmp.w	ip, #24
 800a0b8:	d91d      	bls.n	800a0f6 <__gethex+0x132>
 800a0ba:	f1bb 0f00 	cmp.w	fp, #0
 800a0be:	d000      	beq.n	800a0c2 <__gethex+0xfe>
 800a0c0:	4252      	negs	r2, r2
 800a0c2:	4416      	add	r6, r2
 800a0c4:	f8ca 1000 	str.w	r1, [sl]
 800a0c8:	b1dc      	cbz	r4, 800a102 <__gethex+0x13e>
 800a0ca:	9b01      	ldr	r3, [sp, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	bf14      	ite	ne
 800a0d0:	f04f 0800 	movne.w	r8, #0
 800a0d4:	f04f 0806 	moveq.w	r8, #6
 800a0d8:	4640      	mov	r0, r8
 800a0da:	b005      	add	sp, #20
 800a0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e0:	4645      	mov	r5, r8
 800a0e2:	4626      	mov	r6, r4
 800a0e4:	2401      	movs	r4, #1
 800a0e6:	e7c7      	b.n	800a078 <__gethex+0xb4>
 800a0e8:	f04f 0b00 	mov.w	fp, #0
 800a0ec:	1ca9      	adds	r1, r5, #2
 800a0ee:	e7d0      	b.n	800a092 <__gethex+0xce>
 800a0f0:	f04f 0b01 	mov.w	fp, #1
 800a0f4:	e7fa      	b.n	800a0ec <__gethex+0x128>
 800a0f6:	230a      	movs	r3, #10
 800a0f8:	fb03 0002 	mla	r0, r3, r2, r0
 800a0fc:	e7d0      	b.n	800a0a0 <__gethex+0xdc>
 800a0fe:	4629      	mov	r1, r5
 800a100:	e7e0      	b.n	800a0c4 <__gethex+0x100>
 800a102:	eba5 0308 	sub.w	r3, r5, r8
 800a106:	3b01      	subs	r3, #1
 800a108:	4621      	mov	r1, r4
 800a10a:	2b07      	cmp	r3, #7
 800a10c:	dc0a      	bgt.n	800a124 <__gethex+0x160>
 800a10e:	4648      	mov	r0, r9
 800a110:	f000 fb0e 	bl	800a730 <_Balloc>
 800a114:	4604      	mov	r4, r0
 800a116:	b940      	cbnz	r0, 800a12a <__gethex+0x166>
 800a118:	4b61      	ldr	r3, [pc, #388]	; (800a2a0 <__gethex+0x2dc>)
 800a11a:	4602      	mov	r2, r0
 800a11c:	21e4      	movs	r1, #228	; 0xe4
 800a11e:	4861      	ldr	r0, [pc, #388]	; (800a2a4 <__gethex+0x2e0>)
 800a120:	f001 f9f0 	bl	800b504 <__assert_func>
 800a124:	3101      	adds	r1, #1
 800a126:	105b      	asrs	r3, r3, #1
 800a128:	e7ef      	b.n	800a10a <__gethex+0x146>
 800a12a:	f100 0a14 	add.w	sl, r0, #20
 800a12e:	2300      	movs	r3, #0
 800a130:	495a      	ldr	r1, [pc, #360]	; (800a29c <__gethex+0x2d8>)
 800a132:	f8cd a004 	str.w	sl, [sp, #4]
 800a136:	469b      	mov	fp, r3
 800a138:	45a8      	cmp	r8, r5
 800a13a:	d342      	bcc.n	800a1c2 <__gethex+0x1fe>
 800a13c:	9801      	ldr	r0, [sp, #4]
 800a13e:	f840 bb04 	str.w	fp, [r0], #4
 800a142:	eba0 000a 	sub.w	r0, r0, sl
 800a146:	1080      	asrs	r0, r0, #2
 800a148:	6120      	str	r0, [r4, #16]
 800a14a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a14e:	4658      	mov	r0, fp
 800a150:	f000 fbe0 	bl	800a914 <__hi0bits>
 800a154:	683d      	ldr	r5, [r7, #0]
 800a156:	eba8 0000 	sub.w	r0, r8, r0
 800a15a:	42a8      	cmp	r0, r5
 800a15c:	dd59      	ble.n	800a212 <__gethex+0x24e>
 800a15e:	eba0 0805 	sub.w	r8, r0, r5
 800a162:	4641      	mov	r1, r8
 800a164:	4620      	mov	r0, r4
 800a166:	f000 ff6f 	bl	800b048 <__any_on>
 800a16a:	4683      	mov	fp, r0
 800a16c:	b1b8      	cbz	r0, 800a19e <__gethex+0x1da>
 800a16e:	f108 33ff 	add.w	r3, r8, #4294967295
 800a172:	1159      	asrs	r1, r3, #5
 800a174:	f003 021f 	and.w	r2, r3, #31
 800a178:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a17c:	f04f 0b01 	mov.w	fp, #1
 800a180:	fa0b f202 	lsl.w	r2, fp, r2
 800a184:	420a      	tst	r2, r1
 800a186:	d00a      	beq.n	800a19e <__gethex+0x1da>
 800a188:	455b      	cmp	r3, fp
 800a18a:	dd06      	ble.n	800a19a <__gethex+0x1d6>
 800a18c:	f1a8 0102 	sub.w	r1, r8, #2
 800a190:	4620      	mov	r0, r4
 800a192:	f000 ff59 	bl	800b048 <__any_on>
 800a196:	2800      	cmp	r0, #0
 800a198:	d138      	bne.n	800a20c <__gethex+0x248>
 800a19a:	f04f 0b02 	mov.w	fp, #2
 800a19e:	4641      	mov	r1, r8
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f7ff fea7 	bl	8009ef4 <rshift>
 800a1a6:	4446      	add	r6, r8
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	42b3      	cmp	r3, r6
 800a1ac:	da41      	bge.n	800a232 <__gethex+0x26e>
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4648      	mov	r0, r9
 800a1b2:	f000 fafd 	bl	800a7b0 <_Bfree>
 800a1b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a1c0:	e78a      	b.n	800a0d8 <__gethex+0x114>
 800a1c2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a1c6:	2a2e      	cmp	r2, #46	; 0x2e
 800a1c8:	d014      	beq.n	800a1f4 <__gethex+0x230>
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d106      	bne.n	800a1dc <__gethex+0x218>
 800a1ce:	9b01      	ldr	r3, [sp, #4]
 800a1d0:	f843 bb04 	str.w	fp, [r3], #4
 800a1d4:	f04f 0b00 	mov.w	fp, #0
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	465b      	mov	r3, fp
 800a1dc:	7828      	ldrb	r0, [r5, #0]
 800a1de:	9303      	str	r3, [sp, #12]
 800a1e0:	f7ff feda 	bl	8009f98 <__hexdig_fun>
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	f000 000f 	and.w	r0, r0, #15
 800a1ea:	4098      	lsls	r0, r3
 800a1ec:	ea4b 0b00 	orr.w	fp, fp, r0
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	e7a1      	b.n	800a138 <__gethex+0x174>
 800a1f4:	45a8      	cmp	r8, r5
 800a1f6:	d8e8      	bhi.n	800a1ca <__gethex+0x206>
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	9303      	str	r3, [sp, #12]
 800a1fe:	f7fe febc 	bl	8008f7a <strncmp>
 800a202:	4926      	ldr	r1, [pc, #152]	; (800a29c <__gethex+0x2d8>)
 800a204:	9b03      	ldr	r3, [sp, #12]
 800a206:	2800      	cmp	r0, #0
 800a208:	d1df      	bne.n	800a1ca <__gethex+0x206>
 800a20a:	e795      	b.n	800a138 <__gethex+0x174>
 800a20c:	f04f 0b03 	mov.w	fp, #3
 800a210:	e7c5      	b.n	800a19e <__gethex+0x1da>
 800a212:	da0b      	bge.n	800a22c <__gethex+0x268>
 800a214:	eba5 0800 	sub.w	r8, r5, r0
 800a218:	4621      	mov	r1, r4
 800a21a:	4642      	mov	r2, r8
 800a21c:	4648      	mov	r0, r9
 800a21e:	f000 fce1 	bl	800abe4 <__lshift>
 800a222:	eba6 0608 	sub.w	r6, r6, r8
 800a226:	4604      	mov	r4, r0
 800a228:	f100 0a14 	add.w	sl, r0, #20
 800a22c:	f04f 0b00 	mov.w	fp, #0
 800a230:	e7ba      	b.n	800a1a8 <__gethex+0x1e4>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	42b3      	cmp	r3, r6
 800a236:	dd73      	ble.n	800a320 <__gethex+0x35c>
 800a238:	1b9e      	subs	r6, r3, r6
 800a23a:	42b5      	cmp	r5, r6
 800a23c:	dc34      	bgt.n	800a2a8 <__gethex+0x2e4>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b02      	cmp	r3, #2
 800a242:	d023      	beq.n	800a28c <__gethex+0x2c8>
 800a244:	2b03      	cmp	r3, #3
 800a246:	d025      	beq.n	800a294 <__gethex+0x2d0>
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d115      	bne.n	800a278 <__gethex+0x2b4>
 800a24c:	42b5      	cmp	r5, r6
 800a24e:	d113      	bne.n	800a278 <__gethex+0x2b4>
 800a250:	2d01      	cmp	r5, #1
 800a252:	d10b      	bne.n	800a26c <__gethex+0x2a8>
 800a254:	9a02      	ldr	r2, [sp, #8]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	2301      	movs	r3, #1
 800a25c:	6123      	str	r3, [r4, #16]
 800a25e:	f8ca 3000 	str.w	r3, [sl]
 800a262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a264:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a268:	601c      	str	r4, [r3, #0]
 800a26a:	e735      	b.n	800a0d8 <__gethex+0x114>
 800a26c:	1e69      	subs	r1, r5, #1
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 feea 	bl	800b048 <__any_on>
 800a274:	2800      	cmp	r0, #0
 800a276:	d1ed      	bne.n	800a254 <__gethex+0x290>
 800a278:	4621      	mov	r1, r4
 800a27a:	4648      	mov	r0, r9
 800a27c:	f000 fa98 	bl	800a7b0 <_Bfree>
 800a280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a282:	2300      	movs	r3, #0
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a28a:	e725      	b.n	800a0d8 <__gethex+0x114>
 800a28c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1f2      	bne.n	800a278 <__gethex+0x2b4>
 800a292:	e7df      	b.n	800a254 <__gethex+0x290>
 800a294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1dc      	bne.n	800a254 <__gethex+0x290>
 800a29a:	e7ed      	b.n	800a278 <__gethex+0x2b4>
 800a29c:	0800bc48 	.word	0x0800bc48
 800a2a0:	0800be59 	.word	0x0800be59
 800a2a4:	0800be6a 	.word	0x0800be6a
 800a2a8:	f106 38ff 	add.w	r8, r6, #4294967295
 800a2ac:	f1bb 0f00 	cmp.w	fp, #0
 800a2b0:	d133      	bne.n	800a31a <__gethex+0x356>
 800a2b2:	f1b8 0f00 	cmp.w	r8, #0
 800a2b6:	d004      	beq.n	800a2c2 <__gethex+0x2fe>
 800a2b8:	4641      	mov	r1, r8
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 fec4 	bl	800b048 <__any_on>
 800a2c0:	4683      	mov	fp, r0
 800a2c2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a2cc:	f008 081f 	and.w	r8, r8, #31
 800a2d0:	fa03 f308 	lsl.w	r3, r3, r8
 800a2d4:	4213      	tst	r3, r2
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4620      	mov	r0, r4
 800a2da:	bf18      	it	ne
 800a2dc:	f04b 0b02 	orrne.w	fp, fp, #2
 800a2e0:	1bad      	subs	r5, r5, r6
 800a2e2:	f7ff fe07 	bl	8009ef4 <rshift>
 800a2e6:	687e      	ldr	r6, [r7, #4]
 800a2e8:	f04f 0802 	mov.w	r8, #2
 800a2ec:	f1bb 0f00 	cmp.w	fp, #0
 800a2f0:	d04a      	beq.n	800a388 <__gethex+0x3c4>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d016      	beq.n	800a326 <__gethex+0x362>
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d018      	beq.n	800a32e <__gethex+0x36a>
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d109      	bne.n	800a314 <__gethex+0x350>
 800a300:	f01b 0f02 	tst.w	fp, #2
 800a304:	d006      	beq.n	800a314 <__gethex+0x350>
 800a306:	f8da 3000 	ldr.w	r3, [sl]
 800a30a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a30e:	f01b 0f01 	tst.w	fp, #1
 800a312:	d10f      	bne.n	800a334 <__gethex+0x370>
 800a314:	f048 0810 	orr.w	r8, r8, #16
 800a318:	e036      	b.n	800a388 <__gethex+0x3c4>
 800a31a:	f04f 0b01 	mov.w	fp, #1
 800a31e:	e7d0      	b.n	800a2c2 <__gethex+0x2fe>
 800a320:	f04f 0801 	mov.w	r8, #1
 800a324:	e7e2      	b.n	800a2ec <__gethex+0x328>
 800a326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a328:	f1c3 0301 	rsb	r3, r3, #1
 800a32c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a32e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a330:	2b00      	cmp	r3, #0
 800a332:	d0ef      	beq.n	800a314 <__gethex+0x350>
 800a334:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a338:	f104 0214 	add.w	r2, r4, #20
 800a33c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a346:	2300      	movs	r3, #0
 800a348:	4694      	mov	ip, r2
 800a34a:	f852 1b04 	ldr.w	r1, [r2], #4
 800a34e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a352:	d01e      	beq.n	800a392 <__gethex+0x3ce>
 800a354:	3101      	adds	r1, #1
 800a356:	f8cc 1000 	str.w	r1, [ip]
 800a35a:	f1b8 0f02 	cmp.w	r8, #2
 800a35e:	f104 0214 	add.w	r2, r4, #20
 800a362:	d13d      	bne.n	800a3e0 <__gethex+0x41c>
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	3b01      	subs	r3, #1
 800a368:	42ab      	cmp	r3, r5
 800a36a:	d10b      	bne.n	800a384 <__gethex+0x3c0>
 800a36c:	1169      	asrs	r1, r5, #5
 800a36e:	2301      	movs	r3, #1
 800a370:	f005 051f 	and.w	r5, r5, #31
 800a374:	fa03 f505 	lsl.w	r5, r3, r5
 800a378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a37c:	421d      	tst	r5, r3
 800a37e:	bf18      	it	ne
 800a380:	f04f 0801 	movne.w	r8, #1
 800a384:	f048 0820 	orr.w	r8, r8, #32
 800a388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a38a:	601c      	str	r4, [r3, #0]
 800a38c:	9b02      	ldr	r3, [sp, #8]
 800a38e:	601e      	str	r6, [r3, #0]
 800a390:	e6a2      	b.n	800a0d8 <__gethex+0x114>
 800a392:	4290      	cmp	r0, r2
 800a394:	f842 3c04 	str.w	r3, [r2, #-4]
 800a398:	d8d6      	bhi.n	800a348 <__gethex+0x384>
 800a39a:	68a2      	ldr	r2, [r4, #8]
 800a39c:	4593      	cmp	fp, r2
 800a39e:	db17      	blt.n	800a3d0 <__gethex+0x40c>
 800a3a0:	6861      	ldr	r1, [r4, #4]
 800a3a2:	4648      	mov	r0, r9
 800a3a4:	3101      	adds	r1, #1
 800a3a6:	f000 f9c3 	bl	800a730 <_Balloc>
 800a3aa:	4682      	mov	sl, r0
 800a3ac:	b918      	cbnz	r0, 800a3b6 <__gethex+0x3f2>
 800a3ae:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <__gethex+0x458>)
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	2184      	movs	r1, #132	; 0x84
 800a3b4:	e6b3      	b.n	800a11e <__gethex+0x15a>
 800a3b6:	6922      	ldr	r2, [r4, #16]
 800a3b8:	3202      	adds	r2, #2
 800a3ba:	f104 010c 	add.w	r1, r4, #12
 800a3be:	0092      	lsls	r2, r2, #2
 800a3c0:	300c      	adds	r0, #12
 800a3c2:	f7fe feb9 	bl	8009138 <memcpy>
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	4648      	mov	r0, r9
 800a3ca:	f000 f9f1 	bl	800a7b0 <_Bfree>
 800a3ce:	4654      	mov	r4, sl
 800a3d0:	6922      	ldr	r2, [r4, #16]
 800a3d2:	1c51      	adds	r1, r2, #1
 800a3d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a3d8:	6121      	str	r1, [r4, #16]
 800a3da:	2101      	movs	r1, #1
 800a3dc:	6151      	str	r1, [r2, #20]
 800a3de:	e7bc      	b.n	800a35a <__gethex+0x396>
 800a3e0:	6921      	ldr	r1, [r4, #16]
 800a3e2:	4559      	cmp	r1, fp
 800a3e4:	dd0b      	ble.n	800a3fe <__gethex+0x43a>
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f7ff fd83 	bl	8009ef4 <rshift>
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	3601      	adds	r6, #1
 800a3f2:	42b3      	cmp	r3, r6
 800a3f4:	f6ff aedb 	blt.w	800a1ae <__gethex+0x1ea>
 800a3f8:	f04f 0801 	mov.w	r8, #1
 800a3fc:	e7c2      	b.n	800a384 <__gethex+0x3c0>
 800a3fe:	f015 051f 	ands.w	r5, r5, #31
 800a402:	d0f9      	beq.n	800a3f8 <__gethex+0x434>
 800a404:	9b01      	ldr	r3, [sp, #4]
 800a406:	441a      	add	r2, r3
 800a408:	f1c5 0520 	rsb	r5, r5, #32
 800a40c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a410:	f000 fa80 	bl	800a914 <__hi0bits>
 800a414:	42a8      	cmp	r0, r5
 800a416:	dbe6      	blt.n	800a3e6 <__gethex+0x422>
 800a418:	e7ee      	b.n	800a3f8 <__gethex+0x434>
 800a41a:	bf00      	nop
 800a41c:	0800be59 	.word	0x0800be59

0800a420 <L_shift>:
 800a420:	f1c2 0208 	rsb	r2, r2, #8
 800a424:	0092      	lsls	r2, r2, #2
 800a426:	b570      	push	{r4, r5, r6, lr}
 800a428:	f1c2 0620 	rsb	r6, r2, #32
 800a42c:	6843      	ldr	r3, [r0, #4]
 800a42e:	6804      	ldr	r4, [r0, #0]
 800a430:	fa03 f506 	lsl.w	r5, r3, r6
 800a434:	432c      	orrs	r4, r5
 800a436:	40d3      	lsrs	r3, r2
 800a438:	6004      	str	r4, [r0, #0]
 800a43a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a43e:	4288      	cmp	r0, r1
 800a440:	d3f4      	bcc.n	800a42c <L_shift+0xc>
 800a442:	bd70      	pop	{r4, r5, r6, pc}

0800a444 <__match>:
 800a444:	b530      	push	{r4, r5, lr}
 800a446:	6803      	ldr	r3, [r0, #0]
 800a448:	3301      	adds	r3, #1
 800a44a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a44e:	b914      	cbnz	r4, 800a456 <__match+0x12>
 800a450:	6003      	str	r3, [r0, #0]
 800a452:	2001      	movs	r0, #1
 800a454:	bd30      	pop	{r4, r5, pc}
 800a456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a45a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a45e:	2d19      	cmp	r5, #25
 800a460:	bf98      	it	ls
 800a462:	3220      	addls	r2, #32
 800a464:	42a2      	cmp	r2, r4
 800a466:	d0f0      	beq.n	800a44a <__match+0x6>
 800a468:	2000      	movs	r0, #0
 800a46a:	e7f3      	b.n	800a454 <__match+0x10>

0800a46c <__hexnan>:
 800a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	680b      	ldr	r3, [r1, #0]
 800a472:	6801      	ldr	r1, [r0, #0]
 800a474:	115e      	asrs	r6, r3, #5
 800a476:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a47a:	f013 031f 	ands.w	r3, r3, #31
 800a47e:	b087      	sub	sp, #28
 800a480:	bf18      	it	ne
 800a482:	3604      	addne	r6, #4
 800a484:	2500      	movs	r5, #0
 800a486:	1f37      	subs	r7, r6, #4
 800a488:	4682      	mov	sl, r0
 800a48a:	4690      	mov	r8, r2
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a492:	46b9      	mov	r9, r7
 800a494:	463c      	mov	r4, r7
 800a496:	9502      	str	r5, [sp, #8]
 800a498:	46ab      	mov	fp, r5
 800a49a:	784a      	ldrb	r2, [r1, #1]
 800a49c:	1c4b      	adds	r3, r1, #1
 800a49e:	9303      	str	r3, [sp, #12]
 800a4a0:	b342      	cbz	r2, 800a4f4 <__hexnan+0x88>
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	9105      	str	r1, [sp, #20]
 800a4a6:	9204      	str	r2, [sp, #16]
 800a4a8:	f7ff fd76 	bl	8009f98 <__hexdig_fun>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d14f      	bne.n	800a550 <__hexnan+0xe4>
 800a4b0:	9a04      	ldr	r2, [sp, #16]
 800a4b2:	9905      	ldr	r1, [sp, #20]
 800a4b4:	2a20      	cmp	r2, #32
 800a4b6:	d818      	bhi.n	800a4ea <__hexnan+0x7e>
 800a4b8:	9b02      	ldr	r3, [sp, #8]
 800a4ba:	459b      	cmp	fp, r3
 800a4bc:	dd13      	ble.n	800a4e6 <__hexnan+0x7a>
 800a4be:	454c      	cmp	r4, r9
 800a4c0:	d206      	bcs.n	800a4d0 <__hexnan+0x64>
 800a4c2:	2d07      	cmp	r5, #7
 800a4c4:	dc04      	bgt.n	800a4d0 <__hexnan+0x64>
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f7ff ffa8 	bl	800a420 <L_shift>
 800a4d0:	4544      	cmp	r4, r8
 800a4d2:	d950      	bls.n	800a576 <__hexnan+0x10a>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f1a4 0904 	sub.w	r9, r4, #4
 800a4da:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4de:	f8cd b008 	str.w	fp, [sp, #8]
 800a4e2:	464c      	mov	r4, r9
 800a4e4:	461d      	mov	r5, r3
 800a4e6:	9903      	ldr	r1, [sp, #12]
 800a4e8:	e7d7      	b.n	800a49a <__hexnan+0x2e>
 800a4ea:	2a29      	cmp	r2, #41	; 0x29
 800a4ec:	d155      	bne.n	800a59a <__hexnan+0x12e>
 800a4ee:	3102      	adds	r1, #2
 800a4f0:	f8ca 1000 	str.w	r1, [sl]
 800a4f4:	f1bb 0f00 	cmp.w	fp, #0
 800a4f8:	d04f      	beq.n	800a59a <__hexnan+0x12e>
 800a4fa:	454c      	cmp	r4, r9
 800a4fc:	d206      	bcs.n	800a50c <__hexnan+0xa0>
 800a4fe:	2d07      	cmp	r5, #7
 800a500:	dc04      	bgt.n	800a50c <__hexnan+0xa0>
 800a502:	462a      	mov	r2, r5
 800a504:	4649      	mov	r1, r9
 800a506:	4620      	mov	r0, r4
 800a508:	f7ff ff8a 	bl	800a420 <L_shift>
 800a50c:	4544      	cmp	r4, r8
 800a50e:	d934      	bls.n	800a57a <__hexnan+0x10e>
 800a510:	f1a8 0204 	sub.w	r2, r8, #4
 800a514:	4623      	mov	r3, r4
 800a516:	f853 1b04 	ldr.w	r1, [r3], #4
 800a51a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a51e:	429f      	cmp	r7, r3
 800a520:	d2f9      	bcs.n	800a516 <__hexnan+0xaa>
 800a522:	1b3b      	subs	r3, r7, r4
 800a524:	f023 0303 	bic.w	r3, r3, #3
 800a528:	3304      	adds	r3, #4
 800a52a:	3e03      	subs	r6, #3
 800a52c:	3401      	adds	r4, #1
 800a52e:	42a6      	cmp	r6, r4
 800a530:	bf38      	it	cc
 800a532:	2304      	movcc	r3, #4
 800a534:	4443      	add	r3, r8
 800a536:	2200      	movs	r2, #0
 800a538:	f843 2b04 	str.w	r2, [r3], #4
 800a53c:	429f      	cmp	r7, r3
 800a53e:	d2fb      	bcs.n	800a538 <__hexnan+0xcc>
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	b91b      	cbnz	r3, 800a54c <__hexnan+0xe0>
 800a544:	4547      	cmp	r7, r8
 800a546:	d126      	bne.n	800a596 <__hexnan+0x12a>
 800a548:	2301      	movs	r3, #1
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	2005      	movs	r0, #5
 800a54e:	e025      	b.n	800a59c <__hexnan+0x130>
 800a550:	3501      	adds	r5, #1
 800a552:	2d08      	cmp	r5, #8
 800a554:	f10b 0b01 	add.w	fp, fp, #1
 800a558:	dd06      	ble.n	800a568 <__hexnan+0xfc>
 800a55a:	4544      	cmp	r4, r8
 800a55c:	d9c3      	bls.n	800a4e6 <__hexnan+0x7a>
 800a55e:	2300      	movs	r3, #0
 800a560:	f844 3c04 	str.w	r3, [r4, #-4]
 800a564:	2501      	movs	r5, #1
 800a566:	3c04      	subs	r4, #4
 800a568:	6822      	ldr	r2, [r4, #0]
 800a56a:	f000 000f 	and.w	r0, r0, #15
 800a56e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a572:	6020      	str	r0, [r4, #0]
 800a574:	e7b7      	b.n	800a4e6 <__hexnan+0x7a>
 800a576:	2508      	movs	r5, #8
 800a578:	e7b5      	b.n	800a4e6 <__hexnan+0x7a>
 800a57a:	9b01      	ldr	r3, [sp, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0df      	beq.n	800a540 <__hexnan+0xd4>
 800a580:	f1c3 0320 	rsb	r3, r3, #32
 800a584:	f04f 32ff 	mov.w	r2, #4294967295
 800a588:	40da      	lsrs	r2, r3
 800a58a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a58e:	4013      	ands	r3, r2
 800a590:	f846 3c04 	str.w	r3, [r6, #-4]
 800a594:	e7d4      	b.n	800a540 <__hexnan+0xd4>
 800a596:	3f04      	subs	r7, #4
 800a598:	e7d2      	b.n	800a540 <__hexnan+0xd4>
 800a59a:	2004      	movs	r0, #4
 800a59c:	b007      	add	sp, #28
 800a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a5a4 <malloc>:
 800a5a4:	4b02      	ldr	r3, [pc, #8]	; (800a5b0 <malloc+0xc>)
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	6818      	ldr	r0, [r3, #0]
 800a5aa:	f000 b823 	b.w	800a5f4 <_malloc_r>
 800a5ae:	bf00      	nop
 800a5b0:	200001e0 	.word	0x200001e0

0800a5b4 <sbrk_aligned>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	4e0e      	ldr	r6, [pc, #56]	; (800a5f0 <sbrk_aligned+0x3c>)
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	6831      	ldr	r1, [r6, #0]
 800a5bc:	4605      	mov	r5, r0
 800a5be:	b911      	cbnz	r1, 800a5c6 <sbrk_aligned+0x12>
 800a5c0:	f000 ff90 	bl	800b4e4 <_sbrk_r>
 800a5c4:	6030      	str	r0, [r6, #0]
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	f000 ff8b 	bl	800b4e4 <_sbrk_r>
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	d00a      	beq.n	800a5e8 <sbrk_aligned+0x34>
 800a5d2:	1cc4      	adds	r4, r0, #3
 800a5d4:	f024 0403 	bic.w	r4, r4, #3
 800a5d8:	42a0      	cmp	r0, r4
 800a5da:	d007      	beq.n	800a5ec <sbrk_aligned+0x38>
 800a5dc:	1a21      	subs	r1, r4, r0
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f000 ff80 	bl	800b4e4 <_sbrk_r>
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d101      	bne.n	800a5ec <sbrk_aligned+0x38>
 800a5e8:	f04f 34ff 	mov.w	r4, #4294967295
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	20004510 	.word	0x20004510

0800a5f4 <_malloc_r>:
 800a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	1ccd      	adds	r5, r1, #3
 800a5fa:	f025 0503 	bic.w	r5, r5, #3
 800a5fe:	3508      	adds	r5, #8
 800a600:	2d0c      	cmp	r5, #12
 800a602:	bf38      	it	cc
 800a604:	250c      	movcc	r5, #12
 800a606:	2d00      	cmp	r5, #0
 800a608:	4607      	mov	r7, r0
 800a60a:	db01      	blt.n	800a610 <_malloc_r+0x1c>
 800a60c:	42a9      	cmp	r1, r5
 800a60e:	d905      	bls.n	800a61c <_malloc_r+0x28>
 800a610:	230c      	movs	r3, #12
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	2600      	movs	r6, #0
 800a616:	4630      	mov	r0, r6
 800a618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a61c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a6f0 <_malloc_r+0xfc>
 800a620:	f000 f87a 	bl	800a718 <__malloc_lock>
 800a624:	f8d8 3000 	ldr.w	r3, [r8]
 800a628:	461c      	mov	r4, r3
 800a62a:	bb5c      	cbnz	r4, 800a684 <_malloc_r+0x90>
 800a62c:	4629      	mov	r1, r5
 800a62e:	4638      	mov	r0, r7
 800a630:	f7ff ffc0 	bl	800a5b4 <sbrk_aligned>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	4604      	mov	r4, r0
 800a638:	d155      	bne.n	800a6e6 <_malloc_r+0xf2>
 800a63a:	f8d8 4000 	ldr.w	r4, [r8]
 800a63e:	4626      	mov	r6, r4
 800a640:	2e00      	cmp	r6, #0
 800a642:	d145      	bne.n	800a6d0 <_malloc_r+0xdc>
 800a644:	2c00      	cmp	r4, #0
 800a646:	d048      	beq.n	800a6da <_malloc_r+0xe6>
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	4631      	mov	r1, r6
 800a64c:	4638      	mov	r0, r7
 800a64e:	eb04 0903 	add.w	r9, r4, r3
 800a652:	f000 ff47 	bl	800b4e4 <_sbrk_r>
 800a656:	4581      	cmp	r9, r0
 800a658:	d13f      	bne.n	800a6da <_malloc_r+0xe6>
 800a65a:	6821      	ldr	r1, [r4, #0]
 800a65c:	1a6d      	subs	r5, r5, r1
 800a65e:	4629      	mov	r1, r5
 800a660:	4638      	mov	r0, r7
 800a662:	f7ff ffa7 	bl	800a5b4 <sbrk_aligned>
 800a666:	3001      	adds	r0, #1
 800a668:	d037      	beq.n	800a6da <_malloc_r+0xe6>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	442b      	add	r3, r5
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	f8d8 3000 	ldr.w	r3, [r8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d038      	beq.n	800a6ea <_malloc_r+0xf6>
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	42a2      	cmp	r2, r4
 800a67c:	d12b      	bne.n	800a6d6 <_malloc_r+0xe2>
 800a67e:	2200      	movs	r2, #0
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	e00f      	b.n	800a6a4 <_malloc_r+0xb0>
 800a684:	6822      	ldr	r2, [r4, #0]
 800a686:	1b52      	subs	r2, r2, r5
 800a688:	d41f      	bmi.n	800a6ca <_malloc_r+0xd6>
 800a68a:	2a0b      	cmp	r2, #11
 800a68c:	d917      	bls.n	800a6be <_malloc_r+0xca>
 800a68e:	1961      	adds	r1, r4, r5
 800a690:	42a3      	cmp	r3, r4
 800a692:	6025      	str	r5, [r4, #0]
 800a694:	bf18      	it	ne
 800a696:	6059      	strne	r1, [r3, #4]
 800a698:	6863      	ldr	r3, [r4, #4]
 800a69a:	bf08      	it	eq
 800a69c:	f8c8 1000 	streq.w	r1, [r8]
 800a6a0:	5162      	str	r2, [r4, r5]
 800a6a2:	604b      	str	r3, [r1, #4]
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f104 060b 	add.w	r6, r4, #11
 800a6aa:	f000 f83b 	bl	800a724 <__malloc_unlock>
 800a6ae:	f026 0607 	bic.w	r6, r6, #7
 800a6b2:	1d23      	adds	r3, r4, #4
 800a6b4:	1af2      	subs	r2, r6, r3
 800a6b6:	d0ae      	beq.n	800a616 <_malloc_r+0x22>
 800a6b8:	1b9b      	subs	r3, r3, r6
 800a6ba:	50a3      	str	r3, [r4, r2]
 800a6bc:	e7ab      	b.n	800a616 <_malloc_r+0x22>
 800a6be:	42a3      	cmp	r3, r4
 800a6c0:	6862      	ldr	r2, [r4, #4]
 800a6c2:	d1dd      	bne.n	800a680 <_malloc_r+0x8c>
 800a6c4:	f8c8 2000 	str.w	r2, [r8]
 800a6c8:	e7ec      	b.n	800a6a4 <_malloc_r+0xb0>
 800a6ca:	4623      	mov	r3, r4
 800a6cc:	6864      	ldr	r4, [r4, #4]
 800a6ce:	e7ac      	b.n	800a62a <_malloc_r+0x36>
 800a6d0:	4634      	mov	r4, r6
 800a6d2:	6876      	ldr	r6, [r6, #4]
 800a6d4:	e7b4      	b.n	800a640 <_malloc_r+0x4c>
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	e7cc      	b.n	800a674 <_malloc_r+0x80>
 800a6da:	230c      	movs	r3, #12
 800a6dc:	603b      	str	r3, [r7, #0]
 800a6de:	4638      	mov	r0, r7
 800a6e0:	f000 f820 	bl	800a724 <__malloc_unlock>
 800a6e4:	e797      	b.n	800a616 <_malloc_r+0x22>
 800a6e6:	6025      	str	r5, [r4, #0]
 800a6e8:	e7dc      	b.n	800a6a4 <_malloc_r+0xb0>
 800a6ea:	605b      	str	r3, [r3, #4]
 800a6ec:	deff      	udf	#255	; 0xff
 800a6ee:	bf00      	nop
 800a6f0:	2000450c 	.word	0x2000450c

0800a6f4 <__ascii_mbtowc>:
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	b901      	cbnz	r1, 800a6fa <__ascii_mbtowc+0x6>
 800a6f8:	a901      	add	r1, sp, #4
 800a6fa:	b142      	cbz	r2, 800a70e <__ascii_mbtowc+0x1a>
 800a6fc:	b14b      	cbz	r3, 800a712 <__ascii_mbtowc+0x1e>
 800a6fe:	7813      	ldrb	r3, [r2, #0]
 800a700:	600b      	str	r3, [r1, #0]
 800a702:	7812      	ldrb	r2, [r2, #0]
 800a704:	1e10      	subs	r0, r2, #0
 800a706:	bf18      	it	ne
 800a708:	2001      	movne	r0, #1
 800a70a:	b002      	add	sp, #8
 800a70c:	4770      	bx	lr
 800a70e:	4610      	mov	r0, r2
 800a710:	e7fb      	b.n	800a70a <__ascii_mbtowc+0x16>
 800a712:	f06f 0001 	mvn.w	r0, #1
 800a716:	e7f8      	b.n	800a70a <__ascii_mbtowc+0x16>

0800a718 <__malloc_lock>:
 800a718:	4801      	ldr	r0, [pc, #4]	; (800a720 <__malloc_lock+0x8>)
 800a71a:	f7fe bd0b 	b.w	8009134 <__retarget_lock_acquire_recursive>
 800a71e:	bf00      	nop
 800a720:	20004508 	.word	0x20004508

0800a724 <__malloc_unlock>:
 800a724:	4801      	ldr	r0, [pc, #4]	; (800a72c <__malloc_unlock+0x8>)
 800a726:	f7fe bd06 	b.w	8009136 <__retarget_lock_release_recursive>
 800a72a:	bf00      	nop
 800a72c:	20004508 	.word	0x20004508

0800a730 <_Balloc>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	69c6      	ldr	r6, [r0, #28]
 800a734:	4604      	mov	r4, r0
 800a736:	460d      	mov	r5, r1
 800a738:	b976      	cbnz	r6, 800a758 <_Balloc+0x28>
 800a73a:	2010      	movs	r0, #16
 800a73c:	f7ff ff32 	bl	800a5a4 <malloc>
 800a740:	4602      	mov	r2, r0
 800a742:	61e0      	str	r0, [r4, #28]
 800a744:	b920      	cbnz	r0, 800a750 <_Balloc+0x20>
 800a746:	4b18      	ldr	r3, [pc, #96]	; (800a7a8 <_Balloc+0x78>)
 800a748:	4818      	ldr	r0, [pc, #96]	; (800a7ac <_Balloc+0x7c>)
 800a74a:	216b      	movs	r1, #107	; 0x6b
 800a74c:	f000 feda 	bl	800b504 <__assert_func>
 800a750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a754:	6006      	str	r6, [r0, #0]
 800a756:	60c6      	str	r6, [r0, #12]
 800a758:	69e6      	ldr	r6, [r4, #28]
 800a75a:	68f3      	ldr	r3, [r6, #12]
 800a75c:	b183      	cbz	r3, 800a780 <_Balloc+0x50>
 800a75e:	69e3      	ldr	r3, [r4, #28]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a766:	b9b8      	cbnz	r0, 800a798 <_Balloc+0x68>
 800a768:	2101      	movs	r1, #1
 800a76a:	fa01 f605 	lsl.w	r6, r1, r5
 800a76e:	1d72      	adds	r2, r6, #5
 800a770:	0092      	lsls	r2, r2, #2
 800a772:	4620      	mov	r0, r4
 800a774:	f000 fee4 	bl	800b540 <_calloc_r>
 800a778:	b160      	cbz	r0, 800a794 <_Balloc+0x64>
 800a77a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a77e:	e00e      	b.n	800a79e <_Balloc+0x6e>
 800a780:	2221      	movs	r2, #33	; 0x21
 800a782:	2104      	movs	r1, #4
 800a784:	4620      	mov	r0, r4
 800a786:	f000 fedb 	bl	800b540 <_calloc_r>
 800a78a:	69e3      	ldr	r3, [r4, #28]
 800a78c:	60f0      	str	r0, [r6, #12]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1e4      	bne.n	800a75e <_Balloc+0x2e>
 800a794:	2000      	movs	r0, #0
 800a796:	bd70      	pop	{r4, r5, r6, pc}
 800a798:	6802      	ldr	r2, [r0, #0]
 800a79a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7a4:	e7f7      	b.n	800a796 <_Balloc+0x66>
 800a7a6:	bf00      	nop
 800a7a8:	0800bdea 	.word	0x0800bdea
 800a7ac:	0800beca 	.word	0x0800beca

0800a7b0 <_Bfree>:
 800a7b0:	b570      	push	{r4, r5, r6, lr}
 800a7b2:	69c6      	ldr	r6, [r0, #28]
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	b976      	cbnz	r6, 800a7d8 <_Bfree+0x28>
 800a7ba:	2010      	movs	r0, #16
 800a7bc:	f7ff fef2 	bl	800a5a4 <malloc>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	61e8      	str	r0, [r5, #28]
 800a7c4:	b920      	cbnz	r0, 800a7d0 <_Bfree+0x20>
 800a7c6:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <_Bfree+0x3c>)
 800a7c8:	4809      	ldr	r0, [pc, #36]	; (800a7f0 <_Bfree+0x40>)
 800a7ca:	218f      	movs	r1, #143	; 0x8f
 800a7cc:	f000 fe9a 	bl	800b504 <__assert_func>
 800a7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7d4:	6006      	str	r6, [r0, #0]
 800a7d6:	60c6      	str	r6, [r0, #12]
 800a7d8:	b13c      	cbz	r4, 800a7ea <_Bfree+0x3a>
 800a7da:	69eb      	ldr	r3, [r5, #28]
 800a7dc:	6862      	ldr	r2, [r4, #4]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7e4:	6021      	str	r1, [r4, #0]
 800a7e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7ea:	bd70      	pop	{r4, r5, r6, pc}
 800a7ec:	0800bdea 	.word	0x0800bdea
 800a7f0:	0800beca 	.word	0x0800beca

0800a7f4 <__multadd>:
 800a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f8:	690d      	ldr	r5, [r1, #16]
 800a7fa:	4607      	mov	r7, r0
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	461e      	mov	r6, r3
 800a800:	f101 0c14 	add.w	ip, r1, #20
 800a804:	2000      	movs	r0, #0
 800a806:	f8dc 3000 	ldr.w	r3, [ip]
 800a80a:	b299      	uxth	r1, r3
 800a80c:	fb02 6101 	mla	r1, r2, r1, r6
 800a810:	0c1e      	lsrs	r6, r3, #16
 800a812:	0c0b      	lsrs	r3, r1, #16
 800a814:	fb02 3306 	mla	r3, r2, r6, r3
 800a818:	b289      	uxth	r1, r1
 800a81a:	3001      	adds	r0, #1
 800a81c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a820:	4285      	cmp	r5, r0
 800a822:	f84c 1b04 	str.w	r1, [ip], #4
 800a826:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a82a:	dcec      	bgt.n	800a806 <__multadd+0x12>
 800a82c:	b30e      	cbz	r6, 800a872 <__multadd+0x7e>
 800a82e:	68a3      	ldr	r3, [r4, #8]
 800a830:	42ab      	cmp	r3, r5
 800a832:	dc19      	bgt.n	800a868 <__multadd+0x74>
 800a834:	6861      	ldr	r1, [r4, #4]
 800a836:	4638      	mov	r0, r7
 800a838:	3101      	adds	r1, #1
 800a83a:	f7ff ff79 	bl	800a730 <_Balloc>
 800a83e:	4680      	mov	r8, r0
 800a840:	b928      	cbnz	r0, 800a84e <__multadd+0x5a>
 800a842:	4602      	mov	r2, r0
 800a844:	4b0c      	ldr	r3, [pc, #48]	; (800a878 <__multadd+0x84>)
 800a846:	480d      	ldr	r0, [pc, #52]	; (800a87c <__multadd+0x88>)
 800a848:	21ba      	movs	r1, #186	; 0xba
 800a84a:	f000 fe5b 	bl	800b504 <__assert_func>
 800a84e:	6922      	ldr	r2, [r4, #16]
 800a850:	3202      	adds	r2, #2
 800a852:	f104 010c 	add.w	r1, r4, #12
 800a856:	0092      	lsls	r2, r2, #2
 800a858:	300c      	adds	r0, #12
 800a85a:	f7fe fc6d 	bl	8009138 <memcpy>
 800a85e:	4621      	mov	r1, r4
 800a860:	4638      	mov	r0, r7
 800a862:	f7ff ffa5 	bl	800a7b0 <_Bfree>
 800a866:	4644      	mov	r4, r8
 800a868:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a86c:	3501      	adds	r5, #1
 800a86e:	615e      	str	r6, [r3, #20]
 800a870:	6125      	str	r5, [r4, #16]
 800a872:	4620      	mov	r0, r4
 800a874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a878:	0800be59 	.word	0x0800be59
 800a87c:	0800beca 	.word	0x0800beca

0800a880 <__s2b>:
 800a880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a884:	460c      	mov	r4, r1
 800a886:	4615      	mov	r5, r2
 800a888:	461f      	mov	r7, r3
 800a88a:	2209      	movs	r2, #9
 800a88c:	3308      	adds	r3, #8
 800a88e:	4606      	mov	r6, r0
 800a890:	fb93 f3f2 	sdiv	r3, r3, r2
 800a894:	2100      	movs	r1, #0
 800a896:	2201      	movs	r2, #1
 800a898:	429a      	cmp	r2, r3
 800a89a:	db09      	blt.n	800a8b0 <__s2b+0x30>
 800a89c:	4630      	mov	r0, r6
 800a89e:	f7ff ff47 	bl	800a730 <_Balloc>
 800a8a2:	b940      	cbnz	r0, 800a8b6 <__s2b+0x36>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	4b19      	ldr	r3, [pc, #100]	; (800a90c <__s2b+0x8c>)
 800a8a8:	4819      	ldr	r0, [pc, #100]	; (800a910 <__s2b+0x90>)
 800a8aa:	21d3      	movs	r1, #211	; 0xd3
 800a8ac:	f000 fe2a 	bl	800b504 <__assert_func>
 800a8b0:	0052      	lsls	r2, r2, #1
 800a8b2:	3101      	adds	r1, #1
 800a8b4:	e7f0      	b.n	800a898 <__s2b+0x18>
 800a8b6:	9b08      	ldr	r3, [sp, #32]
 800a8b8:	6143      	str	r3, [r0, #20]
 800a8ba:	2d09      	cmp	r5, #9
 800a8bc:	f04f 0301 	mov.w	r3, #1
 800a8c0:	6103      	str	r3, [r0, #16]
 800a8c2:	dd16      	ble.n	800a8f2 <__s2b+0x72>
 800a8c4:	f104 0909 	add.w	r9, r4, #9
 800a8c8:	46c8      	mov	r8, r9
 800a8ca:	442c      	add	r4, r5
 800a8cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a8d0:	4601      	mov	r1, r0
 800a8d2:	3b30      	subs	r3, #48	; 0x30
 800a8d4:	220a      	movs	r2, #10
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f7ff ff8c 	bl	800a7f4 <__multadd>
 800a8dc:	45a0      	cmp	r8, r4
 800a8de:	d1f5      	bne.n	800a8cc <__s2b+0x4c>
 800a8e0:	f1a5 0408 	sub.w	r4, r5, #8
 800a8e4:	444c      	add	r4, r9
 800a8e6:	1b2d      	subs	r5, r5, r4
 800a8e8:	1963      	adds	r3, r4, r5
 800a8ea:	42bb      	cmp	r3, r7
 800a8ec:	db04      	blt.n	800a8f8 <__s2b+0x78>
 800a8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f2:	340a      	adds	r4, #10
 800a8f4:	2509      	movs	r5, #9
 800a8f6:	e7f6      	b.n	800a8e6 <__s2b+0x66>
 800a8f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	3b30      	subs	r3, #48	; 0x30
 800a900:	220a      	movs	r2, #10
 800a902:	4630      	mov	r0, r6
 800a904:	f7ff ff76 	bl	800a7f4 <__multadd>
 800a908:	e7ee      	b.n	800a8e8 <__s2b+0x68>
 800a90a:	bf00      	nop
 800a90c:	0800be59 	.word	0x0800be59
 800a910:	0800beca 	.word	0x0800beca

0800a914 <__hi0bits>:
 800a914:	0c03      	lsrs	r3, r0, #16
 800a916:	041b      	lsls	r3, r3, #16
 800a918:	b9d3      	cbnz	r3, 800a950 <__hi0bits+0x3c>
 800a91a:	0400      	lsls	r0, r0, #16
 800a91c:	2310      	movs	r3, #16
 800a91e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a922:	bf04      	itt	eq
 800a924:	0200      	lsleq	r0, r0, #8
 800a926:	3308      	addeq	r3, #8
 800a928:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a92c:	bf04      	itt	eq
 800a92e:	0100      	lsleq	r0, r0, #4
 800a930:	3304      	addeq	r3, #4
 800a932:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a936:	bf04      	itt	eq
 800a938:	0080      	lsleq	r0, r0, #2
 800a93a:	3302      	addeq	r3, #2
 800a93c:	2800      	cmp	r0, #0
 800a93e:	db05      	blt.n	800a94c <__hi0bits+0x38>
 800a940:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a944:	f103 0301 	add.w	r3, r3, #1
 800a948:	bf08      	it	eq
 800a94a:	2320      	moveq	r3, #32
 800a94c:	4618      	mov	r0, r3
 800a94e:	4770      	bx	lr
 800a950:	2300      	movs	r3, #0
 800a952:	e7e4      	b.n	800a91e <__hi0bits+0xa>

0800a954 <__lo0bits>:
 800a954:	6803      	ldr	r3, [r0, #0]
 800a956:	f013 0207 	ands.w	r2, r3, #7
 800a95a:	d00c      	beq.n	800a976 <__lo0bits+0x22>
 800a95c:	07d9      	lsls	r1, r3, #31
 800a95e:	d422      	bmi.n	800a9a6 <__lo0bits+0x52>
 800a960:	079a      	lsls	r2, r3, #30
 800a962:	bf49      	itett	mi
 800a964:	085b      	lsrmi	r3, r3, #1
 800a966:	089b      	lsrpl	r3, r3, #2
 800a968:	6003      	strmi	r3, [r0, #0]
 800a96a:	2201      	movmi	r2, #1
 800a96c:	bf5c      	itt	pl
 800a96e:	6003      	strpl	r3, [r0, #0]
 800a970:	2202      	movpl	r2, #2
 800a972:	4610      	mov	r0, r2
 800a974:	4770      	bx	lr
 800a976:	b299      	uxth	r1, r3
 800a978:	b909      	cbnz	r1, 800a97e <__lo0bits+0x2a>
 800a97a:	0c1b      	lsrs	r3, r3, #16
 800a97c:	2210      	movs	r2, #16
 800a97e:	b2d9      	uxtb	r1, r3
 800a980:	b909      	cbnz	r1, 800a986 <__lo0bits+0x32>
 800a982:	3208      	adds	r2, #8
 800a984:	0a1b      	lsrs	r3, r3, #8
 800a986:	0719      	lsls	r1, r3, #28
 800a988:	bf04      	itt	eq
 800a98a:	091b      	lsreq	r3, r3, #4
 800a98c:	3204      	addeq	r2, #4
 800a98e:	0799      	lsls	r1, r3, #30
 800a990:	bf04      	itt	eq
 800a992:	089b      	lsreq	r3, r3, #2
 800a994:	3202      	addeq	r2, #2
 800a996:	07d9      	lsls	r1, r3, #31
 800a998:	d403      	bmi.n	800a9a2 <__lo0bits+0x4e>
 800a99a:	085b      	lsrs	r3, r3, #1
 800a99c:	f102 0201 	add.w	r2, r2, #1
 800a9a0:	d003      	beq.n	800a9aa <__lo0bits+0x56>
 800a9a2:	6003      	str	r3, [r0, #0]
 800a9a4:	e7e5      	b.n	800a972 <__lo0bits+0x1e>
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	e7e3      	b.n	800a972 <__lo0bits+0x1e>
 800a9aa:	2220      	movs	r2, #32
 800a9ac:	e7e1      	b.n	800a972 <__lo0bits+0x1e>
	...

0800a9b0 <__i2b>:
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	2101      	movs	r1, #1
 800a9b6:	f7ff febb 	bl	800a730 <_Balloc>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	b928      	cbnz	r0, 800a9ca <__i2b+0x1a>
 800a9be:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <__i2b+0x24>)
 800a9c0:	4805      	ldr	r0, [pc, #20]	; (800a9d8 <__i2b+0x28>)
 800a9c2:	f240 1145 	movw	r1, #325	; 0x145
 800a9c6:	f000 fd9d 	bl	800b504 <__assert_func>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	6144      	str	r4, [r0, #20]
 800a9ce:	6103      	str	r3, [r0, #16]
 800a9d0:	bd10      	pop	{r4, pc}
 800a9d2:	bf00      	nop
 800a9d4:	0800be59 	.word	0x0800be59
 800a9d8:	0800beca 	.word	0x0800beca

0800a9dc <__multiply>:
 800a9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	4691      	mov	r9, r2
 800a9e2:	690a      	ldr	r2, [r1, #16]
 800a9e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	bfb8      	it	lt
 800a9ec:	460b      	movlt	r3, r1
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	bfbc      	itt	lt
 800a9f2:	464c      	movlt	r4, r9
 800a9f4:	4699      	movlt	r9, r3
 800a9f6:	6927      	ldr	r7, [r4, #16]
 800a9f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a9fc:	68a3      	ldr	r3, [r4, #8]
 800a9fe:	6861      	ldr	r1, [r4, #4]
 800aa00:	eb07 060a 	add.w	r6, r7, sl
 800aa04:	42b3      	cmp	r3, r6
 800aa06:	b085      	sub	sp, #20
 800aa08:	bfb8      	it	lt
 800aa0a:	3101      	addlt	r1, #1
 800aa0c:	f7ff fe90 	bl	800a730 <_Balloc>
 800aa10:	b930      	cbnz	r0, 800aa20 <__multiply+0x44>
 800aa12:	4602      	mov	r2, r0
 800aa14:	4b44      	ldr	r3, [pc, #272]	; (800ab28 <__multiply+0x14c>)
 800aa16:	4845      	ldr	r0, [pc, #276]	; (800ab2c <__multiply+0x150>)
 800aa18:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa1c:	f000 fd72 	bl	800b504 <__assert_func>
 800aa20:	f100 0514 	add.w	r5, r0, #20
 800aa24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa28:	462b      	mov	r3, r5
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	4543      	cmp	r3, r8
 800aa2e:	d321      	bcc.n	800aa74 <__multiply+0x98>
 800aa30:	f104 0314 	add.w	r3, r4, #20
 800aa34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa38:	f109 0314 	add.w	r3, r9, #20
 800aa3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa40:	9202      	str	r2, [sp, #8]
 800aa42:	1b3a      	subs	r2, r7, r4
 800aa44:	3a15      	subs	r2, #21
 800aa46:	f022 0203 	bic.w	r2, r2, #3
 800aa4a:	3204      	adds	r2, #4
 800aa4c:	f104 0115 	add.w	r1, r4, #21
 800aa50:	428f      	cmp	r7, r1
 800aa52:	bf38      	it	cc
 800aa54:	2204      	movcc	r2, #4
 800aa56:	9201      	str	r2, [sp, #4]
 800aa58:	9a02      	ldr	r2, [sp, #8]
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d80c      	bhi.n	800aa7a <__multiply+0x9e>
 800aa60:	2e00      	cmp	r6, #0
 800aa62:	dd03      	ble.n	800aa6c <__multiply+0x90>
 800aa64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d05b      	beq.n	800ab24 <__multiply+0x148>
 800aa6c:	6106      	str	r6, [r0, #16]
 800aa6e:	b005      	add	sp, #20
 800aa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa74:	f843 2b04 	str.w	r2, [r3], #4
 800aa78:	e7d8      	b.n	800aa2c <__multiply+0x50>
 800aa7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa7e:	f1ba 0f00 	cmp.w	sl, #0
 800aa82:	d024      	beq.n	800aace <__multiply+0xf2>
 800aa84:	f104 0e14 	add.w	lr, r4, #20
 800aa88:	46a9      	mov	r9, r5
 800aa8a:	f04f 0c00 	mov.w	ip, #0
 800aa8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa92:	f8d9 1000 	ldr.w	r1, [r9]
 800aa96:	fa1f fb82 	uxth.w	fp, r2
 800aa9a:	b289      	uxth	r1, r1
 800aa9c:	fb0a 110b 	mla	r1, sl, fp, r1
 800aaa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aaa4:	f8d9 2000 	ldr.w	r2, [r9]
 800aaa8:	4461      	add	r1, ip
 800aaaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaae:	fb0a c20b 	mla	r2, sl, fp, ip
 800aab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aab6:	b289      	uxth	r1, r1
 800aab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aabc:	4577      	cmp	r7, lr
 800aabe:	f849 1b04 	str.w	r1, [r9], #4
 800aac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aac6:	d8e2      	bhi.n	800aa8e <__multiply+0xb2>
 800aac8:	9a01      	ldr	r2, [sp, #4]
 800aaca:	f845 c002 	str.w	ip, [r5, r2]
 800aace:	9a03      	ldr	r2, [sp, #12]
 800aad0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aad4:	3304      	adds	r3, #4
 800aad6:	f1b9 0f00 	cmp.w	r9, #0
 800aada:	d021      	beq.n	800ab20 <__multiply+0x144>
 800aadc:	6829      	ldr	r1, [r5, #0]
 800aade:	f104 0c14 	add.w	ip, r4, #20
 800aae2:	46ae      	mov	lr, r5
 800aae4:	f04f 0a00 	mov.w	sl, #0
 800aae8:	f8bc b000 	ldrh.w	fp, [ip]
 800aaec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aaf0:	fb09 220b 	mla	r2, r9, fp, r2
 800aaf4:	4452      	add	r2, sl
 800aaf6:	b289      	uxth	r1, r1
 800aaf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aafc:	f84e 1b04 	str.w	r1, [lr], #4
 800ab00:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab08:	f8be 1000 	ldrh.w	r1, [lr]
 800ab0c:	fb09 110a 	mla	r1, r9, sl, r1
 800ab10:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab14:	4567      	cmp	r7, ip
 800ab16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab1a:	d8e5      	bhi.n	800aae8 <__multiply+0x10c>
 800ab1c:	9a01      	ldr	r2, [sp, #4]
 800ab1e:	50a9      	str	r1, [r5, r2]
 800ab20:	3504      	adds	r5, #4
 800ab22:	e799      	b.n	800aa58 <__multiply+0x7c>
 800ab24:	3e01      	subs	r6, #1
 800ab26:	e79b      	b.n	800aa60 <__multiply+0x84>
 800ab28:	0800be59 	.word	0x0800be59
 800ab2c:	0800beca 	.word	0x0800beca

0800ab30 <__pow5mult>:
 800ab30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab34:	4615      	mov	r5, r2
 800ab36:	f012 0203 	ands.w	r2, r2, #3
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	d007      	beq.n	800ab50 <__pow5mult+0x20>
 800ab40:	4c25      	ldr	r4, [pc, #148]	; (800abd8 <__pow5mult+0xa8>)
 800ab42:	3a01      	subs	r2, #1
 800ab44:	2300      	movs	r3, #0
 800ab46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab4a:	f7ff fe53 	bl	800a7f4 <__multadd>
 800ab4e:	4607      	mov	r7, r0
 800ab50:	10ad      	asrs	r5, r5, #2
 800ab52:	d03d      	beq.n	800abd0 <__pow5mult+0xa0>
 800ab54:	69f4      	ldr	r4, [r6, #28]
 800ab56:	b97c      	cbnz	r4, 800ab78 <__pow5mult+0x48>
 800ab58:	2010      	movs	r0, #16
 800ab5a:	f7ff fd23 	bl	800a5a4 <malloc>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	61f0      	str	r0, [r6, #28]
 800ab62:	b928      	cbnz	r0, 800ab70 <__pow5mult+0x40>
 800ab64:	4b1d      	ldr	r3, [pc, #116]	; (800abdc <__pow5mult+0xac>)
 800ab66:	481e      	ldr	r0, [pc, #120]	; (800abe0 <__pow5mult+0xb0>)
 800ab68:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab6c:	f000 fcca 	bl	800b504 <__assert_func>
 800ab70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab74:	6004      	str	r4, [r0, #0]
 800ab76:	60c4      	str	r4, [r0, #12]
 800ab78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ab7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab80:	b94c      	cbnz	r4, 800ab96 <__pow5mult+0x66>
 800ab82:	f240 2171 	movw	r1, #625	; 0x271
 800ab86:	4630      	mov	r0, r6
 800ab88:	f7ff ff12 	bl	800a9b0 <__i2b>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab92:	4604      	mov	r4, r0
 800ab94:	6003      	str	r3, [r0, #0]
 800ab96:	f04f 0900 	mov.w	r9, #0
 800ab9a:	07eb      	lsls	r3, r5, #31
 800ab9c:	d50a      	bpl.n	800abb4 <__pow5mult+0x84>
 800ab9e:	4639      	mov	r1, r7
 800aba0:	4622      	mov	r2, r4
 800aba2:	4630      	mov	r0, r6
 800aba4:	f7ff ff1a 	bl	800a9dc <__multiply>
 800aba8:	4639      	mov	r1, r7
 800abaa:	4680      	mov	r8, r0
 800abac:	4630      	mov	r0, r6
 800abae:	f7ff fdff 	bl	800a7b0 <_Bfree>
 800abb2:	4647      	mov	r7, r8
 800abb4:	106d      	asrs	r5, r5, #1
 800abb6:	d00b      	beq.n	800abd0 <__pow5mult+0xa0>
 800abb8:	6820      	ldr	r0, [r4, #0]
 800abba:	b938      	cbnz	r0, 800abcc <__pow5mult+0x9c>
 800abbc:	4622      	mov	r2, r4
 800abbe:	4621      	mov	r1, r4
 800abc0:	4630      	mov	r0, r6
 800abc2:	f7ff ff0b 	bl	800a9dc <__multiply>
 800abc6:	6020      	str	r0, [r4, #0]
 800abc8:	f8c0 9000 	str.w	r9, [r0]
 800abcc:	4604      	mov	r4, r0
 800abce:	e7e4      	b.n	800ab9a <__pow5mult+0x6a>
 800abd0:	4638      	mov	r0, r7
 800abd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd6:	bf00      	nop
 800abd8:	0800c018 	.word	0x0800c018
 800abdc:	0800bdea 	.word	0x0800bdea
 800abe0:	0800beca 	.word	0x0800beca

0800abe4 <__lshift>:
 800abe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe8:	460c      	mov	r4, r1
 800abea:	6849      	ldr	r1, [r1, #4]
 800abec:	6923      	ldr	r3, [r4, #16]
 800abee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	4607      	mov	r7, r0
 800abf6:	4691      	mov	r9, r2
 800abf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abfc:	f108 0601 	add.w	r6, r8, #1
 800ac00:	42b3      	cmp	r3, r6
 800ac02:	db0b      	blt.n	800ac1c <__lshift+0x38>
 800ac04:	4638      	mov	r0, r7
 800ac06:	f7ff fd93 	bl	800a730 <_Balloc>
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	b948      	cbnz	r0, 800ac22 <__lshift+0x3e>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	4b28      	ldr	r3, [pc, #160]	; (800acb4 <__lshift+0xd0>)
 800ac12:	4829      	ldr	r0, [pc, #164]	; (800acb8 <__lshift+0xd4>)
 800ac14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac18:	f000 fc74 	bl	800b504 <__assert_func>
 800ac1c:	3101      	adds	r1, #1
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	e7ee      	b.n	800ac00 <__lshift+0x1c>
 800ac22:	2300      	movs	r3, #0
 800ac24:	f100 0114 	add.w	r1, r0, #20
 800ac28:	f100 0210 	add.w	r2, r0, #16
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	4553      	cmp	r3, sl
 800ac30:	db33      	blt.n	800ac9a <__lshift+0xb6>
 800ac32:	6920      	ldr	r0, [r4, #16]
 800ac34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac38:	f104 0314 	add.w	r3, r4, #20
 800ac3c:	f019 091f 	ands.w	r9, r9, #31
 800ac40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac48:	d02b      	beq.n	800aca2 <__lshift+0xbe>
 800ac4a:	f1c9 0e20 	rsb	lr, r9, #32
 800ac4e:	468a      	mov	sl, r1
 800ac50:	2200      	movs	r2, #0
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	fa00 f009 	lsl.w	r0, r0, r9
 800ac58:	4310      	orrs	r0, r2
 800ac5a:	f84a 0b04 	str.w	r0, [sl], #4
 800ac5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac62:	459c      	cmp	ip, r3
 800ac64:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac68:	d8f3      	bhi.n	800ac52 <__lshift+0x6e>
 800ac6a:	ebac 0304 	sub.w	r3, ip, r4
 800ac6e:	3b15      	subs	r3, #21
 800ac70:	f023 0303 	bic.w	r3, r3, #3
 800ac74:	3304      	adds	r3, #4
 800ac76:	f104 0015 	add.w	r0, r4, #21
 800ac7a:	4584      	cmp	ip, r0
 800ac7c:	bf38      	it	cc
 800ac7e:	2304      	movcc	r3, #4
 800ac80:	50ca      	str	r2, [r1, r3]
 800ac82:	b10a      	cbz	r2, 800ac88 <__lshift+0xa4>
 800ac84:	f108 0602 	add.w	r6, r8, #2
 800ac88:	3e01      	subs	r6, #1
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	612e      	str	r6, [r5, #16]
 800ac8e:	4621      	mov	r1, r4
 800ac90:	f7ff fd8e 	bl	800a7b0 <_Bfree>
 800ac94:	4628      	mov	r0, r5
 800ac96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac9e:	3301      	adds	r3, #1
 800aca0:	e7c5      	b.n	800ac2e <__lshift+0x4a>
 800aca2:	3904      	subs	r1, #4
 800aca4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca8:	f841 2f04 	str.w	r2, [r1, #4]!
 800acac:	459c      	cmp	ip, r3
 800acae:	d8f9      	bhi.n	800aca4 <__lshift+0xc0>
 800acb0:	e7ea      	b.n	800ac88 <__lshift+0xa4>
 800acb2:	bf00      	nop
 800acb4:	0800be59 	.word	0x0800be59
 800acb8:	0800beca 	.word	0x0800beca

0800acbc <__mcmp>:
 800acbc:	b530      	push	{r4, r5, lr}
 800acbe:	6902      	ldr	r2, [r0, #16]
 800acc0:	690c      	ldr	r4, [r1, #16]
 800acc2:	1b12      	subs	r2, r2, r4
 800acc4:	d10e      	bne.n	800ace4 <__mcmp+0x28>
 800acc6:	f100 0314 	add.w	r3, r0, #20
 800acca:	3114      	adds	r1, #20
 800accc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800acd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acdc:	42a5      	cmp	r5, r4
 800acde:	d003      	beq.n	800ace8 <__mcmp+0x2c>
 800ace0:	d305      	bcc.n	800acee <__mcmp+0x32>
 800ace2:	2201      	movs	r2, #1
 800ace4:	4610      	mov	r0, r2
 800ace6:	bd30      	pop	{r4, r5, pc}
 800ace8:	4283      	cmp	r3, r0
 800acea:	d3f3      	bcc.n	800acd4 <__mcmp+0x18>
 800acec:	e7fa      	b.n	800ace4 <__mcmp+0x28>
 800acee:	f04f 32ff 	mov.w	r2, #4294967295
 800acf2:	e7f7      	b.n	800ace4 <__mcmp+0x28>

0800acf4 <__mdiff>:
 800acf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	460c      	mov	r4, r1
 800acfa:	4606      	mov	r6, r0
 800acfc:	4611      	mov	r1, r2
 800acfe:	4620      	mov	r0, r4
 800ad00:	4690      	mov	r8, r2
 800ad02:	f7ff ffdb 	bl	800acbc <__mcmp>
 800ad06:	1e05      	subs	r5, r0, #0
 800ad08:	d110      	bne.n	800ad2c <__mdiff+0x38>
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f7ff fd0f 	bl	800a730 <_Balloc>
 800ad12:	b930      	cbnz	r0, 800ad22 <__mdiff+0x2e>
 800ad14:	4b3a      	ldr	r3, [pc, #232]	; (800ae00 <__mdiff+0x10c>)
 800ad16:	4602      	mov	r2, r0
 800ad18:	f240 2137 	movw	r1, #567	; 0x237
 800ad1c:	4839      	ldr	r0, [pc, #228]	; (800ae04 <__mdiff+0x110>)
 800ad1e:	f000 fbf1 	bl	800b504 <__assert_func>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2c:	bfa4      	itt	ge
 800ad2e:	4643      	movge	r3, r8
 800ad30:	46a0      	movge	r8, r4
 800ad32:	4630      	mov	r0, r6
 800ad34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad38:	bfa6      	itte	ge
 800ad3a:	461c      	movge	r4, r3
 800ad3c:	2500      	movge	r5, #0
 800ad3e:	2501      	movlt	r5, #1
 800ad40:	f7ff fcf6 	bl	800a730 <_Balloc>
 800ad44:	b920      	cbnz	r0, 800ad50 <__mdiff+0x5c>
 800ad46:	4b2e      	ldr	r3, [pc, #184]	; (800ae00 <__mdiff+0x10c>)
 800ad48:	4602      	mov	r2, r0
 800ad4a:	f240 2145 	movw	r1, #581	; 0x245
 800ad4e:	e7e5      	b.n	800ad1c <__mdiff+0x28>
 800ad50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad54:	6926      	ldr	r6, [r4, #16]
 800ad56:	60c5      	str	r5, [r0, #12]
 800ad58:	f104 0914 	add.w	r9, r4, #20
 800ad5c:	f108 0514 	add.w	r5, r8, #20
 800ad60:	f100 0e14 	add.w	lr, r0, #20
 800ad64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad6c:	f108 0210 	add.w	r2, r8, #16
 800ad70:	46f2      	mov	sl, lr
 800ad72:	2100      	movs	r1, #0
 800ad74:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad7c:	fa11 f88b 	uxtah	r8, r1, fp
 800ad80:	b299      	uxth	r1, r3
 800ad82:	0c1b      	lsrs	r3, r3, #16
 800ad84:	eba8 0801 	sub.w	r8, r8, r1
 800ad88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad90:	fa1f f888 	uxth.w	r8, r8
 800ad94:	1419      	asrs	r1, r3, #16
 800ad96:	454e      	cmp	r6, r9
 800ad98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad9c:	f84a 3b04 	str.w	r3, [sl], #4
 800ada0:	d8e8      	bhi.n	800ad74 <__mdiff+0x80>
 800ada2:	1b33      	subs	r3, r6, r4
 800ada4:	3b15      	subs	r3, #21
 800ada6:	f023 0303 	bic.w	r3, r3, #3
 800adaa:	3304      	adds	r3, #4
 800adac:	3415      	adds	r4, #21
 800adae:	42a6      	cmp	r6, r4
 800adb0:	bf38      	it	cc
 800adb2:	2304      	movcc	r3, #4
 800adb4:	441d      	add	r5, r3
 800adb6:	4473      	add	r3, lr
 800adb8:	469e      	mov	lr, r3
 800adba:	462e      	mov	r6, r5
 800adbc:	4566      	cmp	r6, ip
 800adbe:	d30e      	bcc.n	800adde <__mdiff+0xea>
 800adc0:	f10c 0203 	add.w	r2, ip, #3
 800adc4:	1b52      	subs	r2, r2, r5
 800adc6:	f022 0203 	bic.w	r2, r2, #3
 800adca:	3d03      	subs	r5, #3
 800adcc:	45ac      	cmp	ip, r5
 800adce:	bf38      	it	cc
 800add0:	2200      	movcc	r2, #0
 800add2:	4413      	add	r3, r2
 800add4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800add8:	b17a      	cbz	r2, 800adfa <__mdiff+0x106>
 800adda:	6107      	str	r7, [r0, #16]
 800addc:	e7a4      	b.n	800ad28 <__mdiff+0x34>
 800adde:	f856 8b04 	ldr.w	r8, [r6], #4
 800ade2:	fa11 f288 	uxtah	r2, r1, r8
 800ade6:	1414      	asrs	r4, r2, #16
 800ade8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800adec:	b292      	uxth	r2, r2
 800adee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800adf2:	f84e 2b04 	str.w	r2, [lr], #4
 800adf6:	1421      	asrs	r1, r4, #16
 800adf8:	e7e0      	b.n	800adbc <__mdiff+0xc8>
 800adfa:	3f01      	subs	r7, #1
 800adfc:	e7ea      	b.n	800add4 <__mdiff+0xe0>
 800adfe:	bf00      	nop
 800ae00:	0800be59 	.word	0x0800be59
 800ae04:	0800beca 	.word	0x0800beca

0800ae08 <__ulp>:
 800ae08:	b082      	sub	sp, #8
 800ae0a:	ed8d 0b00 	vstr	d0, [sp]
 800ae0e:	9a01      	ldr	r2, [sp, #4]
 800ae10:	4b0f      	ldr	r3, [pc, #60]	; (800ae50 <__ulp+0x48>)
 800ae12:	4013      	ands	r3, r2
 800ae14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	dc08      	bgt.n	800ae2e <__ulp+0x26>
 800ae1c:	425b      	negs	r3, r3
 800ae1e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ae22:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae26:	da04      	bge.n	800ae32 <__ulp+0x2a>
 800ae28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae2c:	4113      	asrs	r3, r2
 800ae2e:	2200      	movs	r2, #0
 800ae30:	e008      	b.n	800ae44 <__ulp+0x3c>
 800ae32:	f1a2 0314 	sub.w	r3, r2, #20
 800ae36:	2b1e      	cmp	r3, #30
 800ae38:	bfda      	itte	le
 800ae3a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ae3e:	40da      	lsrle	r2, r3
 800ae40:	2201      	movgt	r2, #1
 800ae42:	2300      	movs	r3, #0
 800ae44:	4619      	mov	r1, r3
 800ae46:	4610      	mov	r0, r2
 800ae48:	ec41 0b10 	vmov	d0, r0, r1
 800ae4c:	b002      	add	sp, #8
 800ae4e:	4770      	bx	lr
 800ae50:	7ff00000 	.word	0x7ff00000

0800ae54 <__b2d>:
 800ae54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae58:	6906      	ldr	r6, [r0, #16]
 800ae5a:	f100 0814 	add.w	r8, r0, #20
 800ae5e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ae62:	1f37      	subs	r7, r6, #4
 800ae64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae68:	4610      	mov	r0, r2
 800ae6a:	f7ff fd53 	bl	800a914 <__hi0bits>
 800ae6e:	f1c0 0320 	rsb	r3, r0, #32
 800ae72:	280a      	cmp	r0, #10
 800ae74:	600b      	str	r3, [r1, #0]
 800ae76:	491b      	ldr	r1, [pc, #108]	; (800aee4 <__b2d+0x90>)
 800ae78:	dc15      	bgt.n	800aea6 <__b2d+0x52>
 800ae7a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ae7e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ae82:	45b8      	cmp	r8, r7
 800ae84:	ea43 0501 	orr.w	r5, r3, r1
 800ae88:	bf34      	ite	cc
 800ae8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ae8e:	2300      	movcs	r3, #0
 800ae90:	3015      	adds	r0, #21
 800ae92:	fa02 f000 	lsl.w	r0, r2, r0
 800ae96:	fa23 f30c 	lsr.w	r3, r3, ip
 800ae9a:	4303      	orrs	r3, r0
 800ae9c:	461c      	mov	r4, r3
 800ae9e:	ec45 4b10 	vmov	d0, r4, r5
 800aea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea6:	45b8      	cmp	r8, r7
 800aea8:	bf3a      	itte	cc
 800aeaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aeae:	f1a6 0708 	subcc.w	r7, r6, #8
 800aeb2:	2300      	movcs	r3, #0
 800aeb4:	380b      	subs	r0, #11
 800aeb6:	d012      	beq.n	800aede <__b2d+0x8a>
 800aeb8:	f1c0 0120 	rsb	r1, r0, #32
 800aebc:	fa23 f401 	lsr.w	r4, r3, r1
 800aec0:	4082      	lsls	r2, r0
 800aec2:	4322      	orrs	r2, r4
 800aec4:	4547      	cmp	r7, r8
 800aec6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aeca:	bf8c      	ite	hi
 800aecc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aed0:	2200      	movls	r2, #0
 800aed2:	4083      	lsls	r3, r0
 800aed4:	40ca      	lsrs	r2, r1
 800aed6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aeda:	4313      	orrs	r3, r2
 800aedc:	e7de      	b.n	800ae9c <__b2d+0x48>
 800aede:	ea42 0501 	orr.w	r5, r2, r1
 800aee2:	e7db      	b.n	800ae9c <__b2d+0x48>
 800aee4:	3ff00000 	.word	0x3ff00000

0800aee8 <__d2b>:
 800aee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aeec:	460f      	mov	r7, r1
 800aeee:	2101      	movs	r1, #1
 800aef0:	ec59 8b10 	vmov	r8, r9, d0
 800aef4:	4616      	mov	r6, r2
 800aef6:	f7ff fc1b 	bl	800a730 <_Balloc>
 800aefa:	4604      	mov	r4, r0
 800aefc:	b930      	cbnz	r0, 800af0c <__d2b+0x24>
 800aefe:	4602      	mov	r2, r0
 800af00:	4b24      	ldr	r3, [pc, #144]	; (800af94 <__d2b+0xac>)
 800af02:	4825      	ldr	r0, [pc, #148]	; (800af98 <__d2b+0xb0>)
 800af04:	f240 310f 	movw	r1, #783	; 0x30f
 800af08:	f000 fafc 	bl	800b504 <__assert_func>
 800af0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af14:	bb2d      	cbnz	r5, 800af62 <__d2b+0x7a>
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	f1b8 0300 	subs.w	r3, r8, #0
 800af1c:	d026      	beq.n	800af6c <__d2b+0x84>
 800af1e:	4668      	mov	r0, sp
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	f7ff fd17 	bl	800a954 <__lo0bits>
 800af26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af2a:	b1e8      	cbz	r0, 800af68 <__d2b+0x80>
 800af2c:	f1c0 0320 	rsb	r3, r0, #32
 800af30:	fa02 f303 	lsl.w	r3, r2, r3
 800af34:	430b      	orrs	r3, r1
 800af36:	40c2      	lsrs	r2, r0
 800af38:	6163      	str	r3, [r4, #20]
 800af3a:	9201      	str	r2, [sp, #4]
 800af3c:	9b01      	ldr	r3, [sp, #4]
 800af3e:	61a3      	str	r3, [r4, #24]
 800af40:	2b00      	cmp	r3, #0
 800af42:	bf14      	ite	ne
 800af44:	2202      	movne	r2, #2
 800af46:	2201      	moveq	r2, #1
 800af48:	6122      	str	r2, [r4, #16]
 800af4a:	b1bd      	cbz	r5, 800af7c <__d2b+0x94>
 800af4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af50:	4405      	add	r5, r0
 800af52:	603d      	str	r5, [r7, #0]
 800af54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af58:	6030      	str	r0, [r6, #0]
 800af5a:	4620      	mov	r0, r4
 800af5c:	b003      	add	sp, #12
 800af5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af66:	e7d6      	b.n	800af16 <__d2b+0x2e>
 800af68:	6161      	str	r1, [r4, #20]
 800af6a:	e7e7      	b.n	800af3c <__d2b+0x54>
 800af6c:	a801      	add	r0, sp, #4
 800af6e:	f7ff fcf1 	bl	800a954 <__lo0bits>
 800af72:	9b01      	ldr	r3, [sp, #4]
 800af74:	6163      	str	r3, [r4, #20]
 800af76:	3020      	adds	r0, #32
 800af78:	2201      	movs	r2, #1
 800af7a:	e7e5      	b.n	800af48 <__d2b+0x60>
 800af7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af84:	6038      	str	r0, [r7, #0]
 800af86:	6918      	ldr	r0, [r3, #16]
 800af88:	f7ff fcc4 	bl	800a914 <__hi0bits>
 800af8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af90:	e7e2      	b.n	800af58 <__d2b+0x70>
 800af92:	bf00      	nop
 800af94:	0800be59 	.word	0x0800be59
 800af98:	0800beca 	.word	0x0800beca

0800af9c <__ratio>:
 800af9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	4688      	mov	r8, r1
 800afa2:	4669      	mov	r1, sp
 800afa4:	4681      	mov	r9, r0
 800afa6:	f7ff ff55 	bl	800ae54 <__b2d>
 800afaa:	a901      	add	r1, sp, #4
 800afac:	4640      	mov	r0, r8
 800afae:	ec55 4b10 	vmov	r4, r5, d0
 800afb2:	f7ff ff4f 	bl	800ae54 <__b2d>
 800afb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800afbe:	eba3 0c02 	sub.w	ip, r3, r2
 800afc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afc6:	1a9b      	subs	r3, r3, r2
 800afc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800afcc:	ec51 0b10 	vmov	r0, r1, d0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	bfd6      	itet	le
 800afd4:	460a      	movle	r2, r1
 800afd6:	462a      	movgt	r2, r5
 800afd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800afdc:	468b      	mov	fp, r1
 800afde:	462f      	mov	r7, r5
 800afe0:	bfd4      	ite	le
 800afe2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800afe6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800afea:	4620      	mov	r0, r4
 800afec:	ee10 2a10 	vmov	r2, s0
 800aff0:	465b      	mov	r3, fp
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 fc3a 	bl	800086c <__aeabi_ddiv>
 800aff8:	ec41 0b10 	vmov	d0, r0, r1
 800affc:	b003      	add	sp, #12
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b002 <__copybits>:
 800b002:	3901      	subs	r1, #1
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	1149      	asrs	r1, r1, #5
 800b008:	6914      	ldr	r4, [r2, #16]
 800b00a:	3101      	adds	r1, #1
 800b00c:	f102 0314 	add.w	r3, r2, #20
 800b010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b018:	1f05      	subs	r5, r0, #4
 800b01a:	42a3      	cmp	r3, r4
 800b01c:	d30c      	bcc.n	800b038 <__copybits+0x36>
 800b01e:	1aa3      	subs	r3, r4, r2
 800b020:	3b11      	subs	r3, #17
 800b022:	f023 0303 	bic.w	r3, r3, #3
 800b026:	3211      	adds	r2, #17
 800b028:	42a2      	cmp	r2, r4
 800b02a:	bf88      	it	hi
 800b02c:	2300      	movhi	r3, #0
 800b02e:	4418      	add	r0, r3
 800b030:	2300      	movs	r3, #0
 800b032:	4288      	cmp	r0, r1
 800b034:	d305      	bcc.n	800b042 <__copybits+0x40>
 800b036:	bd70      	pop	{r4, r5, r6, pc}
 800b038:	f853 6b04 	ldr.w	r6, [r3], #4
 800b03c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b040:	e7eb      	b.n	800b01a <__copybits+0x18>
 800b042:	f840 3b04 	str.w	r3, [r0], #4
 800b046:	e7f4      	b.n	800b032 <__copybits+0x30>

0800b048 <__any_on>:
 800b048:	f100 0214 	add.w	r2, r0, #20
 800b04c:	6900      	ldr	r0, [r0, #16]
 800b04e:	114b      	asrs	r3, r1, #5
 800b050:	4298      	cmp	r0, r3
 800b052:	b510      	push	{r4, lr}
 800b054:	db11      	blt.n	800b07a <__any_on+0x32>
 800b056:	dd0a      	ble.n	800b06e <__any_on+0x26>
 800b058:	f011 011f 	ands.w	r1, r1, #31
 800b05c:	d007      	beq.n	800b06e <__any_on+0x26>
 800b05e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b062:	fa24 f001 	lsr.w	r0, r4, r1
 800b066:	fa00 f101 	lsl.w	r1, r0, r1
 800b06a:	428c      	cmp	r4, r1
 800b06c:	d10b      	bne.n	800b086 <__any_on+0x3e>
 800b06e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b072:	4293      	cmp	r3, r2
 800b074:	d803      	bhi.n	800b07e <__any_on+0x36>
 800b076:	2000      	movs	r0, #0
 800b078:	bd10      	pop	{r4, pc}
 800b07a:	4603      	mov	r3, r0
 800b07c:	e7f7      	b.n	800b06e <__any_on+0x26>
 800b07e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b082:	2900      	cmp	r1, #0
 800b084:	d0f5      	beq.n	800b072 <__any_on+0x2a>
 800b086:	2001      	movs	r0, #1
 800b088:	e7f6      	b.n	800b078 <__any_on+0x30>

0800b08a <__ascii_wctomb>:
 800b08a:	b149      	cbz	r1, 800b0a0 <__ascii_wctomb+0x16>
 800b08c:	2aff      	cmp	r2, #255	; 0xff
 800b08e:	bf85      	ittet	hi
 800b090:	238a      	movhi	r3, #138	; 0x8a
 800b092:	6003      	strhi	r3, [r0, #0]
 800b094:	700a      	strbls	r2, [r1, #0]
 800b096:	f04f 30ff 	movhi.w	r0, #4294967295
 800b09a:	bf98      	it	ls
 800b09c:	2001      	movls	r0, #1
 800b09e:	4770      	bx	lr
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	4770      	bx	lr

0800b0a4 <__ssputs_r>:
 800b0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a8:	688e      	ldr	r6, [r1, #8]
 800b0aa:	461f      	mov	r7, r3
 800b0ac:	42be      	cmp	r6, r7
 800b0ae:	680b      	ldr	r3, [r1, #0]
 800b0b0:	4682      	mov	sl, r0
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	4690      	mov	r8, r2
 800b0b6:	d82c      	bhi.n	800b112 <__ssputs_r+0x6e>
 800b0b8:	898a      	ldrh	r2, [r1, #12]
 800b0ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0be:	d026      	beq.n	800b10e <__ssputs_r+0x6a>
 800b0c0:	6965      	ldr	r5, [r4, #20]
 800b0c2:	6909      	ldr	r1, [r1, #16]
 800b0c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0c8:	eba3 0901 	sub.w	r9, r3, r1
 800b0cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0d0:	1c7b      	adds	r3, r7, #1
 800b0d2:	444b      	add	r3, r9
 800b0d4:	106d      	asrs	r5, r5, #1
 800b0d6:	429d      	cmp	r5, r3
 800b0d8:	bf38      	it	cc
 800b0da:	461d      	movcc	r5, r3
 800b0dc:	0553      	lsls	r3, r2, #21
 800b0de:	d527      	bpl.n	800b130 <__ssputs_r+0x8c>
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	f7ff fa87 	bl	800a5f4 <_malloc_r>
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	b360      	cbz	r0, 800b144 <__ssputs_r+0xa0>
 800b0ea:	6921      	ldr	r1, [r4, #16]
 800b0ec:	464a      	mov	r2, r9
 800b0ee:	f7fe f823 	bl	8009138 <memcpy>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0fc:	81a3      	strh	r3, [r4, #12]
 800b0fe:	6126      	str	r6, [r4, #16]
 800b100:	6165      	str	r5, [r4, #20]
 800b102:	444e      	add	r6, r9
 800b104:	eba5 0509 	sub.w	r5, r5, r9
 800b108:	6026      	str	r6, [r4, #0]
 800b10a:	60a5      	str	r5, [r4, #8]
 800b10c:	463e      	mov	r6, r7
 800b10e:	42be      	cmp	r6, r7
 800b110:	d900      	bls.n	800b114 <__ssputs_r+0x70>
 800b112:	463e      	mov	r6, r7
 800b114:	6820      	ldr	r0, [r4, #0]
 800b116:	4632      	mov	r2, r6
 800b118:	4641      	mov	r1, r8
 800b11a:	f000 f9c9 	bl	800b4b0 <memmove>
 800b11e:	68a3      	ldr	r3, [r4, #8]
 800b120:	1b9b      	subs	r3, r3, r6
 800b122:	60a3      	str	r3, [r4, #8]
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	4433      	add	r3, r6
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	2000      	movs	r0, #0
 800b12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b130:	462a      	mov	r2, r5
 800b132:	f000 fa1b 	bl	800b56c <_realloc_r>
 800b136:	4606      	mov	r6, r0
 800b138:	2800      	cmp	r0, #0
 800b13a:	d1e0      	bne.n	800b0fe <__ssputs_r+0x5a>
 800b13c:	6921      	ldr	r1, [r4, #16]
 800b13e:	4650      	mov	r0, sl
 800b140:	f7fe fe8c 	bl	8009e5c <_free_r>
 800b144:	230c      	movs	r3, #12
 800b146:	f8ca 3000 	str.w	r3, [sl]
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	f04f 30ff 	mov.w	r0, #4294967295
 800b156:	e7e9      	b.n	800b12c <__ssputs_r+0x88>

0800b158 <_svfiprintf_r>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	4698      	mov	r8, r3
 800b15e:	898b      	ldrh	r3, [r1, #12]
 800b160:	061b      	lsls	r3, r3, #24
 800b162:	b09d      	sub	sp, #116	; 0x74
 800b164:	4607      	mov	r7, r0
 800b166:	460d      	mov	r5, r1
 800b168:	4614      	mov	r4, r2
 800b16a:	d50e      	bpl.n	800b18a <_svfiprintf_r+0x32>
 800b16c:	690b      	ldr	r3, [r1, #16]
 800b16e:	b963      	cbnz	r3, 800b18a <_svfiprintf_r+0x32>
 800b170:	2140      	movs	r1, #64	; 0x40
 800b172:	f7ff fa3f 	bl	800a5f4 <_malloc_r>
 800b176:	6028      	str	r0, [r5, #0]
 800b178:	6128      	str	r0, [r5, #16]
 800b17a:	b920      	cbnz	r0, 800b186 <_svfiprintf_r+0x2e>
 800b17c:	230c      	movs	r3, #12
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	f04f 30ff 	mov.w	r0, #4294967295
 800b184:	e0d0      	b.n	800b328 <_svfiprintf_r+0x1d0>
 800b186:	2340      	movs	r3, #64	; 0x40
 800b188:	616b      	str	r3, [r5, #20]
 800b18a:	2300      	movs	r3, #0
 800b18c:	9309      	str	r3, [sp, #36]	; 0x24
 800b18e:	2320      	movs	r3, #32
 800b190:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b194:	f8cd 800c 	str.w	r8, [sp, #12]
 800b198:	2330      	movs	r3, #48	; 0x30
 800b19a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b340 <_svfiprintf_r+0x1e8>
 800b19e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1a2:	f04f 0901 	mov.w	r9, #1
 800b1a6:	4623      	mov	r3, r4
 800b1a8:	469a      	mov	sl, r3
 800b1aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ae:	b10a      	cbz	r2, 800b1b4 <_svfiprintf_r+0x5c>
 800b1b0:	2a25      	cmp	r2, #37	; 0x25
 800b1b2:	d1f9      	bne.n	800b1a8 <_svfiprintf_r+0x50>
 800b1b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1b8:	d00b      	beq.n	800b1d2 <_svfiprintf_r+0x7a>
 800b1ba:	465b      	mov	r3, fp
 800b1bc:	4622      	mov	r2, r4
 800b1be:	4629      	mov	r1, r5
 800b1c0:	4638      	mov	r0, r7
 800b1c2:	f7ff ff6f 	bl	800b0a4 <__ssputs_r>
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	f000 80a9 	beq.w	800b31e <_svfiprintf_r+0x1c6>
 800b1cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ce:	445a      	add	r2, fp
 800b1d0:	9209      	str	r2, [sp, #36]	; 0x24
 800b1d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f000 80a1 	beq.w	800b31e <_svfiprintf_r+0x1c6>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1e6:	f10a 0a01 	add.w	sl, sl, #1
 800b1ea:	9304      	str	r3, [sp, #16]
 800b1ec:	9307      	str	r3, [sp, #28]
 800b1ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1f2:	931a      	str	r3, [sp, #104]	; 0x68
 800b1f4:	4654      	mov	r4, sl
 800b1f6:	2205      	movs	r2, #5
 800b1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1fc:	4850      	ldr	r0, [pc, #320]	; (800b340 <_svfiprintf_r+0x1e8>)
 800b1fe:	f7f4 fff7 	bl	80001f0 <memchr>
 800b202:	9a04      	ldr	r2, [sp, #16]
 800b204:	b9d8      	cbnz	r0, 800b23e <_svfiprintf_r+0xe6>
 800b206:	06d0      	lsls	r0, r2, #27
 800b208:	bf44      	itt	mi
 800b20a:	2320      	movmi	r3, #32
 800b20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b210:	0711      	lsls	r1, r2, #28
 800b212:	bf44      	itt	mi
 800b214:	232b      	movmi	r3, #43	; 0x2b
 800b216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b21a:	f89a 3000 	ldrb.w	r3, [sl]
 800b21e:	2b2a      	cmp	r3, #42	; 0x2a
 800b220:	d015      	beq.n	800b24e <_svfiprintf_r+0xf6>
 800b222:	9a07      	ldr	r2, [sp, #28]
 800b224:	4654      	mov	r4, sl
 800b226:	2000      	movs	r0, #0
 800b228:	f04f 0c0a 	mov.w	ip, #10
 800b22c:	4621      	mov	r1, r4
 800b22e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b232:	3b30      	subs	r3, #48	; 0x30
 800b234:	2b09      	cmp	r3, #9
 800b236:	d94d      	bls.n	800b2d4 <_svfiprintf_r+0x17c>
 800b238:	b1b0      	cbz	r0, 800b268 <_svfiprintf_r+0x110>
 800b23a:	9207      	str	r2, [sp, #28]
 800b23c:	e014      	b.n	800b268 <_svfiprintf_r+0x110>
 800b23e:	eba0 0308 	sub.w	r3, r0, r8
 800b242:	fa09 f303 	lsl.w	r3, r9, r3
 800b246:	4313      	orrs	r3, r2
 800b248:	9304      	str	r3, [sp, #16]
 800b24a:	46a2      	mov	sl, r4
 800b24c:	e7d2      	b.n	800b1f4 <_svfiprintf_r+0x9c>
 800b24e:	9b03      	ldr	r3, [sp, #12]
 800b250:	1d19      	adds	r1, r3, #4
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	9103      	str	r1, [sp, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	bfbb      	ittet	lt
 800b25a:	425b      	neglt	r3, r3
 800b25c:	f042 0202 	orrlt.w	r2, r2, #2
 800b260:	9307      	strge	r3, [sp, #28]
 800b262:	9307      	strlt	r3, [sp, #28]
 800b264:	bfb8      	it	lt
 800b266:	9204      	strlt	r2, [sp, #16]
 800b268:	7823      	ldrb	r3, [r4, #0]
 800b26a:	2b2e      	cmp	r3, #46	; 0x2e
 800b26c:	d10c      	bne.n	800b288 <_svfiprintf_r+0x130>
 800b26e:	7863      	ldrb	r3, [r4, #1]
 800b270:	2b2a      	cmp	r3, #42	; 0x2a
 800b272:	d134      	bne.n	800b2de <_svfiprintf_r+0x186>
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	1d1a      	adds	r2, r3, #4
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	9203      	str	r2, [sp, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	bfb8      	it	lt
 800b280:	f04f 33ff 	movlt.w	r3, #4294967295
 800b284:	3402      	adds	r4, #2
 800b286:	9305      	str	r3, [sp, #20]
 800b288:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b350 <_svfiprintf_r+0x1f8>
 800b28c:	7821      	ldrb	r1, [r4, #0]
 800b28e:	2203      	movs	r2, #3
 800b290:	4650      	mov	r0, sl
 800b292:	f7f4 ffad 	bl	80001f0 <memchr>
 800b296:	b138      	cbz	r0, 800b2a8 <_svfiprintf_r+0x150>
 800b298:	9b04      	ldr	r3, [sp, #16]
 800b29a:	eba0 000a 	sub.w	r0, r0, sl
 800b29e:	2240      	movs	r2, #64	; 0x40
 800b2a0:	4082      	lsls	r2, r0
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	3401      	adds	r4, #1
 800b2a6:	9304      	str	r3, [sp, #16]
 800b2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ac:	4825      	ldr	r0, [pc, #148]	; (800b344 <_svfiprintf_r+0x1ec>)
 800b2ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2b2:	2206      	movs	r2, #6
 800b2b4:	f7f4 ff9c 	bl	80001f0 <memchr>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d038      	beq.n	800b32e <_svfiprintf_r+0x1d6>
 800b2bc:	4b22      	ldr	r3, [pc, #136]	; (800b348 <_svfiprintf_r+0x1f0>)
 800b2be:	bb1b      	cbnz	r3, 800b308 <_svfiprintf_r+0x1b0>
 800b2c0:	9b03      	ldr	r3, [sp, #12]
 800b2c2:	3307      	adds	r3, #7
 800b2c4:	f023 0307 	bic.w	r3, r3, #7
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	9303      	str	r3, [sp, #12]
 800b2cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ce:	4433      	add	r3, r6
 800b2d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d2:	e768      	b.n	800b1a6 <_svfiprintf_r+0x4e>
 800b2d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2d8:	460c      	mov	r4, r1
 800b2da:	2001      	movs	r0, #1
 800b2dc:	e7a6      	b.n	800b22c <_svfiprintf_r+0xd4>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	3401      	adds	r4, #1
 800b2e2:	9305      	str	r3, [sp, #20]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	f04f 0c0a 	mov.w	ip, #10
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2f0:	3a30      	subs	r2, #48	; 0x30
 800b2f2:	2a09      	cmp	r2, #9
 800b2f4:	d903      	bls.n	800b2fe <_svfiprintf_r+0x1a6>
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0c6      	beq.n	800b288 <_svfiprintf_r+0x130>
 800b2fa:	9105      	str	r1, [sp, #20]
 800b2fc:	e7c4      	b.n	800b288 <_svfiprintf_r+0x130>
 800b2fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b302:	4604      	mov	r4, r0
 800b304:	2301      	movs	r3, #1
 800b306:	e7f0      	b.n	800b2ea <_svfiprintf_r+0x192>
 800b308:	ab03      	add	r3, sp, #12
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	462a      	mov	r2, r5
 800b30e:	4b0f      	ldr	r3, [pc, #60]	; (800b34c <_svfiprintf_r+0x1f4>)
 800b310:	a904      	add	r1, sp, #16
 800b312:	4638      	mov	r0, r7
 800b314:	f7fd f950 	bl	80085b8 <_printf_float>
 800b318:	1c42      	adds	r2, r0, #1
 800b31a:	4606      	mov	r6, r0
 800b31c:	d1d6      	bne.n	800b2cc <_svfiprintf_r+0x174>
 800b31e:	89ab      	ldrh	r3, [r5, #12]
 800b320:	065b      	lsls	r3, r3, #25
 800b322:	f53f af2d 	bmi.w	800b180 <_svfiprintf_r+0x28>
 800b326:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b328:	b01d      	add	sp, #116	; 0x74
 800b32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32e:	ab03      	add	r3, sp, #12
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	462a      	mov	r2, r5
 800b334:	4b05      	ldr	r3, [pc, #20]	; (800b34c <_svfiprintf_r+0x1f4>)
 800b336:	a904      	add	r1, sp, #16
 800b338:	4638      	mov	r0, r7
 800b33a:	f7fd fbe1 	bl	8008b00 <_printf_i>
 800b33e:	e7eb      	b.n	800b318 <_svfiprintf_r+0x1c0>
 800b340:	0800c024 	.word	0x0800c024
 800b344:	0800c02e 	.word	0x0800c02e
 800b348:	080085b9 	.word	0x080085b9
 800b34c:	0800b0a5 	.word	0x0800b0a5
 800b350:	0800c02a 	.word	0x0800c02a

0800b354 <__sflush_r>:
 800b354:	898a      	ldrh	r2, [r1, #12]
 800b356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35a:	4605      	mov	r5, r0
 800b35c:	0710      	lsls	r0, r2, #28
 800b35e:	460c      	mov	r4, r1
 800b360:	d458      	bmi.n	800b414 <__sflush_r+0xc0>
 800b362:	684b      	ldr	r3, [r1, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	dc05      	bgt.n	800b374 <__sflush_r+0x20>
 800b368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	dc02      	bgt.n	800b374 <__sflush_r+0x20>
 800b36e:	2000      	movs	r0, #0
 800b370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b376:	2e00      	cmp	r6, #0
 800b378:	d0f9      	beq.n	800b36e <__sflush_r+0x1a>
 800b37a:	2300      	movs	r3, #0
 800b37c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b380:	682f      	ldr	r7, [r5, #0]
 800b382:	6a21      	ldr	r1, [r4, #32]
 800b384:	602b      	str	r3, [r5, #0]
 800b386:	d032      	beq.n	800b3ee <__sflush_r+0x9a>
 800b388:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	075a      	lsls	r2, r3, #29
 800b38e:	d505      	bpl.n	800b39c <__sflush_r+0x48>
 800b390:	6863      	ldr	r3, [r4, #4]
 800b392:	1ac0      	subs	r0, r0, r3
 800b394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b396:	b10b      	cbz	r3, 800b39c <__sflush_r+0x48>
 800b398:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b39a:	1ac0      	subs	r0, r0, r3
 800b39c:	2300      	movs	r3, #0
 800b39e:	4602      	mov	r2, r0
 800b3a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3a2:	6a21      	ldr	r1, [r4, #32]
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	47b0      	blx	r6
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	d106      	bne.n	800b3bc <__sflush_r+0x68>
 800b3ae:	6829      	ldr	r1, [r5, #0]
 800b3b0:	291d      	cmp	r1, #29
 800b3b2:	d82b      	bhi.n	800b40c <__sflush_r+0xb8>
 800b3b4:	4a29      	ldr	r2, [pc, #164]	; (800b45c <__sflush_r+0x108>)
 800b3b6:	410a      	asrs	r2, r1
 800b3b8:	07d6      	lsls	r6, r2, #31
 800b3ba:	d427      	bmi.n	800b40c <__sflush_r+0xb8>
 800b3bc:	2200      	movs	r2, #0
 800b3be:	6062      	str	r2, [r4, #4]
 800b3c0:	04d9      	lsls	r1, r3, #19
 800b3c2:	6922      	ldr	r2, [r4, #16]
 800b3c4:	6022      	str	r2, [r4, #0]
 800b3c6:	d504      	bpl.n	800b3d2 <__sflush_r+0x7e>
 800b3c8:	1c42      	adds	r2, r0, #1
 800b3ca:	d101      	bne.n	800b3d0 <__sflush_r+0x7c>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b903      	cbnz	r3, 800b3d2 <__sflush_r+0x7e>
 800b3d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b3d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3d4:	602f      	str	r7, [r5, #0]
 800b3d6:	2900      	cmp	r1, #0
 800b3d8:	d0c9      	beq.n	800b36e <__sflush_r+0x1a>
 800b3da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3de:	4299      	cmp	r1, r3
 800b3e0:	d002      	beq.n	800b3e8 <__sflush_r+0x94>
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f7fe fd3a 	bl	8009e5c <_free_r>
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b3ec:	e7c0      	b.n	800b370 <__sflush_r+0x1c>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	47b0      	blx	r6
 800b3f4:	1c41      	adds	r1, r0, #1
 800b3f6:	d1c8      	bne.n	800b38a <__sflush_r+0x36>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0c5      	beq.n	800b38a <__sflush_r+0x36>
 800b3fe:	2b1d      	cmp	r3, #29
 800b400:	d001      	beq.n	800b406 <__sflush_r+0xb2>
 800b402:	2b16      	cmp	r3, #22
 800b404:	d101      	bne.n	800b40a <__sflush_r+0xb6>
 800b406:	602f      	str	r7, [r5, #0]
 800b408:	e7b1      	b.n	800b36e <__sflush_r+0x1a>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b410:	81a3      	strh	r3, [r4, #12]
 800b412:	e7ad      	b.n	800b370 <__sflush_r+0x1c>
 800b414:	690f      	ldr	r7, [r1, #16]
 800b416:	2f00      	cmp	r7, #0
 800b418:	d0a9      	beq.n	800b36e <__sflush_r+0x1a>
 800b41a:	0793      	lsls	r3, r2, #30
 800b41c:	680e      	ldr	r6, [r1, #0]
 800b41e:	bf08      	it	eq
 800b420:	694b      	ldreq	r3, [r1, #20]
 800b422:	600f      	str	r7, [r1, #0]
 800b424:	bf18      	it	ne
 800b426:	2300      	movne	r3, #0
 800b428:	eba6 0807 	sub.w	r8, r6, r7
 800b42c:	608b      	str	r3, [r1, #8]
 800b42e:	f1b8 0f00 	cmp.w	r8, #0
 800b432:	dd9c      	ble.n	800b36e <__sflush_r+0x1a>
 800b434:	6a21      	ldr	r1, [r4, #32]
 800b436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b438:	4643      	mov	r3, r8
 800b43a:	463a      	mov	r2, r7
 800b43c:	4628      	mov	r0, r5
 800b43e:	47b0      	blx	r6
 800b440:	2800      	cmp	r0, #0
 800b442:	dc06      	bgt.n	800b452 <__sflush_r+0xfe>
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	f04f 30ff 	mov.w	r0, #4294967295
 800b450:	e78e      	b.n	800b370 <__sflush_r+0x1c>
 800b452:	4407      	add	r7, r0
 800b454:	eba8 0800 	sub.w	r8, r8, r0
 800b458:	e7e9      	b.n	800b42e <__sflush_r+0xda>
 800b45a:	bf00      	nop
 800b45c:	dfbffffe 	.word	0xdfbffffe

0800b460 <_fflush_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	690b      	ldr	r3, [r1, #16]
 800b464:	4605      	mov	r5, r0
 800b466:	460c      	mov	r4, r1
 800b468:	b913      	cbnz	r3, 800b470 <_fflush_r+0x10>
 800b46a:	2500      	movs	r5, #0
 800b46c:	4628      	mov	r0, r5
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	b118      	cbz	r0, 800b47a <_fflush_r+0x1a>
 800b472:	6a03      	ldr	r3, [r0, #32]
 800b474:	b90b      	cbnz	r3, 800b47a <_fflush_r+0x1a>
 800b476:	f7fd fcdf 	bl	8008e38 <__sinit>
 800b47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d0f3      	beq.n	800b46a <_fflush_r+0xa>
 800b482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b484:	07d0      	lsls	r0, r2, #31
 800b486:	d404      	bmi.n	800b492 <_fflush_r+0x32>
 800b488:	0599      	lsls	r1, r3, #22
 800b48a:	d402      	bmi.n	800b492 <_fflush_r+0x32>
 800b48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b48e:	f7fd fe51 	bl	8009134 <__retarget_lock_acquire_recursive>
 800b492:	4628      	mov	r0, r5
 800b494:	4621      	mov	r1, r4
 800b496:	f7ff ff5d 	bl	800b354 <__sflush_r>
 800b49a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b49c:	07da      	lsls	r2, r3, #31
 800b49e:	4605      	mov	r5, r0
 800b4a0:	d4e4      	bmi.n	800b46c <_fflush_r+0xc>
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	059b      	lsls	r3, r3, #22
 800b4a6:	d4e1      	bmi.n	800b46c <_fflush_r+0xc>
 800b4a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4aa:	f7fd fe44 	bl	8009136 <__retarget_lock_release_recursive>
 800b4ae:	e7dd      	b.n	800b46c <_fflush_r+0xc>

0800b4b0 <memmove>:
 800b4b0:	4288      	cmp	r0, r1
 800b4b2:	b510      	push	{r4, lr}
 800b4b4:	eb01 0402 	add.w	r4, r1, r2
 800b4b8:	d902      	bls.n	800b4c0 <memmove+0x10>
 800b4ba:	4284      	cmp	r4, r0
 800b4bc:	4623      	mov	r3, r4
 800b4be:	d807      	bhi.n	800b4d0 <memmove+0x20>
 800b4c0:	1e43      	subs	r3, r0, #1
 800b4c2:	42a1      	cmp	r1, r4
 800b4c4:	d008      	beq.n	800b4d8 <memmove+0x28>
 800b4c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4ce:	e7f8      	b.n	800b4c2 <memmove+0x12>
 800b4d0:	4402      	add	r2, r0
 800b4d2:	4601      	mov	r1, r0
 800b4d4:	428a      	cmp	r2, r1
 800b4d6:	d100      	bne.n	800b4da <memmove+0x2a>
 800b4d8:	bd10      	pop	{r4, pc}
 800b4da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4e2:	e7f7      	b.n	800b4d4 <memmove+0x24>

0800b4e4 <_sbrk_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4d06      	ldr	r5, [pc, #24]	; (800b500 <_sbrk_r+0x1c>)
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	602b      	str	r3, [r5, #0]
 800b4f0:	f7f6 fe5a 	bl	80021a8 <_sbrk>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_sbrk_r+0x1a>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_sbrk_r+0x1a>
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	20004504 	.word	0x20004504

0800b504 <__assert_func>:
 800b504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b506:	4614      	mov	r4, r2
 800b508:	461a      	mov	r2, r3
 800b50a:	4b09      	ldr	r3, [pc, #36]	; (800b530 <__assert_func+0x2c>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4605      	mov	r5, r0
 800b510:	68d8      	ldr	r0, [r3, #12]
 800b512:	b14c      	cbz	r4, 800b528 <__assert_func+0x24>
 800b514:	4b07      	ldr	r3, [pc, #28]	; (800b534 <__assert_func+0x30>)
 800b516:	9100      	str	r1, [sp, #0]
 800b518:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b51c:	4906      	ldr	r1, [pc, #24]	; (800b538 <__assert_func+0x34>)
 800b51e:	462b      	mov	r3, r5
 800b520:	f000 f854 	bl	800b5cc <fiprintf>
 800b524:	f000 f864 	bl	800b5f0 <abort>
 800b528:	4b04      	ldr	r3, [pc, #16]	; (800b53c <__assert_func+0x38>)
 800b52a:	461c      	mov	r4, r3
 800b52c:	e7f3      	b.n	800b516 <__assert_func+0x12>
 800b52e:	bf00      	nop
 800b530:	200001e0 	.word	0x200001e0
 800b534:	0800c035 	.word	0x0800c035
 800b538:	0800c042 	.word	0x0800c042
 800b53c:	0800c070 	.word	0x0800c070

0800b540 <_calloc_r>:
 800b540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b542:	fba1 2402 	umull	r2, r4, r1, r2
 800b546:	b94c      	cbnz	r4, 800b55c <_calloc_r+0x1c>
 800b548:	4611      	mov	r1, r2
 800b54a:	9201      	str	r2, [sp, #4]
 800b54c:	f7ff f852 	bl	800a5f4 <_malloc_r>
 800b550:	9a01      	ldr	r2, [sp, #4]
 800b552:	4605      	mov	r5, r0
 800b554:	b930      	cbnz	r0, 800b564 <_calloc_r+0x24>
 800b556:	4628      	mov	r0, r5
 800b558:	b003      	add	sp, #12
 800b55a:	bd30      	pop	{r4, r5, pc}
 800b55c:	220c      	movs	r2, #12
 800b55e:	6002      	str	r2, [r0, #0]
 800b560:	2500      	movs	r5, #0
 800b562:	e7f8      	b.n	800b556 <_calloc_r+0x16>
 800b564:	4621      	mov	r1, r4
 800b566:	f7fd fd00 	bl	8008f6a <memset>
 800b56a:	e7f4      	b.n	800b556 <_calloc_r+0x16>

0800b56c <_realloc_r>:
 800b56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b570:	4680      	mov	r8, r0
 800b572:	4614      	mov	r4, r2
 800b574:	460e      	mov	r6, r1
 800b576:	b921      	cbnz	r1, 800b582 <_realloc_r+0x16>
 800b578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b57c:	4611      	mov	r1, r2
 800b57e:	f7ff b839 	b.w	800a5f4 <_malloc_r>
 800b582:	b92a      	cbnz	r2, 800b590 <_realloc_r+0x24>
 800b584:	f7fe fc6a 	bl	8009e5c <_free_r>
 800b588:	4625      	mov	r5, r4
 800b58a:	4628      	mov	r0, r5
 800b58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b590:	f000 f835 	bl	800b5fe <_malloc_usable_size_r>
 800b594:	4284      	cmp	r4, r0
 800b596:	4607      	mov	r7, r0
 800b598:	d802      	bhi.n	800b5a0 <_realloc_r+0x34>
 800b59a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b59e:	d812      	bhi.n	800b5c6 <_realloc_r+0x5a>
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	f7ff f826 	bl	800a5f4 <_malloc_r>
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d0ed      	beq.n	800b58a <_realloc_r+0x1e>
 800b5ae:	42bc      	cmp	r4, r7
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	bf28      	it	cs
 800b5b6:	463a      	movcs	r2, r7
 800b5b8:	f7fd fdbe 	bl	8009138 <memcpy>
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4640      	mov	r0, r8
 800b5c0:	f7fe fc4c 	bl	8009e5c <_free_r>
 800b5c4:	e7e1      	b.n	800b58a <_realloc_r+0x1e>
 800b5c6:	4635      	mov	r5, r6
 800b5c8:	e7df      	b.n	800b58a <_realloc_r+0x1e>
	...

0800b5cc <fiprintf>:
 800b5cc:	b40e      	push	{r1, r2, r3}
 800b5ce:	b503      	push	{r0, r1, lr}
 800b5d0:	4601      	mov	r1, r0
 800b5d2:	ab03      	add	r3, sp, #12
 800b5d4:	4805      	ldr	r0, [pc, #20]	; (800b5ec <fiprintf+0x20>)
 800b5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5da:	6800      	ldr	r0, [r0, #0]
 800b5dc:	9301      	str	r3, [sp, #4]
 800b5de:	f000 f83f 	bl	800b660 <_vfiprintf_r>
 800b5e2:	b002      	add	sp, #8
 800b5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5e8:	b003      	add	sp, #12
 800b5ea:	4770      	bx	lr
 800b5ec:	200001e0 	.word	0x200001e0

0800b5f0 <abort>:
 800b5f0:	b508      	push	{r3, lr}
 800b5f2:	2006      	movs	r0, #6
 800b5f4:	f000 fa0c 	bl	800ba10 <raise>
 800b5f8:	2001      	movs	r0, #1
 800b5fa:	f7f6 fd5d 	bl	80020b8 <_exit>

0800b5fe <_malloc_usable_size_r>:
 800b5fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b602:	1f18      	subs	r0, r3, #4
 800b604:	2b00      	cmp	r3, #0
 800b606:	bfbc      	itt	lt
 800b608:	580b      	ldrlt	r3, [r1, r0]
 800b60a:	18c0      	addlt	r0, r0, r3
 800b60c:	4770      	bx	lr

0800b60e <__sfputc_r>:
 800b60e:	6893      	ldr	r3, [r2, #8]
 800b610:	3b01      	subs	r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	b410      	push	{r4}
 800b616:	6093      	str	r3, [r2, #8]
 800b618:	da08      	bge.n	800b62c <__sfputc_r+0x1e>
 800b61a:	6994      	ldr	r4, [r2, #24]
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	db01      	blt.n	800b624 <__sfputc_r+0x16>
 800b620:	290a      	cmp	r1, #10
 800b622:	d103      	bne.n	800b62c <__sfputc_r+0x1e>
 800b624:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b628:	f000 b934 	b.w	800b894 <__swbuf_r>
 800b62c:	6813      	ldr	r3, [r2, #0]
 800b62e:	1c58      	adds	r0, r3, #1
 800b630:	6010      	str	r0, [r2, #0]
 800b632:	7019      	strb	r1, [r3, #0]
 800b634:	4608      	mov	r0, r1
 800b636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <__sfputs_r>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	4606      	mov	r6, r0
 800b640:	460f      	mov	r7, r1
 800b642:	4614      	mov	r4, r2
 800b644:	18d5      	adds	r5, r2, r3
 800b646:	42ac      	cmp	r4, r5
 800b648:	d101      	bne.n	800b64e <__sfputs_r+0x12>
 800b64a:	2000      	movs	r0, #0
 800b64c:	e007      	b.n	800b65e <__sfputs_r+0x22>
 800b64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b652:	463a      	mov	r2, r7
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff ffda 	bl	800b60e <__sfputc_r>
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	d1f3      	bne.n	800b646 <__sfputs_r+0xa>
 800b65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b660 <_vfiprintf_r>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	460d      	mov	r5, r1
 800b666:	b09d      	sub	sp, #116	; 0x74
 800b668:	4614      	mov	r4, r2
 800b66a:	4698      	mov	r8, r3
 800b66c:	4606      	mov	r6, r0
 800b66e:	b118      	cbz	r0, 800b678 <_vfiprintf_r+0x18>
 800b670:	6a03      	ldr	r3, [r0, #32]
 800b672:	b90b      	cbnz	r3, 800b678 <_vfiprintf_r+0x18>
 800b674:	f7fd fbe0 	bl	8008e38 <__sinit>
 800b678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b67a:	07d9      	lsls	r1, r3, #31
 800b67c:	d405      	bmi.n	800b68a <_vfiprintf_r+0x2a>
 800b67e:	89ab      	ldrh	r3, [r5, #12]
 800b680:	059a      	lsls	r2, r3, #22
 800b682:	d402      	bmi.n	800b68a <_vfiprintf_r+0x2a>
 800b684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b686:	f7fd fd55 	bl	8009134 <__retarget_lock_acquire_recursive>
 800b68a:	89ab      	ldrh	r3, [r5, #12]
 800b68c:	071b      	lsls	r3, r3, #28
 800b68e:	d501      	bpl.n	800b694 <_vfiprintf_r+0x34>
 800b690:	692b      	ldr	r3, [r5, #16]
 800b692:	b99b      	cbnz	r3, 800b6bc <_vfiprintf_r+0x5c>
 800b694:	4629      	mov	r1, r5
 800b696:	4630      	mov	r0, r6
 800b698:	f000 f93a 	bl	800b910 <__swsetup_r>
 800b69c:	b170      	cbz	r0, 800b6bc <_vfiprintf_r+0x5c>
 800b69e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6a0:	07dc      	lsls	r4, r3, #31
 800b6a2:	d504      	bpl.n	800b6ae <_vfiprintf_r+0x4e>
 800b6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a8:	b01d      	add	sp, #116	; 0x74
 800b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ae:	89ab      	ldrh	r3, [r5, #12]
 800b6b0:	0598      	lsls	r0, r3, #22
 800b6b2:	d4f7      	bmi.n	800b6a4 <_vfiprintf_r+0x44>
 800b6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6b6:	f7fd fd3e 	bl	8009136 <__retarget_lock_release_recursive>
 800b6ba:	e7f3      	b.n	800b6a4 <_vfiprintf_r+0x44>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c0:	2320      	movs	r3, #32
 800b6c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ca:	2330      	movs	r3, #48	; 0x30
 800b6cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b880 <_vfiprintf_r+0x220>
 800b6d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6d4:	f04f 0901 	mov.w	r9, #1
 800b6d8:	4623      	mov	r3, r4
 800b6da:	469a      	mov	sl, r3
 800b6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6e0:	b10a      	cbz	r2, 800b6e6 <_vfiprintf_r+0x86>
 800b6e2:	2a25      	cmp	r2, #37	; 0x25
 800b6e4:	d1f9      	bne.n	800b6da <_vfiprintf_r+0x7a>
 800b6e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ea:	d00b      	beq.n	800b704 <_vfiprintf_r+0xa4>
 800b6ec:	465b      	mov	r3, fp
 800b6ee:	4622      	mov	r2, r4
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7ff ffa2 	bl	800b63c <__sfputs_r>
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	f000 80a9 	beq.w	800b850 <_vfiprintf_r+0x1f0>
 800b6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b700:	445a      	add	r2, fp
 800b702:	9209      	str	r2, [sp, #36]	; 0x24
 800b704:	f89a 3000 	ldrb.w	r3, [sl]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 80a1 	beq.w	800b850 <_vfiprintf_r+0x1f0>
 800b70e:	2300      	movs	r3, #0
 800b710:	f04f 32ff 	mov.w	r2, #4294967295
 800b714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b718:	f10a 0a01 	add.w	sl, sl, #1
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	9307      	str	r3, [sp, #28]
 800b720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b724:	931a      	str	r3, [sp, #104]	; 0x68
 800b726:	4654      	mov	r4, sl
 800b728:	2205      	movs	r2, #5
 800b72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72e:	4854      	ldr	r0, [pc, #336]	; (800b880 <_vfiprintf_r+0x220>)
 800b730:	f7f4 fd5e 	bl	80001f0 <memchr>
 800b734:	9a04      	ldr	r2, [sp, #16]
 800b736:	b9d8      	cbnz	r0, 800b770 <_vfiprintf_r+0x110>
 800b738:	06d1      	lsls	r1, r2, #27
 800b73a:	bf44      	itt	mi
 800b73c:	2320      	movmi	r3, #32
 800b73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b742:	0713      	lsls	r3, r2, #28
 800b744:	bf44      	itt	mi
 800b746:	232b      	movmi	r3, #43	; 0x2b
 800b748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b74c:	f89a 3000 	ldrb.w	r3, [sl]
 800b750:	2b2a      	cmp	r3, #42	; 0x2a
 800b752:	d015      	beq.n	800b780 <_vfiprintf_r+0x120>
 800b754:	9a07      	ldr	r2, [sp, #28]
 800b756:	4654      	mov	r4, sl
 800b758:	2000      	movs	r0, #0
 800b75a:	f04f 0c0a 	mov.w	ip, #10
 800b75e:	4621      	mov	r1, r4
 800b760:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b764:	3b30      	subs	r3, #48	; 0x30
 800b766:	2b09      	cmp	r3, #9
 800b768:	d94d      	bls.n	800b806 <_vfiprintf_r+0x1a6>
 800b76a:	b1b0      	cbz	r0, 800b79a <_vfiprintf_r+0x13a>
 800b76c:	9207      	str	r2, [sp, #28]
 800b76e:	e014      	b.n	800b79a <_vfiprintf_r+0x13a>
 800b770:	eba0 0308 	sub.w	r3, r0, r8
 800b774:	fa09 f303 	lsl.w	r3, r9, r3
 800b778:	4313      	orrs	r3, r2
 800b77a:	9304      	str	r3, [sp, #16]
 800b77c:	46a2      	mov	sl, r4
 800b77e:	e7d2      	b.n	800b726 <_vfiprintf_r+0xc6>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	1d19      	adds	r1, r3, #4
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	9103      	str	r1, [sp, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	bfbb      	ittet	lt
 800b78c:	425b      	neglt	r3, r3
 800b78e:	f042 0202 	orrlt.w	r2, r2, #2
 800b792:	9307      	strge	r3, [sp, #28]
 800b794:	9307      	strlt	r3, [sp, #28]
 800b796:	bfb8      	it	lt
 800b798:	9204      	strlt	r2, [sp, #16]
 800b79a:	7823      	ldrb	r3, [r4, #0]
 800b79c:	2b2e      	cmp	r3, #46	; 0x2e
 800b79e:	d10c      	bne.n	800b7ba <_vfiprintf_r+0x15a>
 800b7a0:	7863      	ldrb	r3, [r4, #1]
 800b7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a4:	d134      	bne.n	800b810 <_vfiprintf_r+0x1b0>
 800b7a6:	9b03      	ldr	r3, [sp, #12]
 800b7a8:	1d1a      	adds	r2, r3, #4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	9203      	str	r2, [sp, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bfb8      	it	lt
 800b7b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7b6:	3402      	adds	r4, #2
 800b7b8:	9305      	str	r3, [sp, #20]
 800b7ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b890 <_vfiprintf_r+0x230>
 800b7be:	7821      	ldrb	r1, [r4, #0]
 800b7c0:	2203      	movs	r2, #3
 800b7c2:	4650      	mov	r0, sl
 800b7c4:	f7f4 fd14 	bl	80001f0 <memchr>
 800b7c8:	b138      	cbz	r0, 800b7da <_vfiprintf_r+0x17a>
 800b7ca:	9b04      	ldr	r3, [sp, #16]
 800b7cc:	eba0 000a 	sub.w	r0, r0, sl
 800b7d0:	2240      	movs	r2, #64	; 0x40
 800b7d2:	4082      	lsls	r2, r0
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	3401      	adds	r4, #1
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7de:	4829      	ldr	r0, [pc, #164]	; (800b884 <_vfiprintf_r+0x224>)
 800b7e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7e4:	2206      	movs	r2, #6
 800b7e6:	f7f4 fd03 	bl	80001f0 <memchr>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d03f      	beq.n	800b86e <_vfiprintf_r+0x20e>
 800b7ee:	4b26      	ldr	r3, [pc, #152]	; (800b888 <_vfiprintf_r+0x228>)
 800b7f0:	bb1b      	cbnz	r3, 800b83a <_vfiprintf_r+0x1da>
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	3307      	adds	r3, #7
 800b7f6:	f023 0307 	bic.w	r3, r3, #7
 800b7fa:	3308      	adds	r3, #8
 800b7fc:	9303      	str	r3, [sp, #12]
 800b7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b800:	443b      	add	r3, r7
 800b802:	9309      	str	r3, [sp, #36]	; 0x24
 800b804:	e768      	b.n	800b6d8 <_vfiprintf_r+0x78>
 800b806:	fb0c 3202 	mla	r2, ip, r2, r3
 800b80a:	460c      	mov	r4, r1
 800b80c:	2001      	movs	r0, #1
 800b80e:	e7a6      	b.n	800b75e <_vfiprintf_r+0xfe>
 800b810:	2300      	movs	r3, #0
 800b812:	3401      	adds	r4, #1
 800b814:	9305      	str	r3, [sp, #20]
 800b816:	4619      	mov	r1, r3
 800b818:	f04f 0c0a 	mov.w	ip, #10
 800b81c:	4620      	mov	r0, r4
 800b81e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b822:	3a30      	subs	r2, #48	; 0x30
 800b824:	2a09      	cmp	r2, #9
 800b826:	d903      	bls.n	800b830 <_vfiprintf_r+0x1d0>
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d0c6      	beq.n	800b7ba <_vfiprintf_r+0x15a>
 800b82c:	9105      	str	r1, [sp, #20]
 800b82e:	e7c4      	b.n	800b7ba <_vfiprintf_r+0x15a>
 800b830:	fb0c 2101 	mla	r1, ip, r1, r2
 800b834:	4604      	mov	r4, r0
 800b836:	2301      	movs	r3, #1
 800b838:	e7f0      	b.n	800b81c <_vfiprintf_r+0x1bc>
 800b83a:	ab03      	add	r3, sp, #12
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	462a      	mov	r2, r5
 800b840:	4b12      	ldr	r3, [pc, #72]	; (800b88c <_vfiprintf_r+0x22c>)
 800b842:	a904      	add	r1, sp, #16
 800b844:	4630      	mov	r0, r6
 800b846:	f7fc feb7 	bl	80085b8 <_printf_float>
 800b84a:	4607      	mov	r7, r0
 800b84c:	1c78      	adds	r0, r7, #1
 800b84e:	d1d6      	bne.n	800b7fe <_vfiprintf_r+0x19e>
 800b850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b852:	07d9      	lsls	r1, r3, #31
 800b854:	d405      	bmi.n	800b862 <_vfiprintf_r+0x202>
 800b856:	89ab      	ldrh	r3, [r5, #12]
 800b858:	059a      	lsls	r2, r3, #22
 800b85a:	d402      	bmi.n	800b862 <_vfiprintf_r+0x202>
 800b85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b85e:	f7fd fc6a 	bl	8009136 <__retarget_lock_release_recursive>
 800b862:	89ab      	ldrh	r3, [r5, #12]
 800b864:	065b      	lsls	r3, r3, #25
 800b866:	f53f af1d 	bmi.w	800b6a4 <_vfiprintf_r+0x44>
 800b86a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b86c:	e71c      	b.n	800b6a8 <_vfiprintf_r+0x48>
 800b86e:	ab03      	add	r3, sp, #12
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	462a      	mov	r2, r5
 800b874:	4b05      	ldr	r3, [pc, #20]	; (800b88c <_vfiprintf_r+0x22c>)
 800b876:	a904      	add	r1, sp, #16
 800b878:	4630      	mov	r0, r6
 800b87a:	f7fd f941 	bl	8008b00 <_printf_i>
 800b87e:	e7e4      	b.n	800b84a <_vfiprintf_r+0x1ea>
 800b880:	0800c024 	.word	0x0800c024
 800b884:	0800c02e 	.word	0x0800c02e
 800b888:	080085b9 	.word	0x080085b9
 800b88c:	0800b63d 	.word	0x0800b63d
 800b890:	0800c02a 	.word	0x0800c02a

0800b894 <__swbuf_r>:
 800b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b896:	460e      	mov	r6, r1
 800b898:	4614      	mov	r4, r2
 800b89a:	4605      	mov	r5, r0
 800b89c:	b118      	cbz	r0, 800b8a6 <__swbuf_r+0x12>
 800b89e:	6a03      	ldr	r3, [r0, #32]
 800b8a0:	b90b      	cbnz	r3, 800b8a6 <__swbuf_r+0x12>
 800b8a2:	f7fd fac9 	bl	8008e38 <__sinit>
 800b8a6:	69a3      	ldr	r3, [r4, #24]
 800b8a8:	60a3      	str	r3, [r4, #8]
 800b8aa:	89a3      	ldrh	r3, [r4, #12]
 800b8ac:	071a      	lsls	r2, r3, #28
 800b8ae:	d525      	bpl.n	800b8fc <__swbuf_r+0x68>
 800b8b0:	6923      	ldr	r3, [r4, #16]
 800b8b2:	b31b      	cbz	r3, 800b8fc <__swbuf_r+0x68>
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	6922      	ldr	r2, [r4, #16]
 800b8b8:	1a98      	subs	r0, r3, r2
 800b8ba:	6963      	ldr	r3, [r4, #20]
 800b8bc:	b2f6      	uxtb	r6, r6
 800b8be:	4283      	cmp	r3, r0
 800b8c0:	4637      	mov	r7, r6
 800b8c2:	dc04      	bgt.n	800b8ce <__swbuf_r+0x3a>
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f7ff fdca 	bl	800b460 <_fflush_r>
 800b8cc:	b9e0      	cbnz	r0, 800b908 <__swbuf_r+0x74>
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	60a3      	str	r3, [r4, #8]
 800b8d4:	6823      	ldr	r3, [r4, #0]
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	6022      	str	r2, [r4, #0]
 800b8da:	701e      	strb	r6, [r3, #0]
 800b8dc:	6962      	ldr	r2, [r4, #20]
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d004      	beq.n	800b8ee <__swbuf_r+0x5a>
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	07db      	lsls	r3, r3, #31
 800b8e8:	d506      	bpl.n	800b8f8 <__swbuf_r+0x64>
 800b8ea:	2e0a      	cmp	r6, #10
 800b8ec:	d104      	bne.n	800b8f8 <__swbuf_r+0x64>
 800b8ee:	4621      	mov	r1, r4
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	f7ff fdb5 	bl	800b460 <_fflush_r>
 800b8f6:	b938      	cbnz	r0, 800b908 <__swbuf_r+0x74>
 800b8f8:	4638      	mov	r0, r7
 800b8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4628      	mov	r0, r5
 800b900:	f000 f806 	bl	800b910 <__swsetup_r>
 800b904:	2800      	cmp	r0, #0
 800b906:	d0d5      	beq.n	800b8b4 <__swbuf_r+0x20>
 800b908:	f04f 37ff 	mov.w	r7, #4294967295
 800b90c:	e7f4      	b.n	800b8f8 <__swbuf_r+0x64>
	...

0800b910 <__swsetup_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4b2a      	ldr	r3, [pc, #168]	; (800b9bc <__swsetup_r+0xac>)
 800b914:	4605      	mov	r5, r0
 800b916:	6818      	ldr	r0, [r3, #0]
 800b918:	460c      	mov	r4, r1
 800b91a:	b118      	cbz	r0, 800b924 <__swsetup_r+0x14>
 800b91c:	6a03      	ldr	r3, [r0, #32]
 800b91e:	b90b      	cbnz	r3, 800b924 <__swsetup_r+0x14>
 800b920:	f7fd fa8a 	bl	8008e38 <__sinit>
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b92a:	0718      	lsls	r0, r3, #28
 800b92c:	d422      	bmi.n	800b974 <__swsetup_r+0x64>
 800b92e:	06d9      	lsls	r1, r3, #27
 800b930:	d407      	bmi.n	800b942 <__swsetup_r+0x32>
 800b932:	2309      	movs	r3, #9
 800b934:	602b      	str	r3, [r5, #0]
 800b936:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	e034      	b.n	800b9ac <__swsetup_r+0x9c>
 800b942:	0758      	lsls	r0, r3, #29
 800b944:	d512      	bpl.n	800b96c <__swsetup_r+0x5c>
 800b946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b948:	b141      	cbz	r1, 800b95c <__swsetup_r+0x4c>
 800b94a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b94e:	4299      	cmp	r1, r3
 800b950:	d002      	beq.n	800b958 <__swsetup_r+0x48>
 800b952:	4628      	mov	r0, r5
 800b954:	f7fe fa82 	bl	8009e5c <_free_r>
 800b958:	2300      	movs	r3, #0
 800b95a:	6363      	str	r3, [r4, #52]	; 0x34
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b962:	81a3      	strh	r3, [r4, #12]
 800b964:	2300      	movs	r3, #0
 800b966:	6063      	str	r3, [r4, #4]
 800b968:	6923      	ldr	r3, [r4, #16]
 800b96a:	6023      	str	r3, [r4, #0]
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	f043 0308 	orr.w	r3, r3, #8
 800b972:	81a3      	strh	r3, [r4, #12]
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	b94b      	cbnz	r3, 800b98c <__swsetup_r+0x7c>
 800b978:	89a3      	ldrh	r3, [r4, #12]
 800b97a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b97e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b982:	d003      	beq.n	800b98c <__swsetup_r+0x7c>
 800b984:	4621      	mov	r1, r4
 800b986:	4628      	mov	r0, r5
 800b988:	f000 f884 	bl	800ba94 <__smakebuf_r>
 800b98c:	89a0      	ldrh	r0, [r4, #12]
 800b98e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b992:	f010 0301 	ands.w	r3, r0, #1
 800b996:	d00a      	beq.n	800b9ae <__swsetup_r+0x9e>
 800b998:	2300      	movs	r3, #0
 800b99a:	60a3      	str	r3, [r4, #8]
 800b99c:	6963      	ldr	r3, [r4, #20]
 800b99e:	425b      	negs	r3, r3
 800b9a0:	61a3      	str	r3, [r4, #24]
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	b943      	cbnz	r3, 800b9b8 <__swsetup_r+0xa8>
 800b9a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9aa:	d1c4      	bne.n	800b936 <__swsetup_r+0x26>
 800b9ac:	bd38      	pop	{r3, r4, r5, pc}
 800b9ae:	0781      	lsls	r1, r0, #30
 800b9b0:	bf58      	it	pl
 800b9b2:	6963      	ldrpl	r3, [r4, #20]
 800b9b4:	60a3      	str	r3, [r4, #8]
 800b9b6:	e7f4      	b.n	800b9a2 <__swsetup_r+0x92>
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	e7f7      	b.n	800b9ac <__swsetup_r+0x9c>
 800b9bc:	200001e0 	.word	0x200001e0

0800b9c0 <_raise_r>:
 800b9c0:	291f      	cmp	r1, #31
 800b9c2:	b538      	push	{r3, r4, r5, lr}
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	460d      	mov	r5, r1
 800b9c8:	d904      	bls.n	800b9d4 <_raise_r+0x14>
 800b9ca:	2316      	movs	r3, #22
 800b9cc:	6003      	str	r3, [r0, #0]
 800b9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b9d6:	b112      	cbz	r2, 800b9de <_raise_r+0x1e>
 800b9d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9dc:	b94b      	cbnz	r3, 800b9f2 <_raise_r+0x32>
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f000 f830 	bl	800ba44 <_getpid_r>
 800b9e4:	462a      	mov	r2, r5
 800b9e6:	4601      	mov	r1, r0
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ee:	f000 b817 	b.w	800ba20 <_kill_r>
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d00a      	beq.n	800ba0c <_raise_r+0x4c>
 800b9f6:	1c59      	adds	r1, r3, #1
 800b9f8:	d103      	bne.n	800ba02 <_raise_r+0x42>
 800b9fa:	2316      	movs	r3, #22
 800b9fc:	6003      	str	r3, [r0, #0]
 800b9fe:	2001      	movs	r0, #1
 800ba00:	e7e7      	b.n	800b9d2 <_raise_r+0x12>
 800ba02:	2400      	movs	r4, #0
 800ba04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba08:	4628      	mov	r0, r5
 800ba0a:	4798      	blx	r3
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e7e0      	b.n	800b9d2 <_raise_r+0x12>

0800ba10 <raise>:
 800ba10:	4b02      	ldr	r3, [pc, #8]	; (800ba1c <raise+0xc>)
 800ba12:	4601      	mov	r1, r0
 800ba14:	6818      	ldr	r0, [r3, #0]
 800ba16:	f7ff bfd3 	b.w	800b9c0 <_raise_r>
 800ba1a:	bf00      	nop
 800ba1c:	200001e0 	.word	0x200001e0

0800ba20 <_kill_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d07      	ldr	r5, [pc, #28]	; (800ba40 <_kill_r+0x20>)
 800ba24:	2300      	movs	r3, #0
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	602b      	str	r3, [r5, #0]
 800ba2e:	f7f6 fb33 	bl	8002098 <_kill>
 800ba32:	1c43      	adds	r3, r0, #1
 800ba34:	d102      	bne.n	800ba3c <_kill_r+0x1c>
 800ba36:	682b      	ldr	r3, [r5, #0]
 800ba38:	b103      	cbz	r3, 800ba3c <_kill_r+0x1c>
 800ba3a:	6023      	str	r3, [r4, #0]
 800ba3c:	bd38      	pop	{r3, r4, r5, pc}
 800ba3e:	bf00      	nop
 800ba40:	20004504 	.word	0x20004504

0800ba44 <_getpid_r>:
 800ba44:	f7f6 bb20 	b.w	8002088 <_getpid>

0800ba48 <__swhatbuf_r>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba50:	2900      	cmp	r1, #0
 800ba52:	b096      	sub	sp, #88	; 0x58
 800ba54:	4615      	mov	r5, r2
 800ba56:	461e      	mov	r6, r3
 800ba58:	da0d      	bge.n	800ba76 <__swhatbuf_r+0x2e>
 800ba5a:	89a3      	ldrh	r3, [r4, #12]
 800ba5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ba60:	f04f 0100 	mov.w	r1, #0
 800ba64:	bf0c      	ite	eq
 800ba66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ba6a:	2340      	movne	r3, #64	; 0x40
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	6031      	str	r1, [r6, #0]
 800ba70:	602b      	str	r3, [r5, #0]
 800ba72:	b016      	add	sp, #88	; 0x58
 800ba74:	bd70      	pop	{r4, r5, r6, pc}
 800ba76:	466a      	mov	r2, sp
 800ba78:	f000 f848 	bl	800bb0c <_fstat_r>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	dbec      	blt.n	800ba5a <__swhatbuf_r+0x12>
 800ba80:	9901      	ldr	r1, [sp, #4]
 800ba82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ba86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ba8a:	4259      	negs	r1, r3
 800ba8c:	4159      	adcs	r1, r3
 800ba8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba92:	e7eb      	b.n	800ba6c <__swhatbuf_r+0x24>

0800ba94 <__smakebuf_r>:
 800ba94:	898b      	ldrh	r3, [r1, #12]
 800ba96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba98:	079d      	lsls	r5, r3, #30
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	d507      	bpl.n	800bab0 <__smakebuf_r+0x1c>
 800baa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	6123      	str	r3, [r4, #16]
 800baa8:	2301      	movs	r3, #1
 800baaa:	6163      	str	r3, [r4, #20]
 800baac:	b002      	add	sp, #8
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	ab01      	add	r3, sp, #4
 800bab2:	466a      	mov	r2, sp
 800bab4:	f7ff ffc8 	bl	800ba48 <__swhatbuf_r>
 800bab8:	9900      	ldr	r1, [sp, #0]
 800baba:	4605      	mov	r5, r0
 800babc:	4630      	mov	r0, r6
 800babe:	f7fe fd99 	bl	800a5f4 <_malloc_r>
 800bac2:	b948      	cbnz	r0, 800bad8 <__smakebuf_r+0x44>
 800bac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bac8:	059a      	lsls	r2, r3, #22
 800baca:	d4ef      	bmi.n	800baac <__smakebuf_r+0x18>
 800bacc:	f023 0303 	bic.w	r3, r3, #3
 800bad0:	f043 0302 	orr.w	r3, r3, #2
 800bad4:	81a3      	strh	r3, [r4, #12]
 800bad6:	e7e3      	b.n	800baa0 <__smakebuf_r+0xc>
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	6020      	str	r0, [r4, #0]
 800badc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae0:	81a3      	strh	r3, [r4, #12]
 800bae2:	9b00      	ldr	r3, [sp, #0]
 800bae4:	6163      	str	r3, [r4, #20]
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	6120      	str	r0, [r4, #16]
 800baea:	b15b      	cbz	r3, 800bb04 <__smakebuf_r+0x70>
 800baec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baf0:	4630      	mov	r0, r6
 800baf2:	f000 f81d 	bl	800bb30 <_isatty_r>
 800baf6:	b128      	cbz	r0, 800bb04 <__smakebuf_r+0x70>
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	f023 0303 	bic.w	r3, r3, #3
 800bafe:	f043 0301 	orr.w	r3, r3, #1
 800bb02:	81a3      	strh	r3, [r4, #12]
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	431d      	orrs	r5, r3
 800bb08:	81a5      	strh	r5, [r4, #12]
 800bb0a:	e7cf      	b.n	800baac <__smakebuf_r+0x18>

0800bb0c <_fstat_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4d07      	ldr	r5, [pc, #28]	; (800bb2c <_fstat_r+0x20>)
 800bb10:	2300      	movs	r3, #0
 800bb12:	4604      	mov	r4, r0
 800bb14:	4608      	mov	r0, r1
 800bb16:	4611      	mov	r1, r2
 800bb18:	602b      	str	r3, [r5, #0]
 800bb1a:	f7f6 fb1c 	bl	8002156 <_fstat>
 800bb1e:	1c43      	adds	r3, r0, #1
 800bb20:	d102      	bne.n	800bb28 <_fstat_r+0x1c>
 800bb22:	682b      	ldr	r3, [r5, #0]
 800bb24:	b103      	cbz	r3, 800bb28 <_fstat_r+0x1c>
 800bb26:	6023      	str	r3, [r4, #0]
 800bb28:	bd38      	pop	{r3, r4, r5, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20004504 	.word	0x20004504

0800bb30 <_isatty_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4d06      	ldr	r5, [pc, #24]	; (800bb4c <_isatty_r+0x1c>)
 800bb34:	2300      	movs	r3, #0
 800bb36:	4604      	mov	r4, r0
 800bb38:	4608      	mov	r0, r1
 800bb3a:	602b      	str	r3, [r5, #0]
 800bb3c:	f7f6 fb1b 	bl	8002176 <_isatty>
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	d102      	bne.n	800bb4a <_isatty_r+0x1a>
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	b103      	cbz	r3, 800bb4a <_isatty_r+0x1a>
 800bb48:	6023      	str	r3, [r4, #0]
 800bb4a:	bd38      	pop	{r3, r4, r5, pc}
 800bb4c:	20004504 	.word	0x20004504

0800bb50 <_init>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	bf00      	nop
 800bb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb56:	bc08      	pop	{r3}
 800bb58:	469e      	mov	lr, r3
 800bb5a:	4770      	bx	lr

0800bb5c <_fini>:
 800bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5e:	bf00      	nop
 800bb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb62:	bc08      	pop	{r3}
 800bb64:	469e      	mov	lr, r3
 800bb66:	4770      	bx	lr
