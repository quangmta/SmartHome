
SmartHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800a998  0800a998  0001a998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae04  0800ae04  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae04  0800ae04  0001ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae0c  0800ae0c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae0c  0800ae0c  0001ae0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae10  0800ae10  0001ae10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ae14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000043e4  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200045c8  200045c8  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015f4e  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033b0  00000000  00000000  000361a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001388  00000000  00000000  00039558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f47  00000000  00000000  0003a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000273df  00000000  00000000  0003b827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000171ed  00000000  00000000  00062c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef00c  00000000  00000000  00079df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006140  00000000  00000000  00168e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0016ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a97c 	.word	0x0800a97c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800a97c 	.word	0x0800a97c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <PID_Calc>:
uint32_t timerPID_pres = 0;
float last_error_pres = 0;
float integrated_error_pres = 0;
//extern UART_HandleTypeDef huart6;

int16_t PID_Calc(PidParameter PID, float current, float setPoint) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	; 0x38
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	eef0 6a40 	vmov.f32	s13, s0
 8000fae:	eeb0 7a60 	vmov.f32	s14, s1
 8000fb2:	eef0 7a41 	vmov.f32	s15, s2
 8000fb6:	edc7 1a02 	vstr	s3, [r7, #8]
 8000fba:	ed87 2a01 	vstr	s4, [r7, #4]
 8000fbe:	edc7 6a03 	vstr	s13, [r7, #12]
 8000fc2:	ed87 7a04 	vstr	s14, [r7, #16]
 8000fc6:	edc7 7a05 	vstr	s15, [r7, #20]
	int16_t pidOut = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	86fb      	strh	r3, [r7, #54]	; 0x36
	float pTerm = 0, iTerm = 0, dTerm = 0, dt = 10;
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
 8000fe0:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <PID_Calc+0x150>)
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t now = HAL_GetTick();
 8000fe4:	f001 fc58 	bl	8002898 <HAL_GetTick>
 8000fe8:	6238      	str	r0, [r7, #32]
	if (now > timerPID_pres)
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <PID_Calc+0x154>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6a3a      	ldr	r2, [r7, #32]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d90b      	bls.n	800100c <PID_Calc+0x68>
		dt = (float) (HAL_GetTick() - timerPID_pres);
 8000ff4:	f001 fc50 	bl	8002898 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <PID_Calc+0x154>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001008:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	timerPID_pres = HAL_GetTick();
 800100c:	f001 fc44 	bl	8002898 <HAL_GetTick>
 8001010:	4603      	mov	r3, r0
 8001012:	4a39      	ldr	r2, [pc, #228]	; (80010f8 <PID_Calc+0x154>)
 8001014:	6013      	str	r3, [r2, #0]
	float error = setPoint - current;
 8001016:	ed97 7a01 	vldr	s14, [r7, #4]
 800101a:	edd7 7a02 	vldr	s15, [r7, #8]
 800101e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001022:	edc7 7a07 	vstr	s15, [r7, #28]

	pTerm = PID.Kp * error;
 8001026:	edd7 7a03 	vldr	s15, [r7, #12]
 800102a:	ed97 7a07 	vldr	s14, [r7, #28]
 800102e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001032:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	integrated_error_pres += error * dt;
 8001036:	ed97 7a07 	vldr	s14, [r7, #28]
 800103a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800103e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <PID_Calc+0x158>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <PID_Calc+0x158>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
	iTerm = PID.Ki * integrated_error_pres / 1000.0;
 8001052:	ed97 7a04 	vldr	s14, [r7, #16]
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <PID_Calc+0x158>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001060:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001100 <PID_Calc+0x15c>
 8001064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001068:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//	if(iTerm>PWM_MAX/2) iTerm=PWM_MAX/2;
//	else if(iTerm<-PWM_MAX/2) iTerm=-PWM_MAX/2;

	if (dt != 0) {
 800106c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001070:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	d014      	beq.n	80010a4 <PID_Calc+0x100>
		dTerm = 1000 * PID.Kd * (error - last_error_pres) / dt;
 800107a:	edd7 7a05 	vldr	s15, [r7, #20]
 800107e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001100 <PID_Calc+0x15c>
 8001082:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <PID_Calc+0x160>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001090:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001094:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001098:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800109c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	}

	pidOut = (int16_t) (pTerm + iTerm + dTerm);
 80010a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80010a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010bc:	ee17 3a90 	vmov	r3, s15
 80010c0:	86fb      	strh	r3, [r7, #54]	; 0x36

	last_error_pres = error;
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <PID_Calc+0x160>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	6013      	str	r3, [r2, #0]

	if (pidOut > PWM_MAX)
 80010c8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010d0:	db03      	blt.n	80010da <PID_Calc+0x136>
		pidOut = PWM_MAX;
 80010d2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80010d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80010d8:	e005      	b.n	80010e6 <PID_Calc+0x142>
	else if (pidOut < PWM_MIN)
 80010da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010de:	2b00      	cmp	r3, #0
 80010e0:	da01      	bge.n	80010e6 <PID_Calc+0x142>
		pidOut = PWM_MIN;
 80010e2:	2300      	movs	r3, #0
 80010e4:	86fb      	strh	r3, [r7, #54]	; 0x36
	return pidOut;
 80010e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3738      	adds	r7, #56	; 0x38
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	41200000 	.word	0x41200000
 80010f8:	20000200 	.word	0x20000200
 80010fc:	20000208 	.word	0x20000208
 8001100:	447a0000 	.word	0x447a0000
 8001104:	20000204 	.word	0x20000204

08001108 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <vApplicationGetIdleTaskMemory+0x2c>)
 8001118:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <vApplicationGetIdleTaskMemory+0x30>)
 800111e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2000020c 	.word	0x2000020c
 8001138:	200002ac 	.word	0x200002ac

0800113c <HAL_GPIO_EXTI_Callback>:
//		sum += adc_buffer;
//		count++;
//	}
////	flag_adc = 1;
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Thermostat_Pin) {
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800114c:	d115      	bne.n	800117a <HAL_GPIO_EXTI_Callback+0x3e>
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//		HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin, 0);
		if (State_Machine == WORKING)
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_GPIO_EXTI_Callback+0x70>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d103      	bne.n	800115e <HAL_GPIO_EXTI_Callback+0x22>
			State_Machine = HEATER_BLOWING;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_GPIO_EXTI_Callback+0x70>)
 8001158:	2205      	movs	r2, #5
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0x38>
		else if (State_Machine == FAN_IDLE || State_Machine == FAN_ON)
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_GPIO_EXTI_Callback+0x70>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d003      	beq.n	800116e <HAL_GPIO_EXTI_Callback+0x32>
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_GPIO_EXTI_Callback+0x70>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d102      	bne.n	8001174 <HAL_GPIO_EXTI_Callback+0x38>
			State_Machine = BLOCK;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_GPIO_EXTI_Callback+0x70>)
 8001170:	2203      	movs	r2, #3
 8001172:	701a      	strb	r2, [r3, #0]
		pwm_temp =0;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	801a      	strh	r2, [r3, #0]
	}
	if (GPIO_Pin == Relay_Pin) {
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001180:	d105      	bne.n	800118e <HAL_GPIO_EXTI_Callback+0x52>
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
//		HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin, 0);
		State_Machine = BLOCK;
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_GPIO_EXTI_Callback+0x70>)
 8001184:	2203      	movs	r2, #3
 8001186:	701a      	strb	r2, [r3, #0]
		pwm_speed =0;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x78>)
 800118a:	2200      	movs	r2, #0
 800118c:	801a      	strh	r2, [r3, #0]
	}
	if (GPIO_Pin == FC_Failure_Pin) {
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	2b10      	cmp	r3, #16
 8001192:	d105      	bne.n	80011a0 <HAL_GPIO_EXTI_Callback+0x64>
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
//		HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin, 0);
		State_Machine = BLOCK;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_GPIO_EXTI_Callback+0x70>)
 8001196:	2203      	movs	r2, #3
 8001198:	701a      	strb	r2, [r3, #0]
		pwm_speed =0;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x78>)
 800119c:	2200      	movs	r2, #0
 800119e:	801a      	strh	r2, [r3, #0]
	}
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	2000071c 	.word	0x2000071c
 80011b0:	20000608 	.word	0x20000608
 80011b4:	2000060a 	.word	0x2000060a

080011b8 <calculate_crc8>:
//		HAL_UART_Receive_IT(&huart6, rx_buffer, 7);
////		HAL_UART_Transmit(&huart6, rx_buffer, 7, HAL_MAX_DELAY);
//	}
//}

uint8_t calculate_crc8(uint8_t *pcBlock, uint8_t len) {
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0xFF;
 80011c4:	23ff      	movs	r3, #255	; 0xff
 80011c6:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	while (len--) {
 80011c8:	e01f      	b.n	800120a <calculate_crc8+0x52>
		crc ^= *pcBlock++;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4053      	eors	r3, r2
 80011d6:	73fb      	strb	r3, [r7, #15]

		for (i = 0; i < 8; i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	73bb      	strb	r3, [r7, #14]
 80011dc:	e012      	b.n	8001204 <calculate_crc8+0x4c>
			crc = crc & 0x80 ? (crc << 1) ^ CRC8_POLYNOMIAL : crc << 1;
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da07      	bge.n	80011f6 <calculate_crc8+0x3e>
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	e002      	b.n	80011fc <calculate_crc8+0x44>
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < 8; i++)
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	3301      	adds	r3, #1
 8001202:	73bb      	strb	r3, [r7, #14]
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b07      	cmp	r3, #7
 8001208:	d9e9      	bls.n	80011de <calculate_crc8+0x26>
	while (len--) {
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	70fa      	strb	r2, [r7, #3]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1da      	bne.n	80011ca <calculate_crc8+0x12>
	}

	return crc;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART6) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <HAL_UARTEx_RxEventCallback+0x68>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d123      	bne.n	8001282 <HAL_UARTEx_RxEventCallback+0x5e>
		memcpy((uint8_t*) rx_buffer, RxBufDMA, Size);
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	461a      	mov	r2, r3
 800123e:	4914      	ldr	r1, [pc, #80]	; (8001290 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001240:	4814      	ldr	r0, [pc, #80]	; (8001294 <HAL_UARTEx_RxEventCallback+0x70>)
 8001242:	f007 fcc9 	bl	8008bd8 <memcpy>
		memset((uint8_t*) rx_buffer + Size, 0, RxBuf_SIZE - Size);
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <HAL_UARTEx_RxEventCallback+0x70>)
 800124a:	1898      	adds	r0, r3, r2
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001252:	461a      	mov	r2, r3
 8001254:	2100      	movs	r1, #0
 8001256:	f007 fbea 	bl	8008a2e <memset>
		rx_length = Size;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_UARTEx_RxEventCallback+0x74>)
 8001260:	701a      	strb	r2, [r3, #0]
		flag_receive = 1;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_UARTEx_RxEventCallback+0x78>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t*) RxBufDMA, RxBuf_SIZE);
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	4909      	ldr	r1, [pc, #36]	; (8001290 <HAL_UARTEx_RxEventCallback+0x6c>)
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <HAL_UARTEx_RxEventCallback+0x7c>)
 800126e:	f004 fa98 	bl	80057a2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_UARTEx_RxEventCallback+0x80>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_UARTEx_RxEventCallback+0x80>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0208 	bic.w	r2, r2, #8
 8001280:	601a      	str	r2, [r3, #0]

	}

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40011400 	.word	0x40011400
 8001290:	200006d4 	.word	0x200006d4
 8001294:	20000650 	.word	0x20000650
 8001298:	200006d0 	.word	0x200006d0
 800129c:	200005f4 	.word	0x200005f4
 80012a0:	2000053c 	.word	0x2000053c
 80012a4:	20000580 	.word	0x20000580

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b0a4      	sub	sp, #144	; 0x90
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f001 fa8d 	bl	80027cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f89b 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f000 fa51 	bl	800175c <MX_GPIO_Init>
  MX_DMA_Init();
 80012ba:	f000 fa2f 	bl	800171c <MX_DMA_Init>
  MX_ADC1_Init();
 80012be:	f000 f905 	bl	80014cc <MX_ADC1_Init>
  MX_TIM1_Init();
 80012c2:	f000 f955 	bl	8001570 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80012c6:	f000 f9ff 	bl	80016c8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//	HAL_ADC_Start_DMA(&hadc1, &adc_buffer, 1);
//	HAL_UART_Receive_IT(&huart6, rx_buffer, 7);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBufDMA, RxBuf_SIZE);
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	4939      	ldr	r1, [pc, #228]	; (80013b4 <main+0x10c>)
 80012ce:	483a      	ldr	r0, [pc, #232]	; (80013b8 <main+0x110>)
 80012d0:	f004 fa67 	bl	80057a2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80012d4:	4b39      	ldr	r3, [pc, #228]	; (80013bc <main+0x114>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <main+0x114>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0208 	bic.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012e4:	2108      	movs	r1, #8
 80012e6:	4836      	ldr	r0, [pc, #216]	; (80013c0 <main+0x118>)
 80012e8:	f003 fb4c 	bl	8004984 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80012ec:	210c      	movs	r1, #12
 80012ee:	4834      	ldr	r0, [pc, #208]	; (80013c0 <main+0x118>)
 80012f0:	f003 fb48 	bl	8004984 <HAL_TIM_PWM_Start>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskReceiveData */
  osThreadDef(TaskReceiveData, StartTaskReceiveData, osPriorityNormal, 0, 128);
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <main+0x11c>)
 80012f6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80012fa:	461d      	mov	r5, r3
 80012fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001300:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001304:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskReceiveDataHandle = osThreadCreate(osThread(TaskReceiveData), NULL);
 8001308:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f005 fbbb 	bl	8006a8a <osThreadCreate>
 8001314:	4603      	mov	r3, r0
 8001316:	4a2c      	ldr	r2, [pc, #176]	; (80013c8 <main+0x120>)
 8001318:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskHeater */
  osThreadDef(TaskHeater, StartTaskHeater, osPriorityNormal, 0, 128);
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <main+0x124>)
 800131c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001320:	461d      	mov	r5, r3
 8001322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001326:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800132a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskHeaterHandle = osThreadCreate(osThread(TaskHeater), NULL);
 800132e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f005 fba8 	bl	8006a8a <osThreadCreate>
 800133a:	4603      	mov	r3, r0
 800133c:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <main+0x128>)
 800133e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskFan */
  osThreadDef(TaskFan, StartTaskFan, osPriorityNormal, 0, 128);
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <main+0x12c>)
 8001342:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001346:	461d      	mov	r5, r3
 8001348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskFanHandle = osThreadCreate(osThread(TaskFan), NULL);
 8001354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f005 fb95 	bl	8006a8a <osThreadCreate>
 8001360:	4603      	mov	r3, r0
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <main+0x130>)
 8001364:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSendData */
  osThreadDef(TaskSendData, StartTaskSendData, osPriorityNormal, 0, 128);
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <main+0x134>)
 8001368:	f107 0420 	add.w	r4, r7, #32
 800136c:	461d      	mov	r5, r3
 800136e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSendDataHandle = osThreadCreate(osThread(TaskSendData), NULL);
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fb82 	bl	8006a8a <osThreadCreate>
 8001386:	4603      	mov	r3, r0
 8001388:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <main+0x138>)
 800138a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskReadTemp */
  osThreadDef(TaskReadTemp, StartTaskReadTemp, osPriorityNormal, 0, 128);
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <main+0x13c>)
 800138e:	1d3c      	adds	r4, r7, #4
 8001390:	461d      	mov	r5, r3
 8001392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001396:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800139a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskReadTempHandle = osThreadCreate(osThread(TaskReadTemp), NULL);
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fb71 	bl	8006a8a <osThreadCreate>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <main+0x140>)
 80013ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013ae:	f005 fb65 	bl	8006a7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80013b2:	e7fe      	b.n	80013b2 <main+0x10a>
 80013b4:	200006d4 	.word	0x200006d4
 80013b8:	2000053c 	.word	0x2000053c
 80013bc:	20000580 	.word	0x20000580
 80013c0:	200004f4 	.word	0x200004f4
 80013c4:	0800a9a8 	.word	0x0800a9a8
 80013c8:	200005e0 	.word	0x200005e0
 80013cc:	0800a9d0 	.word	0x0800a9d0
 80013d0:	200005e4 	.word	0x200005e4
 80013d4:	0800a9f4 	.word	0x0800a9f4
 80013d8:	200005e8 	.word	0x200005e8
 80013dc:	0800aa20 	.word	0x0800aa20
 80013e0:	200005ec 	.word	0x200005ec
 80013e4:	0800aa4c 	.word	0x0800aa4c
 80013e8:	200005f0 	.word	0x200005f0

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	; 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 fb17 	bl	8008a2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <SystemClock_Config+0xd8>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a2a      	ldr	r2, [pc, #168]	; (80014c4 <SystemClock_Config+0xd8>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <SystemClock_Config+0xd8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <SystemClock_Config+0xdc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a24      	ldr	r2, [pc, #144]	; (80014c8 <SystemClock_Config+0xdc>)
 8001436:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <SystemClock_Config+0xdc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800145c:	230f      	movs	r3, #15
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001460:	23d8      	movs	r3, #216	; 0xd8
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fd87 	bl	8003f84 <HAL_RCC_OscConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800147c:	f000 ff0a 	bl	8002294 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001480:	f002 fd30 	bl	8003ee4 <HAL_PWREx_EnableOverDrive>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800148a:	f000 ff03 	bl	8002294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148e:	230f      	movs	r3, #15
 8001490:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001492:	2302      	movs	r3, #2
 8001494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800149a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800149e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2105      	movs	r1, #5
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 ffe1 	bl	8004474 <HAL_RCC_ClockConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80014b8:	f000 feec 	bl	8002294 <Error_Handler>
  }
}
 80014bc:	bf00      	nop
 80014be:	3750      	adds	r7, #80	; 0x50
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_ADC1_Init+0x98>)
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <MX_ADC1_Init+0x9c>)
 80014e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_ADC1_Init+0x98>)
 80014e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_ADC1_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_ADC1_Init+0x98>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_ADC1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_ADC1_Init+0x98>)
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <MX_ADC1_Init+0xa0>)
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_ADC1_Init+0x98>)
 800151a:	2201      	movs	r2, #1
 800151c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_ADC1_Init+0x98>)
 8001528:	2201      	movs	r2, #1
 800152a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_ADC1_Init+0x98>)
 800152e:	f001 f9bf 	bl	80028b0 <HAL_ADC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001538:	f000 feac 	bl	8002294 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800153c:	2305      	movs	r3, #5
 800153e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001544:	2307      	movs	r3, #7
 8001546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_ADC1_Init+0x98>)
 800154e:	f001 fb91 	bl	8002c74 <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001558:	f000 fe9c 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200004ac 	.word	0x200004ac
 8001568:	40012000 	.word	0x40012000
 800156c:	0f000001 	.word	0x0f000001

08001570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b096      	sub	sp, #88	; 0x58
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2220      	movs	r2, #32
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f007 fa40 	bl	8008a2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <MX_TIM1_Init+0x150>)
 80015b0:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <MX_TIM1_Init+0x154>)
 80015b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <MX_TIM1_Init+0x150>)
 80015b6:	2208      	movs	r2, #8
 80015b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <MX_TIM1_Init+0x150>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <MX_TIM1_Init+0x150>)
 80015c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <MX_TIM1_Init+0x150>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <MX_TIM1_Init+0x150>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <MX_TIM1_Init+0x150>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015da:	4839      	ldr	r0, [pc, #228]	; (80016c0 <MX_TIM1_Init+0x150>)
 80015dc:	f003 f92a 	bl	8004834 <HAL_TIM_Base_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015e6:	f000 fe55 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015f4:	4619      	mov	r1, r3
 80015f6:	4832      	ldr	r0, [pc, #200]	; (80016c0 <MX_TIM1_Init+0x150>)
 80015f8:	f003 fb4e 	bl	8004c98 <HAL_TIM_ConfigClockSource>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001602:	f000 fe47 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001606:	482e      	ldr	r0, [pc, #184]	; (80016c0 <MX_TIM1_Init+0x150>)
 8001608:	f003 f963 	bl	80048d2 <HAL_TIM_PWM_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001612:	f000 fe3f 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800161e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001622:	4619      	mov	r1, r3
 8001624:	4826      	ldr	r0, [pc, #152]	; (80016c0 <MX_TIM1_Init+0x150>)
 8001626:	f003 ff0f 	bl	8005448 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001630:	f000 fe30 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001634:	2360      	movs	r3, #96	; 0x60
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	2208      	movs	r2, #8
 8001656:	4619      	mov	r1, r3
 8001658:	4819      	ldr	r0, [pc, #100]	; (80016c0 <MX_TIM1_Init+0x150>)
 800165a:	f003 fa5b 	bl	8004b14 <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001664:	f000 fe16 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	220c      	movs	r2, #12
 800166e:	4619      	mov	r1, r3
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <MX_TIM1_Init+0x150>)
 8001672:	f003 fa4f 	bl	8004b14 <HAL_TIM_PWM_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800167c:	f000 fe0a 	bl	8002294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001698:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <MX_TIM1_Init+0x150>)
 80016a4:	f003 ff4c 	bl	8005540 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80016ae:	f000 fdf1 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <MX_TIM1_Init+0x150>)
 80016b4:	f000 fe86 	bl	80023c4 <HAL_TIM_MspPostInit>

}
 80016b8:	bf00      	nop
 80016ba:	3758      	adds	r7, #88	; 0x58
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200004f4 	.word	0x200004f4
 80016c4:	40010000 	.word	0x40010000

080016c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_USART6_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_USART6_UART_Init+0x4c>)
 8001700:	f003 ff70 	bl	80055e4 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f000 fdc3 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000053c 	.word	0x2000053c
 8001718:	40011400 	.word	0x40011400

0800171c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_DMA_Init+0x3c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <MX_DMA_Init+0x3c>)
 800172c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_DMA_Init+0x3c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2105      	movs	r1, #5
 8001742:	2039      	movs	r0, #57	; 0x39
 8001744:	f001 fd9f 	bl	8003286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001748:	2039      	movs	r0, #57	; 0x39
 800174a:	f001 fdb8 	bl	80032be <HAL_NVIC_EnableIRQ>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	4b55      	ldr	r3, [pc, #340]	; (80018cc <MX_GPIO_Init+0x170>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a54      	ldr	r2, [pc, #336]	; (80018cc <MX_GPIO_Init+0x170>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b52      	ldr	r3, [pc, #328]	; (80018cc <MX_GPIO_Init+0x170>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	4b4e      	ldr	r3, [pc, #312]	; (80018cc <MX_GPIO_Init+0x170>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <MX_GPIO_Init+0x170>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <MX_GPIO_Init+0x170>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <MX_GPIO_Init+0x170>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a46      	ldr	r2, [pc, #280]	; (80018cc <MX_GPIO_Init+0x170>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b44      	ldr	r3, [pc, #272]	; (80018cc <MX_GPIO_Init+0x170>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <MX_GPIO_Init+0x170>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <MX_GPIO_Init+0x170>)
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <MX_GPIO_Init+0x170>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <MX_GPIO_Init+0x170>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a38      	ldr	r2, [pc, #224]	; (80018cc <MX_GPIO_Init+0x170>)
 80017ec:	f043 0308 	orr.w	r3, r3, #8
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <MX_GPIO_Init+0x170>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <MX_GPIO_Init+0x170>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a31      	ldr	r2, [pc, #196]	; (80018cc <MX_GPIO_Init+0x170>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <MX_GPIO_Init+0x170>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001820:	482b      	ldr	r0, [pc, #172]	; (80018d0 <MX_GPIO_Init+0x174>)
 8001822:	f002 fb2d 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FC_Ctrl_Pin
 8001826:	2200      	movs	r2, #0
 8001828:	f24e 010a 	movw	r1, #57354	; 0xe00a
 800182c:	4829      	ldr	r0, [pc, #164]	; (80018d4 <MX_GPIO_Init+0x178>)
 800182e:	f002 fb27 	bl	8003e80 <HAL_GPIO_WritePin>
                          |Fan_Ctrl_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Thermostat_Pin Relay_Pin */
  GPIO_InitStruct.Pin = Thermostat_Pin|Relay_Pin;
 8001832:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001838:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800183e:	2302      	movs	r3, #2
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4821      	ldr	r0, [pc, #132]	; (80018d0 <MX_GPIO_Init+0x174>)
 800184a:	f002 f955 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Ctrl_Pin */
  GPIO_InitStruct.Pin = Heater_Ctrl_Pin;
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_Ctrl_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	481a      	ldr	r0, [pc, #104]	; (80018d0 <MX_GPIO_Init+0x174>)
 8001868:	f002 f946 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 FC_Ctrl_Pin
                           Fan_Ctrl_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FC_Ctrl_Pin
 800186c:	f24e 030a 	movw	r3, #57354	; 0xe00a
 8001870:	61fb      	str	r3, [r7, #28]
                          |Fan_Ctrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	4813      	ldr	r0, [pc, #76]	; (80018d4 <MX_GPIO_Init+0x178>)
 8001886:	f002 f937 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FC_Failure_Pin */
  GPIO_InitStruct.Pin = FC_Failure_Pin;
 800188a:	2310      	movs	r3, #16
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800188e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001894:	2302      	movs	r3, #2
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FC_Failure_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_GPIO_Init+0x178>)
 80018a0:	f002 f92a 	bl	8003af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2105      	movs	r1, #5
 80018a8:	200a      	movs	r0, #10
 80018aa:	f001 fcec 	bl	8003286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018ae:	200a      	movs	r0, #10
 80018b0:	f001 fd05 	bl	80032be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2105      	movs	r1, #5
 80018b8:	2017      	movs	r0, #23
 80018ba:	f001 fce4 	bl	8003286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018be:	2017      	movs	r0, #23
 80018c0:	f001 fcfd 	bl	80032be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c4:	bf00      	nop
 80018c6:	3730      	adds	r7, #48	; 0x30
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40020c00 	.word	0x40020c00

080018d8 <readTemp>:

/* USER CODE BEGIN 4 */
float readTemp(uint32_t timeout) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 80018e0:	481d      	ldr	r0, [pc, #116]	; (8001958 <readTemp+0x80>)
 80018e2:	f001 f829 	bl	8002938 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, timeout);
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	481b      	ldr	r0, [pc, #108]	; (8001958 <readTemp+0x80>)
 80018ea:	f001 f92a 	bl	8002b42 <HAL_ADC_PollForConversion>
	float Temp = (float) HAL_ADC_GetValue(&hadc1) / 4095 * 3.3 * coeff_temp;
 80018ee:	481a      	ldr	r0, [pc, #104]	; (8001958 <readTemp+0x80>)
 80018f0:	f001 f9b2 	bl	8002c58 <HAL_ADC_GetValue>
 80018f4:	ee07 0a90 	vmov	s15, r0
 80018f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800195c <readTemp+0x84>
 8001900:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001904:	ee16 0a90 	vmov	r0, s13
 8001908:	f7fe fe2e 	bl	8000568 <__aeabi_f2d>
 800190c:	a310      	add	r3, pc, #64	; (adr r3, 8001950 <readTemp+0x78>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fe81 	bl	8000618 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <readTemp+0x88>)
 8001924:	f7fe fe78 	bl	8000618 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f96a 	bl	8000c08 <__aeabi_d2f>
 8001934:	4603      	mov	r3, r0
 8001936:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <readTemp+0x80>)
 800193a:	f001 f8cf 	bl	8002adc <HAL_ADC_Stop>
	return Temp;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	ee07 3a90 	vmov	s15, r3
}
 8001944:	eeb0 0a67 	vmov.f32	s0, s15
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	66666666 	.word	0x66666666
 8001954:	400a6666 	.word	0x400a6666
 8001958:	200004ac 	.word	0x200004ac
 800195c:	457ff000 	.word	0x457ff000
 8001960:	40140000 	.word	0x40140000

08001964 <Parse>:

void Parse(uint8_t *buf, int len) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; i++) {
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e06c      	b.n	8001a4e <Parse+0xea>
		if (buf[i] == StartBf) {
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2baa      	cmp	r3, #170	; 0xaa
 800197e:	d109      	bne.n	8001994 <Parse+0x30>
			receiverCount = 0;
 8001980:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <Parse+0xfc>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
			active = 1;
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <Parse+0x100>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
			escaped = 0;
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <Parse+0x104>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
			continue;
 8001992:	e059      	b.n	8001a48 <Parse+0xe4>
		}

		if (buf[i] == StopBf) {
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2bff      	cmp	r3, #255	; 0xff
 800199e:	d125      	bne.n	80019ec <Parse+0x88>
			active = 0;
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <Parse+0x100>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
			escaped = 0;
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <Parse+0x104>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]

			if (receiverCount < 2)
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <Parse+0xfc>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d946      	bls.n	8001a42 <Parse+0xde>
				continue; // we must have at least 1 byte of data and 1 byte of crc

			uint8_t crc = calculate_crc8(receiverData, (receiverCount - 1)); // there is 1 byte of crc in data
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <Parse+0xfc>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	482b      	ldr	r0, [pc, #172]	; (8001a6c <Parse+0x108>)
 80019c0:	f7ff fbfa 	bl	80011b8 <calculate_crc8>
 80019c4:	4603      	mov	r3, r0
 80019c6:	72fb      	strb	r3, [r7, #11]
			if (crc != receiverData[receiverCount - 1])
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <Parse+0xfc>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <Parse+0x108>)
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	7afa      	ldrb	r2, [r7, #11]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d136      	bne.n	8001a46 <Parse+0xe2>
			{
				continue; // crc check failed. Discarding data
				flag_crc = 0;
			}
			else{
				flag_crc = 1;
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <Parse+0x10c>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
			}



			receiverData[receiverCount - 1] = '\0'; // -1 cuz of crc
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <Parse+0xfc>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <Parse+0x108>)
 80019e6:	2100      	movs	r1, #0
 80019e8:	54d1      	strb	r1, [r2, r3]

			continue;
 80019ea:	e02d      	b.n	8001a48 <Parse+0xe4>
		}

		if (buf[i] == EscapeBf) {
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b55      	cmp	r3, #85	; 0x55
 80019f6:	d103      	bne.n	8001a00 <Parse+0x9c>
			escaped = 1;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <Parse+0x104>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
			continue;
 80019fe:	e023      	b.n	8001a48 <Parse+0xe4>
		// Protect against buffer overflow
		if (receiverCount >= bufferSize) {
			active = 1;
		}

		if (active) {
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <Parse+0x100>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01f      	beq.n	8001a48 <Parse+0xe4>
			receiverData[receiverCount++] = (
					escaped ? (uint8_t) (buf[i] ^ 0x20) : buf[i]);
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <Parse+0x104>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
			receiverData[receiverCount++] = (
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <Parse+0xbc>
					escaped ? (uint8_t) (buf[i] ^ 0x20) : buf[i]);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
			receiverData[receiverCount++] = (
 8001a18:	f083 0320 	eor.w	r3, r3, #32
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	e003      	b.n	8001a28 <Parse+0xc4>
					escaped ? (uint8_t) (buf[i] ^ 0x20) : buf[i]);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
			receiverData[receiverCount++] = (
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <Parse+0xfc>)
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	1c51      	adds	r1, r2, #1
 8001a2e:	b2c8      	uxtb	r0, r1
 8001a30:	490b      	ldr	r1, [pc, #44]	; (8001a60 <Parse+0xfc>)
 8001a32:	7008      	strb	r0, [r1, #0]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <Parse+0x108>)
 8001a38:	5453      	strb	r3, [r2, r1]
			escaped = 0;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <Parse+0x104>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
 8001a40:	e002      	b.n	8001a48 <Parse+0xe4>
				continue; // we must have at least 1 byte of data and 1 byte of crc
 8001a42:	bf00      	nop
 8001a44:	e000      	b.n	8001a48 <Parse+0xe4>
				continue; // crc check failed. Discarding data
 8001a46:	bf00      	nop
	for (int i = 0; i < len; i++) {
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	db8e      	blt.n	8001974 <Parse+0x10>
		}
	}
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000714 	.word	0x20000714
 8001a64:	20000716 	.word	0x20000716
 8001a68:	20000715 	.word	0x20000715
 8001a6c:	20000690 	.word	0x20000690
 8001a70:	200006d1 	.word	0x200006d1

08001a74 <PrepareData>:

void PrepareData(uint8_t* data, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
	txSize = 1;
 8001a7e:	4b45      	ldr	r3, [pc, #276]	; (8001b94 <PrepareData+0x120>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	801a      	strh	r2, [r3, #0]
	tx_buffer[0] = StartBf;
 8001a84:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <PrepareData+0x124>)
 8001a86:	22aa      	movs	r2, #170	; 0xaa
 8001a88:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e03c      	b.n	8001b0a <PrepareData+0x96>
	{
//		if (sendSize >= bufferSize - 5) // 2 for data byte and possible escape, 2 for crc and possible escape, 1 for stop
//		throw new Exception("Data was to large");

		if (data[i] == StartBf || data[i] == StopBf || data[i] == EscapeBf)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2baa      	cmp	r3, #170	; 0xaa
 8001a9a:	d00b      	beq.n	8001ab4 <PrepareData+0x40>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2bff      	cmp	r3, #255	; 0xff
 8001aa6:	d005      	beq.n	8001ab4 <PrepareData+0x40>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b55      	cmp	r3, #85	; 0x55
 8001ab2:	d11a      	bne.n	8001aea <PrepareData+0x76>
		{
			tx_buffer[txSize++] = (uint8_t)EscapeBf;
 8001ab4:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <PrepareData+0x120>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	b291      	uxth	r1, r2
 8001abc:	4a35      	ldr	r2, [pc, #212]	; (8001b94 <PrepareData+0x120>)
 8001abe:	8011      	strh	r1, [r2, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <PrepareData+0x124>)
 8001ac4:	2155      	movs	r1, #85	; 0x55
 8001ac6:	5499      	strb	r1, [r3, r2]
			tx_buffer[txSize++] = (uint8_t)(data[i] ^ 0x20);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <PrepareData+0x120>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	1c59      	adds	r1, r3, #1
 8001ad6:	b288      	uxth	r0, r1
 8001ad8:	492e      	ldr	r1, [pc, #184]	; (8001b94 <PrepareData+0x120>)
 8001ada:	8008      	strh	r0, [r1, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f082 0320 	eor.w	r3, r2, #32
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <PrepareData+0x124>)
 8001ae6:	545a      	strb	r2, [r3, r1]
 8001ae8:	e00c      	b.n	8001b04 <PrepareData+0x90>
		}
		else
		{
			tx_buffer[txSize++] = data[i];
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	441a      	add	r2, r3
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <PrepareData+0x120>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	1c59      	adds	r1, r3, #1
 8001af6:	b288      	uxth	r0, r1
 8001af8:	4926      	ldr	r1, [pc, #152]	; (8001b94 <PrepareData+0x120>)
 8001afa:	8008      	strh	r0, [r1, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <PrepareData+0x124>)
 8001b02:	545a      	strb	r2, [r3, r1]
	for (int i = 0; i < len; i++)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbbe      	blt.n	8001a90 <PrepareData+0x1c>
		}
	}
	uint8_t crc = calculate_crc8(data, len);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4619      	mov	r1, r3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fb4d 	bl	80011b8 <calculate_crc8>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	72fb      	strb	r3, [r7, #11]
	if (crc == StartBf || crc == StopBf || crc == EscapeBf)
 8001b22:	7afb      	ldrb	r3, [r7, #11]
 8001b24:	2baa      	cmp	r3, #170	; 0xaa
 8001b26:	d005      	beq.n	8001b34 <PrepareData+0xc0>
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	2bff      	cmp	r3, #255	; 0xff
 8001b2c:	d002      	beq.n	8001b34 <PrepareData+0xc0>
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	2b55      	cmp	r3, #85	; 0x55
 8001b32:	d117      	bne.n	8001b64 <PrepareData+0xf0>
	{
		tx_buffer[txSize++] = (uint8_t)EscapeBf;
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <PrepareData+0x120>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	b291      	uxth	r1, r2
 8001b3c:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <PrepareData+0x120>)
 8001b3e:	8011      	strh	r1, [r2, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <PrepareData+0x124>)
 8001b44:	2155      	movs	r1, #85	; 0x55
 8001b46:	5499      	strb	r1, [r3, r2]
		tx_buffer[txSize++] = (uint8_t)(crc ^ 0x20);
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <PrepareData+0x120>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	b291      	uxth	r1, r2
 8001b50:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <PrepareData+0x120>)
 8001b52:	8011      	strh	r1, [r2, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	f083 0320 	eor.w	r3, r3, #32
 8001b5c:	b2d9      	uxtb	r1, r3
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <PrepareData+0x124>)
 8001b60:	5499      	strb	r1, [r3, r2]
 8001b62:	e009      	b.n	8001b78 <PrepareData+0x104>
	}
	else
	{
		tx_buffer[txSize++] = crc;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <PrepareData+0x120>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	b291      	uxth	r1, r2
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <PrepareData+0x120>)
 8001b6e:	8011      	strh	r1, [r2, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <PrepareData+0x124>)
 8001b74:	7afb      	ldrb	r3, [r7, #11]
 8001b76:	5453      	strb	r3, [r2, r1]
	}
	tx_buffer[txSize++] = (uint8_t)StopBf;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <PrepareData+0x120>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	b291      	uxth	r1, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <PrepareData+0x120>)
 8001b82:	8011      	strh	r1, [r2, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <PrepareData+0x124>)
 8001b88:	21ff      	movs	r1, #255	; 0xff
 8001b8a:	5499      	strb	r1, [r3, r2]
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	2000064c 	.word	0x2000064c
 8001b98:	2000060c 	.word	0x2000060c

08001b9c <StartTaskReceiveData>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskReceiveData */
void StartTaskReceiveData(void const * argument)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (flag_receive) {
 8001ba4:	4ba8      	ldr	r3, [pc, #672]	; (8001e48 <StartTaskReceiveData+0x2ac>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 8148 	beq.w	8001e3e <StartTaskReceiveData+0x2a2>

			crc8 = calculate_crc8(rx_buffer, rx_length - 1);
 8001bae:	4ba7      	ldr	r3, [pc, #668]	; (8001e4c <StartTaskReceiveData+0x2b0>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	48a5      	ldr	r0, [pc, #660]	; (8001e50 <StartTaskReceiveData+0x2b4>)
 8001bba:	f7ff fafd 	bl	80011b8 <calculate_crc8>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4ba4      	ldr	r3, [pc, #656]	; (8001e54 <StartTaskReceiveData+0x2b8>)
 8001bc4:	701a      	strb	r2, [r3, #0]
			Parse(rx_buffer, rx_length);
 8001bc6:	4ba1      	ldr	r3, [pc, #644]	; (8001e4c <StartTaskReceiveData+0x2b0>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	48a0      	ldr	r0, [pc, #640]	; (8001e50 <StartTaskReceiveData+0x2b4>)
 8001bce:	f7ff fec9 	bl	8001964 <Parse>

			if (flag_crc) {
 8001bd2:	4ba1      	ldr	r3, [pc, #644]	; (8001e58 <StartTaskReceiveData+0x2bc>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8116 	beq.w	8001e08 <StartTaskReceiveData+0x26c>
				//Send ack to server
				uint8_t datatx[2] = {'a',1};
 8001bdc:	f240 1361 	movw	r3, #353	; 0x161
 8001be0:	81bb      	strh	r3, [r7, #12]
				PrepareData(datatx, 2);
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	2102      	movs	r1, #2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff43 	bl	8001a74 <PrepareData>

				HAL_UART_Transmit(&huart6, tx_buffer, txSize, HAL_MAX_DELAY);
 8001bee:	4b9b      	ldr	r3, [pc, #620]	; (8001e5c <StartTaskReceiveData+0x2c0>)
 8001bf0:	881a      	ldrh	r2, [r3, #0]
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	499a      	ldr	r1, [pc, #616]	; (8001e60 <StartTaskReceiveData+0x2c4>)
 8001bf8:	489a      	ldr	r0, [pc, #616]	; (8001e64 <StartTaskReceiveData+0x2c8>)
 8001bfa:	f003 fd40 	bl	800567e <HAL_UART_Transmit>

				// Processing data
				for (i = 0; i < 4; i++) {
 8001bfe:	4b9a      	ldr	r3, [pc, #616]	; (8001e68 <StartTaskReceiveData+0x2cc>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e00f      	b.n	8001c26 <StartTaskReceiveData+0x8a>
					data32.cValue[i] = rx_buffer[2 + i];
 8001c06:	4b98      	ldr	r3, [pc, #608]	; (8001e68 <StartTaskReceiveData+0x2cc>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	4a96      	ldr	r2, [pc, #600]	; (8001e68 <StartTaskReceiveData+0x2cc>)
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4a8f      	ldr	r2, [pc, #572]	; (8001e50 <StartTaskReceiveData+0x2b4>)
 8001c14:	5cd2      	ldrb	r2, [r2, r3]
 8001c16:	4b95      	ldr	r3, [pc, #596]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001c18:	545a      	strb	r2, [r3, r1]
				for (i = 0; i < 4; i++) {
 8001c1a:	4b93      	ldr	r3, [pc, #588]	; (8001e68 <StartTaskReceiveData+0x2cc>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b91      	ldr	r3, [pc, #580]	; (8001e68 <StartTaskReceiveData+0x2cc>)
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	4b90      	ldr	r3, [pc, #576]	; (8001e68 <StartTaskReceiveData+0x2cc>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d9eb      	bls.n	8001c06 <StartTaskReceiveData+0x6a>
				}

				switch (rx_buffer[1]) {
 8001c2e:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <StartTaskReceiveData+0x2b4>)
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	3b63      	subs	r3, #99	; 0x63
 8001c34:	2b13      	cmp	r3, #19
 8001c36:	f200 80ff 	bhi.w	8001e38 <StartTaskReceiveData+0x29c>
 8001c3a:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <StartTaskReceiveData+0xa4>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001d7f 	.word	0x08001d7f
 8001c44:	08001df7 	.word	0x08001df7
 8001c48:	08001e39 	.word	0x08001e39
 8001c4c:	08001db1 	.word	0x08001db1
 8001c50:	08001e39 	.word	0x08001e39
 8001c54:	08001d4b 	.word	0x08001d4b
 8001c58:	08001ded 	.word	0x08001ded
 8001c5c:	08001e39 	.word	0x08001e39
 8001c60:	08001e39 	.word	0x08001e39
 8001c64:	08001e39 	.word	0x08001e39
 8001c68:	08001e39 	.word	0x08001e39
 8001c6c:	08001e39 	.word	0x08001e39
 8001c70:	08001e39 	.word	0x08001e39
 8001c74:	08001de3 	.word	0x08001de3
 8001c78:	08001e39 	.word	0x08001e39
 8001c7c:	08001e01 	.word	0x08001e01
 8001c80:	08001cc5 	.word	0x08001cc5
 8001c84:	08001c91 	.word	0x08001c91
 8001c88:	08001e39 	.word	0x08001e39
 8001c8c:	08001cb5 	.word	0x08001cb5
				// Auto
				case 't': { //Temperature
					temp_set = data32.fValue;
 8001c90:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a76      	ldr	r2, [pc, #472]	; (8001e70 <StartTaskReceiveData+0x2d4>)
 8001c96:	6013      	str	r3, [r2, #0]
					last_error_pres = 0;
 8001c98:	4b76      	ldr	r3, [pc, #472]	; (8001e74 <StartTaskReceiveData+0x2d8>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
					integrated_error_pres = 0;
 8001ca0:	4b75      	ldr	r3, [pc, #468]	; (8001e78 <StartTaskReceiveData+0x2dc>)
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
					timerPID_pres = HAL_GetTick();
 8001ca8:	f000 fdf6 	bl	8002898 <HAL_GetTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a73      	ldr	r2, [pc, #460]	; (8001e7c <StartTaskReceiveData+0x2e0>)
 8001cb0:	6013      	str	r3, [r2, #0]
					break;
 8001cb2:	e0c1      	b.n	8001e38 <StartTaskReceiveData+0x29c>
				}
				case 'v': { // Fan speed
					flag_speed = 1;
 8001cb4:	4b72      	ldr	r3, [pc, #456]	; (8001e80 <StartTaskReceiveData+0x2e4>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
					speed_set = data32.fValue;
 8001cba:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a71      	ldr	r2, [pc, #452]	; (8001e84 <StartTaskReceiveData+0x2e8>)
 8001cc0:	6013      	str	r3, [r2, #0]
					break;
 8001cc2:	e0b9      	b.n	8001e38 <StartTaskReceiveData+0x29c>
				}
				case 's': { //start/stop system
					if (data32.iValue) //start
 8001cc4:	4b69      	ldr	r3, [pc, #420]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d018      	beq.n	8001cfe <StartTaskReceiveData+0x162>
					{
						HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin, 1);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2102      	movs	r1, #2
 8001cd0:	486d      	ldr	r0, [pc, #436]	; (8001e88 <StartTaskReceiveData+0x2ec>)
 8001cd2:	f002 f8d5 	bl	8003e80 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin, 1);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2108      	movs	r1, #8
 8001cda:	486b      	ldr	r0, [pc, #428]	; (8001e88 <StartTaskReceiveData+0x2ec>)
 8001cdc:	f002 f8d0 	bl	8003e80 <HAL_GPIO_WritePin>
						if (State_Machine == STOP) {
 8001ce0:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <StartTaskReceiveData+0x2f0>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 80a0 	bne.w	8001e2a <StartTaskReceiveData+0x28e>
							flag_speed = 1;
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <StartTaskReceiveData+0x2e4>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
							speed_set = 1500;
 8001cf0:	4b64      	ldr	r3, [pc, #400]	; (8001e84 <StartTaskReceiveData+0x2e8>)
 8001cf2:	4a67      	ldr	r2, [pc, #412]	; (8001e90 <StartTaskReceiveData+0x2f4>)
 8001cf4:	601a      	str	r2, [r3, #0]
							State_Machine = FAN_IDLE;
 8001cf6:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <StartTaskReceiveData+0x2f0>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin,
									0);
							State_Machine = STOP;
						}
					}
					break;
 8001cfc:	e095      	b.n	8001e2a <StartTaskReceiveData+0x28e>
						HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port,
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d04:	4863      	ldr	r0, [pc, #396]	; (8001e94 <StartTaskReceiveData+0x2f8>)
 8001d06:	f002 f8bb 	bl	8003e80 <HAL_GPIO_WritePin>
						pwm_speed = 0;
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <StartTaskReceiveData+0x2fc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]
						pwm_temp = 0;
 8001d10:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <StartTaskReceiveData+0x300>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	801a      	strh	r2, [r3, #0]
						if (State_Machine == WORKING)
 8001d16:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <StartTaskReceiveData+0x2f0>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d103      	bne.n	8001d26 <StartTaskReceiveData+0x18a>
							State_Machine = HEATER_BLOWING;
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <StartTaskReceiveData+0x2f0>)
 8001d20:	2205      	movs	r2, #5
 8001d22:	701a      	strb	r2, [r3, #0]
					break;
 8001d24:	e081      	b.n	8001e2a <StartTaskReceiveData+0x28e>
						else if (State_Machine == BLOCK) {
 8001d26:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <StartTaskReceiveData+0x2f0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d17d      	bne.n	8001e2a <StartTaskReceiveData+0x28e>
							HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin,
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2102      	movs	r1, #2
 8001d32:	4855      	ldr	r0, [pc, #340]	; (8001e88 <StartTaskReceiveData+0x2ec>)
 8001d34:	f002 f8a4 	bl	8003e80 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin,
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4852      	ldr	r0, [pc, #328]	; (8001e88 <StartTaskReceiveData+0x2ec>)
 8001d3e:	f002 f89f 	bl	8003e80 <HAL_GPIO_WritePin>
							State_Machine = STOP;
 8001d42:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <StartTaskReceiveData+0x2f0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
					break;
 8001d48:	e06f      	b.n	8001e2a <StartTaskReceiveData+0x28e>
				}
					// Manual
				case 'h': //heater control
				{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, data32.iValue); //green
 8001d4a:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d56:	484c      	ldr	r0, [pc, #304]	; (8001e88 <StartTaskReceiveData+0x2ec>)
 8001d58:	f002 f892 	bl	8003e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin,
							data32.iValue);
 8001d5c:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
					HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin,
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d68:	484a      	ldr	r0, [pc, #296]	; (8001e94 <StartTaskReceiveData+0x2f8>)
 8001d6a:	f002 f889 	bl	8003e80 <HAL_GPIO_WritePin>
					if (data32.iValue == 0) pwm_temp=0;
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d15b      	bne.n	8001e2e <StartTaskReceiveData+0x292>
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <StartTaskReceiveData+0x300>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	801a      	strh	r2, [r3, #0]
					break;
 8001d7c:	e057      	b.n	8001e2e <StartTaskReceiveData+0x292>
				}
				case 'c': //frequency converter control
				{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, data32.iValue); //yellow
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d8a:	483f      	ldr	r0, [pc, #252]	; (8001e88 <StartTaskReceiveData+0x2ec>)
 8001d8c:	f002 f878 	bl	8003e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin,
							data32.iValue);
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
					HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin,
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	2102      	movs	r1, #2
 8001d9a:	483b      	ldr	r0, [pc, #236]	; (8001e88 <StartTaskReceiveData+0x2ec>)
 8001d9c:	f002 f870 	bl	8003e80 <HAL_GPIO_WritePin>
					if (data32.iValue == 0) pwm_speed=0;
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d144      	bne.n	8001e32 <StartTaskReceiveData+0x296>
 8001da8:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <StartTaskReceiveData+0x2fc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	801a      	strh	r2, [r3, #0]
					break;
 8001dae:	e040      	b.n	8001e32 <StartTaskReceiveData+0x296>
				}
				case 'f': //fan control
				{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, data32.iValue); //red
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dbc:	4832      	ldr	r0, [pc, #200]	; (8001e88 <StartTaskReceiveData+0x2ec>)
 8001dbe:	f002 f85f 	bl	8003e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin,
							data32.iValue);
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
					HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin,
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2108      	movs	r1, #8
 8001dcc:	482e      	ldr	r0, [pc, #184]	; (8001e88 <StartTaskReceiveData+0x2ec>)
 8001dce:	f002 f857 	bl	8003e80 <HAL_GPIO_WritePin>
					if (data32.iValue == 0) pwm_speed=0;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d12d      	bne.n	8001e36 <StartTaskReceiveData+0x29a>
 8001dda:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <StartTaskReceiveData+0x2fc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	801a      	strh	r2, [r3, #0]
					break;
 8001de0:	e029      	b.n	8001e36 <StartTaskReceiveData+0x29a>
				}
				case 'p': {
					PID_TEMP.Kp = data32.fValue;
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2e      	ldr	r2, [pc, #184]	; (8001ea0 <StartTaskReceiveData+0x304>)
 8001de8:	6013      	str	r3, [r2, #0]
					break;
 8001dea:	e025      	b.n	8001e38 <StartTaskReceiveData+0x29c>
				}
				case 'i': //
				{
					PID_TEMP.Ki = data32.fValue;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <StartTaskReceiveData+0x304>)
 8001df2:	6053      	str	r3, [r2, #4]
					break;
 8001df4:	e020      	b.n	8001e38 <StartTaskReceiveData+0x29c>
				}
				case 'd': //
				{
					PID_TEMP.Kd = data32.fValue;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <StartTaskReceiveData+0x2d0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <StartTaskReceiveData+0x304>)
 8001dfc:	6093      	str	r3, [r2, #8]
					break;
 8001dfe:	e01b      	b.n	8001e38 <StartTaskReceiveData+0x29c>
				}
				case 'r': {
					request = 1;
 8001e00:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <StartTaskReceiveData+0x308>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
					break;
 8001e06:	e017      	b.n	8001e38 <StartTaskReceiveData+0x29c>
				}
				}
			} else {
				uint8_t datatx[2] = {'a',0};
 8001e08:	2361      	movs	r3, #97	; 0x61
 8001e0a:	813b      	strh	r3, [r7, #8]
				PrepareData(datatx, 2);
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	2102      	movs	r1, #2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fe2e 	bl	8001a74 <PrepareData>

				HAL_UART_Transmit(&huart6, tx_buffer, txSize, HAL_MAX_DELAY);
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <StartTaskReceiveData+0x2c0>)
 8001e1a:	881a      	ldrh	r2, [r3, #0]
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	490f      	ldr	r1, [pc, #60]	; (8001e60 <StartTaskReceiveData+0x2c4>)
 8001e22:	4810      	ldr	r0, [pc, #64]	; (8001e64 <StartTaskReceiveData+0x2c8>)
 8001e24:	f003 fc2b 	bl	800567e <HAL_UART_Transmit>
 8001e28:	e006      	b.n	8001e38 <StartTaskReceiveData+0x29c>
					break;
 8001e2a:	bf00      	nop
 8001e2c:	e004      	b.n	8001e38 <StartTaskReceiveData+0x29c>
					break;
 8001e2e:	bf00      	nop
 8001e30:	e002      	b.n	8001e38 <StartTaskReceiveData+0x29c>
					break;
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <StartTaskReceiveData+0x29c>
					break;
 8001e36:	bf00      	nop
			}
			flag_receive = 0;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <StartTaskReceiveData+0x2ac>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
		}

		osDelay(500);
 8001e3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e42:	f004 fe6e 	bl	8006b22 <osDelay>
		if (flag_receive) {
 8001e46:	e6ad      	b.n	8001ba4 <StartTaskReceiveData+0x8>
 8001e48:	200005f4 	.word	0x200005f4
 8001e4c:	200006d0 	.word	0x200006d0
 8001e50:	20000650 	.word	0x20000650
 8001e54:	200005f8 	.word	0x200005f8
 8001e58:	200006d1 	.word	0x200006d1
 8001e5c:	2000064c 	.word	0x2000064c
 8001e60:	2000060c 	.word	0x2000060c
 8001e64:	2000053c 	.word	0x2000053c
 8001e68:	200005f7 	.word	0x200005f7
 8001e6c:	20000718 	.word	0x20000718
 8001e70:	20000600 	.word	0x20000600
 8001e74:	20000204 	.word	0x20000204
 8001e78:	20000208 	.word	0x20000208
 8001e7c:	20000200 	.word	0x20000200
 8001e80:	200005f5 	.word	0x200005f5
 8001e84:	20000604 	.word	0x20000604
 8001e88:	40020c00 	.word	0x40020c00
 8001e8c:	2000071c 	.word	0x2000071c
 8001e90:	44bb8000 	.word	0x44bb8000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	2000060a 	.word	0x2000060a
 8001e9c:	20000608 	.word	0x20000608
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	200005f6 	.word	0x200005f6

08001ea8 <StartTaskHeater>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskHeater */
void StartTaskHeater(void const * argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskHeater */
	/* Infinite loop */
	for (;;) {
		if (State_Machine == FAN_ON) {
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <StartTaskHeater+0xa4>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d108      	bne.n	8001eca <StartTaskHeater+0x22>
			HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin, 1);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ebe:	4824      	ldr	r0, [pc, #144]	; (8001f50 <StartTaskHeater+0xa8>)
 8001ec0:	f001 ffde 	bl	8003e80 <HAL_GPIO_WritePin>
			State_Machine = WORKING;
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <StartTaskHeater+0xa4>)
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	701a      	strb	r2, [r3, #0]
		}
		if (State_Machine == WORKING) {
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <StartTaskHeater+0xa4>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d137      	bne.n	8001f42 <StartTaskHeater+0x9a>
			if (abs(temp - temp_set) > 1) {
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <StartTaskHeater+0xac>)
 8001ed4:	ed93 7a00 	vldr	s14, [r3]
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <StartTaskHeater+0xb0>)
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee6:	ee17 3a90 	vmov	r3, s15
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bfb8      	it	lt
 8001eee:	425b      	neglt	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	dd22      	ble.n	8001f3a <StartTaskHeater+0x92>
				pwm_temp = PID_Calc(PID_TEMP, temp, temp_set);
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <StartTaskHeater+0xac>)
 8001ef6:	ed93 6a00 	vldr	s12, [r3]
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <StartTaskHeater+0xb0>)
 8001efc:	edd3 5a00 	vldr	s11, [r3]
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <StartTaskHeater+0xb4>)
 8001f02:	edd3 6a00 	vldr	s13, [r3]
 8001f06:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f0e:	eeb0 2a65 	vmov.f32	s4, s11
 8001f12:	eef0 1a46 	vmov.f32	s3, s12
 8001f16:	eeb0 0a66 	vmov.f32	s0, s13
 8001f1a:	eef0 0a47 	vmov.f32	s1, s14
 8001f1e:	eeb0 1a67 	vmov.f32	s2, s15
 8001f22:	f7ff f83f 	bl	8000fa4 <PID_Calc>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <StartTaskHeater+0xb8>)
 8001f2c:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_temp);
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <StartTaskHeater+0xb8>)
 8001f30:	881a      	ldrh	r2, [r3, #0]
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <StartTaskHeater+0xbc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f38:	e003      	b.n	8001f42 <StartTaskHeater+0x9a>
			} else {
				osDelay(30000);
 8001f3a:	f247 5030 	movw	r0, #30000	; 0x7530
 8001f3e:	f004 fdf0 	bl	8006b22 <osDelay>
			}
		}
		osDelay(500);
 8001f42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f46:	f004 fdec 	bl	8006b22 <osDelay>
		if (State_Machine == FAN_ON) {
 8001f4a:	e7b1      	b.n	8001eb0 <StartTaskHeater+0x8>
 8001f4c:	2000071c 	.word	0x2000071c
 8001f50:	40021000 	.word	0x40021000
 8001f54:	200005fc 	.word	0x200005fc
 8001f58:	20000600 	.word	0x20000600
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000608 	.word	0x20000608
 8001f64:	200004f4 	.word	0x200004f4

08001f68 <StartTaskFan>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskFan */
void StartTaskFan(void const * argument)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskFan */
	/* Infinite loop */
	for (;;) {
		if (State_Machine == FAN_IDLE || State_Machine == WORKING) {
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <StartTaskFan+0xc0>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d003      	beq.n	8001f80 <StartTaskFan+0x18>
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <StartTaskFan+0xc0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d135      	bne.n	8001fec <StartTaskFan+0x84>
			if (flag_speed) {
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <StartTaskFan+0xc4>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d046      	beq.n	8002016 <StartTaskFan+0xae>
				pwm_speed = (uint32_t) (speed_set * coeff_speed);
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <StartTaskFan+0xc8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe faeb 	bl	8000568 <__aeabi_f2d>
 8001f92:	a323      	add	r3, pc, #140	; (adr r3, 8002020 <StartTaskFan+0xb8>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe fb3e 	bl	8000618 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fe10 	bl	8000bc8 <__aeabi_d2uiz>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <StartTaskFan+0xcc>)
 8001fae:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_speed);
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <StartTaskFan+0xcc>)
 8001fb2:	881a      	ldrh	r2, [r3, #0]
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <StartTaskFan+0xd0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40

				if (State_Machine == FAN_IDLE && speed_set > 0) {
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <StartTaskFan+0xc0>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d110      	bne.n	8001fe4 <StartTaskFan+0x7c>
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <StartTaskFan+0xc8>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	dd08      	ble.n	8001fe4 <StartTaskFan+0x7c>
					HAL_GPIO_WritePin(Heater_Ctrl_GPIO_Port, Heater_Ctrl_Pin,
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd8:	4818      	ldr	r0, [pc, #96]	; (800203c <StartTaskFan+0xd4>)
 8001fda:	f001 ff51 	bl	8003e80 <HAL_GPIO_WritePin>
							1);
					State_Machine = FAN_ON;
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <StartTaskFan+0xc0>)
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	701a      	strb	r2, [r3, #0]
				}
				flag_speed = 0;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <StartTaskFan+0xc4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
			if (flag_speed) {
 8001fea:	e014      	b.n	8002016 <StartTaskFan+0xae>
			}
		} else if (State_Machine == HEATER_BLOWING) {
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <StartTaskFan+0xc0>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d110      	bne.n	8002016 <StartTaskFan+0xae>
			osDelay(30000);
 8001ff4:	f247 5030 	movw	r0, #30000	; 0x7530
 8001ff8:	f004 fd93 	bl	8006b22 <osDelay>
			State_Machine = STOP;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <StartTaskFan+0xc0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Fan_Ctrl_GPIO_Port, Fan_Ctrl_Pin, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2108      	movs	r1, #8
 8002006:	480e      	ldr	r0, [pc, #56]	; (8002040 <StartTaskFan+0xd8>)
 8002008:	f001 ff3a 	bl	8003e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FC_Ctrl_GPIO_Port, FC_Ctrl_Pin, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2102      	movs	r1, #2
 8002010:	480b      	ldr	r0, [pc, #44]	; (8002040 <StartTaskFan+0xd8>)
 8002012:	f001 ff35 	bl	8003e80 <HAL_GPIO_WritePin>
		}

		osDelay(5000);
 8002016:	f241 3088 	movw	r0, #5000	; 0x1388
 800201a:	f004 fd82 	bl	8006b22 <osDelay>
		if (State_Machine == FAN_IDLE || State_Machine == WORKING) {
 800201e:	e7a7      	b.n	8001f70 <StartTaskFan+0x8>
 8002020:	9999999a 	.word	0x9999999a
 8002024:	3fc99999 	.word	0x3fc99999
 8002028:	2000071c 	.word	0x2000071c
 800202c:	200005f5 	.word	0x200005f5
 8002030:	20000604 	.word	0x20000604
 8002034:	2000060a 	.word	0x2000060a
 8002038:	200004f4 	.word	0x200004f4
 800203c:	40021000 	.word	0x40021000
 8002040:	40020c00 	.word	0x40020c00

08002044 <StartTaskSendData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskSendData */
void StartTaskSendData(void const * argument)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSendData */
	/* Infinite loop */
	for (;;) {
		if (request) {
 800204c:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <StartTaskSendData+0x1c0>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80d1 	beq.w	80021f8 <StartTaskSendData+0x1b4>
			uint8_t state_heater = HAL_GPIO_ReadPin(Thermostat_GPIO_Port,
 8002056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205a:	486b      	ldr	r0, [pc, #428]	; (8002208 <StartTaskSendData+0x1c4>)
 800205c:	f001 fef8 	bl	8003e50 <HAL_GPIO_ReadPin>
 8002060:	4603      	mov	r3, r0
 8002062:	76bb      	strb	r3, [r7, #26]
			Thermostat_Pin);
			uint8_t state_fan = HAL_GPIO_ReadPin(Relay_GPIO_Port, Relay_Pin);
 8002064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002068:	4867      	ldr	r0, [pc, #412]	; (8002208 <StartTaskSendData+0x1c4>)
 800206a:	f001 fef1 	bl	8003e50 <HAL_GPIO_ReadPin>
 800206e:	4603      	mov	r3, r0
 8002070:	767b      	strb	r3, [r7, #25]
			uint8_t state_fc = HAL_GPIO_ReadPin(FC_Failure_GPIO_Port,
 8002072:	2110      	movs	r1, #16
 8002074:	4865      	ldr	r0, [pc, #404]	; (800220c <StartTaskSendData+0x1c8>)
 8002076:	f001 feeb 	bl	8003e50 <HAL_GPIO_ReadPin>
 800207a:	4603      	mov	r3, r0
 800207c:	763b      	strb	r3, [r7, #24]
			FC_Failure_Pin);

			float sum = 0;
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
			for (uint8_t i = 0; i < 10; i++) {
 8002084:	2300      	movs	r3, #0
 8002086:	76fb      	strb	r3, [r7, #27]
 8002088:	e00e      	b.n	80020a8 <StartTaskSendData+0x64>
				sum += readTemp(1000);
 800208a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800208e:	f7ff fc23 	bl	80018d8 <readTemp>
 8002092:	eeb0 7a40 	vmov.f32	s14, s0
 8002096:	edd7 7a07 	vldr	s15, [r7, #28]
 800209a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800209e:	edc7 7a07 	vstr	s15, [r7, #28]
			for (uint8_t i = 0; i < 10; i++) {
 80020a2:	7efb      	ldrb	r3, [r7, #27]
 80020a4:	3301      	adds	r3, #1
 80020a6:	76fb      	strb	r3, [r7, #27]
 80020a8:	7efb      	ldrb	r3, [r7, #27]
 80020aa:	2b09      	cmp	r3, #9
 80020ac:	d9ed      	bls.n	800208a <StartTaskSendData+0x46>
			}
			temp = sum / 10;
 80020ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80020b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80020b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ba:	4b55      	ldr	r3, [pc, #340]	; (8002210 <StartTaskSendData+0x1cc>)
 80020bc:	edc3 7a00 	vstr	s15, [r3]
//			temp = readTemp(1000);

//			memset(tx_buffer,0,14);

			uint8_t datatx[14];
			datatx[0] = 'd';
 80020c0:	2364      	movs	r3, #100	; 0x64
 80020c2:	723b      	strb	r3, [r7, #8]

			data32.fValue = temp_set;
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <StartTaskSendData+0x1d0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a53      	ldr	r2, [pc, #332]	; (8002218 <StartTaskSendData+0x1d4>)
 80020ca:	6013      	str	r3, [r2, #0]
			for (i = 0; i < 4; i++) {
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <StartTaskSendData+0x1d8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e011      	b.n	80020f8 <StartTaskSendData+0xb4>
				datatx[i + 1] = data32.cValue[i];
 80020d4:	4b51      	ldr	r3, [pc, #324]	; (800221c <StartTaskSendData+0x1d8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	4b50      	ldr	r3, [pc, #320]	; (800221c <StartTaskSendData+0x1d8>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a4d      	ldr	r2, [pc, #308]	; (8002218 <StartTaskSendData+0x1d4>)
 80020e2:	5c52      	ldrb	r2, [r2, r1]
 80020e4:	3320      	adds	r3, #32
 80020e6:	443b      	add	r3, r7
 80020e8:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (i = 0; i < 4; i++) {
 80020ec:	4b4b      	ldr	r3, [pc, #300]	; (800221c <StartTaskSendData+0x1d8>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	4b49      	ldr	r3, [pc, #292]	; (800221c <StartTaskSendData+0x1d8>)
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	4b48      	ldr	r3, [pc, #288]	; (800221c <StartTaskSendData+0x1d8>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d9e9      	bls.n	80020d4 <StartTaskSendData+0x90>
			}

			data32.fValue = temp;
 8002100:	4b43      	ldr	r3, [pc, #268]	; (8002210 <StartTaskSendData+0x1cc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a44      	ldr	r2, [pc, #272]	; (8002218 <StartTaskSendData+0x1d4>)
 8002106:	6013      	str	r3, [r2, #0]
			for (i = 0; i < 4; i++) {
 8002108:	4b44      	ldr	r3, [pc, #272]	; (800221c <StartTaskSendData+0x1d8>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e011      	b.n	8002134 <StartTaskSendData+0xf0>
				datatx[i + 5] = data32.cValue[i];
 8002110:	4b42      	ldr	r3, [pc, #264]	; (800221c <StartTaskSendData+0x1d8>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <StartTaskSendData+0x1d8>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	3305      	adds	r3, #5
 800211c:	4a3e      	ldr	r2, [pc, #248]	; (8002218 <StartTaskSendData+0x1d4>)
 800211e:	5c52      	ldrb	r2, [r2, r1]
 8002120:	3320      	adds	r3, #32
 8002122:	443b      	add	r3, r7
 8002124:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (i = 0; i < 4; i++) {
 8002128:	4b3c      	ldr	r3, [pc, #240]	; (800221c <StartTaskSendData+0x1d8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <StartTaskSendData+0x1d8>)
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	4b39      	ldr	r3, [pc, #228]	; (800221c <StartTaskSendData+0x1d8>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d9e9      	bls.n	8002110 <StartTaskSendData+0xcc>
			}

			data32.fValue = (float) pwm_temp / PWM_MAX * MAX_CAP;
 800213c:	4b38      	ldr	r3, [pc, #224]	; (8002220 <StartTaskSendData+0x1dc>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002148:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002224 <StartTaskSendData+0x1e0>
 800214c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002150:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002228 <StartTaskSendData+0x1e4>
 8002154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <StartTaskSendData+0x1d4>)
 800215a:	edc3 7a00 	vstr	s15, [r3]
			for (i = 0; i < 4; i++) {
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <StartTaskSendData+0x1d8>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e011      	b.n	800218a <StartTaskSendData+0x146>
				datatx[i + 9] = data32.cValue[i];
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <StartTaskSendData+0x1d8>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <StartTaskSendData+0x1d8>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	3309      	adds	r3, #9
 8002172:	4a29      	ldr	r2, [pc, #164]	; (8002218 <StartTaskSendData+0x1d4>)
 8002174:	5c52      	ldrb	r2, [r2, r1]
 8002176:	3320      	adds	r3, #32
 8002178:	443b      	add	r3, r7
 800217a:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (i = 0; i < 4; i++) {
 800217e:	4b27      	ldr	r3, [pc, #156]	; (800221c <StartTaskSendData+0x1d8>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <StartTaskSendData+0x1d8>)
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <StartTaskSendData+0x1d8>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d9e9      	bls.n	8002166 <StartTaskSendData+0x122>
			}

			datatx[13] = (((State_Machine && 0x7 ) << 3) | ((state_heater && 1) << 2 )
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <StartTaskSendData+0x1e8>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <StartTaskSendData+0x15a>
 800219a:	2208      	movs	r2, #8
 800219c:	e000      	b.n	80021a0 <StartTaskSendData+0x15c>
 800219e:	2200      	movs	r2, #0
 80021a0:	7ebb      	ldrb	r3, [r7, #26]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <StartTaskSendData+0x166>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e000      	b.n	80021ac <StartTaskSendData+0x168>
 80021aa:	2300      	movs	r3, #0
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b25b      	sxtb	r3, r3
					| ((state_fan && 1) << 1) | (state_fc && 1));
 80021b0:	7e7a      	ldrb	r2, [r7, #25]
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d001      	beq.n	80021ba <StartTaskSendData+0x176>
 80021b6:	2202      	movs	r2, #2
 80021b8:	e000      	b.n	80021bc <StartTaskSendData+0x178>
 80021ba:	2200      	movs	r2, #0
 80021bc:	4313      	orrs	r3, r2
 80021be:	b25a      	sxtb	r2, r3
 80021c0:	7e3b      	ldrb	r3, [r7, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
			datatx[13] = (((State_Machine && 0x7 ) << 3) | ((state_heater && 1) << 2 )
 80021d4:	757b      	strb	r3, [r7, #21]

			PrepareData(datatx, 14);
 80021d6:	f107 0308 	add.w	r3, r7, #8
 80021da:	210e      	movs	r1, #14
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fc49 	bl	8001a74 <PrepareData>

			HAL_UART_Transmit(&huart6, (uint8_t*) tx_buffer, txSize, HAL_MAX_DELAY);
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <StartTaskSendData+0x1ec>)
 80021e4:	881a      	ldrh	r2, [r3, #0]
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	4912      	ldr	r1, [pc, #72]	; (8002234 <StartTaskSendData+0x1f0>)
 80021ec:	4812      	ldr	r0, [pc, #72]	; (8002238 <StartTaskSendData+0x1f4>)
 80021ee:	f003 fa46 	bl	800567e <HAL_UART_Transmit>

			request = 0;
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <StartTaskSendData+0x1c0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1000);
 80021f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021fc:	f004 fc91 	bl	8006b22 <osDelay>
		if (request) {
 8002200:	e724      	b.n	800204c <StartTaskSendData+0x8>
 8002202:	bf00      	nop
 8002204:	200005f6 	.word	0x200005f6
 8002208:	40021000 	.word	0x40021000
 800220c:	40020c00 	.word	0x40020c00
 8002210:	200005fc 	.word	0x200005fc
 8002214:	20000600 	.word	0x20000600
 8002218:	20000718 	.word	0x20000718
 800221c:	200005f7 	.word	0x200005f7
 8002220:	20000608 	.word	0x20000608
 8002224:	4479c000 	.word	0x4479c000
 8002228:	459c4000 	.word	0x459c4000
 800222c:	2000071c 	.word	0x2000071c
 8002230:	2000064c 	.word	0x2000064c
 8002234:	2000060c 	.word	0x2000060c
 8002238:	2000053c 	.word	0x2000053c

0800223c <StartTaskReadTemp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskReadTemp */
void StartTaskReadTemp(void const * argument)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskReadTemp */
	/* Infinite loop */
	for (;;) {
		float sum = 0;
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 0; i < 10; i++) {
 800224a:	2300      	movs	r3, #0
 800224c:	72fb      	strb	r3, [r7, #11]
 800224e:	e00e      	b.n	800226e <StartTaskReadTemp+0x32>
			sum += readTemp(1000);
 8002250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002254:	f7ff fb40 	bl	80018d8 <readTemp>
 8002258:	eeb0 7a40 	vmov.f32	s14, s0
 800225c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002260:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002264:	edc7 7a03 	vstr	s15, [r7, #12]
		for (uint8_t i = 0; i < 10; i++) {
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	3301      	adds	r3, #1
 800226c:	72fb      	strb	r3, [r7, #11]
 800226e:	7afb      	ldrb	r3, [r7, #11]
 8002270:	2b09      	cmp	r3, #9
 8002272:	d9ed      	bls.n	8002250 <StartTaskReadTemp+0x14>
		}
		temp = sum / 10;
 8002274:	ed97 7a03 	vldr	s14, [r7, #12]
 8002278:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800227c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <StartTaskReadTemp+0x54>)
 8002282:	edc3 7a00 	vstr	s15, [r3]
		osDelay(1000);
 8002286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800228a:	f004 fc4a 	bl	8006b22 <osDelay>
	for (;;) {
 800228e:	e7d9      	b.n	8002244 <StartTaskReadTemp+0x8>
 8002290:	200005fc 	.word	0x200005fc

08002294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002298:	b672      	cpsid	i
}
 800229a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800229c:	e7fe      	b.n	800229c <Error_Handler+0x8>
	...

080022a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_MspInit+0x54>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a11      	ldr	r2, [pc, #68]	; (80022f4 <HAL_MspInit+0x54>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <HAL_MspInit+0x54>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_MspInit+0x54>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_MspInit+0x54>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_MspInit+0x54>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	210f      	movs	r1, #15
 80022e2:	f06f 0001 	mvn.w	r0, #1
 80022e6:	f000 ffce 	bl	8003286 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_ADC_MspInit+0x7c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d127      	bne.n	800236a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_ADC_MspInit+0x80>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a15      	ldr	r2, [pc, #84]	; (8002378 <HAL_ADC_MspInit+0x80>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_ADC_MspInit+0x80>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_ADC_MspInit+0x80>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_ADC_MspInit+0x80>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_ADC_MspInit+0x80>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_Temp_Pin;
 8002352:	2320      	movs	r3, #32
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002356:	2303      	movs	r3, #3
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Temp_GPIO_Port, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <HAL_ADC_MspInit+0x84>)
 8002366:	f001 fbc7 	bl	8003af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40012000 	.word	0x40012000
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000

08002380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_TIM_Base_MspInit+0x3c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10d      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40010000 	.word	0x40010000
 80023c0:	40023800 	.word	0x40023800

080023c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <HAL_TIM_MspPostInit+0x68>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d11e      	bne.n	8002424 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_TIM_MspPostInit+0x6c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a10      	ldr	r2, [pc, #64]	; (8002430 <HAL_TIM_MspPostInit+0x6c>)
 80023f0:	f043 0310 	orr.w	r3, r3, #16
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_TIM_MspPostInit+0x6c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_Heater_Pin|PWM_Fan_Pin;
 8002402:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002406:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002414:	2301      	movs	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	4619      	mov	r1, r3
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <HAL_TIM_MspPostInit+0x70>)
 8002420:	f001 fb6a 	bl	8003af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002424:	bf00      	nop
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40010000 	.word	0x40010000
 8002430:	40023800 	.word	0x40023800
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a34      	ldr	r2, [pc, #208]	; (8002528 <HAL_UART_MspInit+0xf0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d162      	bne.n	8002520 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <HAL_UART_MspInit+0xf4>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a32      	ldr	r2, [pc, #200]	; (800252c <HAL_UART_MspInit+0xf4>)
 8002464:	f043 0320 	orr.w	r3, r3, #32
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_UART_MspInit+0xf4>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_UART_MspInit+0xf4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <HAL_UART_MspInit+0xf4>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_UART_MspInit+0xf4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002492:	23c0      	movs	r3, #192	; 0xc0
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024a2:	2308      	movs	r3, #8
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4820      	ldr	r0, [pc, #128]	; (8002530 <HAL_UART_MspInit+0xf8>)
 80024ae:	f001 fb23 	bl	8003af8 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024b4:	4a20      	ldr	r2, [pc, #128]	; (8002538 <HAL_UART_MspInit+0x100>)
 80024b6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024ba:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80024be:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c0:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024ec:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80024f4:	480f      	ldr	r0, [pc, #60]	; (8002534 <HAL_UART_MspInit+0xfc>)
 80024f6:	f000 fefd 	bl	80032f4 <HAL_DMA_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002500:	f7ff fec8 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <HAL_UART_MspInit+0xfc>)
 8002508:	639a      	str	r2, [r3, #56]	; 0x38
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <HAL_UART_MspInit+0xfc>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2105      	movs	r1, #5
 8002514:	2047      	movs	r0, #71	; 0x47
 8002516:	f000 feb6 	bl	8003286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800251a:	2047      	movs	r0, #71	; 0x47
 800251c:	f000 fecf 	bl	80032be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002520:	bf00      	nop
 8002522:	3728      	adds	r7, #40	; 0x28
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40011400 	.word	0x40011400
 800252c:	40023800 	.word	0x40023800
 8002530:	40020800 	.word	0x40020800
 8002534:	20000580 	.word	0x20000580
 8002538:	40026428 	.word	0x40026428

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256c:	f000 f980 	bl	8002870 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002570:	f005 f886 	bl	8007680 <xTaskGetSchedulerState>
 8002574:	4603      	mov	r3, r0
 8002576:	2b01      	cmp	r3, #1
 8002578:	d001      	beq.n	800257e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800257a:	f005 fac5 	bl	8007b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}

08002582 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FC_Failure_Pin);
 8002586:	2010      	movs	r0, #16
 8002588:	f001 fc94 	bl	8003eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Thermostat_Pin);
 8002594:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002598:	f001 fc8c 	bl	8003eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <DMA2_Stream1_IRQHandler+0x10>)
 80025a6:	f001 f83d 	bl	8003624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000580 	.word	0x20000580

080025b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <USART6_IRQHandler+0x10>)
 80025ba:	f003 f957 	bl	800586c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000053c 	.word	0x2000053c

080025c8 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
	return 1;
 80025cc:	2301      	movs	r3, #1
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_kill>:

int _kill(int pid, int sig) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80025e2:	f006 facd 	bl	8008b80 <__errno>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2216      	movs	r2, #22
 80025ea:	601a      	str	r2, [r3, #0]
	return -1;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_exit>:

void _exit(int status) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ffe7 	bl	80025d8 <_kill>
	while (1) {
 800260a:	e7fe      	b.n	800260a <_exit+0x12>

0800260c <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e00a      	b.n	8002634 <_read+0x28>
		*ptr++ = __io_getchar();
 800261e:	f3af 8000 	nop.w
 8002622:	4601      	mov	r1, r0
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	60ba      	str	r2, [r7, #8]
 800262a:	b2ca      	uxtb	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	dbf0      	blt.n	800261e <_read+0x12>
	}

	return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e009      	b.n	800266c <_write+0x26>
		__io_putchar(*ptr++);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	60ba      	str	r2, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3301      	adds	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	dbf1      	blt.n	8002658 <_write+0x12>
	}
	return len;
 8002674:	687b      	ldr	r3, [r7, #4]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <_close>:

int _close(int file) {
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026a6:	605a      	str	r2, [r3, #4]
	return 0;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <_isatty>:

int _isatty(int file) {
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <_sbrk+0x64>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <_sbrk+0x64>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <_sbrk+0x68>)
 8002708:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <_sbrk+0x40>
		errno = ENOMEM;
 8002718:	f006 fa32 	bl	8008b80 <__errno>
 800271c:	4603      	mov	r3, r0
 800271e:	220c      	movs	r2, #12
 8002720:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	e009      	b.n	800273c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <_sbrk+0x64>)
 8002738:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20030000 	.word	0x20030000
 8002748:	00000400 	.word	0x00000400
 800274c:	20000720 	.word	0x20000720
 8002750:	200045c8 	.word	0x200045c8

08002754 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <SystemInit+0x20>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	4a05      	ldr	r2, [pc, #20]	; (8002774 <SystemInit+0x20>)
 8002760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800277c:	480d      	ldr	r0, [pc, #52]	; (80027b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800277e:	490e      	ldr	r1, [pc, #56]	; (80027b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002780:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002784:	e002      	b.n	800278c <LoopCopyDataInit>

08002786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278a:	3304      	adds	r3, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800278c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002790:	d3f9      	bcc.n	8002786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002794:	4c0b      	ldr	r4, [pc, #44]	; (80027c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002798:	e001      	b.n	800279e <LoopFillZerobss>

0800279a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800279c:	3204      	adds	r2, #4

0800279e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a0:	d3fb      	bcc.n	800279a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027a2:	f7ff ffd7 	bl	8002754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a6:	f006 f9f1 	bl	8008b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027aa:	f7fe fd7d 	bl	80012a8 <main>
  bx  lr    
 80027ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80027b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80027bc:	0800ae14 	.word	0x0800ae14
  ldr r2, =_sbss
 80027c0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80027c4:	200045c8 	.word	0x200045c8

080027c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c8:	e7fe      	b.n	80027c8 <ADC_IRQHandler>
	...

080027cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_Init+0x40>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <HAL_Init+0x40>)
 80027d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_Init+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0a      	ldr	r2, [pc, #40]	; (800280c <HAL_Init+0x40>)
 80027e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <HAL_Init+0x40>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f4:	2003      	movs	r0, #3
 80027f6:	f000 fd3b 	bl	8003270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fa:	200f      	movs	r0, #15
 80027fc:	f000 f808 	bl	8002810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002800:	f7ff fd4e 	bl	80022a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023c00 	.word	0x40023c00

08002810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_InitTick+0x54>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_InitTick+0x58>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002826:	fbb3 f3f1 	udiv	r3, r3, r1
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fd53 	bl	80032da <HAL_SYSTICK_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e00e      	b.n	800285c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b0f      	cmp	r3, #15
 8002842:	d80a      	bhi.n	800285a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002844:	2200      	movs	r2, #0
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f000 fd1b 	bl	8003286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002850:	4a06      	ldr	r2, [pc, #24]	; (800286c <HAL_InitTick+0x5c>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	2000000c 	.word	0x2000000c
 8002868:	20000014 	.word	0x20000014
 800286c:	20000010 	.word	0x20000010

08002870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x20>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x24>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4413      	add	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_IncTick+0x24>)
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000014 	.word	0x20000014
 8002894:	20000724 	.word	0x20000724

08002898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return uwTick;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_GetTick+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000724 	.word	0x20000724

080028b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e033      	b.n	800292e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fd12 	bl	80022f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d118      	bne.n	8002920 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028f6:	f023 0302 	bic.w	r3, r3, #2
 80028fa:	f043 0202 	orr.w	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fae8 	bl	8002ed8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
 800291e:	e001      	b.n	8002924 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Start+0x1a>
 800294e:	2302      	movs	r3, #2
 8002950:	e0b2      	b.n	8002ab8 <HAL_ADC_Start+0x180>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d018      	beq.n	800299a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002978:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <HAL_ADC_Start+0x18c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_ADC_Start+0x190>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0c9a      	lsrs	r2, r3, #18
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800298c:	e002      	b.n	8002994 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3b01      	subs	r3, #1
 8002992:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f9      	bne.n	800298e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d17a      	bne.n	8002a9e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e6:	d106      	bne.n	80029f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f023 0206 	bic.w	r2, r3, #6
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44
 80029f4:	e002      	b.n	80029fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a04:	4b31      	ldr	r3, [pc, #196]	; (8002acc <HAL_ADC_Start+0x194>)
 8002a06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d12a      	bne.n	8002a74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_ADC_Start+0x198>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d015      	beq.n	8002a54 <HAL_ADC_Start+0x11c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a29      	ldr	r2, [pc, #164]	; (8002ad4 <HAL_ADC_Start+0x19c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d105      	bne.n	8002a3e <HAL_ADC_Start+0x106>
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <HAL_ADC_Start+0x194>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a25      	ldr	r2, [pc, #148]	; (8002ad8 <HAL_ADC_Start+0x1a0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d136      	bne.n	8002ab6 <HAL_ADC_Start+0x17e>
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_ADC_Start+0x194>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d130      	bne.n	8002ab6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d129      	bne.n	8002ab6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	e020      	b.n	8002ab6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <HAL_ADC_Start+0x198>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d11b      	bne.n	8002ab6 <HAL_ADC_Start+0x17e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d114      	bne.n	8002ab6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	e00b      	b.n	8002ab6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	2000000c 	.word	0x2000000c
 8002ac8:	431bde83 	.word	0x431bde83
 8002acc:	40012300 	.word	0x40012300
 8002ad0:	40012000 	.word	0x40012000
 8002ad4:	40012100 	.word	0x40012100
 8002ad8:	40012200 	.word	0x40012200

08002adc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_Stop+0x16>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e021      	b.n	8002b36 <HAL_ADC_Stop+0x5a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5e:	d113      	bne.n	8002b88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6e:	d10b      	bne.n	8002b88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e063      	b.n	8002c50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b88:	f7ff fe86 	bl	8002898 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b8e:	e021      	b.n	8002bd4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d01d      	beq.n	8002bd4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <HAL_ADC_PollForConversion+0x6c>
 8002b9e:	f7ff fe7b 	bl	8002898 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d212      	bcs.n	8002bd4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d00b      	beq.n	8002bd4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e03d      	b.n	8002c50 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d1d6      	bne.n	8002b90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0212 	mvn.w	r2, #18
 8002bea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d123      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d11f      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d111      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1c>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e113      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x244>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	d925      	bls.n	8002cec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68d9      	ldr	r1, [r3, #12]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b1e      	subs	r3, #30
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68d9      	ldr	r1, [r3, #12]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	4603      	mov	r3, r0
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4403      	add	r3, r0
 8002cde:	3b1e      	subs	r3, #30
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	e022      	b.n	8002d32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6919      	ldr	r1, [r3, #16]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	2207      	movs	r2, #7
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6919      	ldr	r1, [r3, #16]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4618      	mov	r0, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4403      	add	r3, r0
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d824      	bhi.n	8002d84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	3b05      	subs	r3, #5
 8002d4c:	221f      	movs	r2, #31
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	400a      	ands	r2, r1
 8002d5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	3b05      	subs	r3, #5
 8002d76:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	635a      	str	r2, [r3, #52]	; 0x34
 8002d82:	e04c      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	d824      	bhi.n	8002dd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3b23      	subs	r3, #35	; 0x23
 8002d9e:	221f      	movs	r2, #31
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43da      	mvns	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	400a      	ands	r2, r1
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b23      	subs	r3, #35	; 0x23
 8002dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd4:	e023      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	3b41      	subs	r3, #65	; 0x41
 8002de8:	221f      	movs	r2, #31
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	400a      	ands	r2, r1
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	4618      	mov	r0, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	3b41      	subs	r3, #65	; 0x41
 8002e12:	fa00 f203 	lsl.w	r2, r0, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e1e:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <HAL_ADC_ConfigChannel+0x250>)
 8002e20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a28      	ldr	r2, [pc, #160]	; (8002ec8 <HAL_ADC_ConfigChannel+0x254>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d10f      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x1d8>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b12      	cmp	r3, #18
 8002e32:	d10b      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_ADC_ConfigChannel+0x254>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d12b      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x23a>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d003      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0x1f4>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b11      	cmp	r3, #17
 8002e66:	d122      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d111      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <HAL_ADC_ConfigChannel+0x260>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	0c9a      	lsrs	r2, r3, #18
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ea0:	e002      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f9      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40012300 	.word	0x40012300
 8002ec8:	40012000 	.word	0x40012000
 8002ecc:	10000012 	.word	0x10000012
 8002ed0:	2000000c 	.word	0x2000000c
 8002ed4:	431bde83 	.word	0x431bde83

08002ed8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ee0:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <ADC_Init+0x1f0>)
 8002ee2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	021a      	lsls	r2, r3, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6899      	ldr	r1, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	4a58      	ldr	r2, [pc, #352]	; (80030cc <ADC_Init+0x1f4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6899      	ldr	r1, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	e00f      	b.n	8002fd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0202 	bic.w	r2, r2, #2
 8002fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7e1b      	ldrb	r3, [r3, #24]
 8002ff0:	005a      	lsls	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01b      	beq.n	800303c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003012:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003022:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	3b01      	subs	r3, #1
 8003030:	035a      	lsls	r2, r3, #13
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	e007      	b.n	800304c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	3b01      	subs	r3, #1
 8003068:	051a      	lsls	r2, r3, #20
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800308e:	025a      	lsls	r2, r3, #9
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6899      	ldr	r1, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	029a      	lsls	r2, r3, #10
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40012300 	.word	0x40012300
 80030cc:	0f000001 	.word	0x0f000001

080030d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	; (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <__NVIC_GetPriorityGrouping+0x18>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db0b      	blt.n	800315e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4907      	ldr	r1, [pc, #28]	; (800316c <__NVIC_EnableIRQ+0x38>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2001      	movs	r0, #1
 8003156:	fa00 f202 	lsl.w	r2, r0, r2
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db0a      	blt.n	800319a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	490c      	ldr	r1, [pc, #48]	; (80031bc <__NVIC_SetPriority+0x4c>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	440b      	add	r3, r1
 8003194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003198:	e00a      	b.n	80031b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4908      	ldr	r1, [pc, #32]	; (80031c0 <__NVIC_SetPriority+0x50>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3b04      	subs	r3, #4
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	761a      	strb	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f1c3 0307 	rsb	r3, r3, #7
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf28      	it	cs
 80031e2:	2304      	movcs	r3, #4
 80031e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d902      	bls.n	80031f4 <NVIC_EncodePriority+0x30>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3b03      	subs	r3, #3
 80031f2:	e000      	b.n	80031f6 <NVIC_EncodePriority+0x32>
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43d9      	mvns	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	4313      	orrs	r3, r2
         );
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800323c:	d301      	bcc.n	8003242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323e:	2301      	movs	r3, #1
 8003240:	e00f      	b.n	8003262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <SysTick_Config+0x40>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324a:	210f      	movs	r1, #15
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	f7ff ff8e 	bl	8003170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <SysTick_Config+0x40>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <SysTick_Config+0x40>)
 800325c:	2207      	movs	r2, #7
 800325e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	e000e010 	.word	0xe000e010

08003270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff29 	bl	80030d0 <__NVIC_SetPriorityGrouping>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003298:	f7ff ff3e 	bl	8003118 <__NVIC_GetPriorityGrouping>
 800329c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f7ff ff8e 	bl	80031c4 <NVIC_EncodePriority>
 80032a8:	4602      	mov	r2, r0
 80032aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff5d 	bl	8003170 <__NVIC_SetPriority>
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff31 	bl	8003134 <__NVIC_EnableIRQ>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ffa2 	bl	800322c <SysTick_Config>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff faca 	bl	8002898 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e099      	b.n	8003444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003330:	e00f      	b.n	8003352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003332:	f7ff fab1 	bl	8002898 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b05      	cmp	r3, #5
 800333e:	d908      	bls.n	8003352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2203      	movs	r2, #3
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e078      	b.n	8003444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e8      	bne.n	8003332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4b38      	ldr	r3, [pc, #224]	; (800344c <HAL_DMA_Init+0x158>)
 800336c:	4013      	ands	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d107      	bne.n	80033bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	4313      	orrs	r3, r2
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0307 	bic.w	r3, r3, #7
 80033d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d117      	bne.n	8003416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00e      	beq.n	8003416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fb01 	bl	8003a00 <DMA_CheckFifoParam>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2240      	movs	r2, #64	; 0x40
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003412:	2301      	movs	r3, #1
 8003414:	e016      	b.n	8003444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fab8 	bl	8003994 <DMA_CalcBaseAndBitshift>
 8003424:	4603      	mov	r3, r0
 8003426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	223f      	movs	r2, #63	; 0x3f
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	f010803f 	.word	0xf010803f

08003450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_DMA_Start_IT+0x26>
 8003472:	2302      	movs	r3, #2
 8003474:	e040      	b.n	80034f8 <HAL_DMA_Start_IT+0xa8>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d12f      	bne.n	80034ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fa4a 	bl	8003938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	223f      	movs	r2, #63	; 0x3f
 80034aa:	409a      	lsls	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0216 	orr.w	r2, r2, #22
 80034be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0208 	orr.w	r2, r2, #8
 80034d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e005      	b.n	80034f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800350e:	f7ff f9c3 	bl	8002898 <HAL_GetTick>
 8003512:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d008      	beq.n	8003532 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e052      	b.n	80035d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0216 	bic.w	r2, r2, #22
 8003540:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003550:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_DMA_Abort+0x62>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0208 	bic.w	r2, r2, #8
 8003570:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003582:	e013      	b.n	80035ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003584:	f7ff f988 	bl	8002898 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b05      	cmp	r3, #5
 8003590:	d90c      	bls.n	80035ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2203      	movs	r2, #3
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e015      	b.n	80035d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e4      	bne.n	8003584 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	223f      	movs	r2, #63	; 0x3f
 80035c0:	409a      	lsls	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d004      	beq.n	80035fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e00c      	b.n	8003618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2205      	movs	r2, #5
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003630:	4b8e      	ldr	r3, [pc, #568]	; (800386c <HAL_DMA_IRQHandler+0x248>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a8e      	ldr	r2, [pc, #568]	; (8003870 <HAL_DMA_IRQHandler+0x24c>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	0a9b      	lsrs	r3, r3, #10
 800363c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2208      	movs	r2, #8
 8003650:	409a      	lsls	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01a      	beq.n	8003690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	2208      	movs	r2, #8
 800367e:	409a      	lsls	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	2201      	movs	r2, #1
 8003696:	409a      	lsls	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d012      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	2201      	movs	r2, #1
 80036b4:	409a      	lsls	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	2204      	movs	r2, #4
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2204      	movs	r2, #4
 80036ea:	409a      	lsls	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	2210      	movs	r2, #16
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d043      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d03c      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	2210      	movs	r2, #16
 8003720:	409a      	lsls	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d018      	beq.n	8003766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d024      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
 8003752:	e01f      	b.n	8003794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
 8003764:	e016      	b.n	8003794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d107      	bne.n	8003784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0208 	bic.w	r2, r2, #8
 8003782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	2220      	movs	r2, #32
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 808f 	beq.w	80038c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8087 	beq.w	80038c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2220      	movs	r2, #32
 80037bc:	409a      	lsls	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d136      	bne.n	800383c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0216 	bic.w	r2, r2, #22
 80037dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <HAL_DMA_IRQHandler+0x1da>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0208 	bic.w	r2, r2, #8
 800380c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	223f      	movs	r2, #63	; 0x3f
 8003814:	409a      	lsls	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	2b00      	cmp	r3, #0
 8003830:	d07e      	beq.n	8003930 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
        }
        return;
 800383a:	e079      	b.n	8003930 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10d      	bne.n	8003874 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	2b00      	cmp	r3, #0
 800385e:	d031      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
 8003868:	e02c      	b.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
 800386a:	bf00      	nop
 800386c:	2000000c 	.word	0x2000000c
 8003870:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d023      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
 8003884:	e01e      	b.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10f      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0210 	bic.w	r2, r2, #16
 80038a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d032      	beq.n	8003932 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d022      	beq.n	800391e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2205      	movs	r2, #5
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	3301      	adds	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d307      	bcc.n	800390c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f2      	bne.n	80038f0 <HAL_DMA_IRQHandler+0x2cc>
 800390a:	e000      	b.n	800390e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800390c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
 800392e:	e000      	b.n	8003932 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003930:	bf00      	nop
    }
  }
}
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d108      	bne.n	8003978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003976:	e007      	b.n	8003988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	3b10      	subs	r3, #16
 80039a4:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <DMA_CalcBaseAndBitshift+0x64>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ae:	4a13      	ldr	r2, [pc, #76]	; (80039fc <DMA_CalcBaseAndBitshift+0x68>)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d909      	bls.n	80039d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	; 0x58
 80039d4:	e007      	b.n	80039e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	aaaaaaab 	.word	0xaaaaaaab
 80039fc:	0800aa88 	.word	0x0800aa88

08003a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11f      	bne.n	8003a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d856      	bhi.n	8003ace <DMA_CheckFifoParam+0xce>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <DMA_CheckFifoParam+0x28>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a4b 	.word	0x08003a4b
 8003a30:	08003a39 	.word	0x08003a39
 8003a34:	08003acf 	.word	0x08003acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d046      	beq.n	8003ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a48:	e043      	b.n	8003ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a52:	d140      	bne.n	8003ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a58:	e03d      	b.n	8003ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a62:	d121      	bne.n	8003aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d837      	bhi.n	8003ada <DMA_CheckFifoParam+0xda>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <DMA_CheckFifoParam+0x70>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a87 	.word	0x08003a87
 8003a78:	08003a81 	.word	0x08003a81
 8003a7c:	08003a99 	.word	0x08003a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	e030      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d025      	beq.n	8003ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a96:	e022      	b.n	8003ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa0:	d11f      	bne.n	8003ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aa6:	e01c      	b.n	8003ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d903      	bls.n	8003ab6 <DMA_CheckFifoParam+0xb6>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d003      	beq.n	8003abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ab4:	e018      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8003aba:	e015      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      break;
 8003acc:	e00b      	b.n	8003ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e00a      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e008      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e006      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e004      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	; 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	e177      	b.n	8003e04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b14:	2201      	movs	r2, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	f040 8166 	bne.w	8003dfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d005      	beq.n	8003b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d130      	bne.n	8003bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b80:	2201      	movs	r2, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 0201 	and.w	r2, r3, #1
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d017      	beq.n	8003be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d123      	bne.n	8003c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	08da      	lsrs	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3208      	adds	r2, #8
 8003bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	220f      	movs	r2, #15
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	08da      	lsrs	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3208      	adds	r2, #8
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	2203      	movs	r2, #3
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0203 	and.w	r2, r3, #3
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80c0 	beq.w	8003dfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b66      	ldr	r3, [pc, #408]	; (8003e1c <HAL_GPIO_Init+0x324>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	4a65      	ldr	r2, [pc, #404]	; (8003e1c <HAL_GPIO_Init+0x324>)
 8003c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c8e:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <HAL_GPIO_Init+0x324>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c9a:	4a61      	ldr	r2, [pc, #388]	; (8003e20 <HAL_GPIO_Init+0x328>)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a58      	ldr	r2, [pc, #352]	; (8003e24 <HAL_GPIO_Init+0x32c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d037      	beq.n	8003d36 <HAL_GPIO_Init+0x23e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_GPIO_Init+0x330>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d031      	beq.n	8003d32 <HAL_GPIO_Init+0x23a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a56      	ldr	r2, [pc, #344]	; (8003e2c <HAL_GPIO_Init+0x334>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d02b      	beq.n	8003d2e <HAL_GPIO_Init+0x236>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a55      	ldr	r2, [pc, #340]	; (8003e30 <HAL_GPIO_Init+0x338>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d025      	beq.n	8003d2a <HAL_GPIO_Init+0x232>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a54      	ldr	r2, [pc, #336]	; (8003e34 <HAL_GPIO_Init+0x33c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01f      	beq.n	8003d26 <HAL_GPIO_Init+0x22e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a53      	ldr	r2, [pc, #332]	; (8003e38 <HAL_GPIO_Init+0x340>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d019      	beq.n	8003d22 <HAL_GPIO_Init+0x22a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <HAL_GPIO_Init+0x344>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_GPIO_Init+0x226>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a51      	ldr	r2, [pc, #324]	; (8003e40 <HAL_GPIO_Init+0x348>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00d      	beq.n	8003d1a <HAL_GPIO_Init+0x222>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a50      	ldr	r2, [pc, #320]	; (8003e44 <HAL_GPIO_Init+0x34c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <HAL_GPIO_Init+0x21e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4f      	ldr	r2, [pc, #316]	; (8003e48 <HAL_GPIO_Init+0x350>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_GPIO_Init+0x21a>
 8003d0e:	2309      	movs	r3, #9
 8003d10:	e012      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d12:	230a      	movs	r3, #10
 8003d14:	e010      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d16:	2308      	movs	r3, #8
 8003d18:	e00e      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d1a:	2307      	movs	r3, #7
 8003d1c:	e00c      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d1e:	2306      	movs	r3, #6
 8003d20:	e00a      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d22:	2305      	movs	r3, #5
 8003d24:	e008      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d26:	2304      	movs	r3, #4
 8003d28:	e006      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e004      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e002      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d36:	2300      	movs	r3, #0
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	f002 0203 	and.w	r2, r2, #3
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	4093      	lsls	r3, r2
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d48:	4935      	ldr	r1, [pc, #212]	; (8003e20 <HAL_GPIO_Init+0x328>)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d56:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_GPIO_Init+0x354>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d7a:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <HAL_GPIO_Init+0x354>)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d80:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <HAL_GPIO_Init+0x354>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003da4:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <HAL_GPIO_Init+0x354>)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003daa:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <HAL_GPIO_Init+0x354>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dce:	4a1f      	ldr	r2, [pc, #124]	; (8003e4c <HAL_GPIO_Init+0x354>)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_GPIO_Init+0x354>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <HAL_GPIO_Init+0x354>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3301      	adds	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b0f      	cmp	r3, #15
 8003e08:	f67f ae84 	bls.w	8003b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40013800 	.word	0x40013800
 8003e24:	40020000 	.word	0x40020000
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40020800 	.word	0x40020800
 8003e30:	40020c00 	.word	0x40020c00
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40021400 	.word	0x40021400
 8003e3c:	40021800 	.word	0x40021800
 8003e40:	40021c00 	.word	0x40021c00
 8003e44:	40022000 	.word	0x40022000
 8003e48:	40022400 	.word	0x40022400
 8003e4c:	40013c00 	.word	0x40013c00

08003e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	887b      	ldrh	r3, [r7, #2]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
 8003e6c:	e001      	b.n	8003e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e9c:	e003      	b.n	8003ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e9e:	887b      	ldrh	r3, [r7, #2]
 8003ea0:	041a      	lsls	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	619a      	str	r2, [r3, #24]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eca:	4a05      	ldr	r2, [pc, #20]	; (8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd f932 	bl	800113c <HAL_GPIO_EXTI_Callback>
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40013c00 	.word	0x40013c00

08003ee4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_PWREx_EnableOverDrive+0x94>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f10:	f7fe fcc2 	bl	8002898 <HAL_GetTick>
 8003f14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f16:	e009      	b.n	8003f2c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f18:	f7fe fcbe 	bl	8002898 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f26:	d901      	bls.n	8003f2c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e01f      	b.n	8003f6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f2c:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d1ee      	bne.n	8003f18 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f40:	f7fe fcaa 	bl	8002898 <HAL_GetTick>
 8003f44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f46:	e009      	b.n	8003f5c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f48:	f7fe fca6 	bl	8002898 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f56:	d901      	bls.n	8003f5c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e007      	b.n	8003f6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f68:	d1ee      	bne.n	8003f48 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	420e0040 	.word	0x420e0040
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	420e0044 	.word	0x420e0044

08003f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e267      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d075      	beq.n	800408e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fa2:	4b88      	ldr	r3, [pc, #544]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d00c      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fae:	4b85      	ldr	r3, [pc, #532]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d112      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fba:	4b82      	ldr	r3, [pc, #520]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	4b7e      	ldr	r3, [pc, #504]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d05b      	beq.n	800408c <HAL_RCC_OscConfig+0x108>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d157      	bne.n	800408c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e242      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x74>
 8003fea:	4b76      	ldr	r3, [pc, #472]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a75      	ldr	r2, [pc, #468]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e01d      	b.n	8004034 <HAL_RCC_OscConfig+0xb0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x98>
 8004002:	4b70      	ldr	r3, [pc, #448]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6f      	ldr	r2, [pc, #444]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6c      	ldr	r2, [pc, #432]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0xb0>
 800401c:	4b69      	ldr	r3, [pc, #420]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a68      	ldr	r2, [pc, #416]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b66      	ldr	r3, [pc, #408]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a65      	ldr	r2, [pc, #404]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fe fc2c 	bl	8002898 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004044:	f7fe fc28 	bl	8002898 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e207      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b5b      	ldr	r3, [pc, #364]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0xc0>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fe fc18 	bl	8002898 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800406c:	f7fe fc14 	bl	8002898 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e1f3      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407e:	4b51      	ldr	r3, [pc, #324]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0xe8>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d063      	beq.n	8004162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d11c      	bne.n	80040ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b2:	4b44      	ldr	r3, [pc, #272]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_RCC_OscConfig+0x152>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e1c7      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d6:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4937      	ldr	r1, [pc, #220]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	e03a      	b.n	8004162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f4:	4b34      	ldr	r3, [pc, #208]	; (80041c8 <HAL_RCC_OscConfig+0x244>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fe fbcd 	bl	8002898 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004102:	f7fe fbc9 	bl	8002898 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e1a8      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4925      	ldr	r1, [pc, #148]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
 8004134:	e015      	b.n	8004162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCC_OscConfig+0x244>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe fbac 	bl	8002898 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004144:	f7fe fba8 	bl	8002898 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e187      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d036      	beq.n	80041dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <HAL_RCC_OscConfig+0x248>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe fb8c 	bl	8002898 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004184:	f7fe fb88 	bl	8002898 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e167      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_OscConfig+0x240>)
 8004198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x200>
 80041a2:	e01b      	b.n	80041dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_RCC_OscConfig+0x248>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fe fb75 	bl	8002898 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	e00e      	b.n	80041d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b2:	f7fe fb71 	bl	8002898 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d907      	bls.n	80041d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e150      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
 80041c4:	40023800 	.word	0x40023800
 80041c8:	42470000 	.word	0x42470000
 80041cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d0:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 80041d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1ea      	bne.n	80041b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8097 	beq.w	8004318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ee:	4b81      	ldr	r3, [pc, #516]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	4b7d      	ldr	r3, [pc, #500]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	4a7c      	ldr	r2, [pc, #496]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004208:	6413      	str	r3, [r2, #64]	; 0x40
 800420a:	4b7a      	ldr	r3, [pc, #488]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	4b77      	ldr	r3, [pc, #476]	; (80043f8 <HAL_RCC_OscConfig+0x474>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d118      	bne.n	8004258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004226:	4b74      	ldr	r3, [pc, #464]	; (80043f8 <HAL_RCC_OscConfig+0x474>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a73      	ldr	r2, [pc, #460]	; (80043f8 <HAL_RCC_OscConfig+0x474>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004232:	f7fe fb31 	bl	8002898 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7fe fb2d 	bl	8002898 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e10c      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4b6a      	ldr	r3, [pc, #424]	; (80043f8 <HAL_RCC_OscConfig+0x474>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x2ea>
 8004260:	4b64      	ldr	r3, [pc, #400]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a63      	ldr	r2, [pc, #396]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	e01c      	b.n	80042a8 <HAL_RCC_OscConfig+0x324>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b05      	cmp	r3, #5
 8004274:	d10c      	bne.n	8004290 <HAL_RCC_OscConfig+0x30c>
 8004276:	4b5f      	ldr	r3, [pc, #380]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a5e      	ldr	r2, [pc, #376]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 800427c:	f043 0304 	orr.w	r3, r3, #4
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	4b5c      	ldr	r3, [pc, #368]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4a5b      	ldr	r2, [pc, #364]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6713      	str	r3, [r2, #112]	; 0x70
 800428e:	e00b      	b.n	80042a8 <HAL_RCC_OscConfig+0x324>
 8004290:	4b58      	ldr	r3, [pc, #352]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4a57      	ldr	r2, [pc, #348]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
 800429c:	4b55      	ldr	r3, [pc, #340]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	4a54      	ldr	r2, [pc, #336]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 80042a2:	f023 0304 	bic.w	r3, r3, #4
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fe faf2 	bl	8002898 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fe faee 	bl	8002898 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0cb      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ce:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ee      	beq.n	80042b8 <HAL_RCC_OscConfig+0x334>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042dc:	f7fe fadc 	bl	8002898 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fe fad8 	bl	8002898 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0b5      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fa:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1ee      	bne.n	80042e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	4a38      	ldr	r2, [pc, #224]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004316:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80a1 	beq.w	8004464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004322:	4b34      	ldr	r3, [pc, #208]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b08      	cmp	r3, #8
 800432c:	d05c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d141      	bne.n	80043ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_RCC_OscConfig+0x478>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe faac 	bl	8002898 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004344:	f7fe faa8 	bl	8002898 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e087      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	019b      	lsls	r3, r3, #6
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	3b01      	subs	r3, #1
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	491b      	ldr	r1, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCC_OscConfig+0x478>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fe fa81 	bl	8002898 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439a:	f7fe fa7d 	bl	8002898 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e05c      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x416>
 80043b8:	e054      	b.n	8004464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <HAL_RCC_OscConfig+0x478>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fe fa6a 	bl	8002898 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fe fa66 	bl	8002898 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e045      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCC_OscConfig+0x470>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x444>
 80043e6:	e03d      	b.n	8004464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e038      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40007000 	.word	0x40007000
 80043fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x4ec>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d028      	beq.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d121      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d11a      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004438:	4293      	cmp	r3, r2
 800443a:	d111      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	3b01      	subs	r3, #1
 800444a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d107      	bne.n	8004460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0cc      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b68      	ldr	r3, [pc, #416]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d90c      	bls.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b65      	ldr	r3, [pc, #404]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b63      	ldr	r3, [pc, #396]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0b8      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c8:	4b59      	ldr	r3, [pc, #356]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a58      	ldr	r2, [pc, #352]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044e0:	4b53      	ldr	r3, [pc, #332]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a52      	ldr	r2, [pc, #328]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ec:	4b50      	ldr	r3, [pc, #320]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	494d      	ldr	r1, [pc, #308]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d044      	beq.n	8004594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	4b47      	ldr	r3, [pc, #284]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d119      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e07f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d003      	beq.n	8004532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452e:	2b03      	cmp	r3, #3
 8004530:	d107      	bne.n	8004542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	4b3f      	ldr	r3, [pc, #252]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e06f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004542:	4b3b      	ldr	r3, [pc, #236]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e067      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004552:	4b37      	ldr	r3, [pc, #220]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f023 0203 	bic.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4934      	ldr	r1, [pc, #208]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004564:	f7fe f998 	bl	8002898 <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	e00a      	b.n	8004582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fe f994 	bl	8002898 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e04f      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 020c 	and.w	r2, r3, #12
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	429a      	cmp	r2, r3
 8004592:	d1eb      	bne.n	800456c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004594:	4b25      	ldr	r3, [pc, #148]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d20c      	bcs.n	80045bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b22      	ldr	r3, [pc, #136]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e032      	b.n	8004622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4916      	ldr	r1, [pc, #88]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	490e      	ldr	r1, [pc, #56]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045fa:	f000 f821 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 80045fe:	4602      	mov	r2, r0
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	490a      	ldr	r1, [pc, #40]	; (8004634 <HAL_RCC_ClockConfig+0x1c0>)
 800460c:	5ccb      	ldrb	r3, [r1, r3]
 800460e:	fa22 f303 	lsr.w	r3, r2, r3
 8004612:	4a09      	ldr	r2, [pc, #36]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe f8f8 	bl	8002810 <HAL_InitTick>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023c00 	.word	0x40023c00
 8004630:	40023800 	.word	0x40023800
 8004634:	0800aa70 	.word	0x0800aa70
 8004638:	2000000c 	.word	0x2000000c
 800463c:	20000010 	.word	0x20000010

08004640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004644:	b090      	sub	sp, #64	; 0x40
 8004646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
 800464c:	2300      	movs	r3, #0
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004650:	2300      	movs	r3, #0
 8004652:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d00d      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x40>
 8004664:	2b08      	cmp	r3, #8
 8004666:	f200 80a1 	bhi.w	80047ac <HAL_RCC_GetSysClockFreq+0x16c>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x34>
 800466e:	2b04      	cmp	r3, #4
 8004670:	d003      	beq.n	800467a <HAL_RCC_GetSysClockFreq+0x3a>
 8004672:	e09b      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004676:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004678:	e09b      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800467a:	4b53      	ldr	r3, [pc, #332]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800467c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800467e:	e098      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004680:	4b4f      	ldr	r3, [pc, #316]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800468a:	4b4d      	ldr	r3, [pc, #308]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d028      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004696:	4b4a      	ldr	r3, [pc, #296]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	099b      	lsrs	r3, r3, #6
 800469c:	2200      	movs	r2, #0
 800469e:	623b      	str	r3, [r7, #32]
 80046a0:	627a      	str	r2, [r7, #36]	; 0x24
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046a8:	2100      	movs	r1, #0
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ac:	fb03 f201 	mul.w	r2, r3, r1
 80046b0:	2300      	movs	r3, #0
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	4a43      	ldr	r2, [pc, #268]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ba:	fba0 1202 	umull	r1, r2, r0, r2
 80046be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046c0:	460a      	mov	r2, r1
 80046c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80046c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c6:	4413      	add	r3, r2
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046cc:	2200      	movs	r2, #0
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	61fa      	str	r2, [r7, #28]
 80046d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046da:	f7fc fae5 	bl	8000ca8 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4613      	mov	r3, r2
 80046e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e6:	e053      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e8:	4b35      	ldr	r3, [pc, #212]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	2200      	movs	r2, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	617a      	str	r2, [r7, #20]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046fa:	f04f 0b00 	mov.w	fp, #0
 80046fe:	4652      	mov	r2, sl
 8004700:	465b      	mov	r3, fp
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f04f 0100 	mov.w	r1, #0
 800470a:	0159      	lsls	r1, r3, #5
 800470c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004710:	0150      	lsls	r0, r2, #5
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	ebb2 080a 	subs.w	r8, r2, sl
 800471a:	eb63 090b 	sbc.w	r9, r3, fp
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800472a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800472e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004732:	ebb2 0408 	subs.w	r4, r2, r8
 8004736:	eb63 0509 	sbc.w	r5, r3, r9
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	00eb      	lsls	r3, r5, #3
 8004744:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004748:	00e2      	lsls	r2, r4, #3
 800474a:	4614      	mov	r4, r2
 800474c:	461d      	mov	r5, r3
 800474e:	eb14 030a 	adds.w	r3, r4, sl
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	eb45 030b 	adc.w	r3, r5, fp
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004766:	4629      	mov	r1, r5
 8004768:	028b      	lsls	r3, r1, #10
 800476a:	4621      	mov	r1, r4
 800476c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004770:	4621      	mov	r1, r4
 8004772:	028a      	lsls	r2, r1, #10
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	2200      	movs	r2, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	60fa      	str	r2, [r7, #12]
 8004780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004784:	f7fc fa90 	bl	8000ca8 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	3301      	adds	r3, #1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047aa:	e002      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3740      	adds	r7, #64	; 0x40
 80047b8:	46bd      	mov	sp, r7
 80047ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
 80047c4:	00f42400 	.word	0x00f42400
 80047c8:	017d7840 	.word	0x017d7840

080047cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d0:	4b03      	ldr	r3, [pc, #12]	; (80047e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d2:	681b      	ldr	r3, [r3, #0]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	2000000c 	.word	0x2000000c

080047e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047e8:	f7ff fff0 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0a9b      	lsrs	r3, r3, #10
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4903      	ldr	r1, [pc, #12]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40023800 	.word	0x40023800
 8004808:	0800aa80 	.word	0x0800aa80

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004810:	f7ff ffdc 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0b5b      	lsrs	r3, r3, #13
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4903      	ldr	r1, [pc, #12]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40023800 	.word	0x40023800
 8004830:	0800aa80 	.word	0x0800aa80

08004834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e041      	b.n	80048ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fd fd90 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f000 fad8 	bl	8004e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e041      	b.n	8004968 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f839 	bl	8004970 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3304      	adds	r3, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f000 fa89 	bl	8004e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_TIM_PWM_Start+0x24>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e022      	b.n	80049ee <HAL_TIM_PWM_Start+0x6a>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d109      	bne.n	80049c2 <HAL_TIM_PWM_Start+0x3e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	e015      	b.n	80049ee <HAL_TIM_PWM_Start+0x6a>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d109      	bne.n	80049dc <HAL_TIM_PWM_Start+0x58>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e008      	b.n	80049ee <HAL_TIM_PWM_Start+0x6a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e07c      	b.n	8004af0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_PWM_Start+0x82>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	e013      	b.n	8004a2e <HAL_TIM_PWM_Start+0xaa>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_PWM_Start+0x92>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a14:	e00b      	b.n	8004a2e <HAL_TIM_PWM_Start+0xaa>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xa2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a24:	e003      	b.n	8004a2e <HAL_TIM_PWM_Start+0xaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fce0 	bl	80053fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2d      	ldr	r2, [pc, #180]	; (8004af8 <HAL_TIM_PWM_Start+0x174>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_TIM_PWM_Start+0xcc>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <HAL_TIM_PWM_Start+0x178>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIM_PWM_Start+0xd0>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <HAL_TIM_PWM_Start+0xd2>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <HAL_TIM_PWM_Start+0x174>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d022      	beq.n	8004aba <HAL_TIM_PWM_Start+0x136>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7c:	d01d      	beq.n	8004aba <HAL_TIM_PWM_Start+0x136>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <HAL_TIM_PWM_Start+0x17c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d018      	beq.n	8004aba <HAL_TIM_PWM_Start+0x136>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <HAL_TIM_PWM_Start+0x180>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <HAL_TIM_PWM_Start+0x136>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_TIM_PWM_Start+0x184>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <HAL_TIM_PWM_Start+0x136>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a16      	ldr	r2, [pc, #88]	; (8004afc <HAL_TIM_PWM_Start+0x178>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d009      	beq.n	8004aba <HAL_TIM_PWM_Start+0x136>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <HAL_TIM_PWM_Start+0x188>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <HAL_TIM_PWM_Start+0x136>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <HAL_TIM_PWM_Start+0x18c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b06      	cmp	r3, #6
 8004aca:	d010      	beq.n	8004aee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004adc:	e007      	b.n	8004aee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40010400 	.word	0x40010400
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800
 8004b08:	40000c00 	.word	0x40000c00
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40001800 	.word	0x40001800

08004b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e0ae      	b.n	8004c90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b0c      	cmp	r3, #12
 8004b3e:	f200 809f 	bhi.w	8004c80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004c81 	.word	0x08004c81
 8004b50:	08004c81 	.word	0x08004c81
 8004b54:	08004c81 	.word	0x08004c81
 8004b58:	08004bbd 	.word	0x08004bbd
 8004b5c:	08004c81 	.word	0x08004c81
 8004b60:	08004c81 	.word	0x08004c81
 8004b64:	08004c81 	.word	0x08004c81
 8004b68:	08004bff 	.word	0x08004bff
 8004b6c:	08004c81 	.word	0x08004c81
 8004b70:	08004c81 	.word	0x08004c81
 8004b74:	08004c81 	.word	0x08004c81
 8004b78:	08004c3f 	.word	0x08004c3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f9f0 	bl	8004f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0204 	bic.w	r2, r2, #4
 8004ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6999      	ldr	r1, [r3, #24]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	619a      	str	r2, [r3, #24]
      break;
 8004bba:	e064      	b.n	8004c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fa40 	bl	8005048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6999      	ldr	r1, [r3, #24]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	619a      	str	r2, [r3, #24]
      break;
 8004bfc:	e043      	b.n	8004c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fa95 	bl	8005134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0208 	orr.w	r2, r2, #8
 8004c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0204 	bic.w	r2, r2, #4
 8004c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69d9      	ldr	r1, [r3, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	61da      	str	r2, [r3, #28]
      break;
 8004c3c:	e023      	b.n	8004c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fae9 	bl	800521c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69d9      	ldr	r1, [r3, #28]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	021a      	lsls	r2, r3, #8
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	61da      	str	r2, [r3, #28]
      break;
 8004c7e:	e002      	b.n	8004c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
      break;
 8004c84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e0b4      	b.n	8004e1e <HAL_TIM_ConfigClockSource+0x186>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cec:	d03e      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0xd4>
 8004cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf2:	f200 8087 	bhi.w	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfa:	f000 8086 	beq.w	8004e0a <HAL_TIM_ConfigClockSource+0x172>
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d02:	d87f      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b70      	cmp	r3, #112	; 0x70
 8004d06:	d01a      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0xa6>
 8004d08:	2b70      	cmp	r3, #112	; 0x70
 8004d0a:	d87b      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b60      	cmp	r3, #96	; 0x60
 8004d0e:	d050      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d10:	2b60      	cmp	r3, #96	; 0x60
 8004d12:	d877      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b50      	cmp	r3, #80	; 0x50
 8004d16:	d03c      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0xfa>
 8004d18:	2b50      	cmp	r3, #80	; 0x50
 8004d1a:	d873      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d058      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d86f      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b30      	cmp	r3, #48	; 0x30
 8004d26:	d064      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d28:	2b30      	cmp	r3, #48	; 0x30
 8004d2a:	d86b      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d060      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d867      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d05c      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d05a      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d3c:	e062      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6899      	ldr	r1, [r3, #8]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f000 fb35 	bl	80053bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	609a      	str	r2, [r3, #8]
      break;
 8004d6a:	e04f      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	6899      	ldr	r1, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f000 fb1e 	bl	80053bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d8e:	609a      	str	r2, [r3, #8]
      break;
 8004d90:	e03c      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f000 fa92 	bl	80052c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2150      	movs	r1, #80	; 0x50
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 faeb 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004db0:	e02c      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f000 fab1 	bl	8005326 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2160      	movs	r1, #96	; 0x60
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fadb 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e01c      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6859      	ldr	r1, [r3, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f000 fa72 	bl	80052c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2140      	movs	r1, #64	; 0x40
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 facb 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004df0:	e00c      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f000 fac2 	bl	8005386 <TIM_ITRx_SetConfig>
      break;
 8004e02:	e003      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      break;
 8004e08:	e000      	b.n	8004e0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a40      	ldr	r2, [pc, #256]	; (8004f3c <TIM_Base_SetConfig+0x114>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e46:	d00f      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a3d      	ldr	r2, [pc, #244]	; (8004f40 <TIM_Base_SetConfig+0x118>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00b      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3c      	ldr	r2, [pc, #240]	; (8004f44 <TIM_Base_SetConfig+0x11c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3b      	ldr	r2, [pc, #236]	; (8004f48 <TIM_Base_SetConfig+0x120>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a3a      	ldr	r2, [pc, #232]	; (8004f4c <TIM_Base_SetConfig+0x124>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2f      	ldr	r2, [pc, #188]	; (8004f3c <TIM_Base_SetConfig+0x114>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d02b      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e88:	d027      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2c      	ldr	r2, [pc, #176]	; (8004f40 <TIM_Base_SetConfig+0x118>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d023      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2b      	ldr	r2, [pc, #172]	; (8004f44 <TIM_Base_SetConfig+0x11c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01f      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <TIM_Base_SetConfig+0x120>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01b      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a29      	ldr	r2, [pc, #164]	; (8004f4c <TIM_Base_SetConfig+0x124>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d017      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a28      	ldr	r2, [pc, #160]	; (8004f50 <TIM_Base_SetConfig+0x128>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <TIM_Base_SetConfig+0x12c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00f      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <TIM_Base_SetConfig+0x130>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <TIM_Base_SetConfig+0x134>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a24      	ldr	r2, [pc, #144]	; (8004f60 <TIM_Base_SetConfig+0x138>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a23      	ldr	r2, [pc, #140]	; (8004f64 <TIM_Base_SetConfig+0x13c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d108      	bne.n	8004eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <TIM_Base_SetConfig+0x114>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0xf8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <TIM_Base_SetConfig+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d103      	bne.n	8004f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	615a      	str	r2, [r3, #20]
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40000c00 	.word	0x40000c00
 8004f4c:	40010400 	.word	0x40010400
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800
 8004f5c:	40001800 	.word	0x40001800
 8004f60:	40001c00 	.word	0x40001c00
 8004f64:	40002000 	.word	0x40002000

08004f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0302 	bic.w	r3, r3, #2
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a20      	ldr	r2, [pc, #128]	; (8005040 <TIM_OC1_SetConfig+0xd8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_OC1_SetConfig+0x64>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <TIM_OC1_SetConfig+0xdc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d10c      	bne.n	8004fe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0308 	bic.w	r3, r3, #8
 8004fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f023 0304 	bic.w	r3, r3, #4
 8004fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a15      	ldr	r2, [pc, #84]	; (8005040 <TIM_OC1_SetConfig+0xd8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_OC1_SetConfig+0x8e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a14      	ldr	r2, [pc, #80]	; (8005044 <TIM_OC1_SetConfig+0xdc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d111      	bne.n	800501a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	621a      	str	r2, [r3, #32]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40010000 	.word	0x40010000
 8005044:	40010400 	.word	0x40010400

08005048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0210 	bic.w	r2, r3, #16
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0320 	bic.w	r3, r3, #32
 8005092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a22      	ldr	r2, [pc, #136]	; (800512c <TIM_OC2_SetConfig+0xe4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_OC2_SetConfig+0x68>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a21      	ldr	r2, [pc, #132]	; (8005130 <TIM_OC2_SetConfig+0xe8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10d      	bne.n	80050cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <TIM_OC2_SetConfig+0xe4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_OC2_SetConfig+0x94>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <TIM_OC2_SetConfig+0xe8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d113      	bne.n	8005104 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40010400 	.word	0x40010400

08005134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0303 	bic.w	r3, r3, #3
 800516a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800517c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a21      	ldr	r2, [pc, #132]	; (8005214 <TIM_OC3_SetConfig+0xe0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_OC3_SetConfig+0x66>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a20      	ldr	r2, [pc, #128]	; (8005218 <TIM_OC3_SetConfig+0xe4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d10d      	bne.n	80051b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a16      	ldr	r2, [pc, #88]	; (8005214 <TIM_OC3_SetConfig+0xe0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_OC3_SetConfig+0x92>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a15      	ldr	r2, [pc, #84]	; (8005218 <TIM_OC3_SetConfig+0xe4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d113      	bne.n	80051ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	621a      	str	r2, [r3, #32]
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40010000 	.word	0x40010000
 8005218:	40010400 	.word	0x40010400

0800521c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	031b      	lsls	r3, r3, #12
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a12      	ldr	r2, [pc, #72]	; (80052c0 <TIM_OC4_SetConfig+0xa4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <TIM_OC4_SetConfig+0x68>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a11      	ldr	r2, [pc, #68]	; (80052c4 <TIM_OC4_SetConfig+0xa8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d109      	bne.n	8005298 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800528a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	019b      	lsls	r3, r3, #6
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40010400 	.word	0x40010400

080052c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f023 030a 	bic.w	r3, r3, #10
 8005304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005326:	b480      	push	{r7}
 8005328:	b087      	sub	sp, #28
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 0210 	bic.w	r2, r3, #16
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f043 0307 	orr.w	r3, r3, #7
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	431a      	orrs	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	609a      	str	r2, [r3, #8]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	2201      	movs	r2, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	43db      	mvns	r3, r3
 800541e:	401a      	ands	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800545c:	2302      	movs	r3, #2
 800545e:	e05a      	b.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a21      	ldr	r2, [pc, #132]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d022      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ac:	d01d      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d018      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1b      	ldr	r2, [pc, #108]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1a      	ldr	r2, [pc, #104]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00e      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a18      	ldr	r2, [pc, #96]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d009      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a15      	ldr	r2, [pc, #84]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d10c      	bne.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010000 	.word	0x40010000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40010400 	.word	0x40010400
 8005538:	40014000 	.word	0x40014000
 800553c:	40001800 	.word	0x40001800

08005540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005558:	2302      	movs	r3, #2
 800555a:	e03d      	b.n	80055d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e03f      	b.n	8005676 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fc ff14 	bl	8002438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	; 0x24
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 ff9b 	bl	8006564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800563c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695a      	ldr	r2, [r3, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800564c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800565c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b08a      	sub	sp, #40	; 0x28
 8005682:	af02      	add	r7, sp, #8
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	603b      	str	r3, [r7, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b20      	cmp	r3, #32
 800569c:	d17c      	bne.n	8005798 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <HAL_UART_Transmit+0x2c>
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e075      	b.n	800579a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Transmit+0x3e>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e06e      	b.n	800579a <HAL_UART_Transmit+0x11c>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2221      	movs	r2, #33	; 0x21
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056d2:	f7fd f8e1 	bl	8002898 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	88fa      	ldrh	r2, [r7, #6]
 80056e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ec:	d108      	bne.n	8005700 <HAL_UART_Transmit+0x82>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d104      	bne.n	8005700 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e003      	b.n	8005708 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005710:	e02a      	b.n	8005768 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2200      	movs	r2, #0
 800571a:	2180      	movs	r1, #128	; 0x80
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fc53 	bl	8005fc8 <UART_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e036      	b.n	800579a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10b      	bne.n	800574a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005740:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	3302      	adds	r3, #2
 8005746:	61bb      	str	r3, [r7, #24]
 8005748:	e007      	b.n	800575a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	3301      	adds	r3, #1
 8005758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1cf      	bne.n	8005712 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2200      	movs	r2, #0
 800577a:	2140      	movs	r1, #64	; 0x40
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fc23 	bl	8005fc8 <UART_WaitOnFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e006      	b.n	800579a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	e000      	b.n	800579a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b08c      	sub	sp, #48	; 0x30
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d152      	bne.n	8005862 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e04b      	b.n	8005864 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e044      	b.n	8005864 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	461a      	mov	r2, r3
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 fc58 	bl	80060a4 <UART_Start_Receive_DMA>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80057fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d12c      	bne.n	800585c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	2b01      	cmp	r3, #1
 8005808:	d125      	bne.n	8005856 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	617b      	str	r3, [r7, #20]
   return(result);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f043 0310 	orr.w	r3, r3, #16
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005840:	627a      	str	r2, [r7, #36]	; 0x24
 8005842:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6a39      	ldr	r1, [r7, #32]
 8005846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	61fb      	str	r3, [r7, #28]
   return(result);
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005854:	e002      	b.n	800585c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800585c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005860:	e000      	b.n	8005864 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3730      	adds	r7, #48	; 0x30
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b0ba      	sub	sp, #232	; 0xe8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005892:	2300      	movs	r3, #0
 8005894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10f      	bne.n	80058d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_UART_IRQHandler+0x66>
 80058be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fd8f 	bl	80063ee <UART_Receive_IT>
      return;
 80058d0:	e256      	b.n	8005d80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80de 	beq.w	8005a98 <HAL_UART_IRQHandler+0x22c>
 80058dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80d1 	beq.w	8005a98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_UART_IRQHandler+0xae>
 8005902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00b      	beq.n	800593e <HAL_UART_IRQHandler+0xd2>
 8005926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	f043 0202 	orr.w	r2, r3, #2
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <HAL_UART_IRQHandler+0xf6>
 800594a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f043 0204 	orr.w	r2, r3, #4
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d011      	beq.n	8005992 <HAL_UART_IRQHandler+0x126>
 800596e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d105      	bne.n	8005986 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800597a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f043 0208 	orr.w	r2, r3, #8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 81ed 	beq.w	8005d76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800599c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_UART_IRQHandler+0x14e>
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fd1a 	bl	80063ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	bf0c      	ite	eq
 80059c8:	2301      	moveq	r3, #1
 80059ca:	2300      	movne	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <HAL_UART_IRQHandler+0x17a>
 80059de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d04f      	beq.n	8005a86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fc22 	bl	8006230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d141      	bne.n	8005a7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3314      	adds	r3, #20
 8005a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3314      	adds	r3, #20
 8005a22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1d9      	bne.n	80059fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d013      	beq.n	8005a76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	4a7d      	ldr	r2, [pc, #500]	; (8005c48 <HAL_UART_IRQHandler+0x3dc>)
 8005a54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fd fdc0 	bl	80035e0 <HAL_DMA_Abort_IT>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d016      	beq.n	8005a94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	e00e      	b.n	8005a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9a4 	bl	8005dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	e00a      	b.n	8005a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f9a0 	bl	8005dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e006      	b.n	8005a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f99c 	bl	8005dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a92:	e170      	b.n	8005d76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	bf00      	nop
    return;
 8005a96:	e16e      	b.n	8005d76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	f040 814a 	bne.w	8005d36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8143 	beq.w	8005d36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 813c 	beq.w	8005d36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b40      	cmp	r3, #64	; 0x40
 8005ae0:	f040 80b4 	bne.w	8005c4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005af0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8140 	beq.w	8005d7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b02:	429a      	cmp	r2, r3
 8005b04:	f080 8139 	bcs.w	8005d7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b1a:	f000 8088 	beq.w	8005c2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1d9      	bne.n	8005b1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3314      	adds	r3, #20
 8005b70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3314      	adds	r3, #20
 8005b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e1      	bne.n	8005b6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e3      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfe:	f023 0310 	bic.w	r3, r3, #16
 8005c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c10:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e3      	bne.n	8005bec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fd fc69 	bl	8003500 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fb faf0 	bl	8001224 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c44:	e099      	b.n	8005d7a <HAL_UART_IRQHandler+0x50e>
 8005c46:	bf00      	nop
 8005c48:	080062f7 	.word	0x080062f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 808b 	beq.w	8005d7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8086 	beq.w	8005d7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	330c      	adds	r3, #12
 8005c78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	330c      	adds	r3, #12
 8005c92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c96:	647a      	str	r2, [r7, #68]	; 0x44
 8005c98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e3      	bne.n	8005c72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3314      	adds	r3, #20
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3314      	adds	r3, #20
 8005cca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cce:	633a      	str	r2, [r7, #48]	; 0x30
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e3      	bne.n	8005caa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0310 	bic.w	r3, r3, #16
 8005d06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d14:	61fa      	str	r2, [r7, #28]
 8005d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	69b9      	ldr	r1, [r7, #24]
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	617b      	str	r3, [r7, #20]
   return(result);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e3      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb fa78 	bl	8001224 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d34:	e023      	b.n	8005d7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_UART_IRQHandler+0x4ea>
 8005d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fae5 	bl	800631e <UART_Transmit_IT>
    return;
 8005d54:	e014      	b.n	8005d80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <HAL_UART_IRQHandler+0x514>
 8005d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fb25 	bl	80063be <UART_EndTransmit_IT>
    return;
 8005d74:	e004      	b.n	8005d80 <HAL_UART_IRQHandler+0x514>
    return;
 8005d76:	bf00      	nop
 8005d78:	e002      	b.n	8005d80 <HAL_UART_IRQHandler+0x514>
      return;
 8005d7a:	bf00      	nop
 8005d7c:	e000      	b.n	8005d80 <HAL_UART_IRQHandler+0x514>
      return;
 8005d7e:	bf00      	nop
  }
}
 8005d80:	37e8      	adds	r7, #232	; 0xe8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop

08005d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b09c      	sub	sp, #112	; 0x70
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d172      	bne.n	8005eda <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	2200      	movs	r2, #0
 8005df8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e1c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	667b      	str	r3, [r7, #100]	; 0x64
 8005e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e4e:	647a      	str	r2, [r7, #68]	; 0x44
 8005e50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	623b      	str	r3, [r7, #32]
   return(result);
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e82:	633a      	str	r2, [r7, #48]	; 0x30
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d119      	bne.n	8005eda <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f023 0310 	bic.w	r3, r3, #16
 8005ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ec6:	61fa      	str	r2, [r7, #28]
 8005ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	69b9      	ldr	r1, [r7, #24]
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e5      	bne.n	8005ea6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d106      	bne.n	8005ef0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005eea:	f7fb f99b 	bl	8001224 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eee:	e002      	b.n	8005ef6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005ef0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ef2:	f7ff ff53 	bl	8005d9c <HAL_UART_RxCpltCallback>
}
 8005ef6:	bf00      	nop
 8005ef8:	3770      	adds	r7, #112	; 0x70
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d108      	bne.n	8005f26 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f18:	085b      	lsrs	r3, r3, #1
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7fb f980 	bl	8001224 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f24:	e002      	b.n	8005f2c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff ff42 	bl	8005db0 <HAL_UART_RxHalfCpltCallback>
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f50:	2b80      	cmp	r3, #128	; 0x80
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b21      	cmp	r3, #33	; 0x21
 8005f66:	d108      	bne.n	8005f7a <UART_DMAError+0x46>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2200      	movs	r2, #0
 8005f72:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f74:	68b8      	ldr	r0, [r7, #8]
 8005f76:	f000 f933 	bl	80061e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b22      	cmp	r3, #34	; 0x22
 8005f9a:	d108      	bne.n	8005fae <UART_DMAError+0x7a>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005fa8:	68b8      	ldr	r0, [r7, #8]
 8005faa:	f000 f941 	bl	8006230 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	f043 0210 	orr.w	r2, r3, #16
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fba:	68b8      	ldr	r0, [r7, #8]
 8005fbc:	f7ff ff02 	bl	8005dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b090      	sub	sp, #64	; 0x40
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd8:	e050      	b.n	800607c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d04c      	beq.n	800607c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fe8:	f7fc fc56 	bl	8002898 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d241      	bcs.n	800607c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006018:	637a      	str	r2, [r7, #52]	; 0x34
 800601a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800601e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e5      	bne.n	8005ff8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3314      	adds	r3, #20
 8006032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3314      	adds	r3, #20
 800604a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800604c:	623a      	str	r2, [r7, #32]
 800604e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	61bb      	str	r3, [r7, #24]
   return(result);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e00f      	b.n	800609c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	429a      	cmp	r2, r3
 8006098:	d09f      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3740      	adds	r7, #64	; 0x40
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b098      	sub	sp, #96	; 0x60
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2222      	movs	r2, #34	; 0x22
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	4a40      	ldr	r2, [pc, #256]	; (80061d4 <UART_Start_Receive_DMA+0x130>)
 80060d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <UART_Start_Receive_DMA+0x134>)
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	4a3e      	ldr	r2, [pc, #248]	; (80061dc <UART_Start_Receive_DMA+0x138>)
 80060e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	2200      	movs	r2, #0
 80060ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060ec:	f107 0308 	add.w	r3, r7, #8
 80060f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	f7fd f9a4 	bl	8003450 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d019      	beq.n	8006162 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	330c      	adds	r3, #12
 8006134:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006144:	65bb      	str	r3, [r7, #88]	; 0x58
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800614e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006150:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800615c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e5      	bne.n	800612e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3314      	adds	r3, #20
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	f043 0301 	orr.w	r3, r3, #1
 8006178:	657b      	str	r3, [r7, #84]	; 0x54
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006182:	63ba      	str	r2, [r7, #56]	; 0x38
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e5      	bne.n	8006162 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3314      	adds	r3, #20
 800619c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	617b      	str	r3, [r7, #20]
   return(result);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ac:	653b      	str	r3, [r7, #80]	; 0x50
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061b6:	627a      	str	r2, [r7, #36]	; 0x24
 80061b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6a39      	ldr	r1, [r7, #32]
 80061bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3760      	adds	r7, #96	; 0x60
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	08005dd9 	.word	0x08005dd9
 80061d8:	08005eff 	.word	0x08005eff
 80061dc:	08005f35 	.word	0x08005f35

080061e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b089      	sub	sp, #36	; 0x24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	61ba      	str	r2, [r7, #24]
 800620a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6979      	ldr	r1, [r7, #20]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	613b      	str	r3, [r7, #16]
   return(result);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e5      	bne.n	80061e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006224:	bf00      	nop
 8006226:	3724      	adds	r7, #36	; 0x24
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b095      	sub	sp, #84	; 0x54
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	330c      	adds	r3, #12
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006258:	643a      	str	r2, [r7, #64]	; 0x40
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800625e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3314      	adds	r3, #20
 8006272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	61fb      	str	r3, [r7, #28]
   return(result);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	64bb      	str	r3, [r7, #72]	; 0x48
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3314      	adds	r3, #20
 800628a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800628c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e5      	bne.n	800626c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d119      	bne.n	80062dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	330c      	adds	r3, #12
 80062ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f023 0310 	bic.w	r3, r3, #16
 80062be:	647b      	str	r3, [r7, #68]	; 0x44
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062c8:	61ba      	str	r2, [r7, #24]
 80062ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6979      	ldr	r1, [r7, #20]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	613b      	str	r3, [r7, #16]
   return(result);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e5      	bne.n	80062a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062ea:	bf00      	nop
 80062ec:	3754      	adds	r7, #84	; 0x54
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7ff fd57 	bl	8005dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b21      	cmp	r3, #33	; 0x21
 8006330:	d13e      	bne.n	80063b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d114      	bne.n	8006366 <UART_Transmit_IT+0x48>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d110      	bne.n	8006366 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006358:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	1c9a      	adds	r2, r3, #2
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	621a      	str	r2, [r3, #32]
 8006364:	e008      	b.n	8006378 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6211      	str	r1, [r2, #32]
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4619      	mov	r1, r3
 8006386:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10f      	bne.n	80063ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800639a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063b0:	2302      	movs	r3, #2
  }
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fcd2 	bl	8005d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b08c      	sub	sp, #48	; 0x30
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b22      	cmp	r3, #34	; 0x22
 8006400:	f040 80ab 	bne.w	800655a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d117      	bne.n	800643e <UART_Receive_IT+0x50>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d113      	bne.n	800643e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	b29a      	uxth	r2, r3
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
 800643c:	e026      	b.n	800648c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006444:	2300      	movs	r3, #0
 8006446:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006450:	d007      	beq.n	8006462 <UART_Receive_IT+0x74>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <UART_Receive_IT+0x82>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	e008      	b.n	8006482 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647c:	b2da      	uxtb	r2, r3
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29b      	uxth	r3, r3
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4619      	mov	r1, r3
 800649a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800649c:	2b00      	cmp	r3, #0
 800649e:	d15a      	bne.n	8006556 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0220 	bic.w	r2, r2, #32
 80064ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0201 	bic.w	r2, r2, #1
 80064ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d135      	bne.n	800654c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	330c      	adds	r3, #12
 80064ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	613b      	str	r3, [r7, #16]
   return(result);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f023 0310 	bic.w	r3, r3, #16
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006506:	623a      	str	r2, [r7, #32]
 8006508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	69f9      	ldr	r1, [r7, #28]
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	61bb      	str	r3, [r7, #24]
   return(result);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b10      	cmp	r3, #16
 8006526:	d10a      	bne.n	800653e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fa fe6d 	bl	8001224 <HAL_UARTEx_RxEventCallback>
 800654a:	e002      	b.n	8006552 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff fc25 	bl	8005d9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e002      	b.n	800655c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3730      	adds	r7, #48	; 0x30
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006568:	b0c0      	sub	sp, #256	; 0x100
 800656a:	af00      	add	r7, sp, #0
 800656c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	68d9      	ldr	r1, [r3, #12]
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	ea40 0301 	orr.w	r3, r0, r1
 800658c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	431a      	orrs	r2, r3
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065bc:	f021 010c 	bic.w	r1, r1, #12
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065ca:	430b      	orrs	r3, r1
 80065cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065de:	6999      	ldr	r1, [r3, #24]
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	ea40 0301 	orr.w	r3, r0, r1
 80065ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b8f      	ldr	r3, [pc, #572]	; (8006830 <UART_SetConfig+0x2cc>)
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d005      	beq.n	8006604 <UART_SetConfig+0xa0>
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b8d      	ldr	r3, [pc, #564]	; (8006834 <UART_SetConfig+0x2d0>)
 8006600:	429a      	cmp	r2, r3
 8006602:	d104      	bne.n	800660e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7fe f902 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8006608:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800660c:	e003      	b.n	8006616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800660e:	f7fe f8e9 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8006612:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006620:	f040 810c 	bne.w	800683c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800662e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006636:	4622      	mov	r2, r4
 8006638:	462b      	mov	r3, r5
 800663a:	1891      	adds	r1, r2, r2
 800663c:	65b9      	str	r1, [r7, #88]	; 0x58
 800663e:	415b      	adcs	r3, r3
 8006640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006646:	4621      	mov	r1, r4
 8006648:	eb12 0801 	adds.w	r8, r2, r1
 800664c:	4629      	mov	r1, r5
 800664e:	eb43 0901 	adc.w	r9, r3, r1
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800665e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006666:	4690      	mov	r8, r2
 8006668:	4699      	mov	r9, r3
 800666a:	4623      	mov	r3, r4
 800666c:	eb18 0303 	adds.w	r3, r8, r3
 8006670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006674:	462b      	mov	r3, r5
 8006676:	eb49 0303 	adc.w	r3, r9, r3
 800667a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800667e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800668a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800668e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006692:	460b      	mov	r3, r1
 8006694:	18db      	adds	r3, r3, r3
 8006696:	653b      	str	r3, [r7, #80]	; 0x50
 8006698:	4613      	mov	r3, r2
 800669a:	eb42 0303 	adc.w	r3, r2, r3
 800669e:	657b      	str	r3, [r7, #84]	; 0x54
 80066a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066a8:	f7fa fafe 	bl	8000ca8 <__aeabi_uldivmod>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4b61      	ldr	r3, [pc, #388]	; (8006838 <UART_SetConfig+0x2d4>)
 80066b2:	fba3 2302 	umull	r2, r3, r3, r2
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	011c      	lsls	r4, r3, #4
 80066ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066cc:	4642      	mov	r2, r8
 80066ce:	464b      	mov	r3, r9
 80066d0:	1891      	adds	r1, r2, r2
 80066d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80066d4:	415b      	adcs	r3, r3
 80066d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066dc:	4641      	mov	r1, r8
 80066de:	eb12 0a01 	adds.w	sl, r2, r1
 80066e2:	4649      	mov	r1, r9
 80066e4:	eb43 0b01 	adc.w	fp, r3, r1
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066fc:	4692      	mov	sl, r2
 80066fe:	469b      	mov	fp, r3
 8006700:	4643      	mov	r3, r8
 8006702:	eb1a 0303 	adds.w	r3, sl, r3
 8006706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800670a:	464b      	mov	r3, r9
 800670c:	eb4b 0303 	adc.w	r3, fp, r3
 8006710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006720:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006728:	460b      	mov	r3, r1
 800672a:	18db      	adds	r3, r3, r3
 800672c:	643b      	str	r3, [r7, #64]	; 0x40
 800672e:	4613      	mov	r3, r2
 8006730:	eb42 0303 	adc.w	r3, r2, r3
 8006734:	647b      	str	r3, [r7, #68]	; 0x44
 8006736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800673a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800673e:	f7fa fab3 	bl	8000ca8 <__aeabi_uldivmod>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4611      	mov	r1, r2
 8006748:	4b3b      	ldr	r3, [pc, #236]	; (8006838 <UART_SetConfig+0x2d4>)
 800674a:	fba3 2301 	umull	r2, r3, r3, r1
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	2264      	movs	r2, #100	; 0x64
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	1acb      	subs	r3, r1, r3
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800675e:	4b36      	ldr	r3, [pc, #216]	; (8006838 <UART_SetConfig+0x2d4>)
 8006760:	fba3 2302 	umull	r2, r3, r3, r2
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800676c:	441c      	add	r4, r3
 800676e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006772:	2200      	movs	r2, #0
 8006774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006778:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800677c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	1891      	adds	r1, r2, r2
 8006786:	63b9      	str	r1, [r7, #56]	; 0x38
 8006788:	415b      	adcs	r3, r3
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800678c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006790:	4641      	mov	r1, r8
 8006792:	1851      	adds	r1, r2, r1
 8006794:	6339      	str	r1, [r7, #48]	; 0x30
 8006796:	4649      	mov	r1, r9
 8006798:	414b      	adcs	r3, r1
 800679a:	637b      	str	r3, [r7, #52]	; 0x34
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067a8:	4659      	mov	r1, fp
 80067aa:	00cb      	lsls	r3, r1, #3
 80067ac:	4651      	mov	r1, sl
 80067ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b2:	4651      	mov	r1, sl
 80067b4:	00ca      	lsls	r2, r1, #3
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	4642      	mov	r2, r8
 80067be:	189b      	adds	r3, r3, r2
 80067c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067c4:	464b      	mov	r3, r9
 80067c6:	460a      	mov	r2, r1
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067e4:	460b      	mov	r3, r1
 80067e6:	18db      	adds	r3, r3, r3
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ea:	4613      	mov	r3, r2
 80067ec:	eb42 0303 	adc.w	r3, r2, r3
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067fa:	f7fa fa55 	bl	8000ca8 <__aeabi_uldivmod>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <UART_SetConfig+0x2d4>)
 8006804:	fba3 1302 	umull	r1, r3, r3, r2
 8006808:	095b      	lsrs	r3, r3, #5
 800680a:	2164      	movs	r1, #100	; 0x64
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	3332      	adds	r3, #50	; 0x32
 8006816:	4a08      	ldr	r2, [pc, #32]	; (8006838 <UART_SetConfig+0x2d4>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	f003 0207 	and.w	r2, r3, #7
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4422      	add	r2, r4
 800682a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800682c:	e106      	b.n	8006a3c <UART_SetConfig+0x4d8>
 800682e:	bf00      	nop
 8006830:	40011000 	.word	0x40011000
 8006834:	40011400 	.word	0x40011400
 8006838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800683c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006840:	2200      	movs	r2, #0
 8006842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006846:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800684a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800684e:	4642      	mov	r2, r8
 8006850:	464b      	mov	r3, r9
 8006852:	1891      	adds	r1, r2, r2
 8006854:	6239      	str	r1, [r7, #32]
 8006856:	415b      	adcs	r3, r3
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
 800685a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800685e:	4641      	mov	r1, r8
 8006860:	1854      	adds	r4, r2, r1
 8006862:	4649      	mov	r1, r9
 8006864:	eb43 0501 	adc.w	r5, r3, r1
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	00eb      	lsls	r3, r5, #3
 8006872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006876:	00e2      	lsls	r2, r4, #3
 8006878:	4614      	mov	r4, r2
 800687a:	461d      	mov	r5, r3
 800687c:	4643      	mov	r3, r8
 800687e:	18e3      	adds	r3, r4, r3
 8006880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006884:	464b      	mov	r3, r9
 8006886:	eb45 0303 	adc.w	r3, r5, r3
 800688a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800689a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068aa:	4629      	mov	r1, r5
 80068ac:	008b      	lsls	r3, r1, #2
 80068ae:	4621      	mov	r1, r4
 80068b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b4:	4621      	mov	r1, r4
 80068b6:	008a      	lsls	r2, r1, #2
 80068b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068bc:	f7fa f9f4 	bl	8000ca8 <__aeabi_uldivmod>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4b60      	ldr	r3, [pc, #384]	; (8006a48 <UART_SetConfig+0x4e4>)
 80068c6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	011c      	lsls	r4, r3, #4
 80068ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068e0:	4642      	mov	r2, r8
 80068e2:	464b      	mov	r3, r9
 80068e4:	1891      	adds	r1, r2, r2
 80068e6:	61b9      	str	r1, [r7, #24]
 80068e8:	415b      	adcs	r3, r3
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068f0:	4641      	mov	r1, r8
 80068f2:	1851      	adds	r1, r2, r1
 80068f4:	6139      	str	r1, [r7, #16]
 80068f6:	4649      	mov	r1, r9
 80068f8:	414b      	adcs	r3, r1
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006908:	4659      	mov	r1, fp
 800690a:	00cb      	lsls	r3, r1, #3
 800690c:	4651      	mov	r1, sl
 800690e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006912:	4651      	mov	r1, sl
 8006914:	00ca      	lsls	r2, r1, #3
 8006916:	4610      	mov	r0, r2
 8006918:	4619      	mov	r1, r3
 800691a:	4603      	mov	r3, r0
 800691c:	4642      	mov	r2, r8
 800691e:	189b      	adds	r3, r3, r2
 8006920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006924:	464b      	mov	r3, r9
 8006926:	460a      	mov	r2, r1
 8006928:	eb42 0303 	adc.w	r3, r2, r3
 800692c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	67bb      	str	r3, [r7, #120]	; 0x78
 800693a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006948:	4649      	mov	r1, r9
 800694a:	008b      	lsls	r3, r1, #2
 800694c:	4641      	mov	r1, r8
 800694e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006952:	4641      	mov	r1, r8
 8006954:	008a      	lsls	r2, r1, #2
 8006956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800695a:	f7fa f9a5 	bl	8000ca8 <__aeabi_uldivmod>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4611      	mov	r1, r2
 8006964:	4b38      	ldr	r3, [pc, #224]	; (8006a48 <UART_SetConfig+0x4e4>)
 8006966:	fba3 2301 	umull	r2, r3, r3, r1
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2264      	movs	r2, #100	; 0x64
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	1acb      	subs	r3, r1, r3
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	3332      	adds	r3, #50	; 0x32
 8006978:	4a33      	ldr	r2, [pc, #204]	; (8006a48 <UART_SetConfig+0x4e4>)
 800697a:	fba2 2303 	umull	r2, r3, r2, r3
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006984:	441c      	add	r4, r3
 8006986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800698a:	2200      	movs	r2, #0
 800698c:	673b      	str	r3, [r7, #112]	; 0x70
 800698e:	677a      	str	r2, [r7, #116]	; 0x74
 8006990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	1891      	adds	r1, r2, r2
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	415b      	adcs	r3, r3
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069a4:	4641      	mov	r1, r8
 80069a6:	1851      	adds	r1, r2, r1
 80069a8:	6039      	str	r1, [r7, #0]
 80069aa:	4649      	mov	r1, r9
 80069ac:	414b      	adcs	r3, r1
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069bc:	4659      	mov	r1, fp
 80069be:	00cb      	lsls	r3, r1, #3
 80069c0:	4651      	mov	r1, sl
 80069c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c6:	4651      	mov	r1, sl
 80069c8:	00ca      	lsls	r2, r1, #3
 80069ca:	4610      	mov	r0, r2
 80069cc:	4619      	mov	r1, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	4642      	mov	r2, r8
 80069d2:	189b      	adds	r3, r3, r2
 80069d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d6:	464b      	mov	r3, r9
 80069d8:	460a      	mov	r2, r1
 80069da:	eb42 0303 	adc.w	r3, r2, r3
 80069de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	663b      	str	r3, [r7, #96]	; 0x60
 80069ea:	667a      	str	r2, [r7, #100]	; 0x64
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069f8:	4649      	mov	r1, r9
 80069fa:	008b      	lsls	r3, r1, #2
 80069fc:	4641      	mov	r1, r8
 80069fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a02:	4641      	mov	r1, r8
 8006a04:	008a      	lsls	r2, r1, #2
 8006a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a0a:	f7fa f94d 	bl	8000ca8 <__aeabi_uldivmod>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <UART_SetConfig+0x4e4>)
 8006a14:	fba3 1302 	umull	r1, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	2164      	movs	r1, #100	; 0x64
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	3332      	adds	r3, #50	; 0x32
 8006a26:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <UART_SetConfig+0x4e4>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f003 020f 	and.w	r2, r3, #15
 8006a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4422      	add	r2, r4
 8006a3a:	609a      	str	r2, [r3, #8]
}
 8006a3c:	bf00      	nop
 8006a3e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a42:	46bd      	mov	sp, r7
 8006a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a48:	51eb851f 	.word	0x51eb851f

08006a4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a5e:	2b84      	cmp	r3, #132	; 0x84
 8006a60:	d005      	beq.n	8006a6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	3303      	adds	r3, #3
 8006a6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a80:	f000 faf6 	bl	8007070 <vTaskStartScheduler>
  
  return osOK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8c:	b089      	sub	sp, #36	; 0x24
 8006a8e:	af04      	add	r7, sp, #16
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d020      	beq.n	8006ade <osThreadCreate+0x54>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01c      	beq.n	8006ade <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685c      	ldr	r4, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691e      	ldr	r6, [r3, #16]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff ffc8 	bl	8006a4c <makeFreeRtosPriority>
 8006abc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ac6:	9202      	str	r2, [sp, #8]
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	9100      	str	r1, [sp, #0]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	4632      	mov	r2, r6
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 f8ed 	bl	8006cb2 <xTaskCreateStatic>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e01c      	b.n	8006b18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685c      	ldr	r4, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff ffaa 	bl	8006a4c <makeFreeRtosPriority>
 8006af8:	4602      	mov	r2, r0
 8006afa:	f107 030c 	add.w	r3, r7, #12
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	9200      	str	r2, [sp, #0]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	4632      	mov	r2, r6
 8006b06:	4629      	mov	r1, r5
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 f92f 	bl	8006d6c <xTaskCreate>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d001      	beq.n	8006b18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e000      	b.n	8006b1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b18:	68fb      	ldr	r3, [r7, #12]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <osDelay+0x16>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	e000      	b.n	8006b3a <osDelay+0x18>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fa64 	bl	8007008 <vTaskDelay>
  
  return osOK;
 8006b40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f103 0208 	add.w	r2, r3, #8
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f103 0208 	add.w	r2, r3, #8
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f103 0208 	add.w	r2, r3, #8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	601a      	str	r2, [r3, #0]
}
 8006be0:	bf00      	nop
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c02:	d103      	bne.n	8006c0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	e00c      	b.n	8006c26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e002      	b.n	8006c1a <vListInsert+0x2e>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d2f6      	bcs.n	8006c14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6892      	ldr	r2, [r2, #8]
 8006c74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6852      	ldr	r2, [r2, #4]
 8006c7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d103      	bne.n	8006c92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	1e5a      	subs	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b08e      	sub	sp, #56	; 0x38
 8006cb6:	af04      	add	r7, sp, #16
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cd8:	bf00      	nop
 8006cda:	e7fe      	b.n	8006cda <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <xTaskCreateStatic+0x46>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	61fb      	str	r3, [r7, #28]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cf8:	23a0      	movs	r3, #160	; 0xa0
 8006cfa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2ba0      	cmp	r3, #160	; 0xa0
 8006d00:	d00a      	beq.n	8006d18 <xTaskCreateStatic+0x66>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	61bb      	str	r3, [r7, #24]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01e      	beq.n	8006d5e <xTaskCreateStatic+0xac>
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01b      	beq.n	8006d5e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9303      	str	r3, [sp, #12]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	f107 0314 	add.w	r3, r7, #20
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f851 	bl	8006df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d58:	f000 f8ec 	bl	8006f34 <prvAddNewTaskToReadyList>
 8006d5c:	e001      	b.n	8006d62 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d62:	697b      	ldr	r3, [r7, #20]
	}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3728      	adds	r7, #40	; 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08c      	sub	sp, #48	; 0x30
 8006d70:	af04      	add	r7, sp, #16
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 ff11 	bl	8007ba8 <pvPortMalloc>
 8006d86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00e      	beq.n	8006dac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d8e:	20a0      	movs	r0, #160	; 0xa0
 8006d90:	f000 ff0a 	bl	8007ba8 <pvPortMalloc>
 8006d94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	631a      	str	r2, [r3, #48]	; 0x30
 8006da2:	e005      	b.n	8006db0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006da4:	6978      	ldr	r0, [r7, #20]
 8006da6:	f000 ffcb 	bl	8007d40 <vPortFree>
 8006daa:	e001      	b.n	8006db0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dac:	2300      	movs	r3, #0
 8006dae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d017      	beq.n	8006de6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006dbe:	88fa      	ldrh	r2, [r7, #6]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	9303      	str	r3, [sp, #12]
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	9302      	str	r3, [sp, #8]
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f80f 	bl	8006df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dda:	69f8      	ldr	r0, [r7, #28]
 8006ddc:	f000 f8aa 	bl	8006f34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006de0:	2301      	movs	r3, #1
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	e002      	b.n	8006dec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006de6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006dec:	69bb      	ldr	r3, [r7, #24]
	}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e10:	3b01      	subs	r3, #1
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	617b      	str	r3, [r7, #20]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01f      	beq.n	8006e86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e46:	2300      	movs	r3, #0
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	e012      	b.n	8006e72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	7819      	ldrb	r1, [r3, #0]
 8006e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	3334      	adds	r3, #52	; 0x34
 8006e5c:	460a      	mov	r2, r1
 8006e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	2b0f      	cmp	r3, #15
 8006e76:	d9e9      	bls.n	8006e4c <prvInitialiseNewTask+0x54>
 8006e78:	e000      	b.n	8006e7c <prvInitialiseNewTask+0x84>
			{
				break;
 8006e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e84:	e003      	b.n	8006e8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	2b06      	cmp	r3, #6
 8006e92:	d901      	bls.n	8006e98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e94:	2306      	movs	r3, #6
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	3304      	adds	r3, #4
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff fe6b 	bl	8006b8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	3318      	adds	r3, #24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fe66 	bl	8006b8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	f1c3 0207 	rsb	r2, r3, #7
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	334c      	adds	r3, #76	; 0x4c
 8006ee8:	224c      	movs	r2, #76	; 0x4c
 8006eea:	2100      	movs	r1, #0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 fd9e 	bl	8008a2e <memset>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <prvInitialiseNewTask+0x130>)
 8006ef6:	651a      	str	r2, [r3, #80]	; 0x50
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	4a0c      	ldr	r2, [pc, #48]	; (8006f2c <prvInitialiseNewTask+0x134>)
 8006efc:	655a      	str	r2, [r3, #84]	; 0x54
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	4a0b      	ldr	r2, [pc, #44]	; (8006f30 <prvInitialiseNewTask+0x138>)
 8006f02:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	69b8      	ldr	r0, [r7, #24]
 8006f0a:	f000 fc3d 	bl	8007788 <pxPortInitialiseStack>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f20:	bf00      	nop
 8006f22:	3720      	adds	r7, #32
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	2000447c 	.word	0x2000447c
 8006f2c:	200044e4 	.word	0x200044e4
 8006f30:	2000454c 	.word	0x2000454c

08006f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f3c:	f000 fd52 	bl	80079e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f40:	4b2a      	ldr	r3, [pc, #168]	; (8006fec <prvAddNewTaskToReadyList+0xb8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3301      	adds	r3, #1
 8006f46:	4a29      	ldr	r2, [pc, #164]	; (8006fec <prvAddNewTaskToReadyList+0xb8>)
 8006f48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f4a:	4b29      	ldr	r3, [pc, #164]	; (8006ff0 <prvAddNewTaskToReadyList+0xbc>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f52:	4a27      	ldr	r2, [pc, #156]	; (8006ff0 <prvAddNewTaskToReadyList+0xbc>)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f58:	4b24      	ldr	r3, [pc, #144]	; (8006fec <prvAddNewTaskToReadyList+0xb8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d110      	bne.n	8006f82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f60:	f000 facc 	bl	80074fc <prvInitialiseTaskLists>
 8006f64:	e00d      	b.n	8006f82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f66:	4b23      	ldr	r3, [pc, #140]	; (8006ff4 <prvAddNewTaskToReadyList+0xc0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d109      	bne.n	8006f82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f6e:	4b20      	ldr	r3, [pc, #128]	; (8006ff0 <prvAddNewTaskToReadyList+0xbc>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d802      	bhi.n	8006f82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f7c:	4a1c      	ldr	r2, [pc, #112]	; (8006ff0 <prvAddNewTaskToReadyList+0xbc>)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f82:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <prvAddNewTaskToReadyList+0xc4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3301      	adds	r3, #1
 8006f88:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <prvAddNewTaskToReadyList+0xc4>)
 8006f8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	2201      	movs	r2, #1
 8006f92:	409a      	lsls	r2, r3
 8006f94:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <prvAddNewTaskToReadyList+0xc8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	4a18      	ldr	r2, [pc, #96]	; (8006ffc <prvAddNewTaskToReadyList+0xc8>)
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4a15      	ldr	r2, [pc, #84]	; (8007000 <prvAddNewTaskToReadyList+0xcc>)
 8006fac:	441a      	add	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f7ff fdf5 	bl	8006ba4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fba:	f000 fd43 	bl	8007a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <prvAddNewTaskToReadyList+0xc0>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00e      	beq.n	8006fe4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <prvAddNewTaskToReadyList+0xbc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d207      	bcs.n	8006fe4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <prvAddNewTaskToReadyList+0xd0>)
 8006fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20000828 	.word	0x20000828
 8006ff0:	20000728 	.word	0x20000728
 8006ff4:	20000834 	.word	0x20000834
 8006ff8:	20000844 	.word	0x20000844
 8006ffc:	20000830 	.word	0x20000830
 8007000:	2000072c 	.word	0x2000072c
 8007004:	e000ed04 	.word	0xe000ed04

08007008 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d017      	beq.n	800704a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <vTaskDelay+0x60>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <vTaskDelay+0x30>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	60bb      	str	r3, [r7, #8]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007038:	f000 f884 	bl	8007144 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fb3c 	bl	80076bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007044:	f000 f88c 	bl	8007160 <xTaskResumeAll>
 8007048:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d107      	bne.n	8007060 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <vTaskDelay+0x64>)
 8007052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000850 	.word	0x20000850
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800707a:	2300      	movs	r3, #0
 800707c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800707e:	463a      	mov	r2, r7
 8007080:	1d39      	adds	r1, r7, #4
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	4618      	mov	r0, r3
 8007088:	f7fa f83e 	bl	8001108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	9202      	str	r2, [sp, #8]
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	2300      	movs	r3, #0
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2300      	movs	r3, #0
 800709c:	460a      	mov	r2, r1
 800709e:	4921      	ldr	r1, [pc, #132]	; (8007124 <vTaskStartScheduler+0xb4>)
 80070a0:	4821      	ldr	r0, [pc, #132]	; (8007128 <vTaskStartScheduler+0xb8>)
 80070a2:	f7ff fe06 	bl	8006cb2 <xTaskCreateStatic>
 80070a6:	4603      	mov	r3, r0
 80070a8:	4a20      	ldr	r2, [pc, #128]	; (800712c <vTaskStartScheduler+0xbc>)
 80070aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070ac:	4b1f      	ldr	r3, [pc, #124]	; (800712c <vTaskStartScheduler+0xbc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070b4:	2301      	movs	r3, #1
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e001      	b.n	80070be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d11b      	bne.n	80070fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	613b      	str	r3, [r7, #16]
}
 80070d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070d8:	4b15      	ldr	r3, [pc, #84]	; (8007130 <vTaskStartScheduler+0xc0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	334c      	adds	r3, #76	; 0x4c
 80070de:	4a15      	ldr	r2, [pc, #84]	; (8007134 <vTaskStartScheduler+0xc4>)
 80070e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070e2:	4b15      	ldr	r3, [pc, #84]	; (8007138 <vTaskStartScheduler+0xc8>)
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295
 80070e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070ea:	4b14      	ldr	r3, [pc, #80]	; (800713c <vTaskStartScheduler+0xcc>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070f0:	4b13      	ldr	r3, [pc, #76]	; (8007140 <vTaskStartScheduler+0xd0>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070f6:	f000 fbd3 	bl	80078a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070fa:	e00e      	b.n	800711a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d10a      	bne.n	800711a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	60fb      	str	r3, [r7, #12]
}
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <vTaskStartScheduler+0xa8>
}
 800711a:	bf00      	nop
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	0800aa68 	.word	0x0800aa68
 8007128:	080074cd 	.word	0x080074cd
 800712c:	2000084c 	.word	0x2000084c
 8007130:	20000728 	.word	0x20000728
 8007134:	20000074 	.word	0x20000074
 8007138:	20000848 	.word	0x20000848
 800713c:	20000834 	.word	0x20000834
 8007140:	2000082c 	.word	0x2000082c

08007144 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007148:	4b04      	ldr	r3, [pc, #16]	; (800715c <vTaskSuspendAll+0x18>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3301      	adds	r3, #1
 800714e:	4a03      	ldr	r2, [pc, #12]	; (800715c <vTaskSuspendAll+0x18>)
 8007150:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007152:	bf00      	nop
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	20000850 	.word	0x20000850

08007160 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007166:	2300      	movs	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800716a:	2300      	movs	r3, #0
 800716c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800716e:	4b41      	ldr	r3, [pc, #260]	; (8007274 <xTaskResumeAll+0x114>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <xTaskResumeAll+0x2c>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	603b      	str	r3, [r7, #0]
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800718c:	f000 fc2a 	bl	80079e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007190:	4b38      	ldr	r3, [pc, #224]	; (8007274 <xTaskResumeAll+0x114>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3b01      	subs	r3, #1
 8007196:	4a37      	ldr	r2, [pc, #220]	; (8007274 <xTaskResumeAll+0x114>)
 8007198:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800719a:	4b36      	ldr	r3, [pc, #216]	; (8007274 <xTaskResumeAll+0x114>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d161      	bne.n	8007266 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071a2:	4b35      	ldr	r3, [pc, #212]	; (8007278 <xTaskResumeAll+0x118>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d05d      	beq.n	8007266 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071aa:	e02e      	b.n	800720a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ac:	4b33      	ldr	r3, [pc, #204]	; (800727c <xTaskResumeAll+0x11c>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3318      	adds	r3, #24
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fd50 	bl	8006c5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fd4b 	bl	8006c5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	2201      	movs	r2, #1
 80071ce:	409a      	lsls	r2, r3
 80071d0:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <xTaskResumeAll+0x120>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <xTaskResumeAll+0x120>)
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a27      	ldr	r2, [pc, #156]	; (8007284 <xTaskResumeAll+0x124>)
 80071e8:	441a      	add	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7ff fcd7 	bl	8006ba4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fa:	4b23      	ldr	r3, [pc, #140]	; (8007288 <xTaskResumeAll+0x128>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007204:	4b21      	ldr	r3, [pc, #132]	; (800728c <xTaskResumeAll+0x12c>)
 8007206:	2201      	movs	r2, #1
 8007208:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800720a:	4b1c      	ldr	r3, [pc, #112]	; (800727c <xTaskResumeAll+0x11c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1cc      	bne.n	80071ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007218:	f000 fa12 	bl	8007640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800721c:	4b1c      	ldr	r3, [pc, #112]	; (8007290 <xTaskResumeAll+0x130>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d010      	beq.n	800724a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007228:	f000 f836 	bl	8007298 <xTaskIncrementTick>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <xTaskResumeAll+0x12c>)
 8007234:	2201      	movs	r2, #1
 8007236:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3b01      	subs	r3, #1
 800723c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1f1      	bne.n	8007228 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007244:	4b12      	ldr	r3, [pc, #72]	; (8007290 <xTaskResumeAll+0x130>)
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800724a:	4b10      	ldr	r3, [pc, #64]	; (800728c <xTaskResumeAll+0x12c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007252:	2301      	movs	r3, #1
 8007254:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007256:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <xTaskResumeAll+0x134>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007266:	f000 fbed 	bl	8007a44 <vPortExitCritical>

	return xAlreadyYielded;
 800726a:	68bb      	ldr	r3, [r7, #8]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000850 	.word	0x20000850
 8007278:	20000828 	.word	0x20000828
 800727c:	200007e8 	.word	0x200007e8
 8007280:	20000830 	.word	0x20000830
 8007284:	2000072c 	.word	0x2000072c
 8007288:	20000728 	.word	0x20000728
 800728c:	2000083c 	.word	0x2000083c
 8007290:	20000838 	.word	0x20000838
 8007294:	e000ed04 	.word	0xe000ed04

08007298 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a2:	4b4e      	ldr	r3, [pc, #312]	; (80073dc <xTaskIncrementTick+0x144>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f040 808e 	bne.w	80073c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072ac:	4b4c      	ldr	r3, [pc, #304]	; (80073e0 <xTaskIncrementTick+0x148>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3301      	adds	r3, #1
 80072b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072b4:	4a4a      	ldr	r2, [pc, #296]	; (80073e0 <xTaskIncrementTick+0x148>)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d120      	bne.n	8007302 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072c0:	4b48      	ldr	r3, [pc, #288]	; (80073e4 <xTaskIncrementTick+0x14c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	603b      	str	r3, [r7, #0]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <xTaskIncrementTick+0x46>
 80072e0:	4b40      	ldr	r3, [pc, #256]	; (80073e4 <xTaskIncrementTick+0x14c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	4b40      	ldr	r3, [pc, #256]	; (80073e8 <xTaskIncrementTick+0x150>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a3e      	ldr	r2, [pc, #248]	; (80073e4 <xTaskIncrementTick+0x14c>)
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	4a3e      	ldr	r2, [pc, #248]	; (80073e8 <xTaskIncrementTick+0x150>)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	4b3d      	ldr	r3, [pc, #244]	; (80073ec <xTaskIncrementTick+0x154>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a3c      	ldr	r2, [pc, #240]	; (80073ec <xTaskIncrementTick+0x154>)
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	f000 f99f 	bl	8007640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007302:	4b3b      	ldr	r3, [pc, #236]	; (80073f0 <xTaskIncrementTick+0x158>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	429a      	cmp	r2, r3
 800730a:	d348      	bcc.n	800739e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800730c:	4b35      	ldr	r3, [pc, #212]	; (80073e4 <xTaskIncrementTick+0x14c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007316:	4b36      	ldr	r3, [pc, #216]	; (80073f0 <xTaskIncrementTick+0x158>)
 8007318:	f04f 32ff 	mov.w	r2, #4294967295
 800731c:	601a      	str	r2, [r3, #0]
					break;
 800731e:	e03e      	b.n	800739e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007320:	4b30      	ldr	r3, [pc, #192]	; (80073e4 <xTaskIncrementTick+0x14c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	429a      	cmp	r2, r3
 8007336:	d203      	bcs.n	8007340 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007338:	4a2d      	ldr	r2, [pc, #180]	; (80073f0 <xTaskIncrementTick+0x158>)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800733e:	e02e      	b.n	800739e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3304      	adds	r3, #4
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fc8a 	bl	8006c5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	3318      	adds	r3, #24
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff fc81 	bl	8006c5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	2201      	movs	r2, #1
 8007362:	409a      	lsls	r2, r3
 8007364:	4b23      	ldr	r3, [pc, #140]	; (80073f4 <xTaskIncrementTick+0x15c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4313      	orrs	r3, r2
 800736a:	4a22      	ldr	r2, [pc, #136]	; (80073f4 <xTaskIncrementTick+0x15c>)
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4a1f      	ldr	r2, [pc, #124]	; (80073f8 <xTaskIncrementTick+0x160>)
 800737c:	441a      	add	r2, r3
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	3304      	adds	r3, #4
 8007382:	4619      	mov	r1, r3
 8007384:	4610      	mov	r0, r2
 8007386:	f7ff fc0d 	bl	8006ba4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738e:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <xTaskIncrementTick+0x164>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	429a      	cmp	r2, r3
 8007396:	d3b9      	bcc.n	800730c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007398:	2301      	movs	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800739c:	e7b6      	b.n	800730c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800739e:	4b17      	ldr	r3, [pc, #92]	; (80073fc <xTaskIncrementTick+0x164>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a4:	4914      	ldr	r1, [pc, #80]	; (80073f8 <xTaskIncrementTick+0x160>)
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d901      	bls.n	80073ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80073b6:	2301      	movs	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80073ba:	4b11      	ldr	r3, [pc, #68]	; (8007400 <xTaskIncrementTick+0x168>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d007      	beq.n	80073d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80073c2:	2301      	movs	r3, #1
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	e004      	b.n	80073d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <xTaskIncrementTick+0x16c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	4a0d      	ldr	r2, [pc, #52]	; (8007404 <xTaskIncrementTick+0x16c>)
 80073d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073d2:	697b      	ldr	r3, [r7, #20]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	20000850 	.word	0x20000850
 80073e0:	2000082c 	.word	0x2000082c
 80073e4:	200007e0 	.word	0x200007e0
 80073e8:	200007e4 	.word	0x200007e4
 80073ec:	20000840 	.word	0x20000840
 80073f0:	20000848 	.word	0x20000848
 80073f4:	20000830 	.word	0x20000830
 80073f8:	2000072c 	.word	0x2000072c
 80073fc:	20000728 	.word	0x20000728
 8007400:	2000083c 	.word	0x2000083c
 8007404:	20000838 	.word	0x20000838

08007408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800740e:	4b29      	ldr	r3, [pc, #164]	; (80074b4 <vTaskSwitchContext+0xac>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007416:	4b28      	ldr	r3, [pc, #160]	; (80074b8 <vTaskSwitchContext+0xb0>)
 8007418:	2201      	movs	r2, #1
 800741a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800741c:	e044      	b.n	80074a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800741e:	4b26      	ldr	r3, [pc, #152]	; (80074b8 <vTaskSwitchContext+0xb0>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007424:	4b25      	ldr	r3, [pc, #148]	; (80074bc <vTaskSwitchContext+0xb4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	fab3 f383 	clz	r3, r3
 8007430:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	f1c3 031f 	rsb	r3, r3, #31
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	4921      	ldr	r1, [pc, #132]	; (80074c0 <vTaskSwitchContext+0xb8>)
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <vTaskSwitchContext+0x5c>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	607b      	str	r3, [r7, #4]
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <vTaskSwitchContext+0x5a>
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4a14      	ldr	r2, [pc, #80]	; (80074c0 <vTaskSwitchContext+0xb8>)
 8007470:	4413      	add	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	605a      	str	r2, [r3, #4]
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	3308      	adds	r3, #8
 8007486:	429a      	cmp	r2, r3
 8007488:	d104      	bne.n	8007494 <vTaskSwitchContext+0x8c>
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	605a      	str	r2, [r3, #4]
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	4a0a      	ldr	r2, [pc, #40]	; (80074c4 <vTaskSwitchContext+0xbc>)
 800749c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800749e:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <vTaskSwitchContext+0xbc>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	334c      	adds	r3, #76	; 0x4c
 80074a4:	4a08      	ldr	r2, [pc, #32]	; (80074c8 <vTaskSwitchContext+0xc0>)
 80074a6:	6013      	str	r3, [r2, #0]
}
 80074a8:	bf00      	nop
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20000850 	.word	0x20000850
 80074b8:	2000083c 	.word	0x2000083c
 80074bc:	20000830 	.word	0x20000830
 80074c0:	2000072c 	.word	0x2000072c
 80074c4:	20000728 	.word	0x20000728
 80074c8:	20000074 	.word	0x20000074

080074cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074d4:	f000 f852 	bl	800757c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <prvIdleTask+0x28>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d9f9      	bls.n	80074d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <prvIdleTask+0x2c>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074f0:	e7f0      	b.n	80074d4 <prvIdleTask+0x8>
 80074f2:	bf00      	nop
 80074f4:	2000072c 	.word	0x2000072c
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007502:	2300      	movs	r3, #0
 8007504:	607b      	str	r3, [r7, #4]
 8007506:	e00c      	b.n	8007522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4a12      	ldr	r2, [pc, #72]	; (800755c <prvInitialiseTaskLists+0x60>)
 8007514:	4413      	add	r3, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fb17 	bl	8006b4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3301      	adds	r3, #1
 8007520:	607b      	str	r3, [r7, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b06      	cmp	r3, #6
 8007526:	d9ef      	bls.n	8007508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007528:	480d      	ldr	r0, [pc, #52]	; (8007560 <prvInitialiseTaskLists+0x64>)
 800752a:	f7ff fb0e 	bl	8006b4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800752e:	480d      	ldr	r0, [pc, #52]	; (8007564 <prvInitialiseTaskLists+0x68>)
 8007530:	f7ff fb0b 	bl	8006b4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007534:	480c      	ldr	r0, [pc, #48]	; (8007568 <prvInitialiseTaskLists+0x6c>)
 8007536:	f7ff fb08 	bl	8006b4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800753a:	480c      	ldr	r0, [pc, #48]	; (800756c <prvInitialiseTaskLists+0x70>)
 800753c:	f7ff fb05 	bl	8006b4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007540:	480b      	ldr	r0, [pc, #44]	; (8007570 <prvInitialiseTaskLists+0x74>)
 8007542:	f7ff fb02 	bl	8006b4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007546:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <prvInitialiseTaskLists+0x78>)
 8007548:	4a05      	ldr	r2, [pc, #20]	; (8007560 <prvInitialiseTaskLists+0x64>)
 800754a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800754c:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <prvInitialiseTaskLists+0x7c>)
 800754e:	4a05      	ldr	r2, [pc, #20]	; (8007564 <prvInitialiseTaskLists+0x68>)
 8007550:	601a      	str	r2, [r3, #0]
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	2000072c 	.word	0x2000072c
 8007560:	200007b8 	.word	0x200007b8
 8007564:	200007cc 	.word	0x200007cc
 8007568:	200007e8 	.word	0x200007e8
 800756c:	200007fc 	.word	0x200007fc
 8007570:	20000814 	.word	0x20000814
 8007574:	200007e0 	.word	0x200007e0
 8007578:	200007e4 	.word	0x200007e4

0800757c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007582:	e019      	b.n	80075b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007584:	f000 fa2e 	bl	80079e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007588:	4b10      	ldr	r3, [pc, #64]	; (80075cc <prvCheckTasksWaitingTermination+0x50>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3304      	adds	r3, #4
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fb62 	bl	8006c5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800759a:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <prvCheckTasksWaitingTermination+0x54>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3b01      	subs	r3, #1
 80075a0:	4a0b      	ldr	r2, [pc, #44]	; (80075d0 <prvCheckTasksWaitingTermination+0x54>)
 80075a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075a4:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <prvCheckTasksWaitingTermination+0x58>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	4a0a      	ldr	r2, [pc, #40]	; (80075d4 <prvCheckTasksWaitingTermination+0x58>)
 80075ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075ae:	f000 fa49 	bl	8007a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f810 	bl	80075d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075b8:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <prvCheckTasksWaitingTermination+0x58>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e1      	bne.n	8007584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	200007fc 	.word	0x200007fc
 80075d0:	20000828 	.word	0x20000828
 80075d4:	20000810 	.word	0x20000810

080075d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	334c      	adds	r3, #76	; 0x4c
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 fa3f 	bl	8008a68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d108      	bne.n	8007606 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fba1 	bl	8007d40 <vPortFree>
				vPortFree( pxTCB );
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fb9e 	bl	8007d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007604:	e018      	b.n	8007638 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800760c:	2b01      	cmp	r3, #1
 800760e:	d103      	bne.n	8007618 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fb95 	bl	8007d40 <vPortFree>
	}
 8007616:	e00f      	b.n	8007638 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800761e:	2b02      	cmp	r3, #2
 8007620:	d00a      	beq.n	8007638 <prvDeleteTCB+0x60>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	60fb      	str	r3, [r7, #12]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <prvDeleteTCB+0x5e>
	}
 8007638:	bf00      	nop
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007646:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <prvResetNextTaskUnblockTime+0x38>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007650:	4b0a      	ldr	r3, [pc, #40]	; (800767c <prvResetNextTaskUnblockTime+0x3c>)
 8007652:	f04f 32ff 	mov.w	r2, #4294967295
 8007656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007658:	e008      	b.n	800766c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <prvResetNextTaskUnblockTime+0x38>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4a04      	ldr	r2, [pc, #16]	; (800767c <prvResetNextTaskUnblockTime+0x3c>)
 800766a:	6013      	str	r3, [r2, #0]
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	200007e0 	.word	0x200007e0
 800767c:	20000848 	.word	0x20000848

08007680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <xTaskGetSchedulerState+0x34>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d102      	bne.n	8007694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800768e:	2301      	movs	r3, #1
 8007690:	607b      	str	r3, [r7, #4]
 8007692:	e008      	b.n	80076a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007694:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <xTaskGetSchedulerState+0x38>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d102      	bne.n	80076a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800769c:	2302      	movs	r3, #2
 800769e:	607b      	str	r3, [r7, #4]
 80076a0:	e001      	b.n	80076a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076a2:	2300      	movs	r3, #0
 80076a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076a6:	687b      	ldr	r3, [r7, #4]
	}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	20000834 	.word	0x20000834
 80076b8:	20000850 	.word	0x20000850

080076bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076c6:	4b29      	ldr	r3, [pc, #164]	; (800776c <prvAddCurrentTaskToDelayedList+0xb0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076cc:	4b28      	ldr	r3, [pc, #160]	; (8007770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff fac3 	bl	8006c5e <uxListRemove>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	2201      	movs	r2, #1
 80076e6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ea:	43da      	mvns	r2, r3
 80076ec:	4b21      	ldr	r3, [pc, #132]	; (8007774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4013      	ands	r3, r2
 80076f2:	4a20      	ldr	r2, [pc, #128]	; (8007774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d10a      	bne.n	8007714 <prvAddCurrentTaskToDelayedList+0x58>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007704:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3304      	adds	r3, #4
 800770a:	4619      	mov	r1, r3
 800770c:	481a      	ldr	r0, [pc, #104]	; (8007778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800770e:	f7ff fa49 	bl	8006ba4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007712:	e026      	b.n	8007762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4413      	add	r3, r2
 800771a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800771c:	4b14      	ldr	r3, [pc, #80]	; (8007770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	429a      	cmp	r2, r3
 800772a:	d209      	bcs.n	8007740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800772c:	4b13      	ldr	r3, [pc, #76]	; (800777c <prvAddCurrentTaskToDelayedList+0xc0>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3304      	adds	r3, #4
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f7ff fa57 	bl	8006bec <vListInsert>
}
 800773e:	e010      	b.n	8007762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007740:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	4b0a      	ldr	r3, [pc, #40]	; (8007770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3304      	adds	r3, #4
 800774a:	4619      	mov	r1, r3
 800774c:	4610      	mov	r0, r2
 800774e:	f7ff fa4d 	bl	8006bec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	429a      	cmp	r2, r3
 800775a:	d202      	bcs.n	8007762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800775c:	4a09      	ldr	r2, [pc, #36]	; (8007784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6013      	str	r3, [r2, #0]
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	2000082c 	.word	0x2000082c
 8007770:	20000728 	.word	0x20000728
 8007774:	20000830 	.word	0x20000830
 8007778:	20000814 	.word	0x20000814
 800777c:	200007e4 	.word	0x200007e4
 8007780:	200007e0 	.word	0x200007e0
 8007784:	20000848 	.word	0x20000848

08007788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3b04      	subs	r3, #4
 8007798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3b04      	subs	r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f023 0201 	bic.w	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077b8:	4a0c      	ldr	r2, [pc, #48]	; (80077ec <pxPortInitialiseStack+0x64>)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3b14      	subs	r3, #20
 80077c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3b04      	subs	r3, #4
 80077ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f06f 0202 	mvn.w	r2, #2
 80077d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3b20      	subs	r3, #32
 80077dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077de:	68fb      	ldr	r3, [r7, #12]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	080077f1 	.word	0x080077f1

080077f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077fa:	4b12      	ldr	r3, [pc, #72]	; (8007844 <prvTaskExitError+0x54>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d00a      	beq.n	800781a <prvTaskExitError+0x2a>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	60fb      	str	r3, [r7, #12]
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <prvTaskExitError+0x28>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	60bb      	str	r3, [r7, #8]
}
 800782c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800782e:	bf00      	nop
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0fc      	beq.n	8007830 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	20000018 	.word	0x20000018
	...

08007850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <pxCurrentTCBConst2>)
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	6808      	ldr	r0, [r1, #0]
 8007856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	f380 8809 	msr	PSP, r0
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8811 	msr	BASEPRI, r0
 800786a:	4770      	bx	lr
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst2>:
 8007870:	20000728 	.word	0x20000728
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007878:	4808      	ldr	r0, [pc, #32]	; (800789c <prvPortStartFirstTask+0x24>)
 800787a:	6800      	ldr	r0, [r0, #0]
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f380 8808 	msr	MSP, r0
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8814 	msr	CONTROL, r0
 800788a:	b662      	cpsie	i
 800788c:	b661      	cpsie	f
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	df00      	svc	0
 8007898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800789a:	bf00      	nop
 800789c:	e000ed08 	.word	0xe000ed08

080078a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078a6:	4b46      	ldr	r3, [pc, #280]	; (80079c0 <xPortStartScheduler+0x120>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a46      	ldr	r2, [pc, #280]	; (80079c4 <xPortStartScheduler+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d10a      	bne.n	80078c6 <xPortStartScheduler+0x26>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	613b      	str	r3, [r7, #16]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078c6:	4b3e      	ldr	r3, [pc, #248]	; (80079c0 <xPortStartScheduler+0x120>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a3f      	ldr	r2, [pc, #252]	; (80079c8 <xPortStartScheduler+0x128>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10a      	bne.n	80078e6 <xPortStartScheduler+0x46>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	60fb      	str	r3, [r7, #12]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078e6:	4b39      	ldr	r3, [pc, #228]	; (80079cc <xPortStartScheduler+0x12c>)
 80078e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	22ff      	movs	r2, #255	; 0xff
 80078f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007908:	b2da      	uxtb	r2, r3
 800790a:	4b31      	ldr	r3, [pc, #196]	; (80079d0 <xPortStartScheduler+0x130>)
 800790c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800790e:	4b31      	ldr	r3, [pc, #196]	; (80079d4 <xPortStartScheduler+0x134>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007914:	e009      	b.n	800792a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007916:	4b2f      	ldr	r3, [pc, #188]	; (80079d4 <xPortStartScheduler+0x134>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3b01      	subs	r3, #1
 800791c:	4a2d      	ldr	r2, [pc, #180]	; (80079d4 <xPortStartScheduler+0x134>)
 800791e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	b2db      	uxtb	r3, r3
 8007928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007932:	2b80      	cmp	r3, #128	; 0x80
 8007934:	d0ef      	beq.n	8007916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007936:	4b27      	ldr	r3, [pc, #156]	; (80079d4 <xPortStartScheduler+0x134>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f1c3 0307 	rsb	r3, r3, #7
 800793e:	2b04      	cmp	r3, #4
 8007940:	d00a      	beq.n	8007958 <xPortStartScheduler+0xb8>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60bb      	str	r3, [r7, #8]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007958:	4b1e      	ldr	r3, [pc, #120]	; (80079d4 <xPortStartScheduler+0x134>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	4a1d      	ldr	r2, [pc, #116]	; (80079d4 <xPortStartScheduler+0x134>)
 8007960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <xPortStartScheduler+0x134>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800796a:	4a1a      	ldr	r2, [pc, #104]	; (80079d4 <xPortStartScheduler+0x134>)
 800796c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007976:	4b18      	ldr	r3, [pc, #96]	; (80079d8 <xPortStartScheduler+0x138>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <xPortStartScheduler+0x138>)
 800797c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <xPortStartScheduler+0x138>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <xPortStartScheduler+0x138>)
 8007988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800798c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800798e:	f000 f8dd 	bl	8007b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <xPortStartScheduler+0x13c>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007998:	f000 f8fc 	bl	8007b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800799c:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <xPortStartScheduler+0x140>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a0f      	ldr	r2, [pc, #60]	; (80079e0 <xPortStartScheduler+0x140>)
 80079a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079a8:	f7ff ff66 	bl	8007878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079ac:	f7ff fd2c 	bl	8007408 <vTaskSwitchContext>
	prvTaskExitError();
 80079b0:	f7ff ff1e 	bl	80077f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	e000ed00 	.word	0xe000ed00
 80079c4:	410fc271 	.word	0x410fc271
 80079c8:	410fc270 	.word	0x410fc270
 80079cc:	e000e400 	.word	0xe000e400
 80079d0:	20000854 	.word	0x20000854
 80079d4:	20000858 	.word	0x20000858
 80079d8:	e000ed20 	.word	0xe000ed20
 80079dc:	20000018 	.word	0x20000018
 80079e0:	e000ef34 	.word	0xe000ef34

080079e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	607b      	str	r3, [r7, #4]
}
 80079fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079fe:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <vPortEnterCritical+0x58>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3301      	adds	r3, #1
 8007a04:	4a0d      	ldr	r2, [pc, #52]	; (8007a3c <vPortEnterCritical+0x58>)
 8007a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <vPortEnterCritical+0x58>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d10f      	bne.n	8007a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <vPortEnterCritical+0x5c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	603b      	str	r3, [r7, #0]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <vPortEnterCritical+0x4a>
	}
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	20000018 	.word	0x20000018
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a4a:	4b12      	ldr	r3, [pc, #72]	; (8007a94 <vPortExitCritical+0x50>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <vPortExitCritical+0x24>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	607b      	str	r3, [r7, #4]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a68:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <vPortExitCritical+0x50>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	4a09      	ldr	r2, [pc, #36]	; (8007a94 <vPortExitCritical+0x50>)
 8007a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a72:	4b08      	ldr	r3, [pc, #32]	; (8007a94 <vPortExitCritical+0x50>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <vPortExitCritical+0x42>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000018 	.word	0x20000018
	...

08007aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007aa0:	f3ef 8009 	mrs	r0, PSP
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <pxCurrentTCBConst>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	f01e 0f10 	tst.w	lr, #16
 8007ab0:	bf08      	it	eq
 8007ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	6010      	str	r0, [r2, #0]
 8007abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ac4:	f380 8811 	msr	BASEPRI, r0
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f7ff fc9a 	bl	8007408 <vTaskSwitchContext>
 8007ad4:	f04f 0000 	mov.w	r0, #0
 8007ad8:	f380 8811 	msr	BASEPRI, r0
 8007adc:	bc09      	pop	{r0, r3}
 8007ade:	6819      	ldr	r1, [r3, #0]
 8007ae0:	6808      	ldr	r0, [r1, #0]
 8007ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae6:	f01e 0f10 	tst.w	lr, #16
 8007aea:	bf08      	it	eq
 8007aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007af0:	f380 8809 	msr	PSP, r0
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	f3af 8000 	nop.w

08007b00 <pxCurrentTCBConst>:
 8007b00:	20000728 	.word	0x20000728
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop

08007b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	607b      	str	r3, [r7, #4]
}
 8007b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b22:	f7ff fbb9 	bl	8007298 <xTaskIncrementTick>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <xPortSysTickHandler+0x40>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f383 8811 	msr	BASEPRI, r3
}
 8007b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <vPortSetupTimerInterrupt+0x34>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <vPortSetupTimerInterrupt+0x38>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <vPortSetupTimerInterrupt+0x3c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a0a      	ldr	r2, [pc, #40]	; (8007b8c <vPortSetupTimerInterrupt+0x40>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	099b      	lsrs	r3, r3, #6
 8007b68:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <vPortSetupTimerInterrupt+0x44>)
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b6e:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <vPortSetupTimerInterrupt+0x34>)
 8007b70:	2207      	movs	r2, #7
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	e000e010 	.word	0xe000e010
 8007b84:	e000e018 	.word	0xe000e018
 8007b88:	2000000c 	.word	0x2000000c
 8007b8c:	10624dd3 	.word	0x10624dd3
 8007b90:	e000e014 	.word	0xe000e014

08007b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ba4 <vPortEnableVFP+0x10>
 8007b98:	6801      	ldr	r1, [r0, #0]
 8007b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b9e:	6001      	str	r1, [r0, #0]
 8007ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ba2:	bf00      	nop
 8007ba4:	e000ed88 	.word	0xe000ed88

08007ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	; 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bb4:	f7ff fac6 	bl	8007144 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bb8:	4b5b      	ldr	r3, [pc, #364]	; (8007d28 <pvPortMalloc+0x180>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bc0:	f000 f920 	bl	8007e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bc4:	4b59      	ldr	r3, [pc, #356]	; (8007d2c <pvPortMalloc+0x184>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f040 8093 	bne.w	8007cf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01d      	beq.n	8007c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bd8:	2208      	movs	r2, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4413      	add	r3, r2
 8007bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d014      	beq.n	8007c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f023 0307 	bic.w	r3, r3, #7
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f003 0307 	and.w	r3, r3, #7
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <pvPortMalloc+0x6c>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	617b      	str	r3, [r7, #20]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d06e      	beq.n	8007cf8 <pvPortMalloc+0x150>
 8007c1a:	4b45      	ldr	r3, [pc, #276]	; (8007d30 <pvPortMalloc+0x188>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d869      	bhi.n	8007cf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c24:	4b43      	ldr	r3, [pc, #268]	; (8007d34 <pvPortMalloc+0x18c>)
 8007c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c28:	4b42      	ldr	r3, [pc, #264]	; (8007d34 <pvPortMalloc+0x18c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c2e:	e004      	b.n	8007c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d903      	bls.n	8007c4c <pvPortMalloc+0xa4>
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f1      	bne.n	8007c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c4c:	4b36      	ldr	r3, [pc, #216]	; (8007d28 <pvPortMalloc+0x180>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d050      	beq.n	8007cf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	2308      	movs	r3, #8
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d91f      	bls.n	8007cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	613b      	str	r3, [r7, #16]
}
 8007c9c:	bf00      	nop
 8007c9e:	e7fe      	b.n	8007c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	1ad2      	subs	r2, r2, r3
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cb2:	69b8      	ldr	r0, [r7, #24]
 8007cb4:	f000 f908 	bl	8007ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cb8:	4b1d      	ldr	r3, [pc, #116]	; (8007d30 <pvPortMalloc+0x188>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <pvPortMalloc+0x188>)
 8007cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cc6:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <pvPortMalloc+0x188>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <pvPortMalloc+0x190>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d203      	bcs.n	8007cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cd2:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <pvPortMalloc+0x188>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a18      	ldr	r2, [pc, #96]	; (8007d38 <pvPortMalloc+0x190>)
 8007cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <pvPortMalloc+0x184>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <pvPortMalloc+0x194>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	4a11      	ldr	r2, [pc, #68]	; (8007d3c <pvPortMalloc+0x194>)
 8007cf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cf8:	f7ff fa32 	bl	8007160 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <pvPortMalloc+0x174>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60fb      	str	r3, [r7, #12]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <pvPortMalloc+0x172>
	return pvReturn;
 8007d1c:	69fb      	ldr	r3, [r7, #28]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3728      	adds	r7, #40	; 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20004464 	.word	0x20004464
 8007d2c:	20004478 	.word	0x20004478
 8007d30:	20004468 	.word	0x20004468
 8007d34:	2000445c 	.word	0x2000445c
 8007d38:	2000446c 	.word	0x2000446c
 8007d3c:	20004470 	.word	0x20004470

08007d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d04d      	beq.n	8007dee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d52:	2308      	movs	r3, #8
 8007d54:	425b      	negs	r3, r3
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <vPortFree+0xb8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <vPortFree+0x44>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60fb      	str	r3, [r7, #12]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <vPortFree+0x62>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	60bb      	str	r3, [r7, #8]
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <vPortFree+0xb8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01e      	beq.n	8007dee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11a      	bne.n	8007dee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	; (8007df8 <vPortFree+0xb8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	401a      	ands	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007dc8:	f7ff f9bc 	bl	8007144 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <vPortFree+0xbc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <vPortFree+0xbc>)
 8007dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dda:	6938      	ldr	r0, [r7, #16]
 8007ddc:	f000 f874 	bl	8007ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <vPortFree+0xc0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	4a06      	ldr	r2, [pc, #24]	; (8007e00 <vPortFree+0xc0>)
 8007de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dea:	f7ff f9b9 	bl	8007160 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dee:	bf00      	nop
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20004478 	.word	0x20004478
 8007dfc:	20004468 	.word	0x20004468
 8007e00:	20004474 	.word	0x20004474

08007e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e10:	4b27      	ldr	r3, [pc, #156]	; (8007eb0 <prvHeapInit+0xac>)
 8007e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00c      	beq.n	8007e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3307      	adds	r3, #7
 8007e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	4a1f      	ldr	r2, [pc, #124]	; (8007eb0 <prvHeapInit+0xac>)
 8007e34:	4413      	add	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e3c:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <prvHeapInit+0xb0>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e42:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <prvHeapInit+0xb0>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e50:	2208      	movs	r2, #8
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0307 	bic.w	r3, r3, #7
 8007e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4a15      	ldr	r2, [pc, #84]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e84:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	4a0a      	ldr	r2, [pc, #40]	; (8007ebc <prvHeapInit+0xb8>)
 8007e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	4a09      	ldr	r2, [pc, #36]	; (8007ec0 <prvHeapInit+0xbc>)
 8007e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <prvHeapInit+0xc0>)
 8007e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ea2:	601a      	str	r2, [r3, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	2000085c 	.word	0x2000085c
 8007eb4:	2000445c 	.word	0x2000445c
 8007eb8:	20004464 	.word	0x20004464
 8007ebc:	2000446c 	.word	0x2000446c
 8007ec0:	20004468 	.word	0x20004468
 8007ec4:	20004478 	.word	0x20004478

08007ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ed0:	4b28      	ldr	r3, [pc, #160]	; (8007f74 <prvInsertBlockIntoFreeList+0xac>)
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e002      	b.n	8007edc <prvInsertBlockIntoFreeList+0x14>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d8f7      	bhi.n	8007ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d108      	bne.n	8007f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	441a      	add	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	441a      	add	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d118      	bne.n	8007f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	4b15      	ldr	r3, [pc, #84]	; (8007f78 <prvInsertBlockIntoFreeList+0xb0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d00d      	beq.n	8007f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	441a      	add	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	e008      	b.n	8007f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <prvInsertBlockIntoFreeList+0xb0>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	e003      	b.n	8007f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d002      	beq.n	8007f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	2000445c 	.word	0x2000445c
 8007f78:	20004464 	.word	0x20004464

08007f7c <__cvt>:
 8007f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	ec55 4b10 	vmov	r4, r5, d0
 8007f84:	2d00      	cmp	r5, #0
 8007f86:	460e      	mov	r6, r1
 8007f88:	4619      	mov	r1, r3
 8007f8a:	462b      	mov	r3, r5
 8007f8c:	bfbb      	ittet	lt
 8007f8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f92:	461d      	movlt	r5, r3
 8007f94:	2300      	movge	r3, #0
 8007f96:	232d      	movlt	r3, #45	; 0x2d
 8007f98:	700b      	strb	r3, [r1, #0]
 8007f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fa0:	4691      	mov	r9, r2
 8007fa2:	f023 0820 	bic.w	r8, r3, #32
 8007fa6:	bfbc      	itt	lt
 8007fa8:	4622      	movlt	r2, r4
 8007faa:	4614      	movlt	r4, r2
 8007fac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fb0:	d005      	beq.n	8007fbe <__cvt+0x42>
 8007fb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fb6:	d100      	bne.n	8007fba <__cvt+0x3e>
 8007fb8:	3601      	adds	r6, #1
 8007fba:	2102      	movs	r1, #2
 8007fbc:	e000      	b.n	8007fc0 <__cvt+0x44>
 8007fbe:	2103      	movs	r1, #3
 8007fc0:	ab03      	add	r3, sp, #12
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	ab02      	add	r3, sp, #8
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	ec45 4b10 	vmov	d0, r4, r5
 8007fcc:	4653      	mov	r3, sl
 8007fce:	4632      	mov	r2, r6
 8007fd0:	f000 fe9a 	bl	8008d08 <_dtoa_r>
 8007fd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fd8:	4607      	mov	r7, r0
 8007fda:	d102      	bne.n	8007fe2 <__cvt+0x66>
 8007fdc:	f019 0f01 	tst.w	r9, #1
 8007fe0:	d022      	beq.n	8008028 <__cvt+0xac>
 8007fe2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fe6:	eb07 0906 	add.w	r9, r7, r6
 8007fea:	d110      	bne.n	800800e <__cvt+0x92>
 8007fec:	783b      	ldrb	r3, [r7, #0]
 8007fee:	2b30      	cmp	r3, #48	; 0x30
 8007ff0:	d10a      	bne.n	8008008 <__cvt+0x8c>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 fd75 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ffe:	b918      	cbnz	r0, 8008008 <__cvt+0x8c>
 8008000:	f1c6 0601 	rsb	r6, r6, #1
 8008004:	f8ca 6000 	str.w	r6, [sl]
 8008008:	f8da 3000 	ldr.w	r3, [sl]
 800800c:	4499      	add	r9, r3
 800800e:	2200      	movs	r2, #0
 8008010:	2300      	movs	r3, #0
 8008012:	4620      	mov	r0, r4
 8008014:	4629      	mov	r1, r5
 8008016:	f7f8 fd67 	bl	8000ae8 <__aeabi_dcmpeq>
 800801a:	b108      	cbz	r0, 8008020 <__cvt+0xa4>
 800801c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008020:	2230      	movs	r2, #48	; 0x30
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	454b      	cmp	r3, r9
 8008026:	d307      	bcc.n	8008038 <__cvt+0xbc>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800802c:	1bdb      	subs	r3, r3, r7
 800802e:	4638      	mov	r0, r7
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	b004      	add	sp, #16
 8008034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008038:	1c59      	adds	r1, r3, #1
 800803a:	9103      	str	r1, [sp, #12]
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e7f0      	b.n	8008022 <__cvt+0xa6>

08008040 <__exponent>:
 8008040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008042:	4603      	mov	r3, r0
 8008044:	2900      	cmp	r1, #0
 8008046:	bfb8      	it	lt
 8008048:	4249      	neglt	r1, r1
 800804a:	f803 2b02 	strb.w	r2, [r3], #2
 800804e:	bfb4      	ite	lt
 8008050:	222d      	movlt	r2, #45	; 0x2d
 8008052:	222b      	movge	r2, #43	; 0x2b
 8008054:	2909      	cmp	r1, #9
 8008056:	7042      	strb	r2, [r0, #1]
 8008058:	dd2a      	ble.n	80080b0 <__exponent+0x70>
 800805a:	f10d 0207 	add.w	r2, sp, #7
 800805e:	4617      	mov	r7, r2
 8008060:	260a      	movs	r6, #10
 8008062:	4694      	mov	ip, r2
 8008064:	fb91 f5f6 	sdiv	r5, r1, r6
 8008068:	fb06 1415 	mls	r4, r6, r5, r1
 800806c:	3430      	adds	r4, #48	; 0x30
 800806e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008072:	460c      	mov	r4, r1
 8008074:	2c63      	cmp	r4, #99	; 0x63
 8008076:	f102 32ff 	add.w	r2, r2, #4294967295
 800807a:	4629      	mov	r1, r5
 800807c:	dcf1      	bgt.n	8008062 <__exponent+0x22>
 800807e:	3130      	adds	r1, #48	; 0x30
 8008080:	f1ac 0402 	sub.w	r4, ip, #2
 8008084:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008088:	1c41      	adds	r1, r0, #1
 800808a:	4622      	mov	r2, r4
 800808c:	42ba      	cmp	r2, r7
 800808e:	d30a      	bcc.n	80080a6 <__exponent+0x66>
 8008090:	f10d 0209 	add.w	r2, sp, #9
 8008094:	eba2 020c 	sub.w	r2, r2, ip
 8008098:	42bc      	cmp	r4, r7
 800809a:	bf88      	it	hi
 800809c:	2200      	movhi	r2, #0
 800809e:	4413      	add	r3, r2
 80080a0:	1a18      	subs	r0, r3, r0
 80080a2:	b003      	add	sp, #12
 80080a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80080ae:	e7ed      	b.n	800808c <__exponent+0x4c>
 80080b0:	2330      	movs	r3, #48	; 0x30
 80080b2:	3130      	adds	r1, #48	; 0x30
 80080b4:	7083      	strb	r3, [r0, #2]
 80080b6:	70c1      	strb	r1, [r0, #3]
 80080b8:	1d03      	adds	r3, r0, #4
 80080ba:	e7f1      	b.n	80080a0 <__exponent+0x60>

080080bc <_printf_float>:
 80080bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c0:	ed2d 8b02 	vpush	{d8}
 80080c4:	b08d      	sub	sp, #52	; 0x34
 80080c6:	460c      	mov	r4, r1
 80080c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80080cc:	4616      	mov	r6, r2
 80080ce:	461f      	mov	r7, r3
 80080d0:	4605      	mov	r5, r0
 80080d2:	f000 fcb5 	bl	8008a40 <_localeconv_r>
 80080d6:	f8d0 a000 	ldr.w	sl, [r0]
 80080da:	4650      	mov	r0, sl
 80080dc:	f7f8 f8d8 	bl	8000290 <strlen>
 80080e0:	2300      	movs	r3, #0
 80080e2:	930a      	str	r3, [sp, #40]	; 0x28
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	9305      	str	r3, [sp, #20]
 80080e8:	f8d8 3000 	ldr.w	r3, [r8]
 80080ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80080f0:	3307      	adds	r3, #7
 80080f2:	f023 0307 	bic.w	r3, r3, #7
 80080f6:	f103 0208 	add.w	r2, r3, #8
 80080fa:	f8c8 2000 	str.w	r2, [r8]
 80080fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008102:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008106:	9307      	str	r3, [sp, #28]
 8008108:	f8cd 8018 	str.w	r8, [sp, #24]
 800810c:	ee08 0a10 	vmov	s16, r0
 8008110:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008118:	4b9e      	ldr	r3, [pc, #632]	; (8008394 <_printf_float+0x2d8>)
 800811a:	f04f 32ff 	mov.w	r2, #4294967295
 800811e:	f7f8 fd15 	bl	8000b4c <__aeabi_dcmpun>
 8008122:	bb88      	cbnz	r0, 8008188 <_printf_float+0xcc>
 8008124:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008128:	4b9a      	ldr	r3, [pc, #616]	; (8008394 <_printf_float+0x2d8>)
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	f7f8 fcef 	bl	8000b10 <__aeabi_dcmple>
 8008132:	bb48      	cbnz	r0, 8008188 <_printf_float+0xcc>
 8008134:	2200      	movs	r2, #0
 8008136:	2300      	movs	r3, #0
 8008138:	4640      	mov	r0, r8
 800813a:	4649      	mov	r1, r9
 800813c:	f7f8 fcde 	bl	8000afc <__aeabi_dcmplt>
 8008140:	b110      	cbz	r0, 8008148 <_printf_float+0x8c>
 8008142:	232d      	movs	r3, #45	; 0x2d
 8008144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008148:	4a93      	ldr	r2, [pc, #588]	; (8008398 <_printf_float+0x2dc>)
 800814a:	4b94      	ldr	r3, [pc, #592]	; (800839c <_printf_float+0x2e0>)
 800814c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008150:	bf94      	ite	ls
 8008152:	4690      	movls	r8, r2
 8008154:	4698      	movhi	r8, r3
 8008156:	2303      	movs	r3, #3
 8008158:	6123      	str	r3, [r4, #16]
 800815a:	9b05      	ldr	r3, [sp, #20]
 800815c:	f023 0304 	bic.w	r3, r3, #4
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	f04f 0900 	mov.w	r9, #0
 8008166:	9700      	str	r7, [sp, #0]
 8008168:	4633      	mov	r3, r6
 800816a:	aa0b      	add	r2, sp, #44	; 0x2c
 800816c:	4621      	mov	r1, r4
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f9da 	bl	8008528 <_printf_common>
 8008174:	3001      	adds	r0, #1
 8008176:	f040 8090 	bne.w	800829a <_printf_float+0x1de>
 800817a:	f04f 30ff 	mov.w	r0, #4294967295
 800817e:	b00d      	add	sp, #52	; 0x34
 8008180:	ecbd 8b02 	vpop	{d8}
 8008184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008188:	4642      	mov	r2, r8
 800818a:	464b      	mov	r3, r9
 800818c:	4640      	mov	r0, r8
 800818e:	4649      	mov	r1, r9
 8008190:	f7f8 fcdc 	bl	8000b4c <__aeabi_dcmpun>
 8008194:	b140      	cbz	r0, 80081a8 <_printf_float+0xec>
 8008196:	464b      	mov	r3, r9
 8008198:	2b00      	cmp	r3, #0
 800819a:	bfbc      	itt	lt
 800819c:	232d      	movlt	r3, #45	; 0x2d
 800819e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081a2:	4a7f      	ldr	r2, [pc, #508]	; (80083a0 <_printf_float+0x2e4>)
 80081a4:	4b7f      	ldr	r3, [pc, #508]	; (80083a4 <_printf_float+0x2e8>)
 80081a6:	e7d1      	b.n	800814c <_printf_float+0x90>
 80081a8:	6863      	ldr	r3, [r4, #4]
 80081aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80081ae:	9206      	str	r2, [sp, #24]
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	d13f      	bne.n	8008234 <_printf_float+0x178>
 80081b4:	2306      	movs	r3, #6
 80081b6:	6063      	str	r3, [r4, #4]
 80081b8:	9b05      	ldr	r3, [sp, #20]
 80081ba:	6861      	ldr	r1, [r4, #4]
 80081bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80081c0:	2300      	movs	r3, #0
 80081c2:	9303      	str	r3, [sp, #12]
 80081c4:	ab0a      	add	r3, sp, #40	; 0x28
 80081c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80081ca:	ab09      	add	r3, sp, #36	; 0x24
 80081cc:	ec49 8b10 	vmov	d0, r8, r9
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	6022      	str	r2, [r4, #0]
 80081d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081d8:	4628      	mov	r0, r5
 80081da:	f7ff fecf 	bl	8007f7c <__cvt>
 80081de:	9b06      	ldr	r3, [sp, #24]
 80081e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081e2:	2b47      	cmp	r3, #71	; 0x47
 80081e4:	4680      	mov	r8, r0
 80081e6:	d108      	bne.n	80081fa <_printf_float+0x13e>
 80081e8:	1cc8      	adds	r0, r1, #3
 80081ea:	db02      	blt.n	80081f2 <_printf_float+0x136>
 80081ec:	6863      	ldr	r3, [r4, #4]
 80081ee:	4299      	cmp	r1, r3
 80081f0:	dd41      	ble.n	8008276 <_printf_float+0x1ba>
 80081f2:	f1ab 0302 	sub.w	r3, fp, #2
 80081f6:	fa5f fb83 	uxtb.w	fp, r3
 80081fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081fe:	d820      	bhi.n	8008242 <_printf_float+0x186>
 8008200:	3901      	subs	r1, #1
 8008202:	465a      	mov	r2, fp
 8008204:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008208:	9109      	str	r1, [sp, #36]	; 0x24
 800820a:	f7ff ff19 	bl	8008040 <__exponent>
 800820e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008210:	1813      	adds	r3, r2, r0
 8008212:	2a01      	cmp	r2, #1
 8008214:	4681      	mov	r9, r0
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	dc02      	bgt.n	8008220 <_printf_float+0x164>
 800821a:	6822      	ldr	r2, [r4, #0]
 800821c:	07d2      	lsls	r2, r2, #31
 800821e:	d501      	bpl.n	8008224 <_printf_float+0x168>
 8008220:	3301      	adds	r3, #1
 8008222:	6123      	str	r3, [r4, #16]
 8008224:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008228:	2b00      	cmp	r3, #0
 800822a:	d09c      	beq.n	8008166 <_printf_float+0xaa>
 800822c:	232d      	movs	r3, #45	; 0x2d
 800822e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008232:	e798      	b.n	8008166 <_printf_float+0xaa>
 8008234:	9a06      	ldr	r2, [sp, #24]
 8008236:	2a47      	cmp	r2, #71	; 0x47
 8008238:	d1be      	bne.n	80081b8 <_printf_float+0xfc>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1bc      	bne.n	80081b8 <_printf_float+0xfc>
 800823e:	2301      	movs	r3, #1
 8008240:	e7b9      	b.n	80081b6 <_printf_float+0xfa>
 8008242:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008246:	d118      	bne.n	800827a <_printf_float+0x1be>
 8008248:	2900      	cmp	r1, #0
 800824a:	6863      	ldr	r3, [r4, #4]
 800824c:	dd0b      	ble.n	8008266 <_printf_float+0x1aa>
 800824e:	6121      	str	r1, [r4, #16]
 8008250:	b913      	cbnz	r3, 8008258 <_printf_float+0x19c>
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	07d0      	lsls	r0, r2, #31
 8008256:	d502      	bpl.n	800825e <_printf_float+0x1a2>
 8008258:	3301      	adds	r3, #1
 800825a:	440b      	add	r3, r1
 800825c:	6123      	str	r3, [r4, #16]
 800825e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008260:	f04f 0900 	mov.w	r9, #0
 8008264:	e7de      	b.n	8008224 <_printf_float+0x168>
 8008266:	b913      	cbnz	r3, 800826e <_printf_float+0x1b2>
 8008268:	6822      	ldr	r2, [r4, #0]
 800826a:	07d2      	lsls	r2, r2, #31
 800826c:	d501      	bpl.n	8008272 <_printf_float+0x1b6>
 800826e:	3302      	adds	r3, #2
 8008270:	e7f4      	b.n	800825c <_printf_float+0x1a0>
 8008272:	2301      	movs	r3, #1
 8008274:	e7f2      	b.n	800825c <_printf_float+0x1a0>
 8008276:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800827a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800827c:	4299      	cmp	r1, r3
 800827e:	db05      	blt.n	800828c <_printf_float+0x1d0>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	6121      	str	r1, [r4, #16]
 8008284:	07d8      	lsls	r0, r3, #31
 8008286:	d5ea      	bpl.n	800825e <_printf_float+0x1a2>
 8008288:	1c4b      	adds	r3, r1, #1
 800828a:	e7e7      	b.n	800825c <_printf_float+0x1a0>
 800828c:	2900      	cmp	r1, #0
 800828e:	bfd4      	ite	le
 8008290:	f1c1 0202 	rsble	r2, r1, #2
 8008294:	2201      	movgt	r2, #1
 8008296:	4413      	add	r3, r2
 8008298:	e7e0      	b.n	800825c <_printf_float+0x1a0>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	055a      	lsls	r2, r3, #21
 800829e:	d407      	bmi.n	80082b0 <_printf_float+0x1f4>
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	4642      	mov	r2, r8
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	d12c      	bne.n	8008308 <_printf_float+0x24c>
 80082ae:	e764      	b.n	800817a <_printf_float+0xbe>
 80082b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082b4:	f240 80e0 	bls.w	8008478 <_printf_float+0x3bc>
 80082b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	f7f8 fc12 	bl	8000ae8 <__aeabi_dcmpeq>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d034      	beq.n	8008332 <_printf_float+0x276>
 80082c8:	4a37      	ldr	r2, [pc, #220]	; (80083a8 <_printf_float+0x2ec>)
 80082ca:	2301      	movs	r3, #1
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f af51 	beq.w	800817a <_printf_float+0xbe>
 80082d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082dc:	429a      	cmp	r2, r3
 80082de:	db02      	blt.n	80082e6 <_printf_float+0x22a>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	07d8      	lsls	r0, r3, #31
 80082e4:	d510      	bpl.n	8008308 <_printf_float+0x24c>
 80082e6:	ee18 3a10 	vmov	r3, s16
 80082ea:	4652      	mov	r2, sl
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f af41 	beq.w	800817a <_printf_float+0xbe>
 80082f8:	f04f 0800 	mov.w	r8, #0
 80082fc:	f104 091a 	add.w	r9, r4, #26
 8008300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008302:	3b01      	subs	r3, #1
 8008304:	4543      	cmp	r3, r8
 8008306:	dc09      	bgt.n	800831c <_printf_float+0x260>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	079b      	lsls	r3, r3, #30
 800830c:	f100 8107 	bmi.w	800851e <_printf_float+0x462>
 8008310:	68e0      	ldr	r0, [r4, #12]
 8008312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008314:	4298      	cmp	r0, r3
 8008316:	bfb8      	it	lt
 8008318:	4618      	movlt	r0, r3
 800831a:	e730      	b.n	800817e <_printf_float+0xc2>
 800831c:	2301      	movs	r3, #1
 800831e:	464a      	mov	r2, r9
 8008320:	4631      	mov	r1, r6
 8008322:	4628      	mov	r0, r5
 8008324:	47b8      	blx	r7
 8008326:	3001      	adds	r0, #1
 8008328:	f43f af27 	beq.w	800817a <_printf_float+0xbe>
 800832c:	f108 0801 	add.w	r8, r8, #1
 8008330:	e7e6      	b.n	8008300 <_printf_float+0x244>
 8008332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	dc39      	bgt.n	80083ac <_printf_float+0x2f0>
 8008338:	4a1b      	ldr	r2, [pc, #108]	; (80083a8 <_printf_float+0x2ec>)
 800833a:	2301      	movs	r3, #1
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f af19 	beq.w	800817a <_printf_float+0xbe>
 8008348:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800834c:	4313      	orrs	r3, r2
 800834e:	d102      	bne.n	8008356 <_printf_float+0x29a>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	07d9      	lsls	r1, r3, #31
 8008354:	d5d8      	bpl.n	8008308 <_printf_float+0x24c>
 8008356:	ee18 3a10 	vmov	r3, s16
 800835a:	4652      	mov	r2, sl
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	f43f af09 	beq.w	800817a <_printf_float+0xbe>
 8008368:	f04f 0900 	mov.w	r9, #0
 800836c:	f104 0a1a 	add.w	sl, r4, #26
 8008370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008372:	425b      	negs	r3, r3
 8008374:	454b      	cmp	r3, r9
 8008376:	dc01      	bgt.n	800837c <_printf_float+0x2c0>
 8008378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837a:	e792      	b.n	80082a2 <_printf_float+0x1e6>
 800837c:	2301      	movs	r3, #1
 800837e:	4652      	mov	r2, sl
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	f43f aef7 	beq.w	800817a <_printf_float+0xbe>
 800838c:	f109 0901 	add.w	r9, r9, #1
 8008390:	e7ee      	b.n	8008370 <_printf_float+0x2b4>
 8008392:	bf00      	nop
 8008394:	7fefffff 	.word	0x7fefffff
 8008398:	0800aa90 	.word	0x0800aa90
 800839c:	0800aa94 	.word	0x0800aa94
 80083a0:	0800aa98 	.word	0x0800aa98
 80083a4:	0800aa9c 	.word	0x0800aa9c
 80083a8:	0800aaa0 	.word	0x0800aaa0
 80083ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083b0:	429a      	cmp	r2, r3
 80083b2:	bfa8      	it	ge
 80083b4:	461a      	movge	r2, r3
 80083b6:	2a00      	cmp	r2, #0
 80083b8:	4691      	mov	r9, r2
 80083ba:	dc37      	bgt.n	800842c <_printf_float+0x370>
 80083bc:	f04f 0b00 	mov.w	fp, #0
 80083c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083c4:	f104 021a 	add.w	r2, r4, #26
 80083c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083ca:	9305      	str	r3, [sp, #20]
 80083cc:	eba3 0309 	sub.w	r3, r3, r9
 80083d0:	455b      	cmp	r3, fp
 80083d2:	dc33      	bgt.n	800843c <_printf_float+0x380>
 80083d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083d8:	429a      	cmp	r2, r3
 80083da:	db3b      	blt.n	8008454 <_printf_float+0x398>
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	07da      	lsls	r2, r3, #31
 80083e0:	d438      	bmi.n	8008454 <_printf_float+0x398>
 80083e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80083e6:	eba2 0903 	sub.w	r9, r2, r3
 80083ea:	9b05      	ldr	r3, [sp, #20]
 80083ec:	1ad2      	subs	r2, r2, r3
 80083ee:	4591      	cmp	r9, r2
 80083f0:	bfa8      	it	ge
 80083f2:	4691      	movge	r9, r2
 80083f4:	f1b9 0f00 	cmp.w	r9, #0
 80083f8:	dc35      	bgt.n	8008466 <_printf_float+0x3aa>
 80083fa:	f04f 0800 	mov.w	r8, #0
 80083fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008402:	f104 0a1a 	add.w	sl, r4, #26
 8008406:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	eba3 0309 	sub.w	r3, r3, r9
 8008410:	4543      	cmp	r3, r8
 8008412:	f77f af79 	ble.w	8008308 <_printf_float+0x24c>
 8008416:	2301      	movs	r3, #1
 8008418:	4652      	mov	r2, sl
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	47b8      	blx	r7
 8008420:	3001      	adds	r0, #1
 8008422:	f43f aeaa 	beq.w	800817a <_printf_float+0xbe>
 8008426:	f108 0801 	add.w	r8, r8, #1
 800842a:	e7ec      	b.n	8008406 <_printf_float+0x34a>
 800842c:	4613      	mov	r3, r2
 800842e:	4631      	mov	r1, r6
 8008430:	4642      	mov	r2, r8
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	d1c0      	bne.n	80083bc <_printf_float+0x300>
 800843a:	e69e      	b.n	800817a <_printf_float+0xbe>
 800843c:	2301      	movs	r3, #1
 800843e:	4631      	mov	r1, r6
 8008440:	4628      	mov	r0, r5
 8008442:	9205      	str	r2, [sp, #20]
 8008444:	47b8      	blx	r7
 8008446:	3001      	adds	r0, #1
 8008448:	f43f ae97 	beq.w	800817a <_printf_float+0xbe>
 800844c:	9a05      	ldr	r2, [sp, #20]
 800844e:	f10b 0b01 	add.w	fp, fp, #1
 8008452:	e7b9      	b.n	80083c8 <_printf_float+0x30c>
 8008454:	ee18 3a10 	vmov	r3, s16
 8008458:	4652      	mov	r2, sl
 800845a:	4631      	mov	r1, r6
 800845c:	4628      	mov	r0, r5
 800845e:	47b8      	blx	r7
 8008460:	3001      	adds	r0, #1
 8008462:	d1be      	bne.n	80083e2 <_printf_float+0x326>
 8008464:	e689      	b.n	800817a <_printf_float+0xbe>
 8008466:	9a05      	ldr	r2, [sp, #20]
 8008468:	464b      	mov	r3, r9
 800846a:	4442      	add	r2, r8
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	d1c1      	bne.n	80083fa <_printf_float+0x33e>
 8008476:	e680      	b.n	800817a <_printf_float+0xbe>
 8008478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800847a:	2a01      	cmp	r2, #1
 800847c:	dc01      	bgt.n	8008482 <_printf_float+0x3c6>
 800847e:	07db      	lsls	r3, r3, #31
 8008480:	d53a      	bpl.n	80084f8 <_printf_float+0x43c>
 8008482:	2301      	movs	r3, #1
 8008484:	4642      	mov	r2, r8
 8008486:	4631      	mov	r1, r6
 8008488:	4628      	mov	r0, r5
 800848a:	47b8      	blx	r7
 800848c:	3001      	adds	r0, #1
 800848e:	f43f ae74 	beq.w	800817a <_printf_float+0xbe>
 8008492:	ee18 3a10 	vmov	r3, s16
 8008496:	4652      	mov	r2, sl
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f ae6b 	beq.w	800817a <_printf_float+0xbe>
 80084a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084a8:	2200      	movs	r2, #0
 80084aa:	2300      	movs	r3, #0
 80084ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80084b0:	f7f8 fb1a 	bl	8000ae8 <__aeabi_dcmpeq>
 80084b4:	b9d8      	cbnz	r0, 80084ee <_printf_float+0x432>
 80084b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80084ba:	f108 0201 	add.w	r2, r8, #1
 80084be:	4631      	mov	r1, r6
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b8      	blx	r7
 80084c4:	3001      	adds	r0, #1
 80084c6:	d10e      	bne.n	80084e6 <_printf_float+0x42a>
 80084c8:	e657      	b.n	800817a <_printf_float+0xbe>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4652      	mov	r2, sl
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	f43f ae50 	beq.w	800817a <_printf_float+0xbe>
 80084da:	f108 0801 	add.w	r8, r8, #1
 80084de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e0:	3b01      	subs	r3, #1
 80084e2:	4543      	cmp	r3, r8
 80084e4:	dcf1      	bgt.n	80084ca <_printf_float+0x40e>
 80084e6:	464b      	mov	r3, r9
 80084e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084ec:	e6da      	b.n	80082a4 <_printf_float+0x1e8>
 80084ee:	f04f 0800 	mov.w	r8, #0
 80084f2:	f104 0a1a 	add.w	sl, r4, #26
 80084f6:	e7f2      	b.n	80084de <_printf_float+0x422>
 80084f8:	2301      	movs	r3, #1
 80084fa:	4642      	mov	r2, r8
 80084fc:	e7df      	b.n	80084be <_printf_float+0x402>
 80084fe:	2301      	movs	r3, #1
 8008500:	464a      	mov	r2, r9
 8008502:	4631      	mov	r1, r6
 8008504:	4628      	mov	r0, r5
 8008506:	47b8      	blx	r7
 8008508:	3001      	adds	r0, #1
 800850a:	f43f ae36 	beq.w	800817a <_printf_float+0xbe>
 800850e:	f108 0801 	add.w	r8, r8, #1
 8008512:	68e3      	ldr	r3, [r4, #12]
 8008514:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008516:	1a5b      	subs	r3, r3, r1
 8008518:	4543      	cmp	r3, r8
 800851a:	dcf0      	bgt.n	80084fe <_printf_float+0x442>
 800851c:	e6f8      	b.n	8008310 <_printf_float+0x254>
 800851e:	f04f 0800 	mov.w	r8, #0
 8008522:	f104 0919 	add.w	r9, r4, #25
 8008526:	e7f4      	b.n	8008512 <_printf_float+0x456>

08008528 <_printf_common>:
 8008528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800852c:	4616      	mov	r6, r2
 800852e:	4699      	mov	r9, r3
 8008530:	688a      	ldr	r2, [r1, #8]
 8008532:	690b      	ldr	r3, [r1, #16]
 8008534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008538:	4293      	cmp	r3, r2
 800853a:	bfb8      	it	lt
 800853c:	4613      	movlt	r3, r2
 800853e:	6033      	str	r3, [r6, #0]
 8008540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008544:	4607      	mov	r7, r0
 8008546:	460c      	mov	r4, r1
 8008548:	b10a      	cbz	r2, 800854e <_printf_common+0x26>
 800854a:	3301      	adds	r3, #1
 800854c:	6033      	str	r3, [r6, #0]
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	0699      	lsls	r1, r3, #26
 8008552:	bf42      	ittt	mi
 8008554:	6833      	ldrmi	r3, [r6, #0]
 8008556:	3302      	addmi	r3, #2
 8008558:	6033      	strmi	r3, [r6, #0]
 800855a:	6825      	ldr	r5, [r4, #0]
 800855c:	f015 0506 	ands.w	r5, r5, #6
 8008560:	d106      	bne.n	8008570 <_printf_common+0x48>
 8008562:	f104 0a19 	add.w	sl, r4, #25
 8008566:	68e3      	ldr	r3, [r4, #12]
 8008568:	6832      	ldr	r2, [r6, #0]
 800856a:	1a9b      	subs	r3, r3, r2
 800856c:	42ab      	cmp	r3, r5
 800856e:	dc26      	bgt.n	80085be <_printf_common+0x96>
 8008570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008574:	1e13      	subs	r3, r2, #0
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	bf18      	it	ne
 800857a:	2301      	movne	r3, #1
 800857c:	0692      	lsls	r2, r2, #26
 800857e:	d42b      	bmi.n	80085d8 <_printf_common+0xb0>
 8008580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008584:	4649      	mov	r1, r9
 8008586:	4638      	mov	r0, r7
 8008588:	47c0      	blx	r8
 800858a:	3001      	adds	r0, #1
 800858c:	d01e      	beq.n	80085cc <_printf_common+0xa4>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	6922      	ldr	r2, [r4, #16]
 8008592:	f003 0306 	and.w	r3, r3, #6
 8008596:	2b04      	cmp	r3, #4
 8008598:	bf02      	ittt	eq
 800859a:	68e5      	ldreq	r5, [r4, #12]
 800859c:	6833      	ldreq	r3, [r6, #0]
 800859e:	1aed      	subeq	r5, r5, r3
 80085a0:	68a3      	ldr	r3, [r4, #8]
 80085a2:	bf0c      	ite	eq
 80085a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085a8:	2500      	movne	r5, #0
 80085aa:	4293      	cmp	r3, r2
 80085ac:	bfc4      	itt	gt
 80085ae:	1a9b      	subgt	r3, r3, r2
 80085b0:	18ed      	addgt	r5, r5, r3
 80085b2:	2600      	movs	r6, #0
 80085b4:	341a      	adds	r4, #26
 80085b6:	42b5      	cmp	r5, r6
 80085b8:	d11a      	bne.n	80085f0 <_printf_common+0xc8>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e008      	b.n	80085d0 <_printf_common+0xa8>
 80085be:	2301      	movs	r3, #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	4649      	mov	r1, r9
 80085c4:	4638      	mov	r0, r7
 80085c6:	47c0      	blx	r8
 80085c8:	3001      	adds	r0, #1
 80085ca:	d103      	bne.n	80085d4 <_printf_common+0xac>
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	3501      	adds	r5, #1
 80085d6:	e7c6      	b.n	8008566 <_printf_common+0x3e>
 80085d8:	18e1      	adds	r1, r4, r3
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	2030      	movs	r0, #48	; 0x30
 80085de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085e2:	4422      	add	r2, r4
 80085e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085ec:	3302      	adds	r3, #2
 80085ee:	e7c7      	b.n	8008580 <_printf_common+0x58>
 80085f0:	2301      	movs	r3, #1
 80085f2:	4622      	mov	r2, r4
 80085f4:	4649      	mov	r1, r9
 80085f6:	4638      	mov	r0, r7
 80085f8:	47c0      	blx	r8
 80085fa:	3001      	adds	r0, #1
 80085fc:	d0e6      	beq.n	80085cc <_printf_common+0xa4>
 80085fe:	3601      	adds	r6, #1
 8008600:	e7d9      	b.n	80085b6 <_printf_common+0x8e>
	...

08008604 <_printf_i>:
 8008604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008608:	7e0f      	ldrb	r7, [r1, #24]
 800860a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800860c:	2f78      	cmp	r7, #120	; 0x78
 800860e:	4691      	mov	r9, r2
 8008610:	4680      	mov	r8, r0
 8008612:	460c      	mov	r4, r1
 8008614:	469a      	mov	sl, r3
 8008616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800861a:	d807      	bhi.n	800862c <_printf_i+0x28>
 800861c:	2f62      	cmp	r7, #98	; 0x62
 800861e:	d80a      	bhi.n	8008636 <_printf_i+0x32>
 8008620:	2f00      	cmp	r7, #0
 8008622:	f000 80d4 	beq.w	80087ce <_printf_i+0x1ca>
 8008626:	2f58      	cmp	r7, #88	; 0x58
 8008628:	f000 80c0 	beq.w	80087ac <_printf_i+0x1a8>
 800862c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008634:	e03a      	b.n	80086ac <_printf_i+0xa8>
 8008636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800863a:	2b15      	cmp	r3, #21
 800863c:	d8f6      	bhi.n	800862c <_printf_i+0x28>
 800863e:	a101      	add	r1, pc, #4	; (adr r1, 8008644 <_printf_i+0x40>)
 8008640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008644:	0800869d 	.word	0x0800869d
 8008648:	080086b1 	.word	0x080086b1
 800864c:	0800862d 	.word	0x0800862d
 8008650:	0800862d 	.word	0x0800862d
 8008654:	0800862d 	.word	0x0800862d
 8008658:	0800862d 	.word	0x0800862d
 800865c:	080086b1 	.word	0x080086b1
 8008660:	0800862d 	.word	0x0800862d
 8008664:	0800862d 	.word	0x0800862d
 8008668:	0800862d 	.word	0x0800862d
 800866c:	0800862d 	.word	0x0800862d
 8008670:	080087b5 	.word	0x080087b5
 8008674:	080086dd 	.word	0x080086dd
 8008678:	0800876f 	.word	0x0800876f
 800867c:	0800862d 	.word	0x0800862d
 8008680:	0800862d 	.word	0x0800862d
 8008684:	080087d7 	.word	0x080087d7
 8008688:	0800862d 	.word	0x0800862d
 800868c:	080086dd 	.word	0x080086dd
 8008690:	0800862d 	.word	0x0800862d
 8008694:	0800862d 	.word	0x0800862d
 8008698:	08008777 	.word	0x08008777
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	1d1a      	adds	r2, r3, #4
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	602a      	str	r2, [r5, #0]
 80086a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ac:	2301      	movs	r3, #1
 80086ae:	e09f      	b.n	80087f0 <_printf_i+0x1ec>
 80086b0:	6820      	ldr	r0, [r4, #0]
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	0607      	lsls	r7, r0, #24
 80086b6:	f103 0104 	add.w	r1, r3, #4
 80086ba:	6029      	str	r1, [r5, #0]
 80086bc:	d501      	bpl.n	80086c2 <_printf_i+0xbe>
 80086be:	681e      	ldr	r6, [r3, #0]
 80086c0:	e003      	b.n	80086ca <_printf_i+0xc6>
 80086c2:	0646      	lsls	r6, r0, #25
 80086c4:	d5fb      	bpl.n	80086be <_printf_i+0xba>
 80086c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	da03      	bge.n	80086d6 <_printf_i+0xd2>
 80086ce:	232d      	movs	r3, #45	; 0x2d
 80086d0:	4276      	negs	r6, r6
 80086d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d6:	485a      	ldr	r0, [pc, #360]	; (8008840 <_printf_i+0x23c>)
 80086d8:	230a      	movs	r3, #10
 80086da:	e012      	b.n	8008702 <_printf_i+0xfe>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	6820      	ldr	r0, [r4, #0]
 80086e0:	1d19      	adds	r1, r3, #4
 80086e2:	6029      	str	r1, [r5, #0]
 80086e4:	0605      	lsls	r5, r0, #24
 80086e6:	d501      	bpl.n	80086ec <_printf_i+0xe8>
 80086e8:	681e      	ldr	r6, [r3, #0]
 80086ea:	e002      	b.n	80086f2 <_printf_i+0xee>
 80086ec:	0641      	lsls	r1, r0, #25
 80086ee:	d5fb      	bpl.n	80086e8 <_printf_i+0xe4>
 80086f0:	881e      	ldrh	r6, [r3, #0]
 80086f2:	4853      	ldr	r0, [pc, #332]	; (8008840 <_printf_i+0x23c>)
 80086f4:	2f6f      	cmp	r7, #111	; 0x6f
 80086f6:	bf0c      	ite	eq
 80086f8:	2308      	moveq	r3, #8
 80086fa:	230a      	movne	r3, #10
 80086fc:	2100      	movs	r1, #0
 80086fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008702:	6865      	ldr	r5, [r4, #4]
 8008704:	60a5      	str	r5, [r4, #8]
 8008706:	2d00      	cmp	r5, #0
 8008708:	bfa2      	ittt	ge
 800870a:	6821      	ldrge	r1, [r4, #0]
 800870c:	f021 0104 	bicge.w	r1, r1, #4
 8008710:	6021      	strge	r1, [r4, #0]
 8008712:	b90e      	cbnz	r6, 8008718 <_printf_i+0x114>
 8008714:	2d00      	cmp	r5, #0
 8008716:	d04b      	beq.n	80087b0 <_printf_i+0x1ac>
 8008718:	4615      	mov	r5, r2
 800871a:	fbb6 f1f3 	udiv	r1, r6, r3
 800871e:	fb03 6711 	mls	r7, r3, r1, r6
 8008722:	5dc7      	ldrb	r7, [r0, r7]
 8008724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008728:	4637      	mov	r7, r6
 800872a:	42bb      	cmp	r3, r7
 800872c:	460e      	mov	r6, r1
 800872e:	d9f4      	bls.n	800871a <_printf_i+0x116>
 8008730:	2b08      	cmp	r3, #8
 8008732:	d10b      	bne.n	800874c <_printf_i+0x148>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	07de      	lsls	r6, r3, #31
 8008738:	d508      	bpl.n	800874c <_printf_i+0x148>
 800873a:	6923      	ldr	r3, [r4, #16]
 800873c:	6861      	ldr	r1, [r4, #4]
 800873e:	4299      	cmp	r1, r3
 8008740:	bfde      	ittt	le
 8008742:	2330      	movle	r3, #48	; 0x30
 8008744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008748:	f105 35ff 	addle.w	r5, r5, #4294967295
 800874c:	1b52      	subs	r2, r2, r5
 800874e:	6122      	str	r2, [r4, #16]
 8008750:	f8cd a000 	str.w	sl, [sp]
 8008754:	464b      	mov	r3, r9
 8008756:	aa03      	add	r2, sp, #12
 8008758:	4621      	mov	r1, r4
 800875a:	4640      	mov	r0, r8
 800875c:	f7ff fee4 	bl	8008528 <_printf_common>
 8008760:	3001      	adds	r0, #1
 8008762:	d14a      	bne.n	80087fa <_printf_i+0x1f6>
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	b004      	add	sp, #16
 800876a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	f043 0320 	orr.w	r3, r3, #32
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	4833      	ldr	r0, [pc, #204]	; (8008844 <_printf_i+0x240>)
 8008778:	2778      	movs	r7, #120	; 0x78
 800877a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	6829      	ldr	r1, [r5, #0]
 8008782:	061f      	lsls	r7, r3, #24
 8008784:	f851 6b04 	ldr.w	r6, [r1], #4
 8008788:	d402      	bmi.n	8008790 <_printf_i+0x18c>
 800878a:	065f      	lsls	r7, r3, #25
 800878c:	bf48      	it	mi
 800878e:	b2b6      	uxthmi	r6, r6
 8008790:	07df      	lsls	r7, r3, #31
 8008792:	bf48      	it	mi
 8008794:	f043 0320 	orrmi.w	r3, r3, #32
 8008798:	6029      	str	r1, [r5, #0]
 800879a:	bf48      	it	mi
 800879c:	6023      	strmi	r3, [r4, #0]
 800879e:	b91e      	cbnz	r6, 80087a8 <_printf_i+0x1a4>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	f023 0320 	bic.w	r3, r3, #32
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	2310      	movs	r3, #16
 80087aa:	e7a7      	b.n	80086fc <_printf_i+0xf8>
 80087ac:	4824      	ldr	r0, [pc, #144]	; (8008840 <_printf_i+0x23c>)
 80087ae:	e7e4      	b.n	800877a <_printf_i+0x176>
 80087b0:	4615      	mov	r5, r2
 80087b2:	e7bd      	b.n	8008730 <_printf_i+0x12c>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	6826      	ldr	r6, [r4, #0]
 80087b8:	6961      	ldr	r1, [r4, #20]
 80087ba:	1d18      	adds	r0, r3, #4
 80087bc:	6028      	str	r0, [r5, #0]
 80087be:	0635      	lsls	r5, r6, #24
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	d501      	bpl.n	80087c8 <_printf_i+0x1c4>
 80087c4:	6019      	str	r1, [r3, #0]
 80087c6:	e002      	b.n	80087ce <_printf_i+0x1ca>
 80087c8:	0670      	lsls	r0, r6, #25
 80087ca:	d5fb      	bpl.n	80087c4 <_printf_i+0x1c0>
 80087cc:	8019      	strh	r1, [r3, #0]
 80087ce:	2300      	movs	r3, #0
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	4615      	mov	r5, r2
 80087d4:	e7bc      	b.n	8008750 <_printf_i+0x14c>
 80087d6:	682b      	ldr	r3, [r5, #0]
 80087d8:	1d1a      	adds	r2, r3, #4
 80087da:	602a      	str	r2, [r5, #0]
 80087dc:	681d      	ldr	r5, [r3, #0]
 80087de:	6862      	ldr	r2, [r4, #4]
 80087e0:	2100      	movs	r1, #0
 80087e2:	4628      	mov	r0, r5
 80087e4:	f7f7 fd04 	bl	80001f0 <memchr>
 80087e8:	b108      	cbz	r0, 80087ee <_printf_i+0x1ea>
 80087ea:	1b40      	subs	r0, r0, r5
 80087ec:	6060      	str	r0, [r4, #4]
 80087ee:	6863      	ldr	r3, [r4, #4]
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	2300      	movs	r3, #0
 80087f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f8:	e7aa      	b.n	8008750 <_printf_i+0x14c>
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	462a      	mov	r2, r5
 80087fe:	4649      	mov	r1, r9
 8008800:	4640      	mov	r0, r8
 8008802:	47d0      	blx	sl
 8008804:	3001      	adds	r0, #1
 8008806:	d0ad      	beq.n	8008764 <_printf_i+0x160>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	079b      	lsls	r3, r3, #30
 800880c:	d413      	bmi.n	8008836 <_printf_i+0x232>
 800880e:	68e0      	ldr	r0, [r4, #12]
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	4298      	cmp	r0, r3
 8008814:	bfb8      	it	lt
 8008816:	4618      	movlt	r0, r3
 8008818:	e7a6      	b.n	8008768 <_printf_i+0x164>
 800881a:	2301      	movs	r3, #1
 800881c:	4632      	mov	r2, r6
 800881e:	4649      	mov	r1, r9
 8008820:	4640      	mov	r0, r8
 8008822:	47d0      	blx	sl
 8008824:	3001      	adds	r0, #1
 8008826:	d09d      	beq.n	8008764 <_printf_i+0x160>
 8008828:	3501      	adds	r5, #1
 800882a:	68e3      	ldr	r3, [r4, #12]
 800882c:	9903      	ldr	r1, [sp, #12]
 800882e:	1a5b      	subs	r3, r3, r1
 8008830:	42ab      	cmp	r3, r5
 8008832:	dcf2      	bgt.n	800881a <_printf_i+0x216>
 8008834:	e7eb      	b.n	800880e <_printf_i+0x20a>
 8008836:	2500      	movs	r5, #0
 8008838:	f104 0619 	add.w	r6, r4, #25
 800883c:	e7f5      	b.n	800882a <_printf_i+0x226>
 800883e:	bf00      	nop
 8008840:	0800aaa2 	.word	0x0800aaa2
 8008844:	0800aab3 	.word	0x0800aab3

08008848 <std>:
 8008848:	2300      	movs	r3, #0
 800884a:	b510      	push	{r4, lr}
 800884c:	4604      	mov	r4, r0
 800884e:	e9c0 3300 	strd	r3, r3, [r0]
 8008852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008856:	6083      	str	r3, [r0, #8]
 8008858:	8181      	strh	r1, [r0, #12]
 800885a:	6643      	str	r3, [r0, #100]	; 0x64
 800885c:	81c2      	strh	r2, [r0, #14]
 800885e:	6183      	str	r3, [r0, #24]
 8008860:	4619      	mov	r1, r3
 8008862:	2208      	movs	r2, #8
 8008864:	305c      	adds	r0, #92	; 0x5c
 8008866:	f000 f8e2 	bl	8008a2e <memset>
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <std+0x38>)
 800886c:	6263      	str	r3, [r4, #36]	; 0x24
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <std+0x3c>)
 8008870:	62a3      	str	r3, [r4, #40]	; 0x28
 8008872:	4b05      	ldr	r3, [pc, #20]	; (8008888 <std+0x40>)
 8008874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <std+0x44>)
 8008878:	6224      	str	r4, [r4, #32]
 800887a:	6323      	str	r3, [r4, #48]	; 0x30
 800887c:	bd10      	pop	{r4, pc}
 800887e:	bf00      	nop
 8008880:	080089a9 	.word	0x080089a9
 8008884:	080089cb 	.word	0x080089cb
 8008888:	08008a03 	.word	0x08008a03
 800888c:	08008a27 	.word	0x08008a27

08008890 <stdio_exit_handler>:
 8008890:	4a02      	ldr	r2, [pc, #8]	; (800889c <stdio_exit_handler+0xc>)
 8008892:	4903      	ldr	r1, [pc, #12]	; (80088a0 <stdio_exit_handler+0x10>)
 8008894:	4803      	ldr	r0, [pc, #12]	; (80088a4 <stdio_exit_handler+0x14>)
 8008896:	f000 b869 	b.w	800896c <_fwalk_sglue>
 800889a:	bf00      	nop
 800889c:	2000001c 	.word	0x2000001c
 80088a0:	0800a2f1 	.word	0x0800a2f1
 80088a4:	20000028 	.word	0x20000028

080088a8 <cleanup_stdio>:
 80088a8:	6841      	ldr	r1, [r0, #4]
 80088aa:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <cleanup_stdio+0x34>)
 80088ac:	4299      	cmp	r1, r3
 80088ae:	b510      	push	{r4, lr}
 80088b0:	4604      	mov	r4, r0
 80088b2:	d001      	beq.n	80088b8 <cleanup_stdio+0x10>
 80088b4:	f001 fd1c 	bl	800a2f0 <_fflush_r>
 80088b8:	68a1      	ldr	r1, [r4, #8]
 80088ba:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <cleanup_stdio+0x38>)
 80088bc:	4299      	cmp	r1, r3
 80088be:	d002      	beq.n	80088c6 <cleanup_stdio+0x1e>
 80088c0:	4620      	mov	r0, r4
 80088c2:	f001 fd15 	bl	800a2f0 <_fflush_r>
 80088c6:	68e1      	ldr	r1, [r4, #12]
 80088c8:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <cleanup_stdio+0x3c>)
 80088ca:	4299      	cmp	r1, r3
 80088cc:	d004      	beq.n	80088d8 <cleanup_stdio+0x30>
 80088ce:	4620      	mov	r0, r4
 80088d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d4:	f001 bd0c 	b.w	800a2f0 <_fflush_r>
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	bf00      	nop
 80088dc:	2000447c 	.word	0x2000447c
 80088e0:	200044e4 	.word	0x200044e4
 80088e4:	2000454c 	.word	0x2000454c

080088e8 <global_stdio_init.part.0>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <global_stdio_init.part.0+0x30>)
 80088ec:	4c0b      	ldr	r4, [pc, #44]	; (800891c <global_stdio_init.part.0+0x34>)
 80088ee:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <global_stdio_init.part.0+0x38>)
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	4620      	mov	r0, r4
 80088f4:	2200      	movs	r2, #0
 80088f6:	2104      	movs	r1, #4
 80088f8:	f7ff ffa6 	bl	8008848 <std>
 80088fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008900:	2201      	movs	r2, #1
 8008902:	2109      	movs	r1, #9
 8008904:	f7ff ffa0 	bl	8008848 <std>
 8008908:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800890c:	2202      	movs	r2, #2
 800890e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008912:	2112      	movs	r1, #18
 8008914:	f7ff bf98 	b.w	8008848 <std>
 8008918:	200045b4 	.word	0x200045b4
 800891c:	2000447c 	.word	0x2000447c
 8008920:	08008891 	.word	0x08008891

08008924 <__sfp_lock_acquire>:
 8008924:	4801      	ldr	r0, [pc, #4]	; (800892c <__sfp_lock_acquire+0x8>)
 8008926:	f000 b955 	b.w	8008bd4 <__retarget_lock_acquire_recursive>
 800892a:	bf00      	nop
 800892c:	200045bd 	.word	0x200045bd

08008930 <__sfp_lock_release>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__sfp_lock_release+0x8>)
 8008932:	f000 b950 	b.w	8008bd6 <__retarget_lock_release_recursive>
 8008936:	bf00      	nop
 8008938:	200045bd 	.word	0x200045bd

0800893c <__sinit>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4604      	mov	r4, r0
 8008940:	f7ff fff0 	bl	8008924 <__sfp_lock_acquire>
 8008944:	6a23      	ldr	r3, [r4, #32]
 8008946:	b11b      	cbz	r3, 8008950 <__sinit+0x14>
 8008948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800894c:	f7ff bff0 	b.w	8008930 <__sfp_lock_release>
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <__sinit+0x28>)
 8008952:	6223      	str	r3, [r4, #32]
 8008954:	4b04      	ldr	r3, [pc, #16]	; (8008968 <__sinit+0x2c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f5      	bne.n	8008948 <__sinit+0xc>
 800895c:	f7ff ffc4 	bl	80088e8 <global_stdio_init.part.0>
 8008960:	e7f2      	b.n	8008948 <__sinit+0xc>
 8008962:	bf00      	nop
 8008964:	080088a9 	.word	0x080088a9
 8008968:	200045b4 	.word	0x200045b4

0800896c <_fwalk_sglue>:
 800896c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008970:	4607      	mov	r7, r0
 8008972:	4688      	mov	r8, r1
 8008974:	4614      	mov	r4, r2
 8008976:	2600      	movs	r6, #0
 8008978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800897c:	f1b9 0901 	subs.w	r9, r9, #1
 8008980:	d505      	bpl.n	800898e <_fwalk_sglue+0x22>
 8008982:	6824      	ldr	r4, [r4, #0]
 8008984:	2c00      	cmp	r4, #0
 8008986:	d1f7      	bne.n	8008978 <_fwalk_sglue+0xc>
 8008988:	4630      	mov	r0, r6
 800898a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898e:	89ab      	ldrh	r3, [r5, #12]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d907      	bls.n	80089a4 <_fwalk_sglue+0x38>
 8008994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008998:	3301      	adds	r3, #1
 800899a:	d003      	beq.n	80089a4 <_fwalk_sglue+0x38>
 800899c:	4629      	mov	r1, r5
 800899e:	4638      	mov	r0, r7
 80089a0:	47c0      	blx	r8
 80089a2:	4306      	orrs	r6, r0
 80089a4:	3568      	adds	r5, #104	; 0x68
 80089a6:	e7e9      	b.n	800897c <_fwalk_sglue+0x10>

080089a8 <__sread>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	f000 f8c2 	bl	8008b38 <_read_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	bfab      	itete	ge
 80089b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ba:	89a3      	ldrhlt	r3, [r4, #12]
 80089bc:	181b      	addge	r3, r3, r0
 80089be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c2:	bfac      	ite	ge
 80089c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089c6:	81a3      	strhlt	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__swrite>:
 80089ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ce:	461f      	mov	r7, r3
 80089d0:	898b      	ldrh	r3, [r1, #12]
 80089d2:	05db      	lsls	r3, r3, #23
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	4616      	mov	r6, r2
 80089da:	d505      	bpl.n	80089e8 <__swrite+0x1e>
 80089dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e0:	2302      	movs	r3, #2
 80089e2:	2200      	movs	r2, #0
 80089e4:	f000 f896 	bl	8008b14 <_lseek_r>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	4632      	mov	r2, r6
 80089f6:	463b      	mov	r3, r7
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	f000 b8ad 	b.w	8008b5c <_write_r>

08008a02 <__sseek>:
 8008a02:	b510      	push	{r4, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0a:	f000 f883 	bl	8008b14 <_lseek_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	bf15      	itete	ne
 8008a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strheq	r3, [r4, #12]
 8008a20:	bf18      	it	ne
 8008a22:	81a3      	strhne	r3, [r4, #12]
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <__sclose>:
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 b80d 	b.w	8008a48 <_close_r>

08008a2e <memset>:
 8008a2e:	4402      	add	r2, r0
 8008a30:	4603      	mov	r3, r0
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d100      	bne.n	8008a38 <memset+0xa>
 8008a36:	4770      	bx	lr
 8008a38:	f803 1b01 	strb.w	r1, [r3], #1
 8008a3c:	e7f9      	b.n	8008a32 <memset+0x4>
	...

08008a40 <_localeconv_r>:
 8008a40:	4800      	ldr	r0, [pc, #0]	; (8008a44 <_localeconv_r+0x4>)
 8008a42:	4770      	bx	lr
 8008a44:	20000168 	.word	0x20000168

08008a48 <_close_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d06      	ldr	r5, [pc, #24]	; (8008a64 <_close_r+0x1c>)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	602b      	str	r3, [r5, #0]
 8008a54:	f7f9 fe13 	bl	800267e <_close>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_close_r+0x1a>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_close_r+0x1a>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	200045b8 	.word	0x200045b8

08008a68 <_reclaim_reent>:
 8008a68:	4b29      	ldr	r3, [pc, #164]	; (8008b10 <_reclaim_reent+0xa8>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4283      	cmp	r3, r0
 8008a6e:	b570      	push	{r4, r5, r6, lr}
 8008a70:	4604      	mov	r4, r0
 8008a72:	d04b      	beq.n	8008b0c <_reclaim_reent+0xa4>
 8008a74:	69c3      	ldr	r3, [r0, #28]
 8008a76:	b143      	cbz	r3, 8008a8a <_reclaim_reent+0x22>
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d144      	bne.n	8008b08 <_reclaim_reent+0xa0>
 8008a7e:	69e3      	ldr	r3, [r4, #28]
 8008a80:	6819      	ldr	r1, [r3, #0]
 8008a82:	b111      	cbz	r1, 8008a8a <_reclaim_reent+0x22>
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 ff31 	bl	80098ec <_free_r>
 8008a8a:	6961      	ldr	r1, [r4, #20]
 8008a8c:	b111      	cbz	r1, 8008a94 <_reclaim_reent+0x2c>
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 ff2c 	bl	80098ec <_free_r>
 8008a94:	69e1      	ldr	r1, [r4, #28]
 8008a96:	b111      	cbz	r1, 8008a9e <_reclaim_reent+0x36>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 ff27 	bl	80098ec <_free_r>
 8008a9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008aa0:	b111      	cbz	r1, 8008aa8 <_reclaim_reent+0x40>
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 ff22 	bl	80098ec <_free_r>
 8008aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aaa:	b111      	cbz	r1, 8008ab2 <_reclaim_reent+0x4a>
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 ff1d 	bl	80098ec <_free_r>
 8008ab2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ab4:	b111      	cbz	r1, 8008abc <_reclaim_reent+0x54>
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 ff18 	bl	80098ec <_free_r>
 8008abc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008abe:	b111      	cbz	r1, 8008ac6 <_reclaim_reent+0x5e>
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 ff13 	bl	80098ec <_free_r>
 8008ac6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008ac8:	b111      	cbz	r1, 8008ad0 <_reclaim_reent+0x68>
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 ff0e 	bl	80098ec <_free_r>
 8008ad0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008ad2:	b111      	cbz	r1, 8008ada <_reclaim_reent+0x72>
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 ff09 	bl	80098ec <_free_r>
 8008ada:	6a23      	ldr	r3, [r4, #32]
 8008adc:	b1b3      	cbz	r3, 8008b0c <_reclaim_reent+0xa4>
 8008ade:	4620      	mov	r0, r4
 8008ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ae4:	4718      	bx	r3
 8008ae6:	5949      	ldr	r1, [r1, r5]
 8008ae8:	b941      	cbnz	r1, 8008afc <_reclaim_reent+0x94>
 8008aea:	3504      	adds	r5, #4
 8008aec:	69e3      	ldr	r3, [r4, #28]
 8008aee:	2d80      	cmp	r5, #128	; 0x80
 8008af0:	68d9      	ldr	r1, [r3, #12]
 8008af2:	d1f8      	bne.n	8008ae6 <_reclaim_reent+0x7e>
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 fef9 	bl	80098ec <_free_r>
 8008afa:	e7c0      	b.n	8008a7e <_reclaim_reent+0x16>
 8008afc:	680e      	ldr	r6, [r1, #0]
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 fef4 	bl	80098ec <_free_r>
 8008b04:	4631      	mov	r1, r6
 8008b06:	e7ef      	b.n	8008ae8 <_reclaim_reent+0x80>
 8008b08:	2500      	movs	r5, #0
 8008b0a:	e7ef      	b.n	8008aec <_reclaim_reent+0x84>
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
 8008b0e:	bf00      	nop
 8008b10:	20000074 	.word	0x20000074

08008b14 <_lseek_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4d07      	ldr	r5, [pc, #28]	; (8008b34 <_lseek_r+0x20>)
 8008b18:	4604      	mov	r4, r0
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	2200      	movs	r2, #0
 8008b20:	602a      	str	r2, [r5, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f7f9 fdd2 	bl	80026cc <_lseek>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_lseek_r+0x1e>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_lseek_r+0x1e>
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	200045b8 	.word	0x200045b8

08008b38 <_read_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d07      	ldr	r5, [pc, #28]	; (8008b58 <_read_r+0x20>)
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	4608      	mov	r0, r1
 8008b40:	4611      	mov	r1, r2
 8008b42:	2200      	movs	r2, #0
 8008b44:	602a      	str	r2, [r5, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	f7f9 fd60 	bl	800260c <_read>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_read_r+0x1e>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_read_r+0x1e>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	200045b8 	.word	0x200045b8

08008b5c <_write_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d07      	ldr	r5, [pc, #28]	; (8008b7c <_write_r+0x20>)
 8008b60:	4604      	mov	r4, r0
 8008b62:	4608      	mov	r0, r1
 8008b64:	4611      	mov	r1, r2
 8008b66:	2200      	movs	r2, #0
 8008b68:	602a      	str	r2, [r5, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f7f9 fd6b 	bl	8002646 <_write>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_write_r+0x1e>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_write_r+0x1e>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	200045b8 	.word	0x200045b8

08008b80 <__errno>:
 8008b80:	4b01      	ldr	r3, [pc, #4]	; (8008b88 <__errno+0x8>)
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000074 	.word	0x20000074

08008b8c <__libc_init_array>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	4d0d      	ldr	r5, [pc, #52]	; (8008bc4 <__libc_init_array+0x38>)
 8008b90:	4c0d      	ldr	r4, [pc, #52]	; (8008bc8 <__libc_init_array+0x3c>)
 8008b92:	1b64      	subs	r4, r4, r5
 8008b94:	10a4      	asrs	r4, r4, #2
 8008b96:	2600      	movs	r6, #0
 8008b98:	42a6      	cmp	r6, r4
 8008b9a:	d109      	bne.n	8008bb0 <__libc_init_array+0x24>
 8008b9c:	4d0b      	ldr	r5, [pc, #44]	; (8008bcc <__libc_init_array+0x40>)
 8008b9e:	4c0c      	ldr	r4, [pc, #48]	; (8008bd0 <__libc_init_array+0x44>)
 8008ba0:	f001 feec 	bl	800a97c <_init>
 8008ba4:	1b64      	subs	r4, r4, r5
 8008ba6:	10a4      	asrs	r4, r4, #2
 8008ba8:	2600      	movs	r6, #0
 8008baa:	42a6      	cmp	r6, r4
 8008bac:	d105      	bne.n	8008bba <__libc_init_array+0x2e>
 8008bae:	bd70      	pop	{r4, r5, r6, pc}
 8008bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb4:	4798      	blx	r3
 8008bb6:	3601      	adds	r6, #1
 8008bb8:	e7ee      	b.n	8008b98 <__libc_init_array+0xc>
 8008bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bbe:	4798      	blx	r3
 8008bc0:	3601      	adds	r6, #1
 8008bc2:	e7f2      	b.n	8008baa <__libc_init_array+0x1e>
 8008bc4:	0800ae0c 	.word	0x0800ae0c
 8008bc8:	0800ae0c 	.word	0x0800ae0c
 8008bcc:	0800ae0c 	.word	0x0800ae0c
 8008bd0:	0800ae10 	.word	0x0800ae10

08008bd4 <__retarget_lock_acquire_recursive>:
 8008bd4:	4770      	bx	lr

08008bd6 <__retarget_lock_release_recursive>:
 8008bd6:	4770      	bx	lr

08008bd8 <memcpy>:
 8008bd8:	440a      	add	r2, r1
 8008bda:	4291      	cmp	r1, r2
 8008bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008be0:	d100      	bne.n	8008be4 <memcpy+0xc>
 8008be2:	4770      	bx	lr
 8008be4:	b510      	push	{r4, lr}
 8008be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bee:	4291      	cmp	r1, r2
 8008bf0:	d1f9      	bne.n	8008be6 <memcpy+0xe>
 8008bf2:	bd10      	pop	{r4, pc}

08008bf4 <quorem>:
 8008bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf8:	6903      	ldr	r3, [r0, #16]
 8008bfa:	690c      	ldr	r4, [r1, #16]
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	4607      	mov	r7, r0
 8008c00:	db7e      	blt.n	8008d00 <quorem+0x10c>
 8008c02:	3c01      	subs	r4, #1
 8008c04:	f101 0814 	add.w	r8, r1, #20
 8008c08:	f100 0514 	add.w	r5, r0, #20
 8008c0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c26:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c2a:	d331      	bcc.n	8008c90 <quorem+0x9c>
 8008c2c:	f04f 0e00 	mov.w	lr, #0
 8008c30:	4640      	mov	r0, r8
 8008c32:	46ac      	mov	ip, r5
 8008c34:	46f2      	mov	sl, lr
 8008c36:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c3a:	b293      	uxth	r3, r2
 8008c3c:	fb06 e303 	mla	r3, r6, r3, lr
 8008c40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c44:	0c1a      	lsrs	r2, r3, #16
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	ebaa 0303 	sub.w	r3, sl, r3
 8008c4c:	f8dc a000 	ldr.w	sl, [ip]
 8008c50:	fa13 f38a 	uxtah	r3, r3, sl
 8008c54:	fb06 220e 	mla	r2, r6, lr, r2
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	9b00      	ldr	r3, [sp, #0]
 8008c5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c60:	b292      	uxth	r2, r2
 8008c62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c6a:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c6e:	4581      	cmp	r9, r0
 8008c70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c74:	f84c 3b04 	str.w	r3, [ip], #4
 8008c78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c7c:	d2db      	bcs.n	8008c36 <quorem+0x42>
 8008c7e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c82:	b92b      	cbnz	r3, 8008c90 <quorem+0x9c>
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	3b04      	subs	r3, #4
 8008c88:	429d      	cmp	r5, r3
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	d32c      	bcc.n	8008ce8 <quorem+0xf4>
 8008c8e:	613c      	str	r4, [r7, #16]
 8008c90:	4638      	mov	r0, r7
 8008c92:	f001 f9a7 	bl	8009fe4 <__mcmp>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	db22      	blt.n	8008ce0 <quorem+0xec>
 8008c9a:	3601      	adds	r6, #1
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ca4:	f8d1 c000 	ldr.w	ip, [r1]
 8008ca8:	b293      	uxth	r3, r2
 8008caa:	1ac3      	subs	r3, r0, r3
 8008cac:	0c12      	lsrs	r2, r2, #16
 8008cae:	fa13 f38c 	uxtah	r3, r3, ip
 8008cb2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008cb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cc0:	45c1      	cmp	r9, r8
 8008cc2:	f841 3b04 	str.w	r3, [r1], #4
 8008cc6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008cca:	d2e9      	bcs.n	8008ca0 <quorem+0xac>
 8008ccc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cd4:	b922      	cbnz	r2, 8008ce0 <quorem+0xec>
 8008cd6:	3b04      	subs	r3, #4
 8008cd8:	429d      	cmp	r5, r3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	d30a      	bcc.n	8008cf4 <quorem+0x100>
 8008cde:	613c      	str	r4, [r7, #16]
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	b003      	add	sp, #12
 8008ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	3b04      	subs	r3, #4
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	d1ce      	bne.n	8008c8e <quorem+0x9a>
 8008cf0:	3c01      	subs	r4, #1
 8008cf2:	e7c9      	b.n	8008c88 <quorem+0x94>
 8008cf4:	6812      	ldr	r2, [r2, #0]
 8008cf6:	3b04      	subs	r3, #4
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	d1f0      	bne.n	8008cde <quorem+0xea>
 8008cfc:	3c01      	subs	r4, #1
 8008cfe:	e7eb      	b.n	8008cd8 <quorem+0xe4>
 8008d00:	2000      	movs	r0, #0
 8008d02:	e7ee      	b.n	8008ce2 <quorem+0xee>
 8008d04:	0000      	movs	r0, r0
	...

08008d08 <_dtoa_r>:
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	ed2d 8b04 	vpush	{d8-d9}
 8008d10:	69c5      	ldr	r5, [r0, #28]
 8008d12:	b093      	sub	sp, #76	; 0x4c
 8008d14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d18:	ec57 6b10 	vmov	r6, r7, d0
 8008d1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d20:	9107      	str	r1, [sp, #28]
 8008d22:	4604      	mov	r4, r0
 8008d24:	920a      	str	r2, [sp, #40]	; 0x28
 8008d26:	930d      	str	r3, [sp, #52]	; 0x34
 8008d28:	b975      	cbnz	r5, 8008d48 <_dtoa_r+0x40>
 8008d2a:	2010      	movs	r0, #16
 8008d2c:	f000 fe2a 	bl	8009984 <malloc>
 8008d30:	4602      	mov	r2, r0
 8008d32:	61e0      	str	r0, [r4, #28]
 8008d34:	b920      	cbnz	r0, 8008d40 <_dtoa_r+0x38>
 8008d36:	4bae      	ldr	r3, [pc, #696]	; (8008ff0 <_dtoa_r+0x2e8>)
 8008d38:	21ef      	movs	r1, #239	; 0xef
 8008d3a:	48ae      	ldr	r0, [pc, #696]	; (8008ff4 <_dtoa_r+0x2ec>)
 8008d3c:	f001 fb10 	bl	800a360 <__assert_func>
 8008d40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d44:	6005      	str	r5, [r0, #0]
 8008d46:	60c5      	str	r5, [r0, #12]
 8008d48:	69e3      	ldr	r3, [r4, #28]
 8008d4a:	6819      	ldr	r1, [r3, #0]
 8008d4c:	b151      	cbz	r1, 8008d64 <_dtoa_r+0x5c>
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	604a      	str	r2, [r1, #4]
 8008d52:	2301      	movs	r3, #1
 8008d54:	4093      	lsls	r3, r2
 8008d56:	608b      	str	r3, [r1, #8]
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 ff07 	bl	8009b6c <_Bfree>
 8008d5e:	69e3      	ldr	r3, [r4, #28]
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	1e3b      	subs	r3, r7, #0
 8008d66:	bfbb      	ittet	lt
 8008d68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d6c:	9303      	strlt	r3, [sp, #12]
 8008d6e:	2300      	movge	r3, #0
 8008d70:	2201      	movlt	r2, #1
 8008d72:	bfac      	ite	ge
 8008d74:	f8c8 3000 	strge.w	r3, [r8]
 8008d78:	f8c8 2000 	strlt.w	r2, [r8]
 8008d7c:	4b9e      	ldr	r3, [pc, #632]	; (8008ff8 <_dtoa_r+0x2f0>)
 8008d7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d82:	ea33 0308 	bics.w	r3, r3, r8
 8008d86:	d11b      	bne.n	8008dc0 <_dtoa_r+0xb8>
 8008d88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008d94:	4333      	orrs	r3, r6
 8008d96:	f000 8593 	beq.w	80098c0 <_dtoa_r+0xbb8>
 8008d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d9c:	b963      	cbnz	r3, 8008db8 <_dtoa_r+0xb0>
 8008d9e:	4b97      	ldr	r3, [pc, #604]	; (8008ffc <_dtoa_r+0x2f4>)
 8008da0:	e027      	b.n	8008df2 <_dtoa_r+0xea>
 8008da2:	4b97      	ldr	r3, [pc, #604]	; (8009000 <_dtoa_r+0x2f8>)
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	9800      	ldr	r0, [sp, #0]
 8008dae:	b013      	add	sp, #76	; 0x4c
 8008db0:	ecbd 8b04 	vpop	{d8-d9}
 8008db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db8:	4b90      	ldr	r3, [pc, #576]	; (8008ffc <_dtoa_r+0x2f4>)
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	3303      	adds	r3, #3
 8008dbe:	e7f3      	b.n	8008da8 <_dtoa_r+0xa0>
 8008dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	ec51 0b17 	vmov	r0, r1, d7
 8008dca:	eeb0 8a47 	vmov.f32	s16, s14
 8008dce:	eef0 8a67 	vmov.f32	s17, s15
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f7f7 fe88 	bl	8000ae8 <__aeabi_dcmpeq>
 8008dd8:	4681      	mov	r9, r0
 8008dda:	b160      	cbz	r0, 8008df6 <_dtoa_r+0xee>
 8008ddc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dde:	2301      	movs	r3, #1
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8568 	beq.w	80098ba <_dtoa_r+0xbb2>
 8008dea:	4b86      	ldr	r3, [pc, #536]	; (8009004 <_dtoa_r+0x2fc>)
 8008dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	e7da      	b.n	8008dac <_dtoa_r+0xa4>
 8008df6:	aa10      	add	r2, sp, #64	; 0x40
 8008df8:	a911      	add	r1, sp, #68	; 0x44
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	eeb0 0a48 	vmov.f32	s0, s16
 8008e00:	eef0 0a68 	vmov.f32	s1, s17
 8008e04:	f001 f994 	bl	800a130 <__d2b>
 8008e08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	2d00      	cmp	r5, #0
 8008e10:	d07f      	beq.n	8008f12 <_dtoa_r+0x20a>
 8008e12:	ee18 3a90 	vmov	r3, s17
 8008e16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008e1e:	ec51 0b18 	vmov	r0, r1, d8
 8008e22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008e2e:	4619      	mov	r1, r3
 8008e30:	2200      	movs	r2, #0
 8008e32:	4b75      	ldr	r3, [pc, #468]	; (8009008 <_dtoa_r+0x300>)
 8008e34:	f7f7 fa38 	bl	80002a8 <__aeabi_dsub>
 8008e38:	a367      	add	r3, pc, #412	; (adr r3, 8008fd8 <_dtoa_r+0x2d0>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f7f7 fbeb 	bl	8000618 <__aeabi_dmul>
 8008e42:	a367      	add	r3, pc, #412	; (adr r3, 8008fe0 <_dtoa_r+0x2d8>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fa30 	bl	80002ac <__adddf3>
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	4628      	mov	r0, r5
 8008e50:	460f      	mov	r7, r1
 8008e52:	f7f7 fb77 	bl	8000544 <__aeabi_i2d>
 8008e56:	a364      	add	r3, pc, #400	; (adr r3, 8008fe8 <_dtoa_r+0x2e0>)
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f7f7 fbdc 	bl	8000618 <__aeabi_dmul>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4630      	mov	r0, r6
 8008e66:	4639      	mov	r1, r7
 8008e68:	f7f7 fa20 	bl	80002ac <__adddf3>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	f7f7 fe82 	bl	8000b78 <__aeabi_d2iz>
 8008e74:	2200      	movs	r2, #0
 8008e76:	4683      	mov	fp, r0
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	4639      	mov	r1, r7
 8008e7e:	f7f7 fe3d 	bl	8000afc <__aeabi_dcmplt>
 8008e82:	b148      	cbz	r0, 8008e98 <_dtoa_r+0x190>
 8008e84:	4658      	mov	r0, fp
 8008e86:	f7f7 fb5d 	bl	8000544 <__aeabi_i2d>
 8008e8a:	4632      	mov	r2, r6
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	f7f7 fe2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e92:	b908      	cbnz	r0, 8008e98 <_dtoa_r+0x190>
 8008e94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e98:	f1bb 0f16 	cmp.w	fp, #22
 8008e9c:	d857      	bhi.n	8008f4e <_dtoa_r+0x246>
 8008e9e:	4b5b      	ldr	r3, [pc, #364]	; (800900c <_dtoa_r+0x304>)
 8008ea0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	ec51 0b18 	vmov	r0, r1, d8
 8008eac:	f7f7 fe26 	bl	8000afc <__aeabi_dcmplt>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d04e      	beq.n	8008f52 <_dtoa_r+0x24a>
 8008eb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008eb8:	2300      	movs	r3, #0
 8008eba:	930c      	str	r3, [sp, #48]	; 0x30
 8008ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ebe:	1b5b      	subs	r3, r3, r5
 8008ec0:	1e5a      	subs	r2, r3, #1
 8008ec2:	bf45      	ittet	mi
 8008ec4:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ec8:	9305      	strmi	r3, [sp, #20]
 8008eca:	2300      	movpl	r3, #0
 8008ecc:	2300      	movmi	r3, #0
 8008ece:	9206      	str	r2, [sp, #24]
 8008ed0:	bf54      	ite	pl
 8008ed2:	9305      	strpl	r3, [sp, #20]
 8008ed4:	9306      	strmi	r3, [sp, #24]
 8008ed6:	f1bb 0f00 	cmp.w	fp, #0
 8008eda:	db3c      	blt.n	8008f56 <_dtoa_r+0x24e>
 8008edc:	9b06      	ldr	r3, [sp, #24]
 8008ede:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008ee2:	445b      	add	r3, fp
 8008ee4:	9306      	str	r3, [sp, #24]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9308      	str	r3, [sp, #32]
 8008eea:	9b07      	ldr	r3, [sp, #28]
 8008eec:	2b09      	cmp	r3, #9
 8008eee:	d868      	bhi.n	8008fc2 <_dtoa_r+0x2ba>
 8008ef0:	2b05      	cmp	r3, #5
 8008ef2:	bfc4      	itt	gt
 8008ef4:	3b04      	subgt	r3, #4
 8008ef6:	9307      	strgt	r3, [sp, #28]
 8008ef8:	9b07      	ldr	r3, [sp, #28]
 8008efa:	f1a3 0302 	sub.w	r3, r3, #2
 8008efe:	bfcc      	ite	gt
 8008f00:	2500      	movgt	r5, #0
 8008f02:	2501      	movle	r5, #1
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	f200 8085 	bhi.w	8009014 <_dtoa_r+0x30c>
 8008f0a:	e8df f003 	tbb	[pc, r3]
 8008f0e:	3b2e      	.short	0x3b2e
 8008f10:	5839      	.short	0x5839
 8008f12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f16:	441d      	add	r5, r3
 8008f18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	bfc1      	itttt	gt
 8008f20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f24:	fa08 f803 	lslgt.w	r8, r8, r3
 8008f28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008f2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008f30:	bfd6      	itet	le
 8008f32:	f1c3 0320 	rsble	r3, r3, #32
 8008f36:	ea48 0003 	orrgt.w	r0, r8, r3
 8008f3a:	fa06 f003 	lslle.w	r0, r6, r3
 8008f3e:	f7f7 faf1 	bl	8000524 <__aeabi_ui2d>
 8008f42:	2201      	movs	r2, #1
 8008f44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008f48:	3d01      	subs	r5, #1
 8008f4a:	920e      	str	r2, [sp, #56]	; 0x38
 8008f4c:	e76f      	b.n	8008e2e <_dtoa_r+0x126>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e7b3      	b.n	8008eba <_dtoa_r+0x1b2>
 8008f52:	900c      	str	r0, [sp, #48]	; 0x30
 8008f54:	e7b2      	b.n	8008ebc <_dtoa_r+0x1b4>
 8008f56:	9b05      	ldr	r3, [sp, #20]
 8008f58:	eba3 030b 	sub.w	r3, r3, fp
 8008f5c:	9305      	str	r3, [sp, #20]
 8008f5e:	f1cb 0300 	rsb	r3, fp, #0
 8008f62:	9308      	str	r3, [sp, #32]
 8008f64:	2300      	movs	r3, #0
 8008f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f68:	e7bf      	b.n	8008eea <_dtoa_r+0x1e2>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dc52      	bgt.n	800901a <_dtoa_r+0x312>
 8008f74:	2301      	movs	r3, #1
 8008f76:	9301      	str	r3, [sp, #4]
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f7e:	e00b      	b.n	8008f98 <_dtoa_r+0x290>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e7f3      	b.n	8008f6c <_dtoa_r+0x264>
 8008f84:	2300      	movs	r3, #0
 8008f86:	9309      	str	r3, [sp, #36]	; 0x24
 8008f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f8a:	445b      	add	r3, fp
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	bfb8      	it	lt
 8008f96:	2301      	movlt	r3, #1
 8008f98:	69e0      	ldr	r0, [r4, #28]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	2204      	movs	r2, #4
 8008f9e:	f102 0614 	add.w	r6, r2, #20
 8008fa2:	429e      	cmp	r6, r3
 8008fa4:	d93d      	bls.n	8009022 <_dtoa_r+0x31a>
 8008fa6:	6041      	str	r1, [r0, #4]
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fd9f 	bl	8009aec <_Balloc>
 8008fae:	9000      	str	r0, [sp, #0]
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d139      	bne.n	8009028 <_dtoa_r+0x320>
 8008fb4:	4b16      	ldr	r3, [pc, #88]	; (8009010 <_dtoa_r+0x308>)
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	f240 11af 	movw	r1, #431	; 0x1af
 8008fbc:	e6bd      	b.n	8008d3a <_dtoa_r+0x32>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e7e1      	b.n	8008f86 <_dtoa_r+0x27e>
 8008fc2:	2501      	movs	r5, #1
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9307      	str	r3, [sp, #28]
 8008fc8:	9509      	str	r5, [sp, #36]	; 0x24
 8008fca:	f04f 33ff 	mov.w	r3, #4294967295
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	9304      	str	r3, [sp, #16]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2312      	movs	r3, #18
 8008fd6:	e7d1      	b.n	8008f7c <_dtoa_r+0x274>
 8008fd8:	636f4361 	.word	0x636f4361
 8008fdc:	3fd287a7 	.word	0x3fd287a7
 8008fe0:	8b60c8b3 	.word	0x8b60c8b3
 8008fe4:	3fc68a28 	.word	0x3fc68a28
 8008fe8:	509f79fb 	.word	0x509f79fb
 8008fec:	3fd34413 	.word	0x3fd34413
 8008ff0:	0800aad1 	.word	0x0800aad1
 8008ff4:	0800aae8 	.word	0x0800aae8
 8008ff8:	7ff00000 	.word	0x7ff00000
 8008ffc:	0800aacd 	.word	0x0800aacd
 8009000:	0800aac4 	.word	0x0800aac4
 8009004:	0800aaa1 	.word	0x0800aaa1
 8009008:	3ff80000 	.word	0x3ff80000
 800900c:	0800abd8 	.word	0x0800abd8
 8009010:	0800ab40 	.word	0x0800ab40
 8009014:	2301      	movs	r3, #1
 8009016:	9309      	str	r3, [sp, #36]	; 0x24
 8009018:	e7d7      	b.n	8008fca <_dtoa_r+0x2c2>
 800901a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	9304      	str	r3, [sp, #16]
 8009020:	e7ba      	b.n	8008f98 <_dtoa_r+0x290>
 8009022:	3101      	adds	r1, #1
 8009024:	0052      	lsls	r2, r2, #1
 8009026:	e7ba      	b.n	8008f9e <_dtoa_r+0x296>
 8009028:	69e3      	ldr	r3, [r4, #28]
 800902a:	9a00      	ldr	r2, [sp, #0]
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	9b04      	ldr	r3, [sp, #16]
 8009030:	2b0e      	cmp	r3, #14
 8009032:	f200 80a8 	bhi.w	8009186 <_dtoa_r+0x47e>
 8009036:	2d00      	cmp	r5, #0
 8009038:	f000 80a5 	beq.w	8009186 <_dtoa_r+0x47e>
 800903c:	f1bb 0f00 	cmp.w	fp, #0
 8009040:	dd38      	ble.n	80090b4 <_dtoa_r+0x3ac>
 8009042:	4bc0      	ldr	r3, [pc, #768]	; (8009344 <_dtoa_r+0x63c>)
 8009044:	f00b 020f 	and.w	r2, fp, #15
 8009048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800904c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009050:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009054:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009058:	d019      	beq.n	800908e <_dtoa_r+0x386>
 800905a:	4bbb      	ldr	r3, [pc, #748]	; (8009348 <_dtoa_r+0x640>)
 800905c:	ec51 0b18 	vmov	r0, r1, d8
 8009060:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009064:	f7f7 fc02 	bl	800086c <__aeabi_ddiv>
 8009068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800906c:	f008 080f 	and.w	r8, r8, #15
 8009070:	2503      	movs	r5, #3
 8009072:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009348 <_dtoa_r+0x640>
 8009076:	f1b8 0f00 	cmp.w	r8, #0
 800907a:	d10a      	bne.n	8009092 <_dtoa_r+0x38a>
 800907c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009080:	4632      	mov	r2, r6
 8009082:	463b      	mov	r3, r7
 8009084:	f7f7 fbf2 	bl	800086c <__aeabi_ddiv>
 8009088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800908c:	e02b      	b.n	80090e6 <_dtoa_r+0x3de>
 800908e:	2502      	movs	r5, #2
 8009090:	e7ef      	b.n	8009072 <_dtoa_r+0x36a>
 8009092:	f018 0f01 	tst.w	r8, #1
 8009096:	d008      	beq.n	80090aa <_dtoa_r+0x3a2>
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80090a0:	f7f7 faba 	bl	8000618 <__aeabi_dmul>
 80090a4:	3501      	adds	r5, #1
 80090a6:	4606      	mov	r6, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80090ae:	f109 0908 	add.w	r9, r9, #8
 80090b2:	e7e0      	b.n	8009076 <_dtoa_r+0x36e>
 80090b4:	f000 809f 	beq.w	80091f6 <_dtoa_r+0x4ee>
 80090b8:	f1cb 0600 	rsb	r6, fp, #0
 80090bc:	4ba1      	ldr	r3, [pc, #644]	; (8009344 <_dtoa_r+0x63c>)
 80090be:	4fa2      	ldr	r7, [pc, #648]	; (8009348 <_dtoa_r+0x640>)
 80090c0:	f006 020f 	and.w	r2, r6, #15
 80090c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	ec51 0b18 	vmov	r0, r1, d8
 80090d0:	f7f7 faa2 	bl	8000618 <__aeabi_dmul>
 80090d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090d8:	1136      	asrs	r6, r6, #4
 80090da:	2300      	movs	r3, #0
 80090dc:	2502      	movs	r5, #2
 80090de:	2e00      	cmp	r6, #0
 80090e0:	d17e      	bne.n	80091e0 <_dtoa_r+0x4d8>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1d0      	bne.n	8009088 <_dtoa_r+0x380>
 80090e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 8084 	beq.w	80091fa <_dtoa_r+0x4f2>
 80090f2:	4b96      	ldr	r3, [pc, #600]	; (800934c <_dtoa_r+0x644>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	4640      	mov	r0, r8
 80090f8:	4649      	mov	r1, r9
 80090fa:	f7f7 fcff 	bl	8000afc <__aeabi_dcmplt>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d07b      	beq.n	80091fa <_dtoa_r+0x4f2>
 8009102:	9b04      	ldr	r3, [sp, #16]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d078      	beq.n	80091fa <_dtoa_r+0x4f2>
 8009108:	9b01      	ldr	r3, [sp, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd39      	ble.n	8009182 <_dtoa_r+0x47a>
 800910e:	4b90      	ldr	r3, [pc, #576]	; (8009350 <_dtoa_r+0x648>)
 8009110:	2200      	movs	r2, #0
 8009112:	4640      	mov	r0, r8
 8009114:	4649      	mov	r1, r9
 8009116:	f7f7 fa7f 	bl	8000618 <__aeabi_dmul>
 800911a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800911e:	9e01      	ldr	r6, [sp, #4]
 8009120:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009124:	3501      	adds	r5, #1
 8009126:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800912a:	4628      	mov	r0, r5
 800912c:	f7f7 fa0a 	bl	8000544 <__aeabi_i2d>
 8009130:	4642      	mov	r2, r8
 8009132:	464b      	mov	r3, r9
 8009134:	f7f7 fa70 	bl	8000618 <__aeabi_dmul>
 8009138:	4b86      	ldr	r3, [pc, #536]	; (8009354 <_dtoa_r+0x64c>)
 800913a:	2200      	movs	r2, #0
 800913c:	f7f7 f8b6 	bl	80002ac <__adddf3>
 8009140:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009148:	9303      	str	r3, [sp, #12]
 800914a:	2e00      	cmp	r6, #0
 800914c:	d158      	bne.n	8009200 <_dtoa_r+0x4f8>
 800914e:	4b82      	ldr	r3, [pc, #520]	; (8009358 <_dtoa_r+0x650>)
 8009150:	2200      	movs	r2, #0
 8009152:	4640      	mov	r0, r8
 8009154:	4649      	mov	r1, r9
 8009156:	f7f7 f8a7 	bl	80002a8 <__aeabi_dsub>
 800915a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800915e:	4680      	mov	r8, r0
 8009160:	4689      	mov	r9, r1
 8009162:	f7f7 fce9 	bl	8000b38 <__aeabi_dcmpgt>
 8009166:	2800      	cmp	r0, #0
 8009168:	f040 8296 	bne.w	8009698 <_dtoa_r+0x990>
 800916c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009170:	4640      	mov	r0, r8
 8009172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009176:	4649      	mov	r1, r9
 8009178:	f7f7 fcc0 	bl	8000afc <__aeabi_dcmplt>
 800917c:	2800      	cmp	r0, #0
 800917e:	f040 8289 	bne.w	8009694 <_dtoa_r+0x98c>
 8009182:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009188:	2b00      	cmp	r3, #0
 800918a:	f2c0 814e 	blt.w	800942a <_dtoa_r+0x722>
 800918e:	f1bb 0f0e 	cmp.w	fp, #14
 8009192:	f300 814a 	bgt.w	800942a <_dtoa_r+0x722>
 8009196:	4b6b      	ldr	r3, [pc, #428]	; (8009344 <_dtoa_r+0x63c>)
 8009198:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800919c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f280 80dc 	bge.w	8009360 <_dtoa_r+0x658>
 80091a8:	9b04      	ldr	r3, [sp, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f300 80d8 	bgt.w	8009360 <_dtoa_r+0x658>
 80091b0:	f040 826f 	bne.w	8009692 <_dtoa_r+0x98a>
 80091b4:	4b68      	ldr	r3, [pc, #416]	; (8009358 <_dtoa_r+0x650>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	4640      	mov	r0, r8
 80091ba:	4649      	mov	r1, r9
 80091bc:	f7f7 fa2c 	bl	8000618 <__aeabi_dmul>
 80091c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091c4:	f7f7 fcae 	bl	8000b24 <__aeabi_dcmpge>
 80091c8:	9e04      	ldr	r6, [sp, #16]
 80091ca:	4637      	mov	r7, r6
 80091cc:	2800      	cmp	r0, #0
 80091ce:	f040 8245 	bne.w	800965c <_dtoa_r+0x954>
 80091d2:	9d00      	ldr	r5, [sp, #0]
 80091d4:	2331      	movs	r3, #49	; 0x31
 80091d6:	f805 3b01 	strb.w	r3, [r5], #1
 80091da:	f10b 0b01 	add.w	fp, fp, #1
 80091de:	e241      	b.n	8009664 <_dtoa_r+0x95c>
 80091e0:	07f2      	lsls	r2, r6, #31
 80091e2:	d505      	bpl.n	80091f0 <_dtoa_r+0x4e8>
 80091e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e8:	f7f7 fa16 	bl	8000618 <__aeabi_dmul>
 80091ec:	3501      	adds	r5, #1
 80091ee:	2301      	movs	r3, #1
 80091f0:	1076      	asrs	r6, r6, #1
 80091f2:	3708      	adds	r7, #8
 80091f4:	e773      	b.n	80090de <_dtoa_r+0x3d6>
 80091f6:	2502      	movs	r5, #2
 80091f8:	e775      	b.n	80090e6 <_dtoa_r+0x3de>
 80091fa:	9e04      	ldr	r6, [sp, #16]
 80091fc:	465f      	mov	r7, fp
 80091fe:	e792      	b.n	8009126 <_dtoa_r+0x41e>
 8009200:	9900      	ldr	r1, [sp, #0]
 8009202:	4b50      	ldr	r3, [pc, #320]	; (8009344 <_dtoa_r+0x63c>)
 8009204:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009208:	4431      	add	r1, r6
 800920a:	9102      	str	r1, [sp, #8]
 800920c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800920e:	eeb0 9a47 	vmov.f32	s18, s14
 8009212:	eef0 9a67 	vmov.f32	s19, s15
 8009216:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800921a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800921e:	2900      	cmp	r1, #0
 8009220:	d044      	beq.n	80092ac <_dtoa_r+0x5a4>
 8009222:	494e      	ldr	r1, [pc, #312]	; (800935c <_dtoa_r+0x654>)
 8009224:	2000      	movs	r0, #0
 8009226:	f7f7 fb21 	bl	800086c <__aeabi_ddiv>
 800922a:	ec53 2b19 	vmov	r2, r3, d9
 800922e:	f7f7 f83b 	bl	80002a8 <__aeabi_dsub>
 8009232:	9d00      	ldr	r5, [sp, #0]
 8009234:	ec41 0b19 	vmov	d9, r0, r1
 8009238:	4649      	mov	r1, r9
 800923a:	4640      	mov	r0, r8
 800923c:	f7f7 fc9c 	bl	8000b78 <__aeabi_d2iz>
 8009240:	4606      	mov	r6, r0
 8009242:	f7f7 f97f 	bl	8000544 <__aeabi_i2d>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	f7f7 f82b 	bl	80002a8 <__aeabi_dsub>
 8009252:	3630      	adds	r6, #48	; 0x30
 8009254:	f805 6b01 	strb.w	r6, [r5], #1
 8009258:	ec53 2b19 	vmov	r2, r3, d9
 800925c:	4680      	mov	r8, r0
 800925e:	4689      	mov	r9, r1
 8009260:	f7f7 fc4c 	bl	8000afc <__aeabi_dcmplt>
 8009264:	2800      	cmp	r0, #0
 8009266:	d164      	bne.n	8009332 <_dtoa_r+0x62a>
 8009268:	4642      	mov	r2, r8
 800926a:	464b      	mov	r3, r9
 800926c:	4937      	ldr	r1, [pc, #220]	; (800934c <_dtoa_r+0x644>)
 800926e:	2000      	movs	r0, #0
 8009270:	f7f7 f81a 	bl	80002a8 <__aeabi_dsub>
 8009274:	ec53 2b19 	vmov	r2, r3, d9
 8009278:	f7f7 fc40 	bl	8000afc <__aeabi_dcmplt>
 800927c:	2800      	cmp	r0, #0
 800927e:	f040 80b6 	bne.w	80093ee <_dtoa_r+0x6e6>
 8009282:	9b02      	ldr	r3, [sp, #8]
 8009284:	429d      	cmp	r5, r3
 8009286:	f43f af7c 	beq.w	8009182 <_dtoa_r+0x47a>
 800928a:	4b31      	ldr	r3, [pc, #196]	; (8009350 <_dtoa_r+0x648>)
 800928c:	ec51 0b19 	vmov	r0, r1, d9
 8009290:	2200      	movs	r2, #0
 8009292:	f7f7 f9c1 	bl	8000618 <__aeabi_dmul>
 8009296:	4b2e      	ldr	r3, [pc, #184]	; (8009350 <_dtoa_r+0x648>)
 8009298:	ec41 0b19 	vmov	d9, r0, r1
 800929c:	2200      	movs	r2, #0
 800929e:	4640      	mov	r0, r8
 80092a0:	4649      	mov	r1, r9
 80092a2:	f7f7 f9b9 	bl	8000618 <__aeabi_dmul>
 80092a6:	4680      	mov	r8, r0
 80092a8:	4689      	mov	r9, r1
 80092aa:	e7c5      	b.n	8009238 <_dtoa_r+0x530>
 80092ac:	ec51 0b17 	vmov	r0, r1, d7
 80092b0:	f7f7 f9b2 	bl	8000618 <__aeabi_dmul>
 80092b4:	9b02      	ldr	r3, [sp, #8]
 80092b6:	9d00      	ldr	r5, [sp, #0]
 80092b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80092ba:	ec41 0b19 	vmov	d9, r0, r1
 80092be:	4649      	mov	r1, r9
 80092c0:	4640      	mov	r0, r8
 80092c2:	f7f7 fc59 	bl	8000b78 <__aeabi_d2iz>
 80092c6:	4606      	mov	r6, r0
 80092c8:	f7f7 f93c 	bl	8000544 <__aeabi_i2d>
 80092cc:	3630      	adds	r6, #48	; 0x30
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4640      	mov	r0, r8
 80092d4:	4649      	mov	r1, r9
 80092d6:	f7f6 ffe7 	bl	80002a8 <__aeabi_dsub>
 80092da:	f805 6b01 	strb.w	r6, [r5], #1
 80092de:	9b02      	ldr	r3, [sp, #8]
 80092e0:	429d      	cmp	r5, r3
 80092e2:	4680      	mov	r8, r0
 80092e4:	4689      	mov	r9, r1
 80092e6:	f04f 0200 	mov.w	r2, #0
 80092ea:	d124      	bne.n	8009336 <_dtoa_r+0x62e>
 80092ec:	4b1b      	ldr	r3, [pc, #108]	; (800935c <_dtoa_r+0x654>)
 80092ee:	ec51 0b19 	vmov	r0, r1, d9
 80092f2:	f7f6 ffdb 	bl	80002ac <__adddf3>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4640      	mov	r0, r8
 80092fc:	4649      	mov	r1, r9
 80092fe:	f7f7 fc1b 	bl	8000b38 <__aeabi_dcmpgt>
 8009302:	2800      	cmp	r0, #0
 8009304:	d173      	bne.n	80093ee <_dtoa_r+0x6e6>
 8009306:	ec53 2b19 	vmov	r2, r3, d9
 800930a:	4914      	ldr	r1, [pc, #80]	; (800935c <_dtoa_r+0x654>)
 800930c:	2000      	movs	r0, #0
 800930e:	f7f6 ffcb 	bl	80002a8 <__aeabi_dsub>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4640      	mov	r0, r8
 8009318:	4649      	mov	r1, r9
 800931a:	f7f7 fbef 	bl	8000afc <__aeabi_dcmplt>
 800931e:	2800      	cmp	r0, #0
 8009320:	f43f af2f 	beq.w	8009182 <_dtoa_r+0x47a>
 8009324:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009326:	1e6b      	subs	r3, r5, #1
 8009328:	930f      	str	r3, [sp, #60]	; 0x3c
 800932a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800932e:	2b30      	cmp	r3, #48	; 0x30
 8009330:	d0f8      	beq.n	8009324 <_dtoa_r+0x61c>
 8009332:	46bb      	mov	fp, r7
 8009334:	e04a      	b.n	80093cc <_dtoa_r+0x6c4>
 8009336:	4b06      	ldr	r3, [pc, #24]	; (8009350 <_dtoa_r+0x648>)
 8009338:	f7f7 f96e 	bl	8000618 <__aeabi_dmul>
 800933c:	4680      	mov	r8, r0
 800933e:	4689      	mov	r9, r1
 8009340:	e7bd      	b.n	80092be <_dtoa_r+0x5b6>
 8009342:	bf00      	nop
 8009344:	0800abd8 	.word	0x0800abd8
 8009348:	0800abb0 	.word	0x0800abb0
 800934c:	3ff00000 	.word	0x3ff00000
 8009350:	40240000 	.word	0x40240000
 8009354:	401c0000 	.word	0x401c0000
 8009358:	40140000 	.word	0x40140000
 800935c:	3fe00000 	.word	0x3fe00000
 8009360:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009364:	9d00      	ldr	r5, [sp, #0]
 8009366:	4642      	mov	r2, r8
 8009368:	464b      	mov	r3, r9
 800936a:	4630      	mov	r0, r6
 800936c:	4639      	mov	r1, r7
 800936e:	f7f7 fa7d 	bl	800086c <__aeabi_ddiv>
 8009372:	f7f7 fc01 	bl	8000b78 <__aeabi_d2iz>
 8009376:	9001      	str	r0, [sp, #4]
 8009378:	f7f7 f8e4 	bl	8000544 <__aeabi_i2d>
 800937c:	4642      	mov	r2, r8
 800937e:	464b      	mov	r3, r9
 8009380:	f7f7 f94a 	bl	8000618 <__aeabi_dmul>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4630      	mov	r0, r6
 800938a:	4639      	mov	r1, r7
 800938c:	f7f6 ff8c 	bl	80002a8 <__aeabi_dsub>
 8009390:	9e01      	ldr	r6, [sp, #4]
 8009392:	9f04      	ldr	r7, [sp, #16]
 8009394:	3630      	adds	r6, #48	; 0x30
 8009396:	f805 6b01 	strb.w	r6, [r5], #1
 800939a:	9e00      	ldr	r6, [sp, #0]
 800939c:	1bae      	subs	r6, r5, r6
 800939e:	42b7      	cmp	r7, r6
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	d134      	bne.n	8009410 <_dtoa_r+0x708>
 80093a6:	f7f6 ff81 	bl	80002ac <__adddf3>
 80093aa:	4642      	mov	r2, r8
 80093ac:	464b      	mov	r3, r9
 80093ae:	4606      	mov	r6, r0
 80093b0:	460f      	mov	r7, r1
 80093b2:	f7f7 fbc1 	bl	8000b38 <__aeabi_dcmpgt>
 80093b6:	b9c8      	cbnz	r0, 80093ec <_dtoa_r+0x6e4>
 80093b8:	4642      	mov	r2, r8
 80093ba:	464b      	mov	r3, r9
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 fb92 	bl	8000ae8 <__aeabi_dcmpeq>
 80093c4:	b110      	cbz	r0, 80093cc <_dtoa_r+0x6c4>
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	07db      	lsls	r3, r3, #31
 80093ca:	d40f      	bmi.n	80093ec <_dtoa_r+0x6e4>
 80093cc:	4651      	mov	r1, sl
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 fbcc 	bl	8009b6c <_Bfree>
 80093d4:	2300      	movs	r3, #0
 80093d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093d8:	702b      	strb	r3, [r5, #0]
 80093da:	f10b 0301 	add.w	r3, fp, #1
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f43f ace2 	beq.w	8008dac <_dtoa_r+0xa4>
 80093e8:	601d      	str	r5, [r3, #0]
 80093ea:	e4df      	b.n	8008dac <_dtoa_r+0xa4>
 80093ec:	465f      	mov	r7, fp
 80093ee:	462b      	mov	r3, r5
 80093f0:	461d      	mov	r5, r3
 80093f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093f6:	2a39      	cmp	r2, #57	; 0x39
 80093f8:	d106      	bne.n	8009408 <_dtoa_r+0x700>
 80093fa:	9a00      	ldr	r2, [sp, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d1f7      	bne.n	80093f0 <_dtoa_r+0x6e8>
 8009400:	9900      	ldr	r1, [sp, #0]
 8009402:	2230      	movs	r2, #48	; 0x30
 8009404:	3701      	adds	r7, #1
 8009406:	700a      	strb	r2, [r1, #0]
 8009408:	781a      	ldrb	r2, [r3, #0]
 800940a:	3201      	adds	r2, #1
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	e790      	b.n	8009332 <_dtoa_r+0x62a>
 8009410:	4ba3      	ldr	r3, [pc, #652]	; (80096a0 <_dtoa_r+0x998>)
 8009412:	2200      	movs	r2, #0
 8009414:	f7f7 f900 	bl	8000618 <__aeabi_dmul>
 8009418:	2200      	movs	r2, #0
 800941a:	2300      	movs	r3, #0
 800941c:	4606      	mov	r6, r0
 800941e:	460f      	mov	r7, r1
 8009420:	f7f7 fb62 	bl	8000ae8 <__aeabi_dcmpeq>
 8009424:	2800      	cmp	r0, #0
 8009426:	d09e      	beq.n	8009366 <_dtoa_r+0x65e>
 8009428:	e7d0      	b.n	80093cc <_dtoa_r+0x6c4>
 800942a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800942c:	2a00      	cmp	r2, #0
 800942e:	f000 80ca 	beq.w	80095c6 <_dtoa_r+0x8be>
 8009432:	9a07      	ldr	r2, [sp, #28]
 8009434:	2a01      	cmp	r2, #1
 8009436:	f300 80ad 	bgt.w	8009594 <_dtoa_r+0x88c>
 800943a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800943c:	2a00      	cmp	r2, #0
 800943e:	f000 80a5 	beq.w	800958c <_dtoa_r+0x884>
 8009442:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009446:	9e08      	ldr	r6, [sp, #32]
 8009448:	9d05      	ldr	r5, [sp, #20]
 800944a:	9a05      	ldr	r2, [sp, #20]
 800944c:	441a      	add	r2, r3
 800944e:	9205      	str	r2, [sp, #20]
 8009450:	9a06      	ldr	r2, [sp, #24]
 8009452:	2101      	movs	r1, #1
 8009454:	441a      	add	r2, r3
 8009456:	4620      	mov	r0, r4
 8009458:	9206      	str	r2, [sp, #24]
 800945a:	f000 fc3d 	bl	8009cd8 <__i2b>
 800945e:	4607      	mov	r7, r0
 8009460:	b165      	cbz	r5, 800947c <_dtoa_r+0x774>
 8009462:	9b06      	ldr	r3, [sp, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	dd09      	ble.n	800947c <_dtoa_r+0x774>
 8009468:	42ab      	cmp	r3, r5
 800946a:	9a05      	ldr	r2, [sp, #20]
 800946c:	bfa8      	it	ge
 800946e:	462b      	movge	r3, r5
 8009470:	1ad2      	subs	r2, r2, r3
 8009472:	9205      	str	r2, [sp, #20]
 8009474:	9a06      	ldr	r2, [sp, #24]
 8009476:	1aed      	subs	r5, r5, r3
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	9306      	str	r3, [sp, #24]
 800947c:	9b08      	ldr	r3, [sp, #32]
 800947e:	b1f3      	cbz	r3, 80094be <_dtoa_r+0x7b6>
 8009480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 80a3 	beq.w	80095ce <_dtoa_r+0x8c6>
 8009488:	2e00      	cmp	r6, #0
 800948a:	dd10      	ble.n	80094ae <_dtoa_r+0x7a6>
 800948c:	4639      	mov	r1, r7
 800948e:	4632      	mov	r2, r6
 8009490:	4620      	mov	r0, r4
 8009492:	f000 fce1 	bl	8009e58 <__pow5mult>
 8009496:	4652      	mov	r2, sl
 8009498:	4601      	mov	r1, r0
 800949a:	4607      	mov	r7, r0
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fc31 	bl	8009d04 <__multiply>
 80094a2:	4651      	mov	r1, sl
 80094a4:	4680      	mov	r8, r0
 80094a6:	4620      	mov	r0, r4
 80094a8:	f000 fb60 	bl	8009b6c <_Bfree>
 80094ac:	46c2      	mov	sl, r8
 80094ae:	9b08      	ldr	r3, [sp, #32]
 80094b0:	1b9a      	subs	r2, r3, r6
 80094b2:	d004      	beq.n	80094be <_dtoa_r+0x7b6>
 80094b4:	4651      	mov	r1, sl
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 fcce 	bl	8009e58 <__pow5mult>
 80094bc:	4682      	mov	sl, r0
 80094be:	2101      	movs	r1, #1
 80094c0:	4620      	mov	r0, r4
 80094c2:	f000 fc09 	bl	8009cd8 <__i2b>
 80094c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	4606      	mov	r6, r0
 80094cc:	f340 8081 	ble.w	80095d2 <_dtoa_r+0x8ca>
 80094d0:	461a      	mov	r2, r3
 80094d2:	4601      	mov	r1, r0
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fcbf 	bl	8009e58 <__pow5mult>
 80094da:	9b07      	ldr	r3, [sp, #28]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	4606      	mov	r6, r0
 80094e0:	dd7a      	ble.n	80095d8 <_dtoa_r+0x8d0>
 80094e2:	f04f 0800 	mov.w	r8, #0
 80094e6:	6933      	ldr	r3, [r6, #16]
 80094e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094ec:	6918      	ldr	r0, [r3, #16]
 80094ee:	f000 fba5 	bl	8009c3c <__hi0bits>
 80094f2:	f1c0 0020 	rsb	r0, r0, #32
 80094f6:	9b06      	ldr	r3, [sp, #24]
 80094f8:	4418      	add	r0, r3
 80094fa:	f010 001f 	ands.w	r0, r0, #31
 80094fe:	f000 8094 	beq.w	800962a <_dtoa_r+0x922>
 8009502:	f1c0 0320 	rsb	r3, r0, #32
 8009506:	2b04      	cmp	r3, #4
 8009508:	f340 8085 	ble.w	8009616 <_dtoa_r+0x90e>
 800950c:	9b05      	ldr	r3, [sp, #20]
 800950e:	f1c0 001c 	rsb	r0, r0, #28
 8009512:	4403      	add	r3, r0
 8009514:	9305      	str	r3, [sp, #20]
 8009516:	9b06      	ldr	r3, [sp, #24]
 8009518:	4403      	add	r3, r0
 800951a:	4405      	add	r5, r0
 800951c:	9306      	str	r3, [sp, #24]
 800951e:	9b05      	ldr	r3, [sp, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	dd05      	ble.n	8009530 <_dtoa_r+0x828>
 8009524:	4651      	mov	r1, sl
 8009526:	461a      	mov	r2, r3
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fcef 	bl	8009f0c <__lshift>
 800952e:	4682      	mov	sl, r0
 8009530:	9b06      	ldr	r3, [sp, #24]
 8009532:	2b00      	cmp	r3, #0
 8009534:	dd05      	ble.n	8009542 <_dtoa_r+0x83a>
 8009536:	4631      	mov	r1, r6
 8009538:	461a      	mov	r2, r3
 800953a:	4620      	mov	r0, r4
 800953c:	f000 fce6 	bl	8009f0c <__lshift>
 8009540:	4606      	mov	r6, r0
 8009542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009544:	2b00      	cmp	r3, #0
 8009546:	d072      	beq.n	800962e <_dtoa_r+0x926>
 8009548:	4631      	mov	r1, r6
 800954a:	4650      	mov	r0, sl
 800954c:	f000 fd4a 	bl	8009fe4 <__mcmp>
 8009550:	2800      	cmp	r0, #0
 8009552:	da6c      	bge.n	800962e <_dtoa_r+0x926>
 8009554:	2300      	movs	r3, #0
 8009556:	4651      	mov	r1, sl
 8009558:	220a      	movs	r2, #10
 800955a:	4620      	mov	r0, r4
 800955c:	f000 fb28 	bl	8009bb0 <__multadd>
 8009560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009562:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009566:	4682      	mov	sl, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 81b0 	beq.w	80098ce <_dtoa_r+0xbc6>
 800956e:	2300      	movs	r3, #0
 8009570:	4639      	mov	r1, r7
 8009572:	220a      	movs	r2, #10
 8009574:	4620      	mov	r0, r4
 8009576:	f000 fb1b 	bl	8009bb0 <__multadd>
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	4607      	mov	r7, r0
 8009580:	f300 8096 	bgt.w	80096b0 <_dtoa_r+0x9a8>
 8009584:	9b07      	ldr	r3, [sp, #28]
 8009586:	2b02      	cmp	r3, #2
 8009588:	dc59      	bgt.n	800963e <_dtoa_r+0x936>
 800958a:	e091      	b.n	80096b0 <_dtoa_r+0x9a8>
 800958c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800958e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009592:	e758      	b.n	8009446 <_dtoa_r+0x73e>
 8009594:	9b04      	ldr	r3, [sp, #16]
 8009596:	1e5e      	subs	r6, r3, #1
 8009598:	9b08      	ldr	r3, [sp, #32]
 800959a:	42b3      	cmp	r3, r6
 800959c:	bfbf      	itttt	lt
 800959e:	9b08      	ldrlt	r3, [sp, #32]
 80095a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80095a2:	9608      	strlt	r6, [sp, #32]
 80095a4:	1af3      	sublt	r3, r6, r3
 80095a6:	bfb4      	ite	lt
 80095a8:	18d2      	addlt	r2, r2, r3
 80095aa:	1b9e      	subge	r6, r3, r6
 80095ac:	9b04      	ldr	r3, [sp, #16]
 80095ae:	bfbc      	itt	lt
 80095b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80095b2:	2600      	movlt	r6, #0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bfb7      	itett	lt
 80095b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80095bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80095c0:	1a9d      	sublt	r5, r3, r2
 80095c2:	2300      	movlt	r3, #0
 80095c4:	e741      	b.n	800944a <_dtoa_r+0x742>
 80095c6:	9e08      	ldr	r6, [sp, #32]
 80095c8:	9d05      	ldr	r5, [sp, #20]
 80095ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80095cc:	e748      	b.n	8009460 <_dtoa_r+0x758>
 80095ce:	9a08      	ldr	r2, [sp, #32]
 80095d0:	e770      	b.n	80094b4 <_dtoa_r+0x7ac>
 80095d2:	9b07      	ldr	r3, [sp, #28]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	dc19      	bgt.n	800960c <_dtoa_r+0x904>
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	b9bb      	cbnz	r3, 800960c <_dtoa_r+0x904>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e2:	b99b      	cbnz	r3, 800960c <_dtoa_r+0x904>
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095ea:	0d1b      	lsrs	r3, r3, #20
 80095ec:	051b      	lsls	r3, r3, #20
 80095ee:	b183      	cbz	r3, 8009612 <_dtoa_r+0x90a>
 80095f0:	9b05      	ldr	r3, [sp, #20]
 80095f2:	3301      	adds	r3, #1
 80095f4:	9305      	str	r3, [sp, #20]
 80095f6:	9b06      	ldr	r3, [sp, #24]
 80095f8:	3301      	adds	r3, #1
 80095fa:	9306      	str	r3, [sp, #24]
 80095fc:	f04f 0801 	mov.w	r8, #1
 8009600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009602:	2b00      	cmp	r3, #0
 8009604:	f47f af6f 	bne.w	80094e6 <_dtoa_r+0x7de>
 8009608:	2001      	movs	r0, #1
 800960a:	e774      	b.n	80094f6 <_dtoa_r+0x7ee>
 800960c:	f04f 0800 	mov.w	r8, #0
 8009610:	e7f6      	b.n	8009600 <_dtoa_r+0x8f8>
 8009612:	4698      	mov	r8, r3
 8009614:	e7f4      	b.n	8009600 <_dtoa_r+0x8f8>
 8009616:	d082      	beq.n	800951e <_dtoa_r+0x816>
 8009618:	9a05      	ldr	r2, [sp, #20]
 800961a:	331c      	adds	r3, #28
 800961c:	441a      	add	r2, r3
 800961e:	9205      	str	r2, [sp, #20]
 8009620:	9a06      	ldr	r2, [sp, #24]
 8009622:	441a      	add	r2, r3
 8009624:	441d      	add	r5, r3
 8009626:	9206      	str	r2, [sp, #24]
 8009628:	e779      	b.n	800951e <_dtoa_r+0x816>
 800962a:	4603      	mov	r3, r0
 800962c:	e7f4      	b.n	8009618 <_dtoa_r+0x910>
 800962e:	9b04      	ldr	r3, [sp, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	dc37      	bgt.n	80096a4 <_dtoa_r+0x99c>
 8009634:	9b07      	ldr	r3, [sp, #28]
 8009636:	2b02      	cmp	r3, #2
 8009638:	dd34      	ble.n	80096a4 <_dtoa_r+0x99c>
 800963a:	9b04      	ldr	r3, [sp, #16]
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	b963      	cbnz	r3, 800965c <_dtoa_r+0x954>
 8009642:	4631      	mov	r1, r6
 8009644:	2205      	movs	r2, #5
 8009646:	4620      	mov	r0, r4
 8009648:	f000 fab2 	bl	8009bb0 <__multadd>
 800964c:	4601      	mov	r1, r0
 800964e:	4606      	mov	r6, r0
 8009650:	4650      	mov	r0, sl
 8009652:	f000 fcc7 	bl	8009fe4 <__mcmp>
 8009656:	2800      	cmp	r0, #0
 8009658:	f73f adbb 	bgt.w	80091d2 <_dtoa_r+0x4ca>
 800965c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800965e:	9d00      	ldr	r5, [sp, #0]
 8009660:	ea6f 0b03 	mvn.w	fp, r3
 8009664:	f04f 0800 	mov.w	r8, #0
 8009668:	4631      	mov	r1, r6
 800966a:	4620      	mov	r0, r4
 800966c:	f000 fa7e 	bl	8009b6c <_Bfree>
 8009670:	2f00      	cmp	r7, #0
 8009672:	f43f aeab 	beq.w	80093cc <_dtoa_r+0x6c4>
 8009676:	f1b8 0f00 	cmp.w	r8, #0
 800967a:	d005      	beq.n	8009688 <_dtoa_r+0x980>
 800967c:	45b8      	cmp	r8, r7
 800967e:	d003      	beq.n	8009688 <_dtoa_r+0x980>
 8009680:	4641      	mov	r1, r8
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fa72 	bl	8009b6c <_Bfree>
 8009688:	4639      	mov	r1, r7
 800968a:	4620      	mov	r0, r4
 800968c:	f000 fa6e 	bl	8009b6c <_Bfree>
 8009690:	e69c      	b.n	80093cc <_dtoa_r+0x6c4>
 8009692:	2600      	movs	r6, #0
 8009694:	4637      	mov	r7, r6
 8009696:	e7e1      	b.n	800965c <_dtoa_r+0x954>
 8009698:	46bb      	mov	fp, r7
 800969a:	4637      	mov	r7, r6
 800969c:	e599      	b.n	80091d2 <_dtoa_r+0x4ca>
 800969e:	bf00      	nop
 80096a0:	40240000 	.word	0x40240000
 80096a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 80c8 	beq.w	800983c <_dtoa_r+0xb34>
 80096ac:	9b04      	ldr	r3, [sp, #16]
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	dd05      	ble.n	80096c0 <_dtoa_r+0x9b8>
 80096b4:	4639      	mov	r1, r7
 80096b6:	462a      	mov	r2, r5
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fc27 	bl	8009f0c <__lshift>
 80096be:	4607      	mov	r7, r0
 80096c0:	f1b8 0f00 	cmp.w	r8, #0
 80096c4:	d05b      	beq.n	800977e <_dtoa_r+0xa76>
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 fa0f 	bl	8009aec <_Balloc>
 80096ce:	4605      	mov	r5, r0
 80096d0:	b928      	cbnz	r0, 80096de <_dtoa_r+0x9d6>
 80096d2:	4b83      	ldr	r3, [pc, #524]	; (80098e0 <_dtoa_r+0xbd8>)
 80096d4:	4602      	mov	r2, r0
 80096d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80096da:	f7ff bb2e 	b.w	8008d3a <_dtoa_r+0x32>
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	3202      	adds	r2, #2
 80096e2:	0092      	lsls	r2, r2, #2
 80096e4:	f107 010c 	add.w	r1, r7, #12
 80096e8:	300c      	adds	r0, #12
 80096ea:	f7ff fa75 	bl	8008bd8 <memcpy>
 80096ee:	2201      	movs	r2, #1
 80096f0:	4629      	mov	r1, r5
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fc0a 	bl	8009f0c <__lshift>
 80096f8:	9b00      	ldr	r3, [sp, #0]
 80096fa:	3301      	adds	r3, #1
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009702:	4413      	add	r3, r2
 8009704:	9308      	str	r3, [sp, #32]
 8009706:	9b02      	ldr	r3, [sp, #8]
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	46b8      	mov	r8, r7
 800970e:	9306      	str	r3, [sp, #24]
 8009710:	4607      	mov	r7, r0
 8009712:	9b04      	ldr	r3, [sp, #16]
 8009714:	4631      	mov	r1, r6
 8009716:	3b01      	subs	r3, #1
 8009718:	4650      	mov	r0, sl
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	f7ff fa6a 	bl	8008bf4 <quorem>
 8009720:	4641      	mov	r1, r8
 8009722:	9002      	str	r0, [sp, #8]
 8009724:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009728:	4650      	mov	r0, sl
 800972a:	f000 fc5b 	bl	8009fe4 <__mcmp>
 800972e:	463a      	mov	r2, r7
 8009730:	9005      	str	r0, [sp, #20]
 8009732:	4631      	mov	r1, r6
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fc71 	bl	800a01c <__mdiff>
 800973a:	68c2      	ldr	r2, [r0, #12]
 800973c:	4605      	mov	r5, r0
 800973e:	bb02      	cbnz	r2, 8009782 <_dtoa_r+0xa7a>
 8009740:	4601      	mov	r1, r0
 8009742:	4650      	mov	r0, sl
 8009744:	f000 fc4e 	bl	8009fe4 <__mcmp>
 8009748:	4602      	mov	r2, r0
 800974a:	4629      	mov	r1, r5
 800974c:	4620      	mov	r0, r4
 800974e:	9209      	str	r2, [sp, #36]	; 0x24
 8009750:	f000 fa0c 	bl	8009b6c <_Bfree>
 8009754:	9b07      	ldr	r3, [sp, #28]
 8009756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009758:	9d04      	ldr	r5, [sp, #16]
 800975a:	ea43 0102 	orr.w	r1, r3, r2
 800975e:	9b06      	ldr	r3, [sp, #24]
 8009760:	4319      	orrs	r1, r3
 8009762:	d110      	bne.n	8009786 <_dtoa_r+0xa7e>
 8009764:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009768:	d029      	beq.n	80097be <_dtoa_r+0xab6>
 800976a:	9b05      	ldr	r3, [sp, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	dd02      	ble.n	8009776 <_dtoa_r+0xa6e>
 8009770:	9b02      	ldr	r3, [sp, #8]
 8009772:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	f883 9000 	strb.w	r9, [r3]
 800977c:	e774      	b.n	8009668 <_dtoa_r+0x960>
 800977e:	4638      	mov	r0, r7
 8009780:	e7ba      	b.n	80096f8 <_dtoa_r+0x9f0>
 8009782:	2201      	movs	r2, #1
 8009784:	e7e1      	b.n	800974a <_dtoa_r+0xa42>
 8009786:	9b05      	ldr	r3, [sp, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	db04      	blt.n	8009796 <_dtoa_r+0xa8e>
 800978c:	9907      	ldr	r1, [sp, #28]
 800978e:	430b      	orrs	r3, r1
 8009790:	9906      	ldr	r1, [sp, #24]
 8009792:	430b      	orrs	r3, r1
 8009794:	d120      	bne.n	80097d8 <_dtoa_r+0xad0>
 8009796:	2a00      	cmp	r2, #0
 8009798:	dded      	ble.n	8009776 <_dtoa_r+0xa6e>
 800979a:	4651      	mov	r1, sl
 800979c:	2201      	movs	r2, #1
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 fbb4 	bl	8009f0c <__lshift>
 80097a4:	4631      	mov	r1, r6
 80097a6:	4682      	mov	sl, r0
 80097a8:	f000 fc1c 	bl	8009fe4 <__mcmp>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	dc03      	bgt.n	80097b8 <_dtoa_r+0xab0>
 80097b0:	d1e1      	bne.n	8009776 <_dtoa_r+0xa6e>
 80097b2:	f019 0f01 	tst.w	r9, #1
 80097b6:	d0de      	beq.n	8009776 <_dtoa_r+0xa6e>
 80097b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097bc:	d1d8      	bne.n	8009770 <_dtoa_r+0xa68>
 80097be:	9a01      	ldr	r2, [sp, #4]
 80097c0:	2339      	movs	r3, #57	; 0x39
 80097c2:	7013      	strb	r3, [r2, #0]
 80097c4:	462b      	mov	r3, r5
 80097c6:	461d      	mov	r5, r3
 80097c8:	3b01      	subs	r3, #1
 80097ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097ce:	2a39      	cmp	r2, #57	; 0x39
 80097d0:	d06c      	beq.n	80098ac <_dtoa_r+0xba4>
 80097d2:	3201      	adds	r2, #1
 80097d4:	701a      	strb	r2, [r3, #0]
 80097d6:	e747      	b.n	8009668 <_dtoa_r+0x960>
 80097d8:	2a00      	cmp	r2, #0
 80097da:	dd07      	ble.n	80097ec <_dtoa_r+0xae4>
 80097dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097e0:	d0ed      	beq.n	80097be <_dtoa_r+0xab6>
 80097e2:	9a01      	ldr	r2, [sp, #4]
 80097e4:	f109 0301 	add.w	r3, r9, #1
 80097e8:	7013      	strb	r3, [r2, #0]
 80097ea:	e73d      	b.n	8009668 <_dtoa_r+0x960>
 80097ec:	9b04      	ldr	r3, [sp, #16]
 80097ee:	9a08      	ldr	r2, [sp, #32]
 80097f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d043      	beq.n	8009880 <_dtoa_r+0xb78>
 80097f8:	4651      	mov	r1, sl
 80097fa:	2300      	movs	r3, #0
 80097fc:	220a      	movs	r2, #10
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 f9d6 	bl	8009bb0 <__multadd>
 8009804:	45b8      	cmp	r8, r7
 8009806:	4682      	mov	sl, r0
 8009808:	f04f 0300 	mov.w	r3, #0
 800980c:	f04f 020a 	mov.w	r2, #10
 8009810:	4641      	mov	r1, r8
 8009812:	4620      	mov	r0, r4
 8009814:	d107      	bne.n	8009826 <_dtoa_r+0xb1e>
 8009816:	f000 f9cb 	bl	8009bb0 <__multadd>
 800981a:	4680      	mov	r8, r0
 800981c:	4607      	mov	r7, r0
 800981e:	9b04      	ldr	r3, [sp, #16]
 8009820:	3301      	adds	r3, #1
 8009822:	9304      	str	r3, [sp, #16]
 8009824:	e775      	b.n	8009712 <_dtoa_r+0xa0a>
 8009826:	f000 f9c3 	bl	8009bb0 <__multadd>
 800982a:	4639      	mov	r1, r7
 800982c:	4680      	mov	r8, r0
 800982e:	2300      	movs	r3, #0
 8009830:	220a      	movs	r2, #10
 8009832:	4620      	mov	r0, r4
 8009834:	f000 f9bc 	bl	8009bb0 <__multadd>
 8009838:	4607      	mov	r7, r0
 800983a:	e7f0      	b.n	800981e <_dtoa_r+0xb16>
 800983c:	9b04      	ldr	r3, [sp, #16]
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	9d00      	ldr	r5, [sp, #0]
 8009842:	4631      	mov	r1, r6
 8009844:	4650      	mov	r0, sl
 8009846:	f7ff f9d5 	bl	8008bf4 <quorem>
 800984a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800984e:	9b00      	ldr	r3, [sp, #0]
 8009850:	f805 9b01 	strb.w	r9, [r5], #1
 8009854:	1aea      	subs	r2, r5, r3
 8009856:	9b01      	ldr	r3, [sp, #4]
 8009858:	4293      	cmp	r3, r2
 800985a:	dd07      	ble.n	800986c <_dtoa_r+0xb64>
 800985c:	4651      	mov	r1, sl
 800985e:	2300      	movs	r3, #0
 8009860:	220a      	movs	r2, #10
 8009862:	4620      	mov	r0, r4
 8009864:	f000 f9a4 	bl	8009bb0 <__multadd>
 8009868:	4682      	mov	sl, r0
 800986a:	e7ea      	b.n	8009842 <_dtoa_r+0xb3a>
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	bfc8      	it	gt
 8009872:	461d      	movgt	r5, r3
 8009874:	9b00      	ldr	r3, [sp, #0]
 8009876:	bfd8      	it	le
 8009878:	2501      	movle	r5, #1
 800987a:	441d      	add	r5, r3
 800987c:	f04f 0800 	mov.w	r8, #0
 8009880:	4651      	mov	r1, sl
 8009882:	2201      	movs	r2, #1
 8009884:	4620      	mov	r0, r4
 8009886:	f000 fb41 	bl	8009f0c <__lshift>
 800988a:	4631      	mov	r1, r6
 800988c:	4682      	mov	sl, r0
 800988e:	f000 fba9 	bl	8009fe4 <__mcmp>
 8009892:	2800      	cmp	r0, #0
 8009894:	dc96      	bgt.n	80097c4 <_dtoa_r+0xabc>
 8009896:	d102      	bne.n	800989e <_dtoa_r+0xb96>
 8009898:	f019 0f01 	tst.w	r9, #1
 800989c:	d192      	bne.n	80097c4 <_dtoa_r+0xabc>
 800989e:	462b      	mov	r3, r5
 80098a0:	461d      	mov	r5, r3
 80098a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098a6:	2a30      	cmp	r2, #48	; 0x30
 80098a8:	d0fa      	beq.n	80098a0 <_dtoa_r+0xb98>
 80098aa:	e6dd      	b.n	8009668 <_dtoa_r+0x960>
 80098ac:	9a00      	ldr	r2, [sp, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d189      	bne.n	80097c6 <_dtoa_r+0xabe>
 80098b2:	f10b 0b01 	add.w	fp, fp, #1
 80098b6:	2331      	movs	r3, #49	; 0x31
 80098b8:	e796      	b.n	80097e8 <_dtoa_r+0xae0>
 80098ba:	4b0a      	ldr	r3, [pc, #40]	; (80098e4 <_dtoa_r+0xbdc>)
 80098bc:	f7ff ba99 	b.w	8008df2 <_dtoa_r+0xea>
 80098c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f47f aa6d 	bne.w	8008da2 <_dtoa_r+0x9a>
 80098c8:	4b07      	ldr	r3, [pc, #28]	; (80098e8 <_dtoa_r+0xbe0>)
 80098ca:	f7ff ba92 	b.w	8008df2 <_dtoa_r+0xea>
 80098ce:	9b01      	ldr	r3, [sp, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	dcb5      	bgt.n	8009840 <_dtoa_r+0xb38>
 80098d4:	9b07      	ldr	r3, [sp, #28]
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	f73f aeb1 	bgt.w	800963e <_dtoa_r+0x936>
 80098dc:	e7b0      	b.n	8009840 <_dtoa_r+0xb38>
 80098de:	bf00      	nop
 80098e0:	0800ab40 	.word	0x0800ab40
 80098e4:	0800aaa0 	.word	0x0800aaa0
 80098e8:	0800aac4 	.word	0x0800aac4

080098ec <_free_r>:
 80098ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098ee:	2900      	cmp	r1, #0
 80098f0:	d044      	beq.n	800997c <_free_r+0x90>
 80098f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f6:	9001      	str	r0, [sp, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f1a1 0404 	sub.w	r4, r1, #4
 80098fe:	bfb8      	it	lt
 8009900:	18e4      	addlt	r4, r4, r3
 8009902:	f000 f8e7 	bl	8009ad4 <__malloc_lock>
 8009906:	4a1e      	ldr	r2, [pc, #120]	; (8009980 <_free_r+0x94>)
 8009908:	9801      	ldr	r0, [sp, #4]
 800990a:	6813      	ldr	r3, [r2, #0]
 800990c:	b933      	cbnz	r3, 800991c <_free_r+0x30>
 800990e:	6063      	str	r3, [r4, #4]
 8009910:	6014      	str	r4, [r2, #0]
 8009912:	b003      	add	sp, #12
 8009914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009918:	f000 b8e2 	b.w	8009ae0 <__malloc_unlock>
 800991c:	42a3      	cmp	r3, r4
 800991e:	d908      	bls.n	8009932 <_free_r+0x46>
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	1961      	adds	r1, r4, r5
 8009924:	428b      	cmp	r3, r1
 8009926:	bf01      	itttt	eq
 8009928:	6819      	ldreq	r1, [r3, #0]
 800992a:	685b      	ldreq	r3, [r3, #4]
 800992c:	1949      	addeq	r1, r1, r5
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	e7ed      	b.n	800990e <_free_r+0x22>
 8009932:	461a      	mov	r2, r3
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	b10b      	cbz	r3, 800993c <_free_r+0x50>
 8009938:	42a3      	cmp	r3, r4
 800993a:	d9fa      	bls.n	8009932 <_free_r+0x46>
 800993c:	6811      	ldr	r1, [r2, #0]
 800993e:	1855      	adds	r5, r2, r1
 8009940:	42a5      	cmp	r5, r4
 8009942:	d10b      	bne.n	800995c <_free_r+0x70>
 8009944:	6824      	ldr	r4, [r4, #0]
 8009946:	4421      	add	r1, r4
 8009948:	1854      	adds	r4, r2, r1
 800994a:	42a3      	cmp	r3, r4
 800994c:	6011      	str	r1, [r2, #0]
 800994e:	d1e0      	bne.n	8009912 <_free_r+0x26>
 8009950:	681c      	ldr	r4, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	6053      	str	r3, [r2, #4]
 8009956:	440c      	add	r4, r1
 8009958:	6014      	str	r4, [r2, #0]
 800995a:	e7da      	b.n	8009912 <_free_r+0x26>
 800995c:	d902      	bls.n	8009964 <_free_r+0x78>
 800995e:	230c      	movs	r3, #12
 8009960:	6003      	str	r3, [r0, #0]
 8009962:	e7d6      	b.n	8009912 <_free_r+0x26>
 8009964:	6825      	ldr	r5, [r4, #0]
 8009966:	1961      	adds	r1, r4, r5
 8009968:	428b      	cmp	r3, r1
 800996a:	bf04      	itt	eq
 800996c:	6819      	ldreq	r1, [r3, #0]
 800996e:	685b      	ldreq	r3, [r3, #4]
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	bf04      	itt	eq
 8009974:	1949      	addeq	r1, r1, r5
 8009976:	6021      	streq	r1, [r4, #0]
 8009978:	6054      	str	r4, [r2, #4]
 800997a:	e7ca      	b.n	8009912 <_free_r+0x26>
 800997c:	b003      	add	sp, #12
 800997e:	bd30      	pop	{r4, r5, pc}
 8009980:	200045c0 	.word	0x200045c0

08009984 <malloc>:
 8009984:	4b02      	ldr	r3, [pc, #8]	; (8009990 <malloc+0xc>)
 8009986:	4601      	mov	r1, r0
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	f000 b823 	b.w	80099d4 <_malloc_r>
 800998e:	bf00      	nop
 8009990:	20000074 	.word	0x20000074

08009994 <sbrk_aligned>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4e0e      	ldr	r6, [pc, #56]	; (80099d0 <sbrk_aligned+0x3c>)
 8009998:	460c      	mov	r4, r1
 800999a:	6831      	ldr	r1, [r6, #0]
 800999c:	4605      	mov	r5, r0
 800999e:	b911      	cbnz	r1, 80099a6 <sbrk_aligned+0x12>
 80099a0:	f000 fcce 	bl	800a340 <_sbrk_r>
 80099a4:	6030      	str	r0, [r6, #0]
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f000 fcc9 	bl	800a340 <_sbrk_r>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	d00a      	beq.n	80099c8 <sbrk_aligned+0x34>
 80099b2:	1cc4      	adds	r4, r0, #3
 80099b4:	f024 0403 	bic.w	r4, r4, #3
 80099b8:	42a0      	cmp	r0, r4
 80099ba:	d007      	beq.n	80099cc <sbrk_aligned+0x38>
 80099bc:	1a21      	subs	r1, r4, r0
 80099be:	4628      	mov	r0, r5
 80099c0:	f000 fcbe 	bl	800a340 <_sbrk_r>
 80099c4:	3001      	adds	r0, #1
 80099c6:	d101      	bne.n	80099cc <sbrk_aligned+0x38>
 80099c8:	f04f 34ff 	mov.w	r4, #4294967295
 80099cc:	4620      	mov	r0, r4
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	200045c4 	.word	0x200045c4

080099d4 <_malloc_r>:
 80099d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d8:	1ccd      	adds	r5, r1, #3
 80099da:	f025 0503 	bic.w	r5, r5, #3
 80099de:	3508      	adds	r5, #8
 80099e0:	2d0c      	cmp	r5, #12
 80099e2:	bf38      	it	cc
 80099e4:	250c      	movcc	r5, #12
 80099e6:	2d00      	cmp	r5, #0
 80099e8:	4607      	mov	r7, r0
 80099ea:	db01      	blt.n	80099f0 <_malloc_r+0x1c>
 80099ec:	42a9      	cmp	r1, r5
 80099ee:	d905      	bls.n	80099fc <_malloc_r+0x28>
 80099f0:	230c      	movs	r3, #12
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	2600      	movs	r6, #0
 80099f6:	4630      	mov	r0, r6
 80099f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ad0 <_malloc_r+0xfc>
 8009a00:	f000 f868 	bl	8009ad4 <__malloc_lock>
 8009a04:	f8d8 3000 	ldr.w	r3, [r8]
 8009a08:	461c      	mov	r4, r3
 8009a0a:	bb5c      	cbnz	r4, 8009a64 <_malloc_r+0x90>
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	4638      	mov	r0, r7
 8009a10:	f7ff ffc0 	bl	8009994 <sbrk_aligned>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	4604      	mov	r4, r0
 8009a18:	d155      	bne.n	8009ac6 <_malloc_r+0xf2>
 8009a1a:	f8d8 4000 	ldr.w	r4, [r8]
 8009a1e:	4626      	mov	r6, r4
 8009a20:	2e00      	cmp	r6, #0
 8009a22:	d145      	bne.n	8009ab0 <_malloc_r+0xdc>
 8009a24:	2c00      	cmp	r4, #0
 8009a26:	d048      	beq.n	8009aba <_malloc_r+0xe6>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	eb04 0903 	add.w	r9, r4, r3
 8009a32:	f000 fc85 	bl	800a340 <_sbrk_r>
 8009a36:	4581      	cmp	r9, r0
 8009a38:	d13f      	bne.n	8009aba <_malloc_r+0xe6>
 8009a3a:	6821      	ldr	r1, [r4, #0]
 8009a3c:	1a6d      	subs	r5, r5, r1
 8009a3e:	4629      	mov	r1, r5
 8009a40:	4638      	mov	r0, r7
 8009a42:	f7ff ffa7 	bl	8009994 <sbrk_aligned>
 8009a46:	3001      	adds	r0, #1
 8009a48:	d037      	beq.n	8009aba <_malloc_r+0xe6>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	442b      	add	r3, r5
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	f8d8 3000 	ldr.w	r3, [r8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d038      	beq.n	8009aca <_malloc_r+0xf6>
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	42a2      	cmp	r2, r4
 8009a5c:	d12b      	bne.n	8009ab6 <_malloc_r+0xe2>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	605a      	str	r2, [r3, #4]
 8009a62:	e00f      	b.n	8009a84 <_malloc_r+0xb0>
 8009a64:	6822      	ldr	r2, [r4, #0]
 8009a66:	1b52      	subs	r2, r2, r5
 8009a68:	d41f      	bmi.n	8009aaa <_malloc_r+0xd6>
 8009a6a:	2a0b      	cmp	r2, #11
 8009a6c:	d917      	bls.n	8009a9e <_malloc_r+0xca>
 8009a6e:	1961      	adds	r1, r4, r5
 8009a70:	42a3      	cmp	r3, r4
 8009a72:	6025      	str	r5, [r4, #0]
 8009a74:	bf18      	it	ne
 8009a76:	6059      	strne	r1, [r3, #4]
 8009a78:	6863      	ldr	r3, [r4, #4]
 8009a7a:	bf08      	it	eq
 8009a7c:	f8c8 1000 	streq.w	r1, [r8]
 8009a80:	5162      	str	r2, [r4, r5]
 8009a82:	604b      	str	r3, [r1, #4]
 8009a84:	4638      	mov	r0, r7
 8009a86:	f104 060b 	add.w	r6, r4, #11
 8009a8a:	f000 f829 	bl	8009ae0 <__malloc_unlock>
 8009a8e:	f026 0607 	bic.w	r6, r6, #7
 8009a92:	1d23      	adds	r3, r4, #4
 8009a94:	1af2      	subs	r2, r6, r3
 8009a96:	d0ae      	beq.n	80099f6 <_malloc_r+0x22>
 8009a98:	1b9b      	subs	r3, r3, r6
 8009a9a:	50a3      	str	r3, [r4, r2]
 8009a9c:	e7ab      	b.n	80099f6 <_malloc_r+0x22>
 8009a9e:	42a3      	cmp	r3, r4
 8009aa0:	6862      	ldr	r2, [r4, #4]
 8009aa2:	d1dd      	bne.n	8009a60 <_malloc_r+0x8c>
 8009aa4:	f8c8 2000 	str.w	r2, [r8]
 8009aa8:	e7ec      	b.n	8009a84 <_malloc_r+0xb0>
 8009aaa:	4623      	mov	r3, r4
 8009aac:	6864      	ldr	r4, [r4, #4]
 8009aae:	e7ac      	b.n	8009a0a <_malloc_r+0x36>
 8009ab0:	4634      	mov	r4, r6
 8009ab2:	6876      	ldr	r6, [r6, #4]
 8009ab4:	e7b4      	b.n	8009a20 <_malloc_r+0x4c>
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	e7cc      	b.n	8009a54 <_malloc_r+0x80>
 8009aba:	230c      	movs	r3, #12
 8009abc:	603b      	str	r3, [r7, #0]
 8009abe:	4638      	mov	r0, r7
 8009ac0:	f000 f80e 	bl	8009ae0 <__malloc_unlock>
 8009ac4:	e797      	b.n	80099f6 <_malloc_r+0x22>
 8009ac6:	6025      	str	r5, [r4, #0]
 8009ac8:	e7dc      	b.n	8009a84 <_malloc_r+0xb0>
 8009aca:	605b      	str	r3, [r3, #4]
 8009acc:	deff      	udf	#255	; 0xff
 8009ace:	bf00      	nop
 8009ad0:	200045c0 	.word	0x200045c0

08009ad4 <__malloc_lock>:
 8009ad4:	4801      	ldr	r0, [pc, #4]	; (8009adc <__malloc_lock+0x8>)
 8009ad6:	f7ff b87d 	b.w	8008bd4 <__retarget_lock_acquire_recursive>
 8009ada:	bf00      	nop
 8009adc:	200045bc 	.word	0x200045bc

08009ae0 <__malloc_unlock>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	; (8009ae8 <__malloc_unlock+0x8>)
 8009ae2:	f7ff b878 	b.w	8008bd6 <__retarget_lock_release_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	200045bc 	.word	0x200045bc

08009aec <_Balloc>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	69c6      	ldr	r6, [r0, #28]
 8009af0:	4604      	mov	r4, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	b976      	cbnz	r6, 8009b14 <_Balloc+0x28>
 8009af6:	2010      	movs	r0, #16
 8009af8:	f7ff ff44 	bl	8009984 <malloc>
 8009afc:	4602      	mov	r2, r0
 8009afe:	61e0      	str	r0, [r4, #28]
 8009b00:	b920      	cbnz	r0, 8009b0c <_Balloc+0x20>
 8009b02:	4b18      	ldr	r3, [pc, #96]	; (8009b64 <_Balloc+0x78>)
 8009b04:	4818      	ldr	r0, [pc, #96]	; (8009b68 <_Balloc+0x7c>)
 8009b06:	216b      	movs	r1, #107	; 0x6b
 8009b08:	f000 fc2a 	bl	800a360 <__assert_func>
 8009b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b10:	6006      	str	r6, [r0, #0]
 8009b12:	60c6      	str	r6, [r0, #12]
 8009b14:	69e6      	ldr	r6, [r4, #28]
 8009b16:	68f3      	ldr	r3, [r6, #12]
 8009b18:	b183      	cbz	r3, 8009b3c <_Balloc+0x50>
 8009b1a:	69e3      	ldr	r3, [r4, #28]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b22:	b9b8      	cbnz	r0, 8009b54 <_Balloc+0x68>
 8009b24:	2101      	movs	r1, #1
 8009b26:	fa01 f605 	lsl.w	r6, r1, r5
 8009b2a:	1d72      	adds	r2, r6, #5
 8009b2c:	0092      	lsls	r2, r2, #2
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 fc34 	bl	800a39c <_calloc_r>
 8009b34:	b160      	cbz	r0, 8009b50 <_Balloc+0x64>
 8009b36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b3a:	e00e      	b.n	8009b5a <_Balloc+0x6e>
 8009b3c:	2221      	movs	r2, #33	; 0x21
 8009b3e:	2104      	movs	r1, #4
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 fc2b 	bl	800a39c <_calloc_r>
 8009b46:	69e3      	ldr	r3, [r4, #28]
 8009b48:	60f0      	str	r0, [r6, #12]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e4      	bne.n	8009b1a <_Balloc+0x2e>
 8009b50:	2000      	movs	r0, #0
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	6802      	ldr	r2, [r0, #0]
 8009b56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b60:	e7f7      	b.n	8009b52 <_Balloc+0x66>
 8009b62:	bf00      	nop
 8009b64:	0800aad1 	.word	0x0800aad1
 8009b68:	0800ab51 	.word	0x0800ab51

08009b6c <_Bfree>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	69c6      	ldr	r6, [r0, #28]
 8009b70:	4605      	mov	r5, r0
 8009b72:	460c      	mov	r4, r1
 8009b74:	b976      	cbnz	r6, 8009b94 <_Bfree+0x28>
 8009b76:	2010      	movs	r0, #16
 8009b78:	f7ff ff04 	bl	8009984 <malloc>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	61e8      	str	r0, [r5, #28]
 8009b80:	b920      	cbnz	r0, 8009b8c <_Bfree+0x20>
 8009b82:	4b09      	ldr	r3, [pc, #36]	; (8009ba8 <_Bfree+0x3c>)
 8009b84:	4809      	ldr	r0, [pc, #36]	; (8009bac <_Bfree+0x40>)
 8009b86:	218f      	movs	r1, #143	; 0x8f
 8009b88:	f000 fbea 	bl	800a360 <__assert_func>
 8009b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b90:	6006      	str	r6, [r0, #0]
 8009b92:	60c6      	str	r6, [r0, #12]
 8009b94:	b13c      	cbz	r4, 8009ba6 <_Bfree+0x3a>
 8009b96:	69eb      	ldr	r3, [r5, #28]
 8009b98:	6862      	ldr	r2, [r4, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ba0:	6021      	str	r1, [r4, #0]
 8009ba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	0800aad1 	.word	0x0800aad1
 8009bac:	0800ab51 	.word	0x0800ab51

08009bb0 <__multadd>:
 8009bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb4:	690d      	ldr	r5, [r1, #16]
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	460c      	mov	r4, r1
 8009bba:	461e      	mov	r6, r3
 8009bbc:	f101 0c14 	add.w	ip, r1, #20
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	f8dc 3000 	ldr.w	r3, [ip]
 8009bc6:	b299      	uxth	r1, r3
 8009bc8:	fb02 6101 	mla	r1, r2, r1, r6
 8009bcc:	0c1e      	lsrs	r6, r3, #16
 8009bce:	0c0b      	lsrs	r3, r1, #16
 8009bd0:	fb02 3306 	mla	r3, r2, r6, r3
 8009bd4:	b289      	uxth	r1, r1
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bdc:	4285      	cmp	r5, r0
 8009bde:	f84c 1b04 	str.w	r1, [ip], #4
 8009be2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009be6:	dcec      	bgt.n	8009bc2 <__multadd+0x12>
 8009be8:	b30e      	cbz	r6, 8009c2e <__multadd+0x7e>
 8009bea:	68a3      	ldr	r3, [r4, #8]
 8009bec:	42ab      	cmp	r3, r5
 8009bee:	dc19      	bgt.n	8009c24 <__multadd+0x74>
 8009bf0:	6861      	ldr	r1, [r4, #4]
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	3101      	adds	r1, #1
 8009bf6:	f7ff ff79 	bl	8009aec <_Balloc>
 8009bfa:	4680      	mov	r8, r0
 8009bfc:	b928      	cbnz	r0, 8009c0a <__multadd+0x5a>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <__multadd+0x84>)
 8009c02:	480d      	ldr	r0, [pc, #52]	; (8009c38 <__multadd+0x88>)
 8009c04:	21ba      	movs	r1, #186	; 0xba
 8009c06:	f000 fbab 	bl	800a360 <__assert_func>
 8009c0a:	6922      	ldr	r2, [r4, #16]
 8009c0c:	3202      	adds	r2, #2
 8009c0e:	f104 010c 	add.w	r1, r4, #12
 8009c12:	0092      	lsls	r2, r2, #2
 8009c14:	300c      	adds	r0, #12
 8009c16:	f7fe ffdf 	bl	8008bd8 <memcpy>
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f7ff ffa5 	bl	8009b6c <_Bfree>
 8009c22:	4644      	mov	r4, r8
 8009c24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c28:	3501      	adds	r5, #1
 8009c2a:	615e      	str	r6, [r3, #20]
 8009c2c:	6125      	str	r5, [r4, #16]
 8009c2e:	4620      	mov	r0, r4
 8009c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c34:	0800ab40 	.word	0x0800ab40
 8009c38:	0800ab51 	.word	0x0800ab51

08009c3c <__hi0bits>:
 8009c3c:	0c03      	lsrs	r3, r0, #16
 8009c3e:	041b      	lsls	r3, r3, #16
 8009c40:	b9d3      	cbnz	r3, 8009c78 <__hi0bits+0x3c>
 8009c42:	0400      	lsls	r0, r0, #16
 8009c44:	2310      	movs	r3, #16
 8009c46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c4a:	bf04      	itt	eq
 8009c4c:	0200      	lsleq	r0, r0, #8
 8009c4e:	3308      	addeq	r3, #8
 8009c50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c54:	bf04      	itt	eq
 8009c56:	0100      	lsleq	r0, r0, #4
 8009c58:	3304      	addeq	r3, #4
 8009c5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c5e:	bf04      	itt	eq
 8009c60:	0080      	lsleq	r0, r0, #2
 8009c62:	3302      	addeq	r3, #2
 8009c64:	2800      	cmp	r0, #0
 8009c66:	db05      	blt.n	8009c74 <__hi0bits+0x38>
 8009c68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c6c:	f103 0301 	add.w	r3, r3, #1
 8009c70:	bf08      	it	eq
 8009c72:	2320      	moveq	r3, #32
 8009c74:	4618      	mov	r0, r3
 8009c76:	4770      	bx	lr
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e7e4      	b.n	8009c46 <__hi0bits+0xa>

08009c7c <__lo0bits>:
 8009c7c:	6803      	ldr	r3, [r0, #0]
 8009c7e:	f013 0207 	ands.w	r2, r3, #7
 8009c82:	d00c      	beq.n	8009c9e <__lo0bits+0x22>
 8009c84:	07d9      	lsls	r1, r3, #31
 8009c86:	d422      	bmi.n	8009cce <__lo0bits+0x52>
 8009c88:	079a      	lsls	r2, r3, #30
 8009c8a:	bf49      	itett	mi
 8009c8c:	085b      	lsrmi	r3, r3, #1
 8009c8e:	089b      	lsrpl	r3, r3, #2
 8009c90:	6003      	strmi	r3, [r0, #0]
 8009c92:	2201      	movmi	r2, #1
 8009c94:	bf5c      	itt	pl
 8009c96:	6003      	strpl	r3, [r0, #0]
 8009c98:	2202      	movpl	r2, #2
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	4770      	bx	lr
 8009c9e:	b299      	uxth	r1, r3
 8009ca0:	b909      	cbnz	r1, 8009ca6 <__lo0bits+0x2a>
 8009ca2:	0c1b      	lsrs	r3, r3, #16
 8009ca4:	2210      	movs	r2, #16
 8009ca6:	b2d9      	uxtb	r1, r3
 8009ca8:	b909      	cbnz	r1, 8009cae <__lo0bits+0x32>
 8009caa:	3208      	adds	r2, #8
 8009cac:	0a1b      	lsrs	r3, r3, #8
 8009cae:	0719      	lsls	r1, r3, #28
 8009cb0:	bf04      	itt	eq
 8009cb2:	091b      	lsreq	r3, r3, #4
 8009cb4:	3204      	addeq	r2, #4
 8009cb6:	0799      	lsls	r1, r3, #30
 8009cb8:	bf04      	itt	eq
 8009cba:	089b      	lsreq	r3, r3, #2
 8009cbc:	3202      	addeq	r2, #2
 8009cbe:	07d9      	lsls	r1, r3, #31
 8009cc0:	d403      	bmi.n	8009cca <__lo0bits+0x4e>
 8009cc2:	085b      	lsrs	r3, r3, #1
 8009cc4:	f102 0201 	add.w	r2, r2, #1
 8009cc8:	d003      	beq.n	8009cd2 <__lo0bits+0x56>
 8009cca:	6003      	str	r3, [r0, #0]
 8009ccc:	e7e5      	b.n	8009c9a <__lo0bits+0x1e>
 8009cce:	2200      	movs	r2, #0
 8009cd0:	e7e3      	b.n	8009c9a <__lo0bits+0x1e>
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	e7e1      	b.n	8009c9a <__lo0bits+0x1e>
	...

08009cd8 <__i2b>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	460c      	mov	r4, r1
 8009cdc:	2101      	movs	r1, #1
 8009cde:	f7ff ff05 	bl	8009aec <_Balloc>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	b928      	cbnz	r0, 8009cf2 <__i2b+0x1a>
 8009ce6:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <__i2b+0x24>)
 8009ce8:	4805      	ldr	r0, [pc, #20]	; (8009d00 <__i2b+0x28>)
 8009cea:	f240 1145 	movw	r1, #325	; 0x145
 8009cee:	f000 fb37 	bl	800a360 <__assert_func>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	6144      	str	r4, [r0, #20]
 8009cf6:	6103      	str	r3, [r0, #16]
 8009cf8:	bd10      	pop	{r4, pc}
 8009cfa:	bf00      	nop
 8009cfc:	0800ab40 	.word	0x0800ab40
 8009d00:	0800ab51 	.word	0x0800ab51

08009d04 <__multiply>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	4691      	mov	r9, r2
 8009d0a:	690a      	ldr	r2, [r1, #16]
 8009d0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	bfb8      	it	lt
 8009d14:	460b      	movlt	r3, r1
 8009d16:	460c      	mov	r4, r1
 8009d18:	bfbc      	itt	lt
 8009d1a:	464c      	movlt	r4, r9
 8009d1c:	4699      	movlt	r9, r3
 8009d1e:	6927      	ldr	r7, [r4, #16]
 8009d20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d24:	68a3      	ldr	r3, [r4, #8]
 8009d26:	6861      	ldr	r1, [r4, #4]
 8009d28:	eb07 060a 	add.w	r6, r7, sl
 8009d2c:	42b3      	cmp	r3, r6
 8009d2e:	b085      	sub	sp, #20
 8009d30:	bfb8      	it	lt
 8009d32:	3101      	addlt	r1, #1
 8009d34:	f7ff feda 	bl	8009aec <_Balloc>
 8009d38:	b930      	cbnz	r0, 8009d48 <__multiply+0x44>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	4b44      	ldr	r3, [pc, #272]	; (8009e50 <__multiply+0x14c>)
 8009d3e:	4845      	ldr	r0, [pc, #276]	; (8009e54 <__multiply+0x150>)
 8009d40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d44:	f000 fb0c 	bl	800a360 <__assert_func>
 8009d48:	f100 0514 	add.w	r5, r0, #20
 8009d4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d50:	462b      	mov	r3, r5
 8009d52:	2200      	movs	r2, #0
 8009d54:	4543      	cmp	r3, r8
 8009d56:	d321      	bcc.n	8009d9c <__multiply+0x98>
 8009d58:	f104 0314 	add.w	r3, r4, #20
 8009d5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d60:	f109 0314 	add.w	r3, r9, #20
 8009d64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d68:	9202      	str	r2, [sp, #8]
 8009d6a:	1b3a      	subs	r2, r7, r4
 8009d6c:	3a15      	subs	r2, #21
 8009d6e:	f022 0203 	bic.w	r2, r2, #3
 8009d72:	3204      	adds	r2, #4
 8009d74:	f104 0115 	add.w	r1, r4, #21
 8009d78:	428f      	cmp	r7, r1
 8009d7a:	bf38      	it	cc
 8009d7c:	2204      	movcc	r2, #4
 8009d7e:	9201      	str	r2, [sp, #4]
 8009d80:	9a02      	ldr	r2, [sp, #8]
 8009d82:	9303      	str	r3, [sp, #12]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d80c      	bhi.n	8009da2 <__multiply+0x9e>
 8009d88:	2e00      	cmp	r6, #0
 8009d8a:	dd03      	ble.n	8009d94 <__multiply+0x90>
 8009d8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d05b      	beq.n	8009e4c <__multiply+0x148>
 8009d94:	6106      	str	r6, [r0, #16]
 8009d96:	b005      	add	sp, #20
 8009d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9c:	f843 2b04 	str.w	r2, [r3], #4
 8009da0:	e7d8      	b.n	8009d54 <__multiply+0x50>
 8009da2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009da6:	f1ba 0f00 	cmp.w	sl, #0
 8009daa:	d024      	beq.n	8009df6 <__multiply+0xf2>
 8009dac:	f104 0e14 	add.w	lr, r4, #20
 8009db0:	46a9      	mov	r9, r5
 8009db2:	f04f 0c00 	mov.w	ip, #0
 8009db6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dba:	f8d9 1000 	ldr.w	r1, [r9]
 8009dbe:	fa1f fb82 	uxth.w	fp, r2
 8009dc2:	b289      	uxth	r1, r1
 8009dc4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009dc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009dcc:	f8d9 2000 	ldr.w	r2, [r9]
 8009dd0:	4461      	add	r1, ip
 8009dd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dd6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009dda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009dde:	b289      	uxth	r1, r1
 8009de0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009de4:	4577      	cmp	r7, lr
 8009de6:	f849 1b04 	str.w	r1, [r9], #4
 8009dea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dee:	d8e2      	bhi.n	8009db6 <__multiply+0xb2>
 8009df0:	9a01      	ldr	r2, [sp, #4]
 8009df2:	f845 c002 	str.w	ip, [r5, r2]
 8009df6:	9a03      	ldr	r2, [sp, #12]
 8009df8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	f1b9 0f00 	cmp.w	r9, #0
 8009e02:	d021      	beq.n	8009e48 <__multiply+0x144>
 8009e04:	6829      	ldr	r1, [r5, #0]
 8009e06:	f104 0c14 	add.w	ip, r4, #20
 8009e0a:	46ae      	mov	lr, r5
 8009e0c:	f04f 0a00 	mov.w	sl, #0
 8009e10:	f8bc b000 	ldrh.w	fp, [ip]
 8009e14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e18:	fb09 220b 	mla	r2, r9, fp, r2
 8009e1c:	4452      	add	r2, sl
 8009e1e:	b289      	uxth	r1, r1
 8009e20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e24:	f84e 1b04 	str.w	r1, [lr], #4
 8009e28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e30:	f8be 1000 	ldrh.w	r1, [lr]
 8009e34:	fb09 110a 	mla	r1, r9, sl, r1
 8009e38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e3c:	4567      	cmp	r7, ip
 8009e3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e42:	d8e5      	bhi.n	8009e10 <__multiply+0x10c>
 8009e44:	9a01      	ldr	r2, [sp, #4]
 8009e46:	50a9      	str	r1, [r5, r2]
 8009e48:	3504      	adds	r5, #4
 8009e4a:	e799      	b.n	8009d80 <__multiply+0x7c>
 8009e4c:	3e01      	subs	r6, #1
 8009e4e:	e79b      	b.n	8009d88 <__multiply+0x84>
 8009e50:	0800ab40 	.word	0x0800ab40
 8009e54:	0800ab51 	.word	0x0800ab51

08009e58 <__pow5mult>:
 8009e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e5c:	4615      	mov	r5, r2
 8009e5e:	f012 0203 	ands.w	r2, r2, #3
 8009e62:	4606      	mov	r6, r0
 8009e64:	460f      	mov	r7, r1
 8009e66:	d007      	beq.n	8009e78 <__pow5mult+0x20>
 8009e68:	4c25      	ldr	r4, [pc, #148]	; (8009f00 <__pow5mult+0xa8>)
 8009e6a:	3a01      	subs	r2, #1
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e72:	f7ff fe9d 	bl	8009bb0 <__multadd>
 8009e76:	4607      	mov	r7, r0
 8009e78:	10ad      	asrs	r5, r5, #2
 8009e7a:	d03d      	beq.n	8009ef8 <__pow5mult+0xa0>
 8009e7c:	69f4      	ldr	r4, [r6, #28]
 8009e7e:	b97c      	cbnz	r4, 8009ea0 <__pow5mult+0x48>
 8009e80:	2010      	movs	r0, #16
 8009e82:	f7ff fd7f 	bl	8009984 <malloc>
 8009e86:	4602      	mov	r2, r0
 8009e88:	61f0      	str	r0, [r6, #28]
 8009e8a:	b928      	cbnz	r0, 8009e98 <__pow5mult+0x40>
 8009e8c:	4b1d      	ldr	r3, [pc, #116]	; (8009f04 <__pow5mult+0xac>)
 8009e8e:	481e      	ldr	r0, [pc, #120]	; (8009f08 <__pow5mult+0xb0>)
 8009e90:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009e94:	f000 fa64 	bl	800a360 <__assert_func>
 8009e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e9c:	6004      	str	r4, [r0, #0]
 8009e9e:	60c4      	str	r4, [r0, #12]
 8009ea0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ea8:	b94c      	cbnz	r4, 8009ebe <__pow5mult+0x66>
 8009eaa:	f240 2171 	movw	r1, #625	; 0x271
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f7ff ff12 	bl	8009cd8 <__i2b>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eba:	4604      	mov	r4, r0
 8009ebc:	6003      	str	r3, [r0, #0]
 8009ebe:	f04f 0900 	mov.w	r9, #0
 8009ec2:	07eb      	lsls	r3, r5, #31
 8009ec4:	d50a      	bpl.n	8009edc <__pow5mult+0x84>
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	4622      	mov	r2, r4
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ff1a 	bl	8009d04 <__multiply>
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	4680      	mov	r8, r0
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7ff fe49 	bl	8009b6c <_Bfree>
 8009eda:	4647      	mov	r7, r8
 8009edc:	106d      	asrs	r5, r5, #1
 8009ede:	d00b      	beq.n	8009ef8 <__pow5mult+0xa0>
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	b938      	cbnz	r0, 8009ef4 <__pow5mult+0x9c>
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff ff0b 	bl	8009d04 <__multiply>
 8009eee:	6020      	str	r0, [r4, #0]
 8009ef0:	f8c0 9000 	str.w	r9, [r0]
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	e7e4      	b.n	8009ec2 <__pow5mult+0x6a>
 8009ef8:	4638      	mov	r0, r7
 8009efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efe:	bf00      	nop
 8009f00:	0800aca0 	.word	0x0800aca0
 8009f04:	0800aad1 	.word	0x0800aad1
 8009f08:	0800ab51 	.word	0x0800ab51

08009f0c <__lshift>:
 8009f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f10:	460c      	mov	r4, r1
 8009f12:	6849      	ldr	r1, [r1, #4]
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	4691      	mov	r9, r2
 8009f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f24:	f108 0601 	add.w	r6, r8, #1
 8009f28:	42b3      	cmp	r3, r6
 8009f2a:	db0b      	blt.n	8009f44 <__lshift+0x38>
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f7ff fddd 	bl	8009aec <_Balloc>
 8009f32:	4605      	mov	r5, r0
 8009f34:	b948      	cbnz	r0, 8009f4a <__lshift+0x3e>
 8009f36:	4602      	mov	r2, r0
 8009f38:	4b28      	ldr	r3, [pc, #160]	; (8009fdc <__lshift+0xd0>)
 8009f3a:	4829      	ldr	r0, [pc, #164]	; (8009fe0 <__lshift+0xd4>)
 8009f3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f40:	f000 fa0e 	bl	800a360 <__assert_func>
 8009f44:	3101      	adds	r1, #1
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	e7ee      	b.n	8009f28 <__lshift+0x1c>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f100 0114 	add.w	r1, r0, #20
 8009f50:	f100 0210 	add.w	r2, r0, #16
 8009f54:	4618      	mov	r0, r3
 8009f56:	4553      	cmp	r3, sl
 8009f58:	db33      	blt.n	8009fc2 <__lshift+0xb6>
 8009f5a:	6920      	ldr	r0, [r4, #16]
 8009f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f60:	f104 0314 	add.w	r3, r4, #20
 8009f64:	f019 091f 	ands.w	r9, r9, #31
 8009f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f70:	d02b      	beq.n	8009fca <__lshift+0xbe>
 8009f72:	f1c9 0e20 	rsb	lr, r9, #32
 8009f76:	468a      	mov	sl, r1
 8009f78:	2200      	movs	r2, #0
 8009f7a:	6818      	ldr	r0, [r3, #0]
 8009f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009f80:	4310      	orrs	r0, r2
 8009f82:	f84a 0b04 	str.w	r0, [sl], #4
 8009f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8a:	459c      	cmp	ip, r3
 8009f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f90:	d8f3      	bhi.n	8009f7a <__lshift+0x6e>
 8009f92:	ebac 0304 	sub.w	r3, ip, r4
 8009f96:	3b15      	subs	r3, #21
 8009f98:	f023 0303 	bic.w	r3, r3, #3
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	f104 0015 	add.w	r0, r4, #21
 8009fa2:	4584      	cmp	ip, r0
 8009fa4:	bf38      	it	cc
 8009fa6:	2304      	movcc	r3, #4
 8009fa8:	50ca      	str	r2, [r1, r3]
 8009faa:	b10a      	cbz	r2, 8009fb0 <__lshift+0xa4>
 8009fac:	f108 0602 	add.w	r6, r8, #2
 8009fb0:	3e01      	subs	r6, #1
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	612e      	str	r6, [r5, #16]
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	f7ff fdd8 	bl	8009b6c <_Bfree>
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	e7c5      	b.n	8009f56 <__lshift+0x4a>
 8009fca:	3904      	subs	r1, #4
 8009fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fd4:	459c      	cmp	ip, r3
 8009fd6:	d8f9      	bhi.n	8009fcc <__lshift+0xc0>
 8009fd8:	e7ea      	b.n	8009fb0 <__lshift+0xa4>
 8009fda:	bf00      	nop
 8009fdc:	0800ab40 	.word	0x0800ab40
 8009fe0:	0800ab51 	.word	0x0800ab51

08009fe4 <__mcmp>:
 8009fe4:	b530      	push	{r4, r5, lr}
 8009fe6:	6902      	ldr	r2, [r0, #16]
 8009fe8:	690c      	ldr	r4, [r1, #16]
 8009fea:	1b12      	subs	r2, r2, r4
 8009fec:	d10e      	bne.n	800a00c <__mcmp+0x28>
 8009fee:	f100 0314 	add.w	r3, r0, #20
 8009ff2:	3114      	adds	r1, #20
 8009ff4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ff8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ffc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a000:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a004:	42a5      	cmp	r5, r4
 800a006:	d003      	beq.n	800a010 <__mcmp+0x2c>
 800a008:	d305      	bcc.n	800a016 <__mcmp+0x32>
 800a00a:	2201      	movs	r2, #1
 800a00c:	4610      	mov	r0, r2
 800a00e:	bd30      	pop	{r4, r5, pc}
 800a010:	4283      	cmp	r3, r0
 800a012:	d3f3      	bcc.n	8009ffc <__mcmp+0x18>
 800a014:	e7fa      	b.n	800a00c <__mcmp+0x28>
 800a016:	f04f 32ff 	mov.w	r2, #4294967295
 800a01a:	e7f7      	b.n	800a00c <__mcmp+0x28>

0800a01c <__mdiff>:
 800a01c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	460c      	mov	r4, r1
 800a022:	4606      	mov	r6, r0
 800a024:	4611      	mov	r1, r2
 800a026:	4620      	mov	r0, r4
 800a028:	4690      	mov	r8, r2
 800a02a:	f7ff ffdb 	bl	8009fe4 <__mcmp>
 800a02e:	1e05      	subs	r5, r0, #0
 800a030:	d110      	bne.n	800a054 <__mdiff+0x38>
 800a032:	4629      	mov	r1, r5
 800a034:	4630      	mov	r0, r6
 800a036:	f7ff fd59 	bl	8009aec <_Balloc>
 800a03a:	b930      	cbnz	r0, 800a04a <__mdiff+0x2e>
 800a03c:	4b3a      	ldr	r3, [pc, #232]	; (800a128 <__mdiff+0x10c>)
 800a03e:	4602      	mov	r2, r0
 800a040:	f240 2137 	movw	r1, #567	; 0x237
 800a044:	4839      	ldr	r0, [pc, #228]	; (800a12c <__mdiff+0x110>)
 800a046:	f000 f98b 	bl	800a360 <__assert_func>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a054:	bfa4      	itt	ge
 800a056:	4643      	movge	r3, r8
 800a058:	46a0      	movge	r8, r4
 800a05a:	4630      	mov	r0, r6
 800a05c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a060:	bfa6      	itte	ge
 800a062:	461c      	movge	r4, r3
 800a064:	2500      	movge	r5, #0
 800a066:	2501      	movlt	r5, #1
 800a068:	f7ff fd40 	bl	8009aec <_Balloc>
 800a06c:	b920      	cbnz	r0, 800a078 <__mdiff+0x5c>
 800a06e:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <__mdiff+0x10c>)
 800a070:	4602      	mov	r2, r0
 800a072:	f240 2145 	movw	r1, #581	; 0x245
 800a076:	e7e5      	b.n	800a044 <__mdiff+0x28>
 800a078:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a07c:	6926      	ldr	r6, [r4, #16]
 800a07e:	60c5      	str	r5, [r0, #12]
 800a080:	f104 0914 	add.w	r9, r4, #20
 800a084:	f108 0514 	add.w	r5, r8, #20
 800a088:	f100 0e14 	add.w	lr, r0, #20
 800a08c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a090:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a094:	f108 0210 	add.w	r2, r8, #16
 800a098:	46f2      	mov	sl, lr
 800a09a:	2100      	movs	r1, #0
 800a09c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0a4:	fa11 f88b 	uxtah	r8, r1, fp
 800a0a8:	b299      	uxth	r1, r3
 800a0aa:	0c1b      	lsrs	r3, r3, #16
 800a0ac:	eba8 0801 	sub.w	r8, r8, r1
 800a0b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0b8:	fa1f f888 	uxth.w	r8, r8
 800a0bc:	1419      	asrs	r1, r3, #16
 800a0be:	454e      	cmp	r6, r9
 800a0c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0c4:	f84a 3b04 	str.w	r3, [sl], #4
 800a0c8:	d8e8      	bhi.n	800a09c <__mdiff+0x80>
 800a0ca:	1b33      	subs	r3, r6, r4
 800a0cc:	3b15      	subs	r3, #21
 800a0ce:	f023 0303 	bic.w	r3, r3, #3
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	3415      	adds	r4, #21
 800a0d6:	42a6      	cmp	r6, r4
 800a0d8:	bf38      	it	cc
 800a0da:	2304      	movcc	r3, #4
 800a0dc:	441d      	add	r5, r3
 800a0de:	4473      	add	r3, lr
 800a0e0:	469e      	mov	lr, r3
 800a0e2:	462e      	mov	r6, r5
 800a0e4:	4566      	cmp	r6, ip
 800a0e6:	d30e      	bcc.n	800a106 <__mdiff+0xea>
 800a0e8:	f10c 0203 	add.w	r2, ip, #3
 800a0ec:	1b52      	subs	r2, r2, r5
 800a0ee:	f022 0203 	bic.w	r2, r2, #3
 800a0f2:	3d03      	subs	r5, #3
 800a0f4:	45ac      	cmp	ip, r5
 800a0f6:	bf38      	it	cc
 800a0f8:	2200      	movcc	r2, #0
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a100:	b17a      	cbz	r2, 800a122 <__mdiff+0x106>
 800a102:	6107      	str	r7, [r0, #16]
 800a104:	e7a4      	b.n	800a050 <__mdiff+0x34>
 800a106:	f856 8b04 	ldr.w	r8, [r6], #4
 800a10a:	fa11 f288 	uxtah	r2, r1, r8
 800a10e:	1414      	asrs	r4, r2, #16
 800a110:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a114:	b292      	uxth	r2, r2
 800a116:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a11a:	f84e 2b04 	str.w	r2, [lr], #4
 800a11e:	1421      	asrs	r1, r4, #16
 800a120:	e7e0      	b.n	800a0e4 <__mdiff+0xc8>
 800a122:	3f01      	subs	r7, #1
 800a124:	e7ea      	b.n	800a0fc <__mdiff+0xe0>
 800a126:	bf00      	nop
 800a128:	0800ab40 	.word	0x0800ab40
 800a12c:	0800ab51 	.word	0x0800ab51

0800a130 <__d2b>:
 800a130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a134:	460f      	mov	r7, r1
 800a136:	2101      	movs	r1, #1
 800a138:	ec59 8b10 	vmov	r8, r9, d0
 800a13c:	4616      	mov	r6, r2
 800a13e:	f7ff fcd5 	bl	8009aec <_Balloc>
 800a142:	4604      	mov	r4, r0
 800a144:	b930      	cbnz	r0, 800a154 <__d2b+0x24>
 800a146:	4602      	mov	r2, r0
 800a148:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <__d2b+0xac>)
 800a14a:	4825      	ldr	r0, [pc, #148]	; (800a1e0 <__d2b+0xb0>)
 800a14c:	f240 310f 	movw	r1, #783	; 0x30f
 800a150:	f000 f906 	bl	800a360 <__assert_func>
 800a154:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a15c:	bb2d      	cbnz	r5, 800a1aa <__d2b+0x7a>
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	f1b8 0300 	subs.w	r3, r8, #0
 800a164:	d026      	beq.n	800a1b4 <__d2b+0x84>
 800a166:	4668      	mov	r0, sp
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	f7ff fd87 	bl	8009c7c <__lo0bits>
 800a16e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a172:	b1e8      	cbz	r0, 800a1b0 <__d2b+0x80>
 800a174:	f1c0 0320 	rsb	r3, r0, #32
 800a178:	fa02 f303 	lsl.w	r3, r2, r3
 800a17c:	430b      	orrs	r3, r1
 800a17e:	40c2      	lsrs	r2, r0
 800a180:	6163      	str	r3, [r4, #20]
 800a182:	9201      	str	r2, [sp, #4]
 800a184:	9b01      	ldr	r3, [sp, #4]
 800a186:	61a3      	str	r3, [r4, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	bf14      	ite	ne
 800a18c:	2202      	movne	r2, #2
 800a18e:	2201      	moveq	r2, #1
 800a190:	6122      	str	r2, [r4, #16]
 800a192:	b1bd      	cbz	r5, 800a1c4 <__d2b+0x94>
 800a194:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a198:	4405      	add	r5, r0
 800a19a:	603d      	str	r5, [r7, #0]
 800a19c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1a0:	6030      	str	r0, [r6, #0]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	b003      	add	sp, #12
 800a1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1ae:	e7d6      	b.n	800a15e <__d2b+0x2e>
 800a1b0:	6161      	str	r1, [r4, #20]
 800a1b2:	e7e7      	b.n	800a184 <__d2b+0x54>
 800a1b4:	a801      	add	r0, sp, #4
 800a1b6:	f7ff fd61 	bl	8009c7c <__lo0bits>
 800a1ba:	9b01      	ldr	r3, [sp, #4]
 800a1bc:	6163      	str	r3, [r4, #20]
 800a1be:	3020      	adds	r0, #32
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	e7e5      	b.n	800a190 <__d2b+0x60>
 800a1c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1cc:	6038      	str	r0, [r7, #0]
 800a1ce:	6918      	ldr	r0, [r3, #16]
 800a1d0:	f7ff fd34 	bl	8009c3c <__hi0bits>
 800a1d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1d8:	e7e2      	b.n	800a1a0 <__d2b+0x70>
 800a1da:	bf00      	nop
 800a1dc:	0800ab40 	.word	0x0800ab40
 800a1e0:	0800ab51 	.word	0x0800ab51

0800a1e4 <__sflush_r>:
 800a1e4:	898a      	ldrh	r2, [r1, #12]
 800a1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	0710      	lsls	r0, r2, #28
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	d458      	bmi.n	800a2a4 <__sflush_r+0xc0>
 800a1f2:	684b      	ldr	r3, [r1, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	dc05      	bgt.n	800a204 <__sflush_r+0x20>
 800a1f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	dc02      	bgt.n	800a204 <__sflush_r+0x20>
 800a1fe:	2000      	movs	r0, #0
 800a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a206:	2e00      	cmp	r6, #0
 800a208:	d0f9      	beq.n	800a1fe <__sflush_r+0x1a>
 800a20a:	2300      	movs	r3, #0
 800a20c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a210:	682f      	ldr	r7, [r5, #0]
 800a212:	6a21      	ldr	r1, [r4, #32]
 800a214:	602b      	str	r3, [r5, #0]
 800a216:	d032      	beq.n	800a27e <__sflush_r+0x9a>
 800a218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	075a      	lsls	r2, r3, #29
 800a21e:	d505      	bpl.n	800a22c <__sflush_r+0x48>
 800a220:	6863      	ldr	r3, [r4, #4]
 800a222:	1ac0      	subs	r0, r0, r3
 800a224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a226:	b10b      	cbz	r3, 800a22c <__sflush_r+0x48>
 800a228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a22a:	1ac0      	subs	r0, r0, r3
 800a22c:	2300      	movs	r3, #0
 800a22e:	4602      	mov	r2, r0
 800a230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a232:	6a21      	ldr	r1, [r4, #32]
 800a234:	4628      	mov	r0, r5
 800a236:	47b0      	blx	r6
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	d106      	bne.n	800a24c <__sflush_r+0x68>
 800a23e:	6829      	ldr	r1, [r5, #0]
 800a240:	291d      	cmp	r1, #29
 800a242:	d82b      	bhi.n	800a29c <__sflush_r+0xb8>
 800a244:	4a29      	ldr	r2, [pc, #164]	; (800a2ec <__sflush_r+0x108>)
 800a246:	410a      	asrs	r2, r1
 800a248:	07d6      	lsls	r6, r2, #31
 800a24a:	d427      	bmi.n	800a29c <__sflush_r+0xb8>
 800a24c:	2200      	movs	r2, #0
 800a24e:	6062      	str	r2, [r4, #4]
 800a250:	04d9      	lsls	r1, r3, #19
 800a252:	6922      	ldr	r2, [r4, #16]
 800a254:	6022      	str	r2, [r4, #0]
 800a256:	d504      	bpl.n	800a262 <__sflush_r+0x7e>
 800a258:	1c42      	adds	r2, r0, #1
 800a25a:	d101      	bne.n	800a260 <__sflush_r+0x7c>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b903      	cbnz	r3, 800a262 <__sflush_r+0x7e>
 800a260:	6560      	str	r0, [r4, #84]	; 0x54
 800a262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a264:	602f      	str	r7, [r5, #0]
 800a266:	2900      	cmp	r1, #0
 800a268:	d0c9      	beq.n	800a1fe <__sflush_r+0x1a>
 800a26a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a26e:	4299      	cmp	r1, r3
 800a270:	d002      	beq.n	800a278 <__sflush_r+0x94>
 800a272:	4628      	mov	r0, r5
 800a274:	f7ff fb3a 	bl	80098ec <_free_r>
 800a278:	2000      	movs	r0, #0
 800a27a:	6360      	str	r0, [r4, #52]	; 0x34
 800a27c:	e7c0      	b.n	800a200 <__sflush_r+0x1c>
 800a27e:	2301      	movs	r3, #1
 800a280:	4628      	mov	r0, r5
 800a282:	47b0      	blx	r6
 800a284:	1c41      	adds	r1, r0, #1
 800a286:	d1c8      	bne.n	800a21a <__sflush_r+0x36>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0c5      	beq.n	800a21a <__sflush_r+0x36>
 800a28e:	2b1d      	cmp	r3, #29
 800a290:	d001      	beq.n	800a296 <__sflush_r+0xb2>
 800a292:	2b16      	cmp	r3, #22
 800a294:	d101      	bne.n	800a29a <__sflush_r+0xb6>
 800a296:	602f      	str	r7, [r5, #0]
 800a298:	e7b1      	b.n	800a1fe <__sflush_r+0x1a>
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	e7ad      	b.n	800a200 <__sflush_r+0x1c>
 800a2a4:	690f      	ldr	r7, [r1, #16]
 800a2a6:	2f00      	cmp	r7, #0
 800a2a8:	d0a9      	beq.n	800a1fe <__sflush_r+0x1a>
 800a2aa:	0793      	lsls	r3, r2, #30
 800a2ac:	680e      	ldr	r6, [r1, #0]
 800a2ae:	bf08      	it	eq
 800a2b0:	694b      	ldreq	r3, [r1, #20]
 800a2b2:	600f      	str	r7, [r1, #0]
 800a2b4:	bf18      	it	ne
 800a2b6:	2300      	movne	r3, #0
 800a2b8:	eba6 0807 	sub.w	r8, r6, r7
 800a2bc:	608b      	str	r3, [r1, #8]
 800a2be:	f1b8 0f00 	cmp.w	r8, #0
 800a2c2:	dd9c      	ble.n	800a1fe <__sflush_r+0x1a>
 800a2c4:	6a21      	ldr	r1, [r4, #32]
 800a2c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2c8:	4643      	mov	r3, r8
 800a2ca:	463a      	mov	r2, r7
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	47b0      	blx	r6
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	dc06      	bgt.n	800a2e2 <__sflush_r+0xfe>
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2da:	81a3      	strh	r3, [r4, #12]
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	e78e      	b.n	800a200 <__sflush_r+0x1c>
 800a2e2:	4407      	add	r7, r0
 800a2e4:	eba8 0800 	sub.w	r8, r8, r0
 800a2e8:	e7e9      	b.n	800a2be <__sflush_r+0xda>
 800a2ea:	bf00      	nop
 800a2ec:	dfbffffe 	.word	0xdfbffffe

0800a2f0 <_fflush_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	690b      	ldr	r3, [r1, #16]
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	b913      	cbnz	r3, 800a300 <_fflush_r+0x10>
 800a2fa:	2500      	movs	r5, #0
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	b118      	cbz	r0, 800a30a <_fflush_r+0x1a>
 800a302:	6a03      	ldr	r3, [r0, #32]
 800a304:	b90b      	cbnz	r3, 800a30a <_fflush_r+0x1a>
 800a306:	f7fe fb19 	bl	800893c <__sinit>
 800a30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d0f3      	beq.n	800a2fa <_fflush_r+0xa>
 800a312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a314:	07d0      	lsls	r0, r2, #31
 800a316:	d404      	bmi.n	800a322 <_fflush_r+0x32>
 800a318:	0599      	lsls	r1, r3, #22
 800a31a:	d402      	bmi.n	800a322 <_fflush_r+0x32>
 800a31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a31e:	f7fe fc59 	bl	8008bd4 <__retarget_lock_acquire_recursive>
 800a322:	4628      	mov	r0, r5
 800a324:	4621      	mov	r1, r4
 800a326:	f7ff ff5d 	bl	800a1e4 <__sflush_r>
 800a32a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a32c:	07da      	lsls	r2, r3, #31
 800a32e:	4605      	mov	r5, r0
 800a330:	d4e4      	bmi.n	800a2fc <_fflush_r+0xc>
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	059b      	lsls	r3, r3, #22
 800a336:	d4e1      	bmi.n	800a2fc <_fflush_r+0xc>
 800a338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a33a:	f7fe fc4c 	bl	8008bd6 <__retarget_lock_release_recursive>
 800a33e:	e7dd      	b.n	800a2fc <_fflush_r+0xc>

0800a340 <_sbrk_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d06      	ldr	r5, [pc, #24]	; (800a35c <_sbrk_r+0x1c>)
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	f7f8 f9cc 	bl	80026e8 <_sbrk>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d102      	bne.n	800a35a <_sbrk_r+0x1a>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	b103      	cbz	r3, 800a35a <_sbrk_r+0x1a>
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	200045b8 	.word	0x200045b8

0800a360 <__assert_func>:
 800a360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a362:	4614      	mov	r4, r2
 800a364:	461a      	mov	r2, r3
 800a366:	4b09      	ldr	r3, [pc, #36]	; (800a38c <__assert_func+0x2c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4605      	mov	r5, r0
 800a36c:	68d8      	ldr	r0, [r3, #12]
 800a36e:	b14c      	cbz	r4, 800a384 <__assert_func+0x24>
 800a370:	4b07      	ldr	r3, [pc, #28]	; (800a390 <__assert_func+0x30>)
 800a372:	9100      	str	r1, [sp, #0]
 800a374:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a378:	4906      	ldr	r1, [pc, #24]	; (800a394 <__assert_func+0x34>)
 800a37a:	462b      	mov	r3, r5
 800a37c:	f000 f844 	bl	800a408 <fiprintf>
 800a380:	f000 f854 	bl	800a42c <abort>
 800a384:	4b04      	ldr	r3, [pc, #16]	; (800a398 <__assert_func+0x38>)
 800a386:	461c      	mov	r4, r3
 800a388:	e7f3      	b.n	800a372 <__assert_func+0x12>
 800a38a:	bf00      	nop
 800a38c:	20000074 	.word	0x20000074
 800a390:	0800acb6 	.word	0x0800acb6
 800a394:	0800acc3 	.word	0x0800acc3
 800a398:	0800acf1 	.word	0x0800acf1

0800a39c <_calloc_r>:
 800a39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a39e:	fba1 2402 	umull	r2, r4, r1, r2
 800a3a2:	b94c      	cbnz	r4, 800a3b8 <_calloc_r+0x1c>
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	9201      	str	r2, [sp, #4]
 800a3a8:	f7ff fb14 	bl	80099d4 <_malloc_r>
 800a3ac:	9a01      	ldr	r2, [sp, #4]
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	b930      	cbnz	r0, 800a3c0 <_calloc_r+0x24>
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	b003      	add	sp, #12
 800a3b6:	bd30      	pop	{r4, r5, pc}
 800a3b8:	220c      	movs	r2, #12
 800a3ba:	6002      	str	r2, [r0, #0]
 800a3bc:	2500      	movs	r5, #0
 800a3be:	e7f8      	b.n	800a3b2 <_calloc_r+0x16>
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	f7fe fb34 	bl	8008a2e <memset>
 800a3c6:	e7f4      	b.n	800a3b2 <_calloc_r+0x16>

0800a3c8 <__ascii_mbtowc>:
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	b901      	cbnz	r1, 800a3ce <__ascii_mbtowc+0x6>
 800a3cc:	a901      	add	r1, sp, #4
 800a3ce:	b142      	cbz	r2, 800a3e2 <__ascii_mbtowc+0x1a>
 800a3d0:	b14b      	cbz	r3, 800a3e6 <__ascii_mbtowc+0x1e>
 800a3d2:	7813      	ldrb	r3, [r2, #0]
 800a3d4:	600b      	str	r3, [r1, #0]
 800a3d6:	7812      	ldrb	r2, [r2, #0]
 800a3d8:	1e10      	subs	r0, r2, #0
 800a3da:	bf18      	it	ne
 800a3dc:	2001      	movne	r0, #1
 800a3de:	b002      	add	sp, #8
 800a3e0:	4770      	bx	lr
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	e7fb      	b.n	800a3de <__ascii_mbtowc+0x16>
 800a3e6:	f06f 0001 	mvn.w	r0, #1
 800a3ea:	e7f8      	b.n	800a3de <__ascii_mbtowc+0x16>

0800a3ec <__ascii_wctomb>:
 800a3ec:	b149      	cbz	r1, 800a402 <__ascii_wctomb+0x16>
 800a3ee:	2aff      	cmp	r2, #255	; 0xff
 800a3f0:	bf85      	ittet	hi
 800a3f2:	238a      	movhi	r3, #138	; 0x8a
 800a3f4:	6003      	strhi	r3, [r0, #0]
 800a3f6:	700a      	strbls	r2, [r1, #0]
 800a3f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3fc:	bf98      	it	ls
 800a3fe:	2001      	movls	r0, #1
 800a400:	4770      	bx	lr
 800a402:	4608      	mov	r0, r1
 800a404:	4770      	bx	lr
	...

0800a408 <fiprintf>:
 800a408:	b40e      	push	{r1, r2, r3}
 800a40a:	b503      	push	{r0, r1, lr}
 800a40c:	4601      	mov	r1, r0
 800a40e:	ab03      	add	r3, sp, #12
 800a410:	4805      	ldr	r0, [pc, #20]	; (800a428 <fiprintf+0x20>)
 800a412:	f853 2b04 	ldr.w	r2, [r3], #4
 800a416:	6800      	ldr	r0, [r0, #0]
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	f000 f837 	bl	800a48c <_vfiprintf_r>
 800a41e:	b002      	add	sp, #8
 800a420:	f85d eb04 	ldr.w	lr, [sp], #4
 800a424:	b003      	add	sp, #12
 800a426:	4770      	bx	lr
 800a428:	20000074 	.word	0x20000074

0800a42c <abort>:
 800a42c:	b508      	push	{r3, lr}
 800a42e:	2006      	movs	r0, #6
 800a430:	f000 fa04 	bl	800a83c <raise>
 800a434:	2001      	movs	r0, #1
 800a436:	f7f8 f8df 	bl	80025f8 <_exit>

0800a43a <__sfputc_r>:
 800a43a:	6893      	ldr	r3, [r2, #8]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	b410      	push	{r4}
 800a442:	6093      	str	r3, [r2, #8]
 800a444:	da08      	bge.n	800a458 <__sfputc_r+0x1e>
 800a446:	6994      	ldr	r4, [r2, #24]
 800a448:	42a3      	cmp	r3, r4
 800a44a:	db01      	blt.n	800a450 <__sfputc_r+0x16>
 800a44c:	290a      	cmp	r1, #10
 800a44e:	d103      	bne.n	800a458 <__sfputc_r+0x1e>
 800a450:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a454:	f000 b934 	b.w	800a6c0 <__swbuf_r>
 800a458:	6813      	ldr	r3, [r2, #0]
 800a45a:	1c58      	adds	r0, r3, #1
 800a45c:	6010      	str	r0, [r2, #0]
 800a45e:	7019      	strb	r1, [r3, #0]
 800a460:	4608      	mov	r0, r1
 800a462:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <__sfputs_r>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	4606      	mov	r6, r0
 800a46c:	460f      	mov	r7, r1
 800a46e:	4614      	mov	r4, r2
 800a470:	18d5      	adds	r5, r2, r3
 800a472:	42ac      	cmp	r4, r5
 800a474:	d101      	bne.n	800a47a <__sfputs_r+0x12>
 800a476:	2000      	movs	r0, #0
 800a478:	e007      	b.n	800a48a <__sfputs_r+0x22>
 800a47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a47e:	463a      	mov	r2, r7
 800a480:	4630      	mov	r0, r6
 800a482:	f7ff ffda 	bl	800a43a <__sfputc_r>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	d1f3      	bne.n	800a472 <__sfputs_r+0xa>
 800a48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a48c <_vfiprintf_r>:
 800a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	460d      	mov	r5, r1
 800a492:	b09d      	sub	sp, #116	; 0x74
 800a494:	4614      	mov	r4, r2
 800a496:	4698      	mov	r8, r3
 800a498:	4606      	mov	r6, r0
 800a49a:	b118      	cbz	r0, 800a4a4 <_vfiprintf_r+0x18>
 800a49c:	6a03      	ldr	r3, [r0, #32]
 800a49e:	b90b      	cbnz	r3, 800a4a4 <_vfiprintf_r+0x18>
 800a4a0:	f7fe fa4c 	bl	800893c <__sinit>
 800a4a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4a6:	07d9      	lsls	r1, r3, #31
 800a4a8:	d405      	bmi.n	800a4b6 <_vfiprintf_r+0x2a>
 800a4aa:	89ab      	ldrh	r3, [r5, #12]
 800a4ac:	059a      	lsls	r2, r3, #22
 800a4ae:	d402      	bmi.n	800a4b6 <_vfiprintf_r+0x2a>
 800a4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4b2:	f7fe fb8f 	bl	8008bd4 <__retarget_lock_acquire_recursive>
 800a4b6:	89ab      	ldrh	r3, [r5, #12]
 800a4b8:	071b      	lsls	r3, r3, #28
 800a4ba:	d501      	bpl.n	800a4c0 <_vfiprintf_r+0x34>
 800a4bc:	692b      	ldr	r3, [r5, #16]
 800a4be:	b99b      	cbnz	r3, 800a4e8 <_vfiprintf_r+0x5c>
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f000 f93a 	bl	800a73c <__swsetup_r>
 800a4c8:	b170      	cbz	r0, 800a4e8 <_vfiprintf_r+0x5c>
 800a4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4cc:	07dc      	lsls	r4, r3, #31
 800a4ce:	d504      	bpl.n	800a4da <_vfiprintf_r+0x4e>
 800a4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d4:	b01d      	add	sp, #116	; 0x74
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4da:	89ab      	ldrh	r3, [r5, #12]
 800a4dc:	0598      	lsls	r0, r3, #22
 800a4de:	d4f7      	bmi.n	800a4d0 <_vfiprintf_r+0x44>
 800a4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4e2:	f7fe fb78 	bl	8008bd6 <__retarget_lock_release_recursive>
 800a4e6:	e7f3      	b.n	800a4d0 <_vfiprintf_r+0x44>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ec:	2320      	movs	r3, #32
 800a4ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4f6:	2330      	movs	r3, #48	; 0x30
 800a4f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a6ac <_vfiprintf_r+0x220>
 800a4fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a500:	f04f 0901 	mov.w	r9, #1
 800a504:	4623      	mov	r3, r4
 800a506:	469a      	mov	sl, r3
 800a508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a50c:	b10a      	cbz	r2, 800a512 <_vfiprintf_r+0x86>
 800a50e:	2a25      	cmp	r2, #37	; 0x25
 800a510:	d1f9      	bne.n	800a506 <_vfiprintf_r+0x7a>
 800a512:	ebba 0b04 	subs.w	fp, sl, r4
 800a516:	d00b      	beq.n	800a530 <_vfiprintf_r+0xa4>
 800a518:	465b      	mov	r3, fp
 800a51a:	4622      	mov	r2, r4
 800a51c:	4629      	mov	r1, r5
 800a51e:	4630      	mov	r0, r6
 800a520:	f7ff ffa2 	bl	800a468 <__sfputs_r>
 800a524:	3001      	adds	r0, #1
 800a526:	f000 80a9 	beq.w	800a67c <_vfiprintf_r+0x1f0>
 800a52a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a52c:	445a      	add	r2, fp
 800a52e:	9209      	str	r2, [sp, #36]	; 0x24
 800a530:	f89a 3000 	ldrb.w	r3, [sl]
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 80a1 	beq.w	800a67c <_vfiprintf_r+0x1f0>
 800a53a:	2300      	movs	r3, #0
 800a53c:	f04f 32ff 	mov.w	r2, #4294967295
 800a540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a544:	f10a 0a01 	add.w	sl, sl, #1
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	9307      	str	r3, [sp, #28]
 800a54c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a550:	931a      	str	r3, [sp, #104]	; 0x68
 800a552:	4654      	mov	r4, sl
 800a554:	2205      	movs	r2, #5
 800a556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55a:	4854      	ldr	r0, [pc, #336]	; (800a6ac <_vfiprintf_r+0x220>)
 800a55c:	f7f5 fe48 	bl	80001f0 <memchr>
 800a560:	9a04      	ldr	r2, [sp, #16]
 800a562:	b9d8      	cbnz	r0, 800a59c <_vfiprintf_r+0x110>
 800a564:	06d1      	lsls	r1, r2, #27
 800a566:	bf44      	itt	mi
 800a568:	2320      	movmi	r3, #32
 800a56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a56e:	0713      	lsls	r3, r2, #28
 800a570:	bf44      	itt	mi
 800a572:	232b      	movmi	r3, #43	; 0x2b
 800a574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a578:	f89a 3000 	ldrb.w	r3, [sl]
 800a57c:	2b2a      	cmp	r3, #42	; 0x2a
 800a57e:	d015      	beq.n	800a5ac <_vfiprintf_r+0x120>
 800a580:	9a07      	ldr	r2, [sp, #28]
 800a582:	4654      	mov	r4, sl
 800a584:	2000      	movs	r0, #0
 800a586:	f04f 0c0a 	mov.w	ip, #10
 800a58a:	4621      	mov	r1, r4
 800a58c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a590:	3b30      	subs	r3, #48	; 0x30
 800a592:	2b09      	cmp	r3, #9
 800a594:	d94d      	bls.n	800a632 <_vfiprintf_r+0x1a6>
 800a596:	b1b0      	cbz	r0, 800a5c6 <_vfiprintf_r+0x13a>
 800a598:	9207      	str	r2, [sp, #28]
 800a59a:	e014      	b.n	800a5c6 <_vfiprintf_r+0x13a>
 800a59c:	eba0 0308 	sub.w	r3, r0, r8
 800a5a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	9304      	str	r3, [sp, #16]
 800a5a8:	46a2      	mov	sl, r4
 800a5aa:	e7d2      	b.n	800a552 <_vfiprintf_r+0xc6>
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	1d19      	adds	r1, r3, #4
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	9103      	str	r1, [sp, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	bfbb      	ittet	lt
 800a5b8:	425b      	neglt	r3, r3
 800a5ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a5be:	9307      	strge	r3, [sp, #28]
 800a5c0:	9307      	strlt	r3, [sp, #28]
 800a5c2:	bfb8      	it	lt
 800a5c4:	9204      	strlt	r2, [sp, #16]
 800a5c6:	7823      	ldrb	r3, [r4, #0]
 800a5c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ca:	d10c      	bne.n	800a5e6 <_vfiprintf_r+0x15a>
 800a5cc:	7863      	ldrb	r3, [r4, #1]
 800a5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d0:	d134      	bne.n	800a63c <_vfiprintf_r+0x1b0>
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	1d1a      	adds	r2, r3, #4
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	9203      	str	r2, [sp, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	bfb8      	it	lt
 800a5de:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5e2:	3402      	adds	r4, #2
 800a5e4:	9305      	str	r3, [sp, #20]
 800a5e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a6bc <_vfiprintf_r+0x230>
 800a5ea:	7821      	ldrb	r1, [r4, #0]
 800a5ec:	2203      	movs	r2, #3
 800a5ee:	4650      	mov	r0, sl
 800a5f0:	f7f5 fdfe 	bl	80001f0 <memchr>
 800a5f4:	b138      	cbz	r0, 800a606 <_vfiprintf_r+0x17a>
 800a5f6:	9b04      	ldr	r3, [sp, #16]
 800a5f8:	eba0 000a 	sub.w	r0, r0, sl
 800a5fc:	2240      	movs	r2, #64	; 0x40
 800a5fe:	4082      	lsls	r2, r0
 800a600:	4313      	orrs	r3, r2
 800a602:	3401      	adds	r4, #1
 800a604:	9304      	str	r3, [sp, #16]
 800a606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a60a:	4829      	ldr	r0, [pc, #164]	; (800a6b0 <_vfiprintf_r+0x224>)
 800a60c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a610:	2206      	movs	r2, #6
 800a612:	f7f5 fded 	bl	80001f0 <memchr>
 800a616:	2800      	cmp	r0, #0
 800a618:	d03f      	beq.n	800a69a <_vfiprintf_r+0x20e>
 800a61a:	4b26      	ldr	r3, [pc, #152]	; (800a6b4 <_vfiprintf_r+0x228>)
 800a61c:	bb1b      	cbnz	r3, 800a666 <_vfiprintf_r+0x1da>
 800a61e:	9b03      	ldr	r3, [sp, #12]
 800a620:	3307      	adds	r3, #7
 800a622:	f023 0307 	bic.w	r3, r3, #7
 800a626:	3308      	adds	r3, #8
 800a628:	9303      	str	r3, [sp, #12]
 800a62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62c:	443b      	add	r3, r7
 800a62e:	9309      	str	r3, [sp, #36]	; 0x24
 800a630:	e768      	b.n	800a504 <_vfiprintf_r+0x78>
 800a632:	fb0c 3202 	mla	r2, ip, r2, r3
 800a636:	460c      	mov	r4, r1
 800a638:	2001      	movs	r0, #1
 800a63a:	e7a6      	b.n	800a58a <_vfiprintf_r+0xfe>
 800a63c:	2300      	movs	r3, #0
 800a63e:	3401      	adds	r4, #1
 800a640:	9305      	str	r3, [sp, #20]
 800a642:	4619      	mov	r1, r3
 800a644:	f04f 0c0a 	mov.w	ip, #10
 800a648:	4620      	mov	r0, r4
 800a64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a64e:	3a30      	subs	r2, #48	; 0x30
 800a650:	2a09      	cmp	r2, #9
 800a652:	d903      	bls.n	800a65c <_vfiprintf_r+0x1d0>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0c6      	beq.n	800a5e6 <_vfiprintf_r+0x15a>
 800a658:	9105      	str	r1, [sp, #20]
 800a65a:	e7c4      	b.n	800a5e6 <_vfiprintf_r+0x15a>
 800a65c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a660:	4604      	mov	r4, r0
 800a662:	2301      	movs	r3, #1
 800a664:	e7f0      	b.n	800a648 <_vfiprintf_r+0x1bc>
 800a666:	ab03      	add	r3, sp, #12
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	462a      	mov	r2, r5
 800a66c:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <_vfiprintf_r+0x22c>)
 800a66e:	a904      	add	r1, sp, #16
 800a670:	4630      	mov	r0, r6
 800a672:	f7fd fd23 	bl	80080bc <_printf_float>
 800a676:	4607      	mov	r7, r0
 800a678:	1c78      	adds	r0, r7, #1
 800a67a:	d1d6      	bne.n	800a62a <_vfiprintf_r+0x19e>
 800a67c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a67e:	07d9      	lsls	r1, r3, #31
 800a680:	d405      	bmi.n	800a68e <_vfiprintf_r+0x202>
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	059a      	lsls	r2, r3, #22
 800a686:	d402      	bmi.n	800a68e <_vfiprintf_r+0x202>
 800a688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a68a:	f7fe faa4 	bl	8008bd6 <__retarget_lock_release_recursive>
 800a68e:	89ab      	ldrh	r3, [r5, #12]
 800a690:	065b      	lsls	r3, r3, #25
 800a692:	f53f af1d 	bmi.w	800a4d0 <_vfiprintf_r+0x44>
 800a696:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a698:	e71c      	b.n	800a4d4 <_vfiprintf_r+0x48>
 800a69a:	ab03      	add	r3, sp, #12
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	462a      	mov	r2, r5
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <_vfiprintf_r+0x22c>)
 800a6a2:	a904      	add	r1, sp, #16
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7fd ffad 	bl	8008604 <_printf_i>
 800a6aa:	e7e4      	b.n	800a676 <_vfiprintf_r+0x1ea>
 800a6ac:	0800adf3 	.word	0x0800adf3
 800a6b0:	0800adfd 	.word	0x0800adfd
 800a6b4:	080080bd 	.word	0x080080bd
 800a6b8:	0800a469 	.word	0x0800a469
 800a6bc:	0800adf9 	.word	0x0800adf9

0800a6c0 <__swbuf_r>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	460e      	mov	r6, r1
 800a6c4:	4614      	mov	r4, r2
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	b118      	cbz	r0, 800a6d2 <__swbuf_r+0x12>
 800a6ca:	6a03      	ldr	r3, [r0, #32]
 800a6cc:	b90b      	cbnz	r3, 800a6d2 <__swbuf_r+0x12>
 800a6ce:	f7fe f935 	bl	800893c <__sinit>
 800a6d2:	69a3      	ldr	r3, [r4, #24]
 800a6d4:	60a3      	str	r3, [r4, #8]
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	071a      	lsls	r2, r3, #28
 800a6da:	d525      	bpl.n	800a728 <__swbuf_r+0x68>
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	b31b      	cbz	r3, 800a728 <__swbuf_r+0x68>
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	6922      	ldr	r2, [r4, #16]
 800a6e4:	1a98      	subs	r0, r3, r2
 800a6e6:	6963      	ldr	r3, [r4, #20]
 800a6e8:	b2f6      	uxtb	r6, r6
 800a6ea:	4283      	cmp	r3, r0
 800a6ec:	4637      	mov	r7, r6
 800a6ee:	dc04      	bgt.n	800a6fa <__swbuf_r+0x3a>
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7ff fdfc 	bl	800a2f0 <_fflush_r>
 800a6f8:	b9e0      	cbnz	r0, 800a734 <__swbuf_r+0x74>
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	60a3      	str	r3, [r4, #8]
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	6022      	str	r2, [r4, #0]
 800a706:	701e      	strb	r6, [r3, #0]
 800a708:	6962      	ldr	r2, [r4, #20]
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d004      	beq.n	800a71a <__swbuf_r+0x5a>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	07db      	lsls	r3, r3, #31
 800a714:	d506      	bpl.n	800a724 <__swbuf_r+0x64>
 800a716:	2e0a      	cmp	r6, #10
 800a718:	d104      	bne.n	800a724 <__swbuf_r+0x64>
 800a71a:	4621      	mov	r1, r4
 800a71c:	4628      	mov	r0, r5
 800a71e:	f7ff fde7 	bl	800a2f0 <_fflush_r>
 800a722:	b938      	cbnz	r0, 800a734 <__swbuf_r+0x74>
 800a724:	4638      	mov	r0, r7
 800a726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a728:	4621      	mov	r1, r4
 800a72a:	4628      	mov	r0, r5
 800a72c:	f000 f806 	bl	800a73c <__swsetup_r>
 800a730:	2800      	cmp	r0, #0
 800a732:	d0d5      	beq.n	800a6e0 <__swbuf_r+0x20>
 800a734:	f04f 37ff 	mov.w	r7, #4294967295
 800a738:	e7f4      	b.n	800a724 <__swbuf_r+0x64>
	...

0800a73c <__swsetup_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4b2a      	ldr	r3, [pc, #168]	; (800a7e8 <__swsetup_r+0xac>)
 800a740:	4605      	mov	r5, r0
 800a742:	6818      	ldr	r0, [r3, #0]
 800a744:	460c      	mov	r4, r1
 800a746:	b118      	cbz	r0, 800a750 <__swsetup_r+0x14>
 800a748:	6a03      	ldr	r3, [r0, #32]
 800a74a:	b90b      	cbnz	r3, 800a750 <__swsetup_r+0x14>
 800a74c:	f7fe f8f6 	bl	800893c <__sinit>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a756:	0718      	lsls	r0, r3, #28
 800a758:	d422      	bmi.n	800a7a0 <__swsetup_r+0x64>
 800a75a:	06d9      	lsls	r1, r3, #27
 800a75c:	d407      	bmi.n	800a76e <__swsetup_r+0x32>
 800a75e:	2309      	movs	r3, #9
 800a760:	602b      	str	r3, [r5, #0]
 800a762:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a766:	81a3      	strh	r3, [r4, #12]
 800a768:	f04f 30ff 	mov.w	r0, #4294967295
 800a76c:	e034      	b.n	800a7d8 <__swsetup_r+0x9c>
 800a76e:	0758      	lsls	r0, r3, #29
 800a770:	d512      	bpl.n	800a798 <__swsetup_r+0x5c>
 800a772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a774:	b141      	cbz	r1, 800a788 <__swsetup_r+0x4c>
 800a776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a77a:	4299      	cmp	r1, r3
 800a77c:	d002      	beq.n	800a784 <__swsetup_r+0x48>
 800a77e:	4628      	mov	r0, r5
 800a780:	f7ff f8b4 	bl	80098ec <_free_r>
 800a784:	2300      	movs	r3, #0
 800a786:	6363      	str	r3, [r4, #52]	; 0x34
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	2300      	movs	r3, #0
 800a792:	6063      	str	r3, [r4, #4]
 800a794:	6923      	ldr	r3, [r4, #16]
 800a796:	6023      	str	r3, [r4, #0]
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	f043 0308 	orr.w	r3, r3, #8
 800a79e:	81a3      	strh	r3, [r4, #12]
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	b94b      	cbnz	r3, 800a7b8 <__swsetup_r+0x7c>
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7ae:	d003      	beq.n	800a7b8 <__swsetup_r+0x7c>
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f000 f884 	bl	800a8c0 <__smakebuf_r>
 800a7b8:	89a0      	ldrh	r0, [r4, #12]
 800a7ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7be:	f010 0301 	ands.w	r3, r0, #1
 800a7c2:	d00a      	beq.n	800a7da <__swsetup_r+0x9e>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	60a3      	str	r3, [r4, #8]
 800a7c8:	6963      	ldr	r3, [r4, #20]
 800a7ca:	425b      	negs	r3, r3
 800a7cc:	61a3      	str	r3, [r4, #24]
 800a7ce:	6923      	ldr	r3, [r4, #16]
 800a7d0:	b943      	cbnz	r3, 800a7e4 <__swsetup_r+0xa8>
 800a7d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7d6:	d1c4      	bne.n	800a762 <__swsetup_r+0x26>
 800a7d8:	bd38      	pop	{r3, r4, r5, pc}
 800a7da:	0781      	lsls	r1, r0, #30
 800a7dc:	bf58      	it	pl
 800a7de:	6963      	ldrpl	r3, [r4, #20]
 800a7e0:	60a3      	str	r3, [r4, #8]
 800a7e2:	e7f4      	b.n	800a7ce <__swsetup_r+0x92>
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e7f7      	b.n	800a7d8 <__swsetup_r+0x9c>
 800a7e8:	20000074 	.word	0x20000074

0800a7ec <_raise_r>:
 800a7ec:	291f      	cmp	r1, #31
 800a7ee:	b538      	push	{r3, r4, r5, lr}
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	d904      	bls.n	800a800 <_raise_r+0x14>
 800a7f6:	2316      	movs	r3, #22
 800a7f8:	6003      	str	r3, [r0, #0]
 800a7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a802:	b112      	cbz	r2, 800a80a <_raise_r+0x1e>
 800a804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a808:	b94b      	cbnz	r3, 800a81e <_raise_r+0x32>
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 f830 	bl	800a870 <_getpid_r>
 800a810:	462a      	mov	r2, r5
 800a812:	4601      	mov	r1, r0
 800a814:	4620      	mov	r0, r4
 800a816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a81a:	f000 b817 	b.w	800a84c <_kill_r>
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d00a      	beq.n	800a838 <_raise_r+0x4c>
 800a822:	1c59      	adds	r1, r3, #1
 800a824:	d103      	bne.n	800a82e <_raise_r+0x42>
 800a826:	2316      	movs	r3, #22
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	2001      	movs	r0, #1
 800a82c:	e7e7      	b.n	800a7fe <_raise_r+0x12>
 800a82e:	2400      	movs	r4, #0
 800a830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a834:	4628      	mov	r0, r5
 800a836:	4798      	blx	r3
 800a838:	2000      	movs	r0, #0
 800a83a:	e7e0      	b.n	800a7fe <_raise_r+0x12>

0800a83c <raise>:
 800a83c:	4b02      	ldr	r3, [pc, #8]	; (800a848 <raise+0xc>)
 800a83e:	4601      	mov	r1, r0
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f7ff bfd3 	b.w	800a7ec <_raise_r>
 800a846:	bf00      	nop
 800a848:	20000074 	.word	0x20000074

0800a84c <_kill_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d07      	ldr	r5, [pc, #28]	; (800a86c <_kill_r+0x20>)
 800a850:	2300      	movs	r3, #0
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	602b      	str	r3, [r5, #0]
 800a85a:	f7f7 febd 	bl	80025d8 <_kill>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	d102      	bne.n	800a868 <_kill_r+0x1c>
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	b103      	cbz	r3, 800a868 <_kill_r+0x1c>
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	bd38      	pop	{r3, r4, r5, pc}
 800a86a:	bf00      	nop
 800a86c:	200045b8 	.word	0x200045b8

0800a870 <_getpid_r>:
 800a870:	f7f7 beaa 	b.w	80025c8 <_getpid>

0800a874 <__swhatbuf_r>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	460c      	mov	r4, r1
 800a878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87c:	2900      	cmp	r1, #0
 800a87e:	b096      	sub	sp, #88	; 0x58
 800a880:	4615      	mov	r5, r2
 800a882:	461e      	mov	r6, r3
 800a884:	da0d      	bge.n	800a8a2 <__swhatbuf_r+0x2e>
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a88c:	f04f 0100 	mov.w	r1, #0
 800a890:	bf0c      	ite	eq
 800a892:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a896:	2340      	movne	r3, #64	; 0x40
 800a898:	2000      	movs	r0, #0
 800a89a:	6031      	str	r1, [r6, #0]
 800a89c:	602b      	str	r3, [r5, #0]
 800a89e:	b016      	add	sp, #88	; 0x58
 800a8a0:	bd70      	pop	{r4, r5, r6, pc}
 800a8a2:	466a      	mov	r2, sp
 800a8a4:	f000 f848 	bl	800a938 <_fstat_r>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	dbec      	blt.n	800a886 <__swhatbuf_r+0x12>
 800a8ac:	9901      	ldr	r1, [sp, #4]
 800a8ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a8b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a8b6:	4259      	negs	r1, r3
 800a8b8:	4159      	adcs	r1, r3
 800a8ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8be:	e7eb      	b.n	800a898 <__swhatbuf_r+0x24>

0800a8c0 <__smakebuf_r>:
 800a8c0:	898b      	ldrh	r3, [r1, #12]
 800a8c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8c4:	079d      	lsls	r5, r3, #30
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	d507      	bpl.n	800a8dc <__smakebuf_r+0x1c>
 800a8cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	6123      	str	r3, [r4, #16]
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	6163      	str	r3, [r4, #20]
 800a8d8:	b002      	add	sp, #8
 800a8da:	bd70      	pop	{r4, r5, r6, pc}
 800a8dc:	ab01      	add	r3, sp, #4
 800a8de:	466a      	mov	r2, sp
 800a8e0:	f7ff ffc8 	bl	800a874 <__swhatbuf_r>
 800a8e4:	9900      	ldr	r1, [sp, #0]
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f7ff f873 	bl	80099d4 <_malloc_r>
 800a8ee:	b948      	cbnz	r0, 800a904 <__smakebuf_r+0x44>
 800a8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8f4:	059a      	lsls	r2, r3, #22
 800a8f6:	d4ef      	bmi.n	800a8d8 <__smakebuf_r+0x18>
 800a8f8:	f023 0303 	bic.w	r3, r3, #3
 800a8fc:	f043 0302 	orr.w	r3, r3, #2
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	e7e3      	b.n	800a8cc <__smakebuf_r+0xc>
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	6020      	str	r0, [r4, #0]
 800a908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a90c:	81a3      	strh	r3, [r4, #12]
 800a90e:	9b00      	ldr	r3, [sp, #0]
 800a910:	6163      	str	r3, [r4, #20]
 800a912:	9b01      	ldr	r3, [sp, #4]
 800a914:	6120      	str	r0, [r4, #16]
 800a916:	b15b      	cbz	r3, 800a930 <__smakebuf_r+0x70>
 800a918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a91c:	4630      	mov	r0, r6
 800a91e:	f000 f81d 	bl	800a95c <_isatty_r>
 800a922:	b128      	cbz	r0, 800a930 <__smakebuf_r+0x70>
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	f023 0303 	bic.w	r3, r3, #3
 800a92a:	f043 0301 	orr.w	r3, r3, #1
 800a92e:	81a3      	strh	r3, [r4, #12]
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	431d      	orrs	r5, r3
 800a934:	81a5      	strh	r5, [r4, #12]
 800a936:	e7cf      	b.n	800a8d8 <__smakebuf_r+0x18>

0800a938 <_fstat_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4d07      	ldr	r5, [pc, #28]	; (800a958 <_fstat_r+0x20>)
 800a93c:	2300      	movs	r3, #0
 800a93e:	4604      	mov	r4, r0
 800a940:	4608      	mov	r0, r1
 800a942:	4611      	mov	r1, r2
 800a944:	602b      	str	r3, [r5, #0]
 800a946:	f7f7 fea6 	bl	8002696 <_fstat>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	d102      	bne.n	800a954 <_fstat_r+0x1c>
 800a94e:	682b      	ldr	r3, [r5, #0]
 800a950:	b103      	cbz	r3, 800a954 <_fstat_r+0x1c>
 800a952:	6023      	str	r3, [r4, #0]
 800a954:	bd38      	pop	{r3, r4, r5, pc}
 800a956:	bf00      	nop
 800a958:	200045b8 	.word	0x200045b8

0800a95c <_isatty_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4d06      	ldr	r5, [pc, #24]	; (800a978 <_isatty_r+0x1c>)
 800a960:	2300      	movs	r3, #0
 800a962:	4604      	mov	r4, r0
 800a964:	4608      	mov	r0, r1
 800a966:	602b      	str	r3, [r5, #0]
 800a968:	f7f7 fea5 	bl	80026b6 <_isatty>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_isatty_r+0x1a>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_isatty_r+0x1a>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	200045b8 	.word	0x200045b8

0800a97c <_init>:
 800a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97e:	bf00      	nop
 800a980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a982:	bc08      	pop	{r3}
 800a984:	469e      	mov	lr, r3
 800a986:	4770      	bx	lr

0800a988 <_fini>:
 800a988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98a:	bf00      	nop
 800a98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98e:	bc08      	pop	{r3}
 800a990:	469e      	mov	lr, r3
 800a992:	4770      	bx	lr
